
WaageController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c5c  08011868  08011868  00021868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080124c4  080124c4  000302b4  2**0
                  CONTENTS
  4 .ARM          00000000  080124c4  080124c4  000302b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080124c4  080124c4  000302b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080124c4  080124c4  000224c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080124c8  080124c8  000224c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b4  20000000  080124cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302b4  2**0
                  CONTENTS
 10 .bss          0000147c  200002b4  200002b4  000302b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001730  20001730  000302b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000232a3  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f50  00000000  00000000  00053587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b78  00000000  00000000  000584d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001930  00000000  00000000  0005a050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028042  00000000  00000000  0005b980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027899  00000000  00000000  000839c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd99b  00000000  00000000  000ab25b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00188bf6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000083bc  00000000  00000000  00188c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002b4 	.word	0x200002b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011850 	.word	0x08011850

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002b8 	.word	0x200002b8
 80001dc:	08011850 	.word	0x08011850

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <pid_init>:
		uint32_t 	referencePoint;


};

PID_Controller * pid_init(void){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

	    PID_Controller* PID = malloc (sizeof(PID_Controller));
 8000c5e:	2024      	movs	r0, #36	; 0x24
 8000c60:	f00d ff02 	bl	800ea68 <malloc>
 8000c64:	4603      	mov	r3, r0
 8000c66:	607b      	str	r3, [r7, #4]
			if(PID == NULL) return NULL;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d101      	bne.n	8000c72 <pid_init+0x1a>
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e000      	b.n	8000c74 <pid_init+0x1c>
	return PID;
 8000c72:	687b      	ldr	r3, [r7, #4]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <PID_Set>:

void PID_Set(PID_Controller* PID, float kp,float ki,float kd,uint32_t referencePoint,float sampleTime ){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6178      	str	r0, [r7, #20]
 8000c84:	ed87 0a04 	vstr	s0, [r7, #16]
 8000c88:	edc7 0a03 	vstr	s1, [r7, #12]
 8000c8c:	ed87 1a02 	vstr	s2, [r7, #8]
 8000c90:	6079      	str	r1, [r7, #4]
 8000c92:	edc7 1a00 	vstr	s3, [r7]

		PID->timeSpace = sampleTime / 1000.0f;
 8000c96:	ed97 7a00 	vldr	s14, [r7]
 8000c9a:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000cf4 <PID_Set+0x78>
 8000c9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	edc3 7a00 	vstr	s15, [r3]
		PID->eOld = 0.0f;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	f04f 0200 	mov.w	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
		PID->referencePoint = referencePoint;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	621a      	str	r2, [r3, #32]
		PID->eSum +=  (__e(PID) / PID->timeSpace);
 8000cb6:	6978      	ldr	r0, [r7, #20]
 8000cb8:	f000 f81e 	bl	8000cf8 <__e>
 8000cbc:	eef0 6a40 	vmov.f32	s13, s0
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	edd3 7a00 	vldr	s15, [r3]
 8000cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	edd3 7a05 	vldr	s15, [r3, #20]
 8000cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	edc3 7a05 	vstr	s15, [r3, #20]
		PID->KD = kd;
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	68ba      	ldr	r2, [r7, #8]
 8000cde:	60da      	str	r2, [r3, #12]
		PID->KP =kp;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	605a      	str	r2, [r3, #4]
		PID->KI = ki;
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	68fa      	ldr	r2, [r7, #12]
 8000cea:	609a      	str	r2, [r3, #8]
}
 8000cec:	bf00      	nop
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	447a0000 	.word	0x447a0000

08000cf8 <__e>:


static float __e(PID_Controller* pid) {
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
    return (float)((pid->referencePoint) - (pid->in));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6a1a      	ldr	r2, [r3, #32]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	ee07 3a90 	vmov	s15, r3
 8000d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8000d12:	eeb0 0a67 	vmov.f32	s0, s15
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <__Proportional>:


uint32_t __Proportional(PID_Controller* pid) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	ed2d 8b02 	vpush	{d8}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    return ((pid->KP) * __e(pid));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	ed93 8a01 	vldr	s16, [r3, #4]
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ffe0 	bl	8000cf8 <__e>
 8000d38:	eef0 7a40 	vmov.f32	s15, s0
 8000d3c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d44:	ee17 3a90 	vmov	r3, s15
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	ecbd 8b02 	vpop	{d8}
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <__Integral>:

float __Integral (PID_Controller* pid) {
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
    return pid->KI * (pid->eSum);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d68:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <__Derivative>:

float __Derivative(PID_Controller* pid) {
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	ed2d 8b02 	vpush	{d8}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
    return pid->KD * (__e(pid) - (pid->eOld)) / pid->timeSpace;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	ed93 8a03 	vldr	s16, [r3, #12]
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ffb3 	bl	8000cf8 <__e>
 8000d92:	eeb0 7a40 	vmov.f32	s14, s0
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000da0:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	edd3 7a00 	vldr	s15, [r3]
 8000daa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000dae:	eef0 7a66 	vmov.f32	s15, s13
}
 8000db2:	eeb0 0a67 	vmov.f32	s0, s15
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	ecbd 8b02 	vpop	{d8}
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <pid_Compute>:

PID_State pid_Compute(PID_Controller* pid) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	ed2d 8b02 	vpush	{d8}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  if(pid != NULL){
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d058      	beq.n	8000e84 <pid_Compute+0xc4>

      int32_t res = (int32_t)(__Proportional(pid) + __Integral(pid) + __Derivative(pid));
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffa4 	bl	8000d20 <__Proportional>
 8000dd8:	ee07 0a90 	vmov	s15, r0
 8000ddc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ffb7 	bl	8000d54 <__Integral>
 8000de6:	eef0 7a40 	vmov.f32	s15, s0
 8000dea:	ee38 8a27 	vadd.f32	s16, s16, s15
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ffc3 	bl	8000d7a <__Derivative>
 8000df4:	eef0 7a40 	vmov.f32	s15, s0
 8000df8:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000dfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e00:	ee17 3a90 	vmov	r3, s15
 8000e04:	60fb      	str	r3, [r7, #12]
      if (res >= PWM_MAX_DUTYCYCLE) {
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2b8a      	cmp	r3, #138	; 0x8a
 8000e0a:	dd15      	ble.n	8000e38 <pid_Compute+0x78>
          (pid->out) = PWM_MAX_DUTYCYCLE;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	228b      	movs	r2, #139	; 0x8b
 8000e10:	61da      	str	r2, [r3, #28]
          pid->eSum -= __e(pid) / (pid->timeSpace);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ff70 	bl	8000cf8 <__e>
 8000e18:	eef0 6a40 	vmov.f32	s13, s0
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	ed93 7a00 	vldr	s14, [r3]
 8000e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	ed93 7a05 	vldr	s14, [r3, #20]
 8000e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	edc3 7a05 	vstr	s15, [r3, #20]
 8000e36:	e025      	b.n	8000e84 <pid_Compute+0xc4>
      }
      else if (res <= PWM_MIN_DUTYCYCLE) {
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	dc15      	bgt.n	8000e6a <pid_Compute+0xaa>
          (pid->out) = PWM_MIN_DUTYCYCLE;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	61da      	str	r2, [r3, #28]
          pid->eSum -= __e(pid) / (pid->timeSpace);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff57 	bl	8000cf8 <__e>
 8000e4a:	eef0 6a40 	vmov.f32	s13, s0
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	ed93 7a00 	vldr	s14, [r3]
 8000e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	ed93 7a05 	vldr	s14, [r3, #20]
 8000e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	edc3 7a05 	vstr	s15, [r3, #20]
 8000e68:	e00c      	b.n	8000e84 <pid_Compute+0xc4>
      }
      else {
          (pid->out) = res;
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	61da      	str	r2, [r3, #28]
          pid->eOld = __e(pid);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff41 	bl	8000cf8 <__e>
 8000e76:	eef0 7a40 	vmov.f32	s15, s0
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	edc3 7a04 	vstr	s15, [r3, #16]

          return PID_SUCCESS;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e000      	b.n	8000e86 <pid_Compute+0xc6>
      }
  }

return PID_FAILD;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	ecbd 8b02 	vpop	{d8}
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <mallocFree>:


void mallocFree(PID_Controller * pid){
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]

  free(pid);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f00d fdec 	bl	800ea78 <free>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <pidOut>:

int32_t  pidOut(PID_Controller *pid){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

      if(pid!=NULL){
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <pidOut+0x14>
	  return (pid->out);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	e001      	b.n	8000ec0 <pidOut+0x18>
  }
      return -1;
 8000ebc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <pidIn>:

void pidIn(PID_Controller* pid, uint32_t in){
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]

  if(pid!=NULL)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <pidIn+0x16>
    pid->in = in;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	619a      	str	r2, [r3, #24]
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <ADC_Map>:

uint32_t ADC_Map(uint32_t x)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if(x >= 0)
    return (x - ADC_MIN_ANALOG_IN) * (ADC_MAX_ANALOG_MAPED_OUT - ADC_MIN_ANALOG_MAPED_OUT) / (ADC_MAX_ANALOG_IN - ADC_MIN_ANALOG_IN) + ADC_MIN_ANALOG_MAPED_OUT;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	029a      	lsls	r2, r3, #10
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <ADC_Map+0x28>)
 8000efe:	fba3 1302 	umull	r1, r3, r3, r2
 8000f02:	1ad2      	subs	r2, r2, r3
 8000f04:	0852      	lsrs	r2, r2, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	0adb      	lsrs	r3, r3, #11
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	00100101 	.word	0x00100101
 8000f1c:	00000000 	.word	0x00000000

08000f20 <weightMeasur>:



float weightMeasur(uint32_t x){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

  float voltageADC = (x*3.3)/4095;
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff faf3 	bl	8000514 <__aeabi_ui2d>
 8000f2e:	a32c      	add	r3, pc, #176	; (adr r3, 8000fe0 <weightMeasur+0xc0>)
 8000f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f34:	f7ff fb68 	bl	8000608 <__aeabi_dmul>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	a329      	add	r3, pc, #164	; (adr r3, 8000fe8 <weightMeasur+0xc8>)
 8000f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f46:	f7ff fc89 	bl	800085c <__aeabi_ddiv>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	f7ff fe31 	bl	8000bb8 <__aeabi_d2f>
 8000f56:	4603      	mov	r3, r0
 8000f58:	617b      	str	r3, [r7, #20]
  float shunt_Resistor = 0.05;
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <weightMeasur+0xb8>)
 8000f5c:	613b      	str	r3, [r7, #16]
  float current = voltageADC/shunt_Resistor;
 8000f5e:	edd7 6a05 	vldr	s13, [r7, #20]
 8000f62:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f6a:	edc7 7a03 	vstr	s15, [r7, #12]
  float weight =((1.8*current)/9.81)*1000.0f;
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f7ff faf2 	bl	8000558 <__aeabi_f2d>
 8000f74:	a314      	add	r3, pc, #80	; (adr r3, 8000fc8 <weightMeasur+0xa8>)
 8000f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7a:	f7ff fb45 	bl	8000608 <__aeabi_dmul>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4610      	mov	r0, r2
 8000f84:	4619      	mov	r1, r3
 8000f86:	a312      	add	r3, pc, #72	; (adr r3, 8000fd0 <weightMeasur+0xb0>)
 8000f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8c:	f7ff fc66 	bl	800085c <__aeabi_ddiv>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <weightMeasur+0xbc>)
 8000f9e:	f7ff fb33 	bl	8000608 <__aeabi_dmul>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f7ff fe05 	bl	8000bb8 <__aeabi_d2f>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	60bb      	str	r3, [r7, #8]


  return weight;
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	ee07 3a90 	vmov	s15, r3
  }
 8000fb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	f3af 8000 	nop.w
 8000fc8:	cccccccd 	.word	0xcccccccd
 8000fcc:	3ffccccc 	.word	0x3ffccccc
 8000fd0:	51eb851f 	.word	0x51eb851f
 8000fd4:	40239eb8 	.word	0x40239eb8
 8000fd8:	3d4ccccd 	.word	0x3d4ccccd
 8000fdc:	408f4000 	.word	0x408f4000
 8000fe0:	66666666 	.word	0x66666666
 8000fe4:	400a6666 	.word	0x400a6666
 8000fe8:	00000000 	.word	0x00000000
 8000fec:	40affe00 	.word	0x40affe00

08000ff0 <weightPrint>:

void  weightPrint(uint32_t adc){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b09e      	sub	sp, #120	; 0x78
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	6078      	str	r0, [r7, #4]

  SSD1306_GotoXY (0,0);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 fda6 	bl	8001b4c <SSD1306_GotoXY>
  char weight[100];
  if(adc == 0){
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10f      	bne.n	8001026 <weightPrint+0x36>
      sprintf(weight, "No weight! :( ");
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4916      	ldr	r1, [pc, #88]	; (8001064 <weightPrint+0x74>)
 800100c:	4618      	mov	r0, r3
 800100e:	f00e fa9d 	bl	800f54c <siprintf>
      SSD1306_Puts(weight, &Font_7x10, SSD1306_COLOR_WHITE);
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	2201      	movs	r2, #1
 8001018:	4913      	ldr	r1, [pc, #76]	; (8001068 <weightPrint+0x78>)
 800101a:	4618      	mov	r0, r3
 800101c:	f000 fe2c 	bl	8001c78 <SSD1306_Puts>
      SSD1306_UpdateScreen() ;
 8001020:	f000 fcee 	bl	8001a00 <SSD1306_UpdateScreen>
        sprintf(weight, "s%.2f%s%% It weights ", weightMeasur(adc), " g :)");
        SSD1306_Puts(weight, &Font_7x10, SSD1306_COLOR_WHITE);
        SSD1306_UpdateScreen() ;
  }

}
 8001024:	e019      	b.n	800105a <weightPrint+0x6a>
        sprintf(weight, "s%.2f%s%% It weights ", weightMeasur(adc), " g :)");
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ff7a 	bl	8000f20 <weightMeasur>
 800102c:	ee10 3a10 	vmov	r3, s0
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fa91 	bl	8000558 <__aeabi_f2d>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	f107 000c 	add.w	r0, r7, #12
 800103e:	490b      	ldr	r1, [pc, #44]	; (800106c <weightPrint+0x7c>)
 8001040:	9100      	str	r1, [sp, #0]
 8001042:	490b      	ldr	r1, [pc, #44]	; (8001070 <weightPrint+0x80>)
 8001044:	f00e fa82 	bl	800f54c <siprintf>
        SSD1306_Puts(weight, &Font_7x10, SSD1306_COLOR_WHITE);
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2201      	movs	r2, #1
 800104e:	4906      	ldr	r1, [pc, #24]	; (8001068 <weightPrint+0x78>)
 8001050:	4618      	mov	r0, r3
 8001052:	f000 fe11 	bl	8001c78 <SSD1306_Puts>
        SSD1306_UpdateScreen() ;
 8001056:	f000 fcd3 	bl	8001a00 <SSD1306_UpdateScreen>
}
 800105a:	bf00      	nop
 800105c:	3770      	adds	r7, #112	; 0x70
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	08011868 	.word	0x08011868
 8001068:	20000000 	.word	0x20000000
 800106c:	08011890 	.word	0x08011890
 8001070:	08011878 	.word	0x08011878

08001074 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
 8001094:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001096:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <MX_ADC1_Init+0xdc>)
 8001098:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800109c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800109e:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <MX_ADC1_Init+0xdc>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010a4:	4b2a      	ldr	r3, [pc, #168]	; (8001150 <MX_ADC1_Init+0xdc>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010aa:	4b29      	ldr	r3, [pc, #164]	; (8001150 <MX_ADC1_Init+0xdc>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010b0:	4b27      	ldr	r3, [pc, #156]	; (8001150 <MX_ADC1_Init+0xdc>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b6:	4b26      	ldr	r3, [pc, #152]	; (8001150 <MX_ADC1_Init+0xdc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010be:	4b24      	ldr	r3, [pc, #144]	; (8001150 <MX_ADC1_Init+0xdc>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <MX_ADC1_Init+0xdc>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <MX_ADC1_Init+0xdc>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010d0:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <MX_ADC1_Init+0xdc>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d6:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <MX_ADC1_Init+0xdc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <MX_ADC1_Init+0xdc>)
 80010e0:	2204      	movs	r2, #4
 80010e2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_ADC1_Init+0xdc>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <MX_ADC1_Init+0xdc>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f0:	4817      	ldr	r0, [pc, #92]	; (8001150 <MX_ADC1_Init+0xdc>)
 80010f2:	f001 fa4d 	bl	8002590 <HAL_ADC_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80010fc:	f000 fb5e 	bl	80017bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	4811      	ldr	r0, [pc, #68]	; (8001150 <MX_ADC1_Init+0xdc>)
 800110c:	f002 fbbc 	bl	8003888 <HAL_ADCEx_MultiModeConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001116:	f000 fb51 	bl	80017bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800111a:	2301      	movs	r3, #1
 800111c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800111e:	2301      	movs	r3, #1
 8001120:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	4619      	mov	r1, r3
 8001136:	4806      	ldr	r0, [pc, #24]	; (8001150 <MX_ADC1_Init+0xdc>)
 8001138:	f002 f8b6 	bl	80032a8 <HAL_ADC_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001142:	f000 fb3b 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	3728      	adds	r7, #40	; 0x28
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200002d0 	.word	0x200002d0

08001154 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
 8001174:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001176:	4b2d      	ldr	r3, [pc, #180]	; (800122c <MX_ADC3_Init+0xd8>)
 8001178:	4a2d      	ldr	r2, [pc, #180]	; (8001230 <MX_ADC3_Init+0xdc>)
 800117a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800117c:	4b2b      	ldr	r3, [pc, #172]	; (800122c <MX_ADC3_Init+0xd8>)
 800117e:	2200      	movs	r2, #0
 8001180:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001182:	4b2a      	ldr	r3, [pc, #168]	; (800122c <MX_ADC3_Init+0xd8>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001188:	4b28      	ldr	r3, [pc, #160]	; (800122c <MX_ADC3_Init+0xd8>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800118e:	4b27      	ldr	r3, [pc, #156]	; (800122c <MX_ADC3_Init+0xd8>)
 8001190:	2201      	movs	r2, #1
 8001192:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <MX_ADC3_Init+0xd8>)
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800119c:	4b23      	ldr	r3, [pc, #140]	; (800122c <MX_ADC3_Init+0xd8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a2:	4b22      	ldr	r3, [pc, #136]	; (800122c <MX_ADC3_Init+0xd8>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a8:	4b20      	ldr	r3, [pc, #128]	; (800122c <MX_ADC3_Init+0xd8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80011ae:	4b1f      	ldr	r3, [pc, #124]	; (800122c <MX_ADC3_Init+0xd8>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <MX_ADC3_Init+0xd8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_ADC3_Init+0xd8>)
 80011be:	2204      	movs	r2, #4
 80011c0:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_ADC3_Init+0xd8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <MX_ADC3_Init+0xd8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011ce:	4817      	ldr	r0, [pc, #92]	; (800122c <MX_ADC3_Init+0xd8>)
 80011d0:	f001 f9de 	bl	8002590 <HAL_ADC_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 80011da:	f000 faef 	bl	80017bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	4810      	ldr	r0, [pc, #64]	; (800122c <MX_ADC3_Init+0xd8>)
 80011ea:	f002 fb4d 	bl	8003888 <HAL_ADCEx_MultiModeConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80011f4:	f000 fae2 	bl	80017bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011fc:	2301      	movs	r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_ADC3_Init+0xd8>)
 8001216:	f002 f847 	bl	80032a8 <HAL_ADC_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8001220:	f000 facc 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	3728      	adds	r7, #40	; 0x28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2000033c 	.word	0x2000033c
 8001230:	50000400 	.word	0x50000400

08001234 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08c      	sub	sp, #48	; 0x30
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001254:	d12d      	bne.n	80012b2 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001256:	4b31      	ldr	r3, [pc, #196]	; (800131c <HAL_ADC_MspInit+0xe8>)
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	4a30      	ldr	r2, [pc, #192]	; (800131c <HAL_ADC_MspInit+0xe8>)
 800125c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001260:	6153      	str	r3, [r2, #20]
 8001262:	4b2e      	ldr	r3, [pc, #184]	; (800131c <HAL_ADC_MspInit+0xe8>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126a:	61bb      	str	r3, [r7, #24]
 800126c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	4b2b      	ldr	r3, [pc, #172]	; (800131c <HAL_ADC_MspInit+0xe8>)
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	4a2a      	ldr	r2, [pc, #168]	; (800131c <HAL_ADC_MspInit+0xe8>)
 8001274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001278:	6153      	str	r3, [r2, #20]
 800127a:	4b28      	ldr	r3, [pc, #160]	; (800131c <HAL_ADC_MspInit+0xe8>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001286:	2301      	movs	r3, #1
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128a:	2303      	movs	r3, #3
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	4619      	mov	r1, r3
 8001298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129c:	f002 fdc2 	bl	8003e24 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	2012      	movs	r0, #18
 80012a6:	f002 fd86 	bl	8003db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012aa:	2012      	movs	r0, #18
 80012ac:	f002 fd9f 	bl	8003dee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80012b0:	e030      	b.n	8001314 <HAL_ADC_MspInit+0xe0>
  else if(adcHandle->Instance==ADC3)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a1a      	ldr	r2, [pc, #104]	; (8001320 <HAL_ADC_MspInit+0xec>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d12b      	bne.n	8001314 <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC34_CLK_ENABLE();
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <HAL_ADC_MspInit+0xe8>)
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	4a16      	ldr	r2, [pc, #88]	; (800131c <HAL_ADC_MspInit+0xe8>)
 80012c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012c6:	6153      	str	r3, [r2, #20]
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <HAL_ADC_MspInit+0xe8>)
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <HAL_ADC_MspInit+0xe8>)
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	4a10      	ldr	r2, [pc, #64]	; (800131c <HAL_ADC_MspInit+0xe8>)
 80012da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012de:	6153      	str	r3, [r2, #20]
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <HAL_ADC_MspInit+0xe8>)
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012ec:	2302      	movs	r3, #2
 80012ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f0:	2303      	movs	r3, #3
 80012f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	4809      	ldr	r0, [pc, #36]	; (8001324 <HAL_ADC_MspInit+0xf0>)
 8001300:	f002 fd90 	bl	8003e24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001304:	2200      	movs	r2, #0
 8001306:	2100      	movs	r1, #0
 8001308:	202f      	movs	r0, #47	; 0x2f
 800130a:	f002 fd54 	bl	8003db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800130e:	202f      	movs	r0, #47	; 0x2f
 8001310:	f002 fd6d 	bl	8003dee <HAL_NVIC_EnableIRQ>
}
 8001314:	bf00      	nop
 8001316:	3730      	adds	r7, #48	; 0x30
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40021000 	.word	0x40021000
 8001320:	50000400 	.word	0x50000400
 8001324:	48000400 	.word	0x48000400

08001328 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133e:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <MX_GPIO_Init+0xc4>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	4a2a      	ldr	r2, [pc, #168]	; (80013ec <MX_GPIO_Init+0xc4>)
 8001344:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001348:	6153      	str	r3, [r2, #20]
 800134a:	4b28      	ldr	r3, [pc, #160]	; (80013ec <MX_GPIO_Init+0xc4>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001356:	4b25      	ldr	r3, [pc, #148]	; (80013ec <MX_GPIO_Init+0xc4>)
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	4a24      	ldr	r2, [pc, #144]	; (80013ec <MX_GPIO_Init+0xc4>)
 800135c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001360:	6153      	str	r3, [r2, #20]
 8001362:	4b22      	ldr	r3, [pc, #136]	; (80013ec <MX_GPIO_Init+0xc4>)
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_GPIO_Init+0xc4>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	4a1e      	ldr	r2, [pc, #120]	; (80013ec <MX_GPIO_Init+0xc4>)
 8001374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001378:	6153      	str	r3, [r2, #20]
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_GPIO_Init+0xc4>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <MX_GPIO_Init+0xc4>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	4a18      	ldr	r2, [pc, #96]	; (80013ec <MX_GPIO_Init+0xc4>)
 800138c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001390:	6153      	str	r3, [r2, #20]
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_GPIO_Init+0xc4>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	2120      	movs	r1, #32
 80013a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a6:	f002 fec7 	bl	8004138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	480b      	ldr	r0, [pc, #44]	; (80013f0 <MX_GPIO_Init+0xc8>)
 80013c2:	f002 fd2f 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013c6:	2320      	movs	r3, #32
 80013c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e0:	f002 fd20 	bl	8003e24 <HAL_GPIO_Init>

}
 80013e4:	bf00      	nop
 80013e6:	3728      	adds	r7, #40	; 0x28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000
 80013f0:	48000800 	.word	0x48000800

080013f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <MX_I2C1_Init+0x74>)
 80013fa:	4a1c      	ldr	r2, [pc, #112]	; (800146c <MX_I2C1_Init+0x78>)
 80013fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300208;
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <MX_I2C1_Init+0x74>)
 8001400:	4a1b      	ldr	r2, [pc, #108]	; (8001470 <MX_I2C1_Init+0x7c>)
 8001402:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <MX_I2C1_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <MX_I2C1_Init+0x74>)
 800140c:	2201      	movs	r2, #1
 800140e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <MX_I2C1_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_I2C1_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_I2C1_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_I2C1_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_I2C1_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800142e:	480e      	ldr	r0, [pc, #56]	; (8001468 <MX_I2C1_Init+0x74>)
 8001430:	f002 feb4 	bl	800419c <HAL_I2C_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800143a:	f000 f9bf 	bl	80017bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800143e:	2100      	movs	r1, #0
 8001440:	4809      	ldr	r0, [pc, #36]	; (8001468 <MX_I2C1_Init+0x74>)
 8001442:	f003 fb61 	bl	8004b08 <HAL_I2CEx_ConfigAnalogFilter>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800144c:	f000 f9b6 	bl	80017bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001450:	2100      	movs	r1, #0
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_I2C1_Init+0x74>)
 8001454:	f003 fba3 	bl	8004b9e <HAL_I2CEx_ConfigDigitalFilter>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800145e:	f000 f9ad 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200003a8 	.word	0x200003a8
 800146c:	40005400 	.word	0x40005400
 8001470:	00300208 	.word	0x00300208

08001474 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a1b      	ldr	r2, [pc, #108]	; (8001500 <HAL_I2C_MspInit+0x8c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d130      	bne.n	80014f8 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_I2C_MspInit+0x90>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	4a1a      	ldr	r2, [pc, #104]	; (8001504 <HAL_I2C_MspInit+0x90>)
 800149c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a0:	6153      	str	r3, [r2, #20]
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_I2C_MspInit+0x90>)
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80014ae:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b4:	2312      	movs	r3, #18
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014c0:	2304      	movs	r3, #4
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	480f      	ldr	r0, [pc, #60]	; (8001508 <HAL_I2C_MspInit+0x94>)
 80014cc:	f002 fcaa 	bl	8003e24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_I2C_MspInit+0x90>)
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <HAL_I2C_MspInit+0x90>)
 80014d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014da:	61d3      	str	r3, [r2, #28]
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_I2C_MspInit+0x90>)
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2100      	movs	r1, #0
 80014ec:	201f      	movs	r0, #31
 80014ee:	f002 fc62 	bl	8003db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014f2:	201f      	movs	r0, #31
 80014f4:	f002 fc7b 	bl	8003dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40005400 	.word	0x40005400
 8001504:	40021000 	.word	0x40021000
 8001508:	48000400 	.word	0x48000400

0800150c <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

	 	if(hadc ->Instance == ADC1){
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800151c:	d10e      	bne.n	800153c <HAL_ADC_ConvCpltCallback+0x30>
	 	    uint32_t _ADC  = HAL_ADC_GetValue(hadc);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f001 fba2 	bl	8002c68 <HAL_ADC_GetValue>
 8001524:	60b8      	str	r0, [r7, #8]
	 		pidIn(pid, ADC_Map(_ADC));
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <HAL_ADC_ConvCpltCallback+0x50>)
 8001528:	681c      	ldr	r4, [r3, #0]
 800152a:	68b8      	ldr	r0, [r7, #8]
 800152c:	f7ff fce0 	bl	8000ef0 <ADC_Map>
 8001530:	4603      	mov	r3, r0
 8001532:	4619      	mov	r1, r3
 8001534:	4620      	mov	r0, r4
 8001536:	f7ff fcc9 	bl	8000ecc <pidIn>
	 	else if(hadc ->Instance == ADC3){
	 		 uint32_t _ADC = HAL_ADC_GetValue(hadc);
	 		 weightPrint(_ADC);
	 	}

	 }
 800153a:	e00b      	b.n	8001554 <HAL_ADC_ConvCpltCallback+0x48>
	 	else if(hadc ->Instance == ADC3){
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a07      	ldr	r2, [pc, #28]	; (8001560 <HAL_ADC_ConvCpltCallback+0x54>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d106      	bne.n	8001554 <HAL_ADC_ConvCpltCallback+0x48>
	 		 uint32_t _ADC = HAL_ADC_GetValue(hadc);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f001 fb8e 	bl	8002c68 <HAL_ADC_GetValue>
 800154c:	60f8      	str	r0, [r7, #12]
	 		 weightPrint(_ADC);
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f7ff fd4e 	bl	8000ff0 <weightPrint>
	 }
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	bd90      	pop	{r4, r7, pc}
 800155c:	200003fc 	.word	0x200003fc
 8001560:	50000400 	.word	0x50000400

08001564 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2){
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001574:	d11b      	bne.n	80015ae <HAL_TIM_PeriodElapsedCallback+0x4a>
	    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001576:	2120      	movs	r1, #32
 8001578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157c:	f002 fdf4 	bl	8004168 <HAL_GPIO_TogglePin>
	    counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001588:	6013      	str	r3, [r2, #0]
	    pid_Compute(pid);
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fc16 	bl	8000dc0 <pid_Compute>
	    TIM4 ->CCR1 = (pidOut(pid));
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fc85 	bl	8000ea8 <pidOut>
 800159e:	4602      	mov	r2, r0
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80015a2:	635a      	str	r2, [r3, #52]	; 0x34
	    mallocFree(pid);
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fc72 	bl	8000e92 <mallocFree>

	}
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2000084c 	.word	0x2000084c
 80015bc:	20000400 	.word	0x20000400
 80015c0:	200003fc 	.word	0x200003fc
 80015c4:	40000800 	.word	0x40000800

080015c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  pid = pid_init();
 80015cc:	f7ff fb44 	bl	8000c58 <pid_init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4a34      	ldr	r2, [pc, #208]	; (80016a4 <main+0xdc>)
 80015d4:	6013      	str	r3, [r2, #0]
  PID_Set(pid, 10, 3,1.2,1200,1);
 80015d6:	4b33      	ldr	r3, [pc, #204]	; (80016a4 <main+0xdc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80015de:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80015e2:	ed9f 1a31 	vldr	s2, [pc, #196]	; 80016a8 <main+0xe0>
 80015e6:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80015ea:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fb44 	bl	8000c7c <PID_Set>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f4:	f000 ff18 	bl	8002428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015f8:	f000 f86e 	bl	80016d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015fc:	f7ff fe94 	bl	8001328 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001600:	f000 fe76 	bl	80022f0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001604:	f000 fd50 	bl	80020a8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001608:	f000 fd9c 	bl	8002144 <MX_TIM4_Init>
  MX_I2C1_Init();
 800160c:	f7ff fef2 	bl	80013f4 <MX_I2C1_Init>
  MX_OPAMP2_Init();
 8001610:	f000 f8da 	bl	80017c8 <MX_OPAMP2_Init>
  MX_ADC1_Init();
 8001614:	f7ff fd2e 	bl	8001074 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001618:	f7ff fd9c 	bl	8001154 <MX_ADC3_Init>
  MX_USB_DEVICE_Init();
 800161c:	f00c fdf4 	bl	800e208 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
//  ssd1306_Init();
  SSD1306_Init();
 8001620:	f000 f92a 	bl	8001878 <SSD1306_Init>
  HAL_Delay(2000);
 8001624:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001628:	f000 ff64 	bl	80024f4 <HAL_Delay>
//  while (HAL_OPAMP_SelfCalibrate(&hopamp2) == HAL_OK);
  HAL_OPAMP_Start(&hopamp2);
 800162c:	481f      	ldr	r0, [pc, #124]	; (80016ac <main+0xe4>)
 800162e:	f003 fba7 	bl	8004d80 <HAL_OPAMP_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001632:	481f      	ldr	r0, [pc, #124]	; (80016b0 <main+0xe8>)
 8001634:	f006 fd7e 	bl	8008134 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 8001638:	481e      	ldr	r0, [pc, #120]	; (80016b4 <main+0xec>)
 800163a:	f001 f9d5 	bl	80029e8 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc3);
 800163e:	481e      	ldr	r0, [pc, #120]	; (80016b8 <main+0xf0>)
 8001640:	f001 f9d2 	bl	80029e8 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001644:	2100      	movs	r1, #0
 8001646:	481d      	ldr	r0, [pc, #116]	; (80016bc <main+0xf4>)
 8001648:	f006 fe48 	bl	80082dc <HAL_TIM_PWM_Start>
  weightPrint(0);
 800164c:	2000      	movs	r0, #0
 800164e:	f7ff fccf 	bl	8000ff0 <weightPrint>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  adcSt = HAL_ADC_GetState(&hadc1);
 8001652:	4818      	ldr	r0, [pc, #96]	; (80016b4 <main+0xec>)
 8001654:	f000 ff90 	bl	8002578 <HAL_ADC_GetState>
 8001658:	4603      	mov	r3, r0
 800165a:	4a19      	ldr	r2, [pc, #100]	; (80016c0 <main+0xf8>)
 800165c:	6013      	str	r3, [r2, #0]
	  timSt = HAL_TIM_Base_GetState(&htim2);
 800165e:	4814      	ldr	r0, [pc, #80]	; (80016b0 <main+0xe8>)
 8001660:	f007 fac1 	bl	8008be6 <HAL_TIM_Base_GetState>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <main+0xfc>)
 800166a:	701a      	strb	r2, [r3, #0]
	  pwmSt = HAL_TIM_PWM_GetState(&htim4);
 800166c:	4813      	ldr	r0, [pc, #76]	; (80016bc <main+0xf4>)
 800166e:	f007 fac8 	bl	8008c02 <HAL_TIM_PWM_GetState>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <main+0x100>)
 8001678:	701a      	strb	r2, [r3, #0]
	  opmState = HAL_OPAMP_GetState(&hopamp2);
 800167a:	480c      	ldr	r0, [pc, #48]	; (80016ac <main+0xe4>)
 800167c:	f003 fbb1 	bl	8004de2 <HAL_OPAMP_GetState>
 8001680:	4603      	mov	r3, r0
 8001682:	461a      	mov	r2, r3
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <main+0x104>)
 8001686:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)counter, sizeof(counter), HAL_MAX_DELAY);
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <main+0x108>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	2204      	movs	r2, #4
 8001694:	480f      	ldr	r0, [pc, #60]	; (80016d4 <main+0x10c>)
 8001696:	f008 f887 	bl	80097a8 <HAL_UART_Transmit>
	  HAL_Delay(50);
 800169a:	2032      	movs	r0, #50	; 0x32
 800169c:	f000 ff2a 	bl	80024f4 <HAL_Delay>
	  adcSt = HAL_ADC_GetState(&hadc1);
 80016a0:	e7d7      	b.n	8001652 <main+0x8a>
 80016a2:	bf00      	nop
 80016a4:	200003fc 	.word	0x200003fc
 80016a8:	3f99999a 	.word	0x3f99999a
 80016ac:	2000040c 	.word	0x2000040c
 80016b0:	2000084c 	.word	0x2000084c
 80016b4:	200002d0 	.word	0x200002d0
 80016b8:	2000033c 	.word	0x2000033c
 80016bc:	20000908 	.word	0x20000908
 80016c0:	20000404 	.word	0x20000404
 80016c4:	20000408 	.word	0x20000408
 80016c8:	20000409 	.word	0x20000409
 80016cc:	2000040a 	.word	0x2000040a
 80016d0:	20000400 	.word	0x20000400
 80016d4:	200009c4 	.word	0x200009c4

080016d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b0a6      	sub	sp, #152	; 0x98
 80016dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016e2:	2228      	movs	r2, #40	; 0x28
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f00d f9ce 	bl	800ea88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2258      	movs	r2, #88	; 0x58
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f00d f9c0 	bl	800ea88 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001708:	2303      	movs	r3, #3
 800170a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800170c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001710:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001712:	2301      	movs	r3, #1
 8001714:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001716:	2310      	movs	r3, #16
 8001718:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800171c:	2302      	movs	r3, #2
 800171e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001726:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800172a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800172e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001738:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800173c:	4618      	mov	r0, r3
 800173e:	f004 ffed 	bl	800671c <HAL_RCC_OscConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001748:	f000 f838 	bl	80017bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174c:	230f      	movs	r3, #15
 800174e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001750:	2302      	movs	r3, #2
 8001752:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800175c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001762:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001766:	2102      	movs	r1, #2
 8001768:	4618      	mov	r0, r3
 800176a:	f006 f82b 	bl	80077c4 <HAL_RCC_ClockConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001774:	f000 f822 	bl	80017bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <SystemClock_Config+0xe0>)
 800177a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_ADC34|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001780:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8001786:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001790:	2300      	movs	r3, #0
 8001792:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001794:	2300      	movs	r3, #0
 8001796:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001798:	2300      	movs	r3, #0
 800179a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	4618      	mov	r0, r3
 80017a0:	f006 fa46 	bl	8007c30 <HAL_RCCEx_PeriphCLKConfig>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80017aa:	f000 f807 	bl	80017bc <Error_Handler>
  }
}
 80017ae:	bf00      	nop
 80017b0:	3798      	adds	r7, #152	; 0x98
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	003201a2 	.word	0x003201a2

080017bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c0:	b672      	cpsid	i
}
 80017c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <Error_Handler+0x8>
	...

080017c8 <MX_OPAMP2_Init>:

OPAMP_HandleTypeDef hopamp2;

/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_OPAMP2_Init+0x44>)
 80017ce:	4a10      	ldr	r2, [pc, #64]	; (8001810 <MX_OPAMP2_Init+0x48>)
 80017d0:	601a      	str	r2, [r3, #0]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_OPAMP2_Init+0x44>)
 80017d4:	2240      	movs	r2, #64	; 0x40
 80017d6:	605a      	str	r2, [r3, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_OPAMP2_Init+0x44>)
 80017da:	220c      	movs	r2, #12
 80017dc:	60da      	str	r2, [r3, #12]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <MX_OPAMP2_Init+0x44>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_OPAMP2_Init+0x44>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16;
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <MX_OPAMP2_Init+0x44>)
 80017ec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80017f0:	621a      	str	r2, [r3, #32]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_OPAMP2_Init+0x44>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80017f8:	4804      	ldr	r0, [pc, #16]	; (800180c <MX_OPAMP2_Init+0x44>)
 80017fa:	f003 fa1d 	bl	8004c38 <HAL_OPAMP_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_OPAMP2_Init+0x40>
  {
    Error_Handler();
 8001804:	f7ff ffda 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	2000040c 	.word	0x2000040c
 8001810:	4001003c 	.word	0x4001003c

08001814 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP2)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0f      	ldr	r2, [pc, #60]	; (8001870 <HAL_OPAMP_MspInit+0x5c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d118      	bne.n	8001868 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP2_MspInit 0 */

  /* USER CODE END OPAMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <HAL_OPAMP_MspInit+0x60>)
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <HAL_OPAMP_MspInit+0x60>)
 800183c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001840:	6153      	str	r3, [r2, #20]
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <HAL_OPAMP_MspInit+0x60>)
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP2 GPIO Configuration
    PA6     ------> OPAMP2_VOUT
    PA7     ------> OPAMP2_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800184e:	23c0      	movs	r3, #192	; 0xc0
 8001850:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001852:	2303      	movs	r3, #3
 8001854:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	4619      	mov	r1, r3
 8001860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001864:	f002 fade 	bl	8003e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
}
 8001868:	bf00      	nop
 800186a:	3720      	adds	r7, #32
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	4001003c 	.word	0x4001003c
 8001874:	40021000 	.word	0x40021000

08001878 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800187e:	f000 fa21 	bl	8001cc4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001882:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001886:	2201      	movs	r2, #1
 8001888:	2178      	movs	r1, #120	; 0x78
 800188a:	485b      	ldr	r0, [pc, #364]	; (80019f8 <SSD1306_Init+0x180>)
 800188c:	f002 fe0a 	bl	80044a4 <HAL_I2C_IsDeviceReady>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001896:	2300      	movs	r3, #0
 8001898:	e0a9      	b.n	80019ee <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800189a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800189e:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018a0:	e002      	b.n	80018a8 <SSD1306_Init+0x30>
		p--;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f9      	bne.n	80018a2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80018ae:	22ae      	movs	r2, #174	; 0xae
 80018b0:	2100      	movs	r1, #0
 80018b2:	2078      	movs	r0, #120	; 0x78
 80018b4:	f000 fa82 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80018b8:	2220      	movs	r2, #32
 80018ba:	2100      	movs	r1, #0
 80018bc:	2078      	movs	r0, #120	; 0x78
 80018be:	f000 fa7d 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80018c2:	2210      	movs	r2, #16
 80018c4:	2100      	movs	r1, #0
 80018c6:	2078      	movs	r0, #120	; 0x78
 80018c8:	f000 fa78 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80018cc:	22b0      	movs	r2, #176	; 0xb0
 80018ce:	2100      	movs	r1, #0
 80018d0:	2078      	movs	r0, #120	; 0x78
 80018d2:	f000 fa73 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80018d6:	22c8      	movs	r2, #200	; 0xc8
 80018d8:	2100      	movs	r1, #0
 80018da:	2078      	movs	r0, #120	; 0x78
 80018dc:	f000 fa6e 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80018e0:	2200      	movs	r2, #0
 80018e2:	2100      	movs	r1, #0
 80018e4:	2078      	movs	r0, #120	; 0x78
 80018e6:	f000 fa69 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80018ea:	2210      	movs	r2, #16
 80018ec:	2100      	movs	r1, #0
 80018ee:	2078      	movs	r0, #120	; 0x78
 80018f0:	f000 fa64 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80018f4:	2240      	movs	r2, #64	; 0x40
 80018f6:	2100      	movs	r1, #0
 80018f8:	2078      	movs	r0, #120	; 0x78
 80018fa:	f000 fa5f 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80018fe:	2281      	movs	r2, #129	; 0x81
 8001900:	2100      	movs	r1, #0
 8001902:	2078      	movs	r0, #120	; 0x78
 8001904:	f000 fa5a 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001908:	22ff      	movs	r2, #255	; 0xff
 800190a:	2100      	movs	r1, #0
 800190c:	2078      	movs	r0, #120	; 0x78
 800190e:	f000 fa55 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001912:	22a1      	movs	r2, #161	; 0xa1
 8001914:	2100      	movs	r1, #0
 8001916:	2078      	movs	r0, #120	; 0x78
 8001918:	f000 fa50 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800191c:	22a6      	movs	r2, #166	; 0xa6
 800191e:	2100      	movs	r1, #0
 8001920:	2078      	movs	r0, #120	; 0x78
 8001922:	f000 fa4b 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001926:	22a8      	movs	r2, #168	; 0xa8
 8001928:	2100      	movs	r1, #0
 800192a:	2078      	movs	r0, #120	; 0x78
 800192c:	f000 fa46 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001930:	223f      	movs	r2, #63	; 0x3f
 8001932:	2100      	movs	r1, #0
 8001934:	2078      	movs	r0, #120	; 0x78
 8001936:	f000 fa41 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800193a:	22a4      	movs	r2, #164	; 0xa4
 800193c:	2100      	movs	r1, #0
 800193e:	2078      	movs	r0, #120	; 0x78
 8001940:	f000 fa3c 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001944:	22d3      	movs	r2, #211	; 0xd3
 8001946:	2100      	movs	r1, #0
 8001948:	2078      	movs	r0, #120	; 0x78
 800194a:	f000 fa37 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	2078      	movs	r0, #120	; 0x78
 8001954:	f000 fa32 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001958:	22d5      	movs	r2, #213	; 0xd5
 800195a:	2100      	movs	r1, #0
 800195c:	2078      	movs	r0, #120	; 0x78
 800195e:	f000 fa2d 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001962:	22f0      	movs	r2, #240	; 0xf0
 8001964:	2100      	movs	r1, #0
 8001966:	2078      	movs	r0, #120	; 0x78
 8001968:	f000 fa28 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800196c:	22d9      	movs	r2, #217	; 0xd9
 800196e:	2100      	movs	r1, #0
 8001970:	2078      	movs	r0, #120	; 0x78
 8001972:	f000 fa23 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001976:	2222      	movs	r2, #34	; 0x22
 8001978:	2100      	movs	r1, #0
 800197a:	2078      	movs	r0, #120	; 0x78
 800197c:	f000 fa1e 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001980:	22da      	movs	r2, #218	; 0xda
 8001982:	2100      	movs	r1, #0
 8001984:	2078      	movs	r0, #120	; 0x78
 8001986:	f000 fa19 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800198a:	2212      	movs	r2, #18
 800198c:	2100      	movs	r1, #0
 800198e:	2078      	movs	r0, #120	; 0x78
 8001990:	f000 fa14 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001994:	22db      	movs	r2, #219	; 0xdb
 8001996:	2100      	movs	r1, #0
 8001998:	2078      	movs	r0, #120	; 0x78
 800199a:	f000 fa0f 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800199e:	2220      	movs	r2, #32
 80019a0:	2100      	movs	r1, #0
 80019a2:	2078      	movs	r0, #120	; 0x78
 80019a4:	f000 fa0a 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80019a8:	228d      	movs	r2, #141	; 0x8d
 80019aa:	2100      	movs	r1, #0
 80019ac:	2078      	movs	r0, #120	; 0x78
 80019ae:	f000 fa05 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80019b2:	2214      	movs	r2, #20
 80019b4:	2100      	movs	r1, #0
 80019b6:	2078      	movs	r0, #120	; 0x78
 80019b8:	f000 fa00 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80019bc:	22af      	movs	r2, #175	; 0xaf
 80019be:	2100      	movs	r1, #0
 80019c0:	2078      	movs	r0, #120	; 0x78
 80019c2:	f000 f9fb 	bl	8001dbc <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80019c6:	222e      	movs	r2, #46	; 0x2e
 80019c8:	2100      	movs	r1, #0
 80019ca:	2078      	movs	r0, #120	; 0x78
 80019cc:	f000 f9f6 	bl	8001dbc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80019d0:	2000      	movs	r0, #0
 80019d2:	f000 f843 	bl	8001a5c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80019d6:	f000 f813 	bl	8001a00 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <SSD1306_Init+0x184>)
 80019dc:	2200      	movs	r2, #0
 80019de:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <SSD1306_Init+0x184>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <SSD1306_Init+0x184>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80019ec:	2301      	movs	r3, #1
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200003a8 	.word	0x200003a8
 80019fc:	20000840 	.word	0x20000840

08001a00 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001a06:	2300      	movs	r3, #0
 8001a08:	71fb      	strb	r3, [r7, #7]
 8001a0a:	e01d      	b.n	8001a48 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	3b50      	subs	r3, #80	; 0x50
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	2100      	movs	r1, #0
 8001a16:	2078      	movs	r0, #120	; 0x78
 8001a18:	f000 f9d0 	bl	8001dbc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2078      	movs	r0, #120	; 0x78
 8001a22:	f000 f9cb 	bl	8001dbc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001a26:	2210      	movs	r2, #16
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2078      	movs	r0, #120	; 0x78
 8001a2c:	f000 f9c6 	bl	8001dbc <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	01db      	lsls	r3, r3, #7
 8001a34:	4a08      	ldr	r2, [pc, #32]	; (8001a58 <SSD1306_UpdateScreen+0x58>)
 8001a36:	441a      	add	r2, r3
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	2140      	movs	r1, #64	; 0x40
 8001a3c:	2078      	movs	r0, #120	; 0x78
 8001a3e:	f000 f957 	bl	8001cf0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	3301      	adds	r3, #1
 8001a46:	71fb      	strb	r3, [r7, #7]
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	2b07      	cmp	r3, #7
 8001a4c:	d9de      	bls.n	8001a0c <SSD1306_UpdateScreen+0xc>
	}
}
 8001a4e:	bf00      	nop
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000440 	.word	0x20000440

08001a5c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <SSD1306_Fill+0x14>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	e000      	b.n	8001a72 <SSD1306_Fill+0x16>
 8001a70:	23ff      	movs	r3, #255	; 0xff
 8001a72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a76:	4619      	mov	r1, r3
 8001a78:	4803      	ldr	r0, [pc, #12]	; (8001a88 <SSD1306_Fill+0x2c>)
 8001a7a:	f00d f805 	bl	800ea88 <memset>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000440 	.word	0x20000440

08001a8c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	80fb      	strh	r3, [r7, #6]
 8001a96:	460b      	mov	r3, r1
 8001a98:	80bb      	strh	r3, [r7, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	70fb      	strb	r3, [r7, #3]
	if (
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	2b7f      	cmp	r3, #127	; 0x7f
 8001aa2:	d848      	bhi.n	8001b36 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001aa4:	88bb      	ldrh	r3, [r7, #4]
 8001aa6:	2b3f      	cmp	r3, #63	; 0x3f
 8001aa8:	d845      	bhi.n	8001b36 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001aaa:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <SSD1306_DrawPixel+0xb8>)
 8001aac:	791b      	ldrb	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d006      	beq.n	8001ac0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2301      	moveq	r3, #1
 8001aba:	2300      	movne	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d11a      	bne.n	8001afc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ac6:	88fa      	ldrh	r2, [r7, #6]
 8001ac8:	88bb      	ldrh	r3, [r7, #4]
 8001aca:	08db      	lsrs	r3, r3, #3
 8001acc:	b298      	uxth	r0, r3
 8001ace:	4603      	mov	r3, r0
 8001ad0:	01db      	lsls	r3, r3, #7
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4a1c      	ldr	r2, [pc, #112]	; (8001b48 <SSD1306_DrawPixel+0xbc>)
 8001ad6:	5cd3      	ldrb	r3, [r2, r3]
 8001ad8:	b25a      	sxtb	r2, r3
 8001ada:	88bb      	ldrh	r3, [r7, #4]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	b25b      	sxtb	r3, r3
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	b259      	sxtb	r1, r3
 8001aec:	88fa      	ldrh	r2, [r7, #6]
 8001aee:	4603      	mov	r3, r0
 8001af0:	01db      	lsls	r3, r3, #7
 8001af2:	4413      	add	r3, r2
 8001af4:	b2c9      	uxtb	r1, r1
 8001af6:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <SSD1306_DrawPixel+0xbc>)
 8001af8:	54d1      	strb	r1, [r2, r3]
 8001afa:	e01d      	b.n	8001b38 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001afc:	88fa      	ldrh	r2, [r7, #6]
 8001afe:	88bb      	ldrh	r3, [r7, #4]
 8001b00:	08db      	lsrs	r3, r3, #3
 8001b02:	b298      	uxth	r0, r3
 8001b04:	4603      	mov	r3, r0
 8001b06:	01db      	lsls	r3, r3, #7
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a0f      	ldr	r2, [pc, #60]	; (8001b48 <SSD1306_DrawPixel+0xbc>)
 8001b0c:	5cd3      	ldrb	r3, [r2, r3]
 8001b0e:	b25a      	sxtb	r2, r3
 8001b10:	88bb      	ldrh	r3, [r7, #4]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	2101      	movs	r1, #1
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	b25b      	sxtb	r3, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	b25b      	sxtb	r3, r3
 8001b22:	4013      	ands	r3, r2
 8001b24:	b259      	sxtb	r1, r3
 8001b26:	88fa      	ldrh	r2, [r7, #6]
 8001b28:	4603      	mov	r3, r0
 8001b2a:	01db      	lsls	r3, r3, #7
 8001b2c:	4413      	add	r3, r2
 8001b2e:	b2c9      	uxtb	r1, r1
 8001b30:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <SSD1306_DrawPixel+0xbc>)
 8001b32:	54d1      	strb	r1, [r2, r3]
 8001b34:	e000      	b.n	8001b38 <SSD1306_DrawPixel+0xac>
		return;
 8001b36:	bf00      	nop
	}
}
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000840 	.word	0x20000840
 8001b48:	20000440 	.word	0x20000440

08001b4c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	460a      	mov	r2, r1
 8001b56:	80fb      	strh	r3, [r7, #6]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001b5c:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <SSD1306_GotoXY+0x28>)
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001b62:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <SSD1306_GotoXY+0x28>)
 8001b64:	88bb      	ldrh	r3, [r7, #4]
 8001b66:	8053      	strh	r3, [r2, #2]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	20000840 	.word	0x20000840

08001b78 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	6039      	str	r1, [r7, #0]
 8001b82:	71fb      	strb	r3, [r7, #7]
 8001b84:	4613      	mov	r3, r2
 8001b86:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b88:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <SSD1306_Putc+0xfc>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	4413      	add	r3, r2
	if (
 8001b94:	2b7f      	cmp	r3, #127	; 0x7f
 8001b96:	dc07      	bgt.n	8001ba8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001b98:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <SSD1306_Putc+0xfc>)
 8001b9a:	885b      	ldrh	r3, [r3, #2]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	785b      	ldrb	r3, [r3, #1]
 8001ba2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001ba4:	2b3f      	cmp	r3, #63	; 0x3f
 8001ba6:	dd01      	ble.n	8001bac <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	e05e      	b.n	8001c6a <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	e04b      	b.n	8001c4a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	3b20      	subs	r3, #32
 8001bba:	6839      	ldr	r1, [r7, #0]
 8001bbc:	7849      	ldrb	r1, [r1, #1]
 8001bbe:	fb01 f303 	mul.w	r3, r1, r3
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	440b      	add	r3, r1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	e030      	b.n	8001c38 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d010      	beq.n	8001c08 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001be6:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <SSD1306_Putc+0xfc>)
 8001be8:	881a      	ldrh	r2, [r3, #0]
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	b298      	uxth	r0, r3
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <SSD1306_Putc+0xfc>)
 8001bf4:	885a      	ldrh	r2, [r3, #2]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	79ba      	ldrb	r2, [r7, #6]
 8001c00:	4619      	mov	r1, r3
 8001c02:	f7ff ff43 	bl	8001a8c <SSD1306_DrawPixel>
 8001c06:	e014      	b.n	8001c32 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <SSD1306_Putc+0xfc>)
 8001c0a:	881a      	ldrh	r2, [r3, #0]
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	b298      	uxth	r0, r3
 8001c14:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <SSD1306_Putc+0xfc>)
 8001c16:	885a      	ldrh	r2, [r3, #2]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	b299      	uxth	r1, r3
 8001c20:	79bb      	ldrb	r3, [r7, #6]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf0c      	ite	eq
 8001c26:	2301      	moveq	r3, #1
 8001c28:	2300      	movne	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	f7ff ff2d 	bl	8001a8c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	3301      	adds	r3, #1
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d3c8      	bcc.n	8001bd6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	3301      	adds	r3, #1
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	785b      	ldrb	r3, [r3, #1]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d3ad      	bcc.n	8001bb2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <SSD1306_Putc+0xfc>)
 8001c58:	881a      	ldrh	r2, [r3, #0]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	4413      	add	r3, r2
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <SSD1306_Putc+0xfc>)
 8001c66:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001c68:	79fb      	ldrb	r3, [r7, #7]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000840 	.word	0x20000840

08001c78 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	4613      	mov	r3, r2
 8001c84:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001c86:	e012      	b.n	8001cae <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	79fa      	ldrb	r2, [r7, #7]
 8001c8e:	68b9      	ldr	r1, [r7, #8]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff71 	bl	8001b78 <SSD1306_Putc>
 8001c96:	4603      	mov	r3, r0
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d002      	beq.n	8001ca8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	e008      	b.n	8001cba <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	3301      	adds	r3, #1
 8001cac:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1e8      	bne.n	8001c88 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <ssd1306_I2C_Init+0x28>)
 8001ccc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001cce:	e002      	b.n	8001cd6 <ssd1306_I2C_Init+0x12>
		p--;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f9      	bne.n	8001cd0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	0003d090 	.word	0x0003d090

08001cf0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b0c7      	sub	sp, #284	; 0x11c
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	4604      	mov	r4, r0
 8001cf8:	4608      	mov	r0, r1
 8001cfa:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001cfe:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001d02:	600a      	str	r2, [r1, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d0a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001d0e:	4622      	mov	r2, r4
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d16:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	701a      	strb	r2, [r3, #0]
 8001d1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d26:	460a      	mov	r2, r1
 8001d28:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001d2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d32:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001d36:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001d3a:	7812      	ldrb	r2, [r2, #0]
 8001d3c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001d44:	e015      	b.n	8001d72 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001d46:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d4a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001d4e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	441a      	add	r2, r3
 8001d56:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	7811      	ldrb	r1, [r2, #0]
 8001d5e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001d62:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001d66:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001d68:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001d72:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001d7c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001d80:	8812      	ldrh	r2, [r2, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d8df      	bhi.n	8001d46 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001d86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d8a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b299      	uxth	r1, r3
 8001d92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	f107 020c 	add.w	r2, r7, #12
 8001da4:	200a      	movs	r0, #10
 8001da6:	9000      	str	r0, [sp, #0]
 8001da8:	4803      	ldr	r0, [pc, #12]	; (8001db8 <ssd1306_I2C_WriteMulti+0xc8>)
 8001daa:	f002 fa87 	bl	80042bc <HAL_I2C_Master_Transmit>
}
 8001dae:	bf00      	nop
 8001db0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd90      	pop	{r4, r7, pc}
 8001db8:	200003a8 	.word	0x200003a8

08001dbc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af02      	add	r7, sp, #8
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	71bb      	strb	r3, [r7, #6]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001dce:	79bb      	ldrb	r3, [r7, #6]
 8001dd0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001dd2:	797b      	ldrb	r3, [r7, #5]
 8001dd4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	b299      	uxth	r1, r3
 8001dda:	f107 020c 	add.w	r2, r7, #12
 8001dde:	230a      	movs	r3, #10
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	2302      	movs	r3, #2
 8001de4:	4803      	ldr	r0, [pc, #12]	; (8001df4 <ssd1306_I2C_Write+0x38>)
 8001de6:	f002 fa69 	bl	80042bc <HAL_I2C_Master_Transmit>
}
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200003a8 	.word	0x200003a8

08001df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <HAL_MspInit+0x44>)
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <HAL_MspInit+0x44>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6193      	str	r3, [r2, #24]
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <HAL_MspInit+0x44>)
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <HAL_MspInit+0x44>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4a08      	ldr	r2, [pc, #32]	; (8001e3c <HAL_MspInit+0x44>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e20:	61d3      	str	r3, [r2, #28]
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_MspInit+0x44>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e2e:	2007      	movs	r0, #7
 8001e30:	f001 ffb6 	bl	8003da0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000

08001e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <NMI_Handler+0x4>

08001e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <HardFault_Handler+0x4>

08001e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <MemManage_Handler+0x4>

08001e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e56:	e7fe      	b.n	8001e56 <BusFault_Handler+0x4>

08001e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <UsageFault_Handler+0x4>

08001e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e8c:	f000 fb12 	bl	80024b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <ADC1_2_IRQHandler+0x10>)
 8001e9a:	f000 fef3 	bl	8002c84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200002d0 	.word	0x200002d0

08001ea8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001eae:	f003 f8c9 	bl	8005044 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20001014 	.word	0x20001014

08001ebc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <TIM2_IRQHandler+0x10>)
 8001ec2:	f006 fb17 	bl	80084f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	2000084c 	.word	0x2000084c

08001ed0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <I2C1_EV_IRQHandler+0x10>)
 8001ed6:	f002 fbee 	bl	80046b6 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200003a8 	.word	0x200003a8

08001ee4 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <ADC3_IRQHandler+0x10>)
 8001eea:	f000 fecb 	bl	8002c84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2000033c 	.word	0x2000033c

08001ef8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return 1;
 8001efc:	2301      	movs	r3, #1
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <_kill>:

int _kill(int pid, int sig)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f12:	f00c fd7f 	bl	800ea14 <__errno>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2216      	movs	r2, #22
 8001f1a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <_exit>:

void _exit (int status)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f30:	f04f 31ff 	mov.w	r1, #4294967295
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ffe7 	bl	8001f08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f3a:	e7fe      	b.n	8001f3a <_exit+0x12>

08001f3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	e00a      	b.n	8001f64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f4e:	f3af 8000 	nop.w
 8001f52:	4601      	mov	r1, r0
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	60ba      	str	r2, [r7, #8]
 8001f5a:	b2ca      	uxtb	r2, r1
 8001f5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	3301      	adds	r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	dbf0      	blt.n	8001f4e <_read+0x12>
  }

  return len;
 8001f6c:	687b      	ldr	r3, [r7, #4]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b086      	sub	sp, #24
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	e009      	b.n	8001f9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	60ba      	str	r2, [r7, #8]
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	dbf1      	blt.n	8001f88 <_write+0x12>
  }
  return len;
 8001fa4:	687b      	ldr	r3, [r7, #4]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <_close>:

int _close(int file)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fd6:	605a      	str	r2, [r3, #4]
  return 0;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <_isatty>:

int _isatty(int file)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fee:	2301      	movs	r3, #1
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002020:	4a14      	ldr	r2, [pc, #80]	; (8002074 <_sbrk+0x5c>)
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <_sbrk+0x60>)
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800202c:	4b13      	ldr	r3, [pc, #76]	; (800207c <_sbrk+0x64>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d102      	bne.n	800203a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <_sbrk+0x64>)
 8002036:	4a12      	ldr	r2, [pc, #72]	; (8002080 <_sbrk+0x68>)
 8002038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <_sbrk+0x64>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	429a      	cmp	r2, r3
 8002046:	d207      	bcs.n	8002058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002048:	f00c fce4 	bl	800ea14 <__errno>
 800204c:	4603      	mov	r3, r0
 800204e:	220c      	movs	r2, #12
 8002050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002052:	f04f 33ff 	mov.w	r3, #4294967295
 8002056:	e009      	b.n	800206c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002058:	4b08      	ldr	r3, [pc, #32]	; (800207c <_sbrk+0x64>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800205e:	4b07      	ldr	r3, [pc, #28]	; (800207c <_sbrk+0x64>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	4a05      	ldr	r2, [pc, #20]	; (800207c <_sbrk+0x64>)
 8002068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800206a:	68fb      	ldr	r3, [r7, #12]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20010000 	.word	0x20010000
 8002078:	00000400 	.word	0x00000400
 800207c:	20000848 	.word	0x20000848
 8002080:	20001730 	.word	0x20001730

08002084 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <SystemInit+0x20>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208e:	4a05      	ldr	r2, [pc, #20]	; (80020a4 <SystemInit+0x20>)
 8002090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ae:	f107 0310 	add.w	r3, r7, #16
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020c6:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <MX_TIM2_Init+0x98>)
 80020c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60-1;
 80020ce:	4b1c      	ldr	r3, [pc, #112]	; (8002140 <MX_TIM2_Init+0x98>)
 80020d0:	223b      	movs	r2, #59	; 0x3b
 80020d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d4:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <MX_TIM2_Init+0x98>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 80020da:	4b19      	ldr	r3, [pc, #100]	; (8002140 <MX_TIM2_Init+0x98>)
 80020dc:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80020e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e2:	4b17      	ldr	r3, [pc, #92]	; (8002140 <MX_TIM2_Init+0x98>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e8:	4b15      	ldr	r3, [pc, #84]	; (8002140 <MX_TIM2_Init+0x98>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020ee:	4814      	ldr	r0, [pc, #80]	; (8002140 <MX_TIM2_Init+0x98>)
 80020f0:	f005 ffbc 	bl	800806c <HAL_TIM_Base_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80020fa:	f7ff fb5f 	bl	80017bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002102:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	4619      	mov	r1, r3
 800210a:	480d      	ldr	r0, [pc, #52]	; (8002140 <MX_TIM2_Init+0x98>)
 800210c:	f006 fc48 	bl	80089a0 <HAL_TIM_ConfigClockSource>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002116:	f7ff fb51 	bl	80017bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211a:	2300      	movs	r3, #0
 800211c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	4619      	mov	r1, r3
 8002126:	4806      	ldr	r0, [pc, #24]	; (8002140 <MX_TIM2_Init+0x98>)
 8002128:	f007 fa3c 	bl	80095a4 <HAL_TIMEx_MasterConfigSynchronization>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002132:	f7ff fb43 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002136:	bf00      	nop
 8002138:	3720      	adds	r7, #32
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	2000084c 	.word	0x2000084c

08002144 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	; 0x28
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214a:	f107 031c 	add.w	r3, r7, #28
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002156:	463b      	mov	r3, r7
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
 8002164:	615a      	str	r2, [r3, #20]
 8002166:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002168:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <MX_TIM4_Init+0xac>)
 800216a:	4a22      	ldr	r2, [pc, #136]	; (80021f4 <MX_TIM4_Init+0xb0>)
 800216c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60-1;
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <MX_TIM4_Init+0xac>)
 8002170:	223b      	movs	r2, #59	; 0x3b
 8002172:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002174:	4b1e      	ldr	r3, [pc, #120]	; (80021f0 <MX_TIM4_Init+0xac>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 140-1;
 800217a:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <MX_TIM4_Init+0xac>)
 800217c:	228b      	movs	r2, #139	; 0x8b
 800217e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <MX_TIM4_Init+0xac>)
 8002182:	2200      	movs	r2, #0
 8002184:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002186:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <MX_TIM4_Init+0xac>)
 8002188:	2200      	movs	r2, #0
 800218a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800218c:	4818      	ldr	r0, [pc, #96]	; (80021f0 <MX_TIM4_Init+0xac>)
 800218e:	f006 f841 	bl	8008214 <HAL_TIM_PWM_Init>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002198:	f7ff fb10 	bl	80017bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800219c:	2300      	movs	r3, #0
 800219e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021a4:	f107 031c 	add.w	r3, r7, #28
 80021a8:	4619      	mov	r1, r3
 80021aa:	4811      	ldr	r0, [pc, #68]	; (80021f0 <MX_TIM4_Init+0xac>)
 80021ac:	f007 f9fa 	bl	80095a4 <HAL_TIMEx_MasterConfigSynchronization>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80021b6:	f7ff fb01 	bl	80017bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021ba:	2360      	movs	r3, #96	; 0x60
 80021bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021ca:	463b      	mov	r3, r7
 80021cc:	2200      	movs	r2, #0
 80021ce:	4619      	mov	r1, r3
 80021d0:	4807      	ldr	r0, [pc, #28]	; (80021f0 <MX_TIM4_Init+0xac>)
 80021d2:	f006 fad1 	bl	8008778 <HAL_TIM_PWM_ConfigChannel>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80021dc:	f7ff faee 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80021e0:	4803      	ldr	r0, [pc, #12]	; (80021f0 <MX_TIM4_Init+0xac>)
 80021e2:	f000 f84d 	bl	8002280 <HAL_TIM_MspPostInit>

}
 80021e6:	bf00      	nop
 80021e8:	3728      	adds	r7, #40	; 0x28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000908 	.word	0x20000908
 80021f4:	40000800 	.word	0x40000800

080021f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002208:	d113      	bne.n	8002232 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <HAL_TIM_Base_MspInit+0x44>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	4a0b      	ldr	r2, [pc, #44]	; (800223c <HAL_TIM_Base_MspInit+0x44>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	61d3      	str	r3, [r2, #28]
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_TIM_Base_MspInit+0x44>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	201c      	movs	r0, #28
 8002228:	f001 fdc5 	bl	8003db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800222c:	201c      	movs	r0, #28
 800222e:	f001 fdde 	bl	8003dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000

08002240 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <HAL_TIM_PWM_MspInit+0x38>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d10b      	bne.n	800226a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_TIM_PWM_MspInit+0x3c>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	4a09      	ldr	r2, [pc, #36]	; (800227c <HAL_TIM_PWM_MspInit+0x3c>)
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	61d3      	str	r3, [r2, #28]
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <HAL_TIM_PWM_MspInit+0x3c>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800226a:	bf00      	nop
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40000800 	.word	0x40000800
 800227c:	40021000 	.word	0x40021000

08002280 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 030c 	add.w	r3, r7, #12
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a11      	ldr	r2, [pc, #68]	; (80022e4 <HAL_TIM_MspPostInit+0x64>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d11b      	bne.n	80022da <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_TIM_MspPostInit+0x68>)
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <HAL_TIM_MspPostInit+0x68>)
 80022a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ac:	6153      	str	r3, [r2, #20]
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HAL_TIM_MspPostInit+0x68>)
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022ba:	2340      	movs	r3, #64	; 0x40
 80022bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022ca:	2302      	movs	r3, #2
 80022cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ce:	f107 030c 	add.w	r3, r7, #12
 80022d2:	4619      	mov	r1, r3
 80022d4:	4805      	ldr	r0, [pc, #20]	; (80022ec <HAL_TIM_MspPostInit+0x6c>)
 80022d6:	f001 fda5 	bl	8003e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80022da:	bf00      	nop
 80022dc:	3720      	adds	r7, #32
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40000800 	.word	0x40000800
 80022e8:	40021000 	.word	0x40021000
 80022ec:	48000400 	.word	0x48000400

080022f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022f4:	4b14      	ldr	r3, [pc, #80]	; (8002348 <MX_USART2_UART_Init+0x58>)
 80022f6:	4a15      	ldr	r2, [pc, #84]	; (800234c <MX_USART2_UART_Init+0x5c>)
 80022f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <MX_USART2_UART_Init+0x58>)
 80022fc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002302:	4b11      	ldr	r3, [pc, #68]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <MX_USART2_UART_Init+0x58>)
 800230a:	2200      	movs	r2, #0
 800230c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002316:	220c      	movs	r2, #12
 8002318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <MX_USART2_UART_Init+0x58>)
 800231c:	2200      	movs	r2, #0
 800231e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002322:	2200      	movs	r2, #0
 8002324:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002328:	2200      	movs	r2, #0
 800232a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <MX_USART2_UART_Init+0x58>)
 800232e:	2200      	movs	r2, #0
 8002330:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002332:	4805      	ldr	r0, [pc, #20]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002334:	f007 f9ea 	bl	800970c <HAL_UART_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800233e:	f7ff fa3d 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	200009c4 	.word	0x200009c4
 800234c:	40004400 	.word	0x40004400

08002350 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	; 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a17      	ldr	r2, [pc, #92]	; (80023cc <HAL_UART_MspInit+0x7c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d128      	bne.n	80023c4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002372:	4b17      	ldr	r3, [pc, #92]	; (80023d0 <HAL_UART_MspInit+0x80>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	4a16      	ldr	r2, [pc, #88]	; (80023d0 <HAL_UART_MspInit+0x80>)
 8002378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800237c:	61d3      	str	r3, [r2, #28]
 800237e:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <HAL_UART_MspInit+0x80>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238a:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_UART_MspInit+0x80>)
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	4a10      	ldr	r2, [pc, #64]	; (80023d0 <HAL_UART_MspInit+0x80>)
 8002390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002394:	6153      	str	r3, [r2, #20]
 8002396:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <HAL_UART_MspInit+0x80>)
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023a2:	230c      	movs	r3, #12
 80023a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023b2:	2307      	movs	r3, #7
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4619      	mov	r1, r3
 80023bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c0:	f001 fd30 	bl	8003e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023c4:	bf00      	nop
 80023c6:	3728      	adds	r7, #40	; 0x28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40004400 	.word	0x40004400
 80023d0:	40021000 	.word	0x40021000

080023d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800240c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80023d8:	f7ff fe54 	bl	8002084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023dc:	480c      	ldr	r0, [pc, #48]	; (8002410 <LoopForever+0x6>)
  ldr r1, =_edata
 80023de:	490d      	ldr	r1, [pc, #52]	; (8002414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023e0:	4a0d      	ldr	r2, [pc, #52]	; (8002418 <LoopForever+0xe>)
  movs r3, #0
 80023e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e4:	e002      	b.n	80023ec <LoopCopyDataInit>

080023e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ea:	3304      	adds	r3, #4

080023ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f0:	d3f9      	bcc.n	80023e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023f2:	4a0a      	ldr	r2, [pc, #40]	; (800241c <LoopForever+0x12>)
  ldr r4, =_ebss
 80023f4:	4c0a      	ldr	r4, [pc, #40]	; (8002420 <LoopForever+0x16>)
  movs r3, #0
 80023f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f8:	e001      	b.n	80023fe <LoopFillZerobss>

080023fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023fc:	3204      	adds	r2, #4

080023fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002400:	d3fb      	bcc.n	80023fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002402:	f00c fb0d 	bl	800ea20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002406:	f7ff f8df 	bl	80015c8 <main>

0800240a <LoopForever>:

LoopForever:
    b LoopForever
 800240a:	e7fe      	b.n	800240a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800240c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002414:	200002b4 	.word	0x200002b4
  ldr r2, =_sidata
 8002418:	080124cc 	.word	0x080124cc
  ldr r2, =_sbss
 800241c:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 8002420:	20001730 	.word	0x20001730

08002424 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002424:	e7fe      	b.n	8002424 <ADC4_IRQHandler>
	...

08002428 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <HAL_Init+0x28>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a07      	ldr	r2, [pc, #28]	; (8002450 <HAL_Init+0x28>)
 8002432:	f043 0310 	orr.w	r3, r3, #16
 8002436:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002438:	2003      	movs	r0, #3
 800243a:	f001 fcb1 	bl	8003da0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800243e:	2000      	movs	r0, #0
 8002440:	f000 f808 	bl	8002454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002444:	f7ff fcd8 	bl	8001df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40022000 	.word	0x40022000

08002454 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_InitTick+0x54>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_InitTick+0x58>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4619      	mov	r1, r3
 8002466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246a:	fbb3 f3f1 	udiv	r3, r3, r1
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	4618      	mov	r0, r3
 8002474:	f001 fcc9 	bl	8003e0a <HAL_SYSTICK_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e00e      	b.n	80024a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b0f      	cmp	r3, #15
 8002486:	d80a      	bhi.n	800249e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002488:	2200      	movs	r2, #0
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	f04f 30ff 	mov.w	r0, #4294967295
 8002490:	f001 fc91 	bl	8003db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002494:	4a06      	ldr	r2, [pc, #24]	; (80024b0 <HAL_InitTick+0x5c>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	e000      	b.n	80024a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000008 	.word	0x20000008
 80024ac:	20000010 	.word	0x20000010
 80024b0:	2000000c 	.word	0x2000000c

080024b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_IncTick+0x20>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_IncTick+0x24>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <HAL_IncTick+0x24>)
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000010 	.word	0x20000010
 80024d8:	20000a4c 	.word	0x20000a4c

080024dc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return uwTick;  
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <HAL_GetTick+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000a4c 	.word	0x20000a4c

080024f4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff ffee 	bl	80024dc <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d005      	beq.n	800251a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_Delay+0x44>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800251a:	bf00      	nop
 800251c:	f7ff ffde 	bl	80024dc <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d8f7      	bhi.n	800251c <HAL_Delay+0x28>
  {
  }
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000010 	.word	0x20000010

0800253c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_ADC_GetState>:
  *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
  * @param  hadc ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Return ADC state */
  return hadc->State;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b0a2      	sub	sp, #136	; 0x88
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __IO uint32_t wait_loop_index = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e210      	b.n	80029d4 <HAL_ADC_Init+0x444>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	f003 0310 	and.w	r3, r3, #16
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f040 808e 	bne.w	80026e2 <HAL_ADC_Init+0x152>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d169      	bne.n	80026a2 <HAL_ADC_Init+0x112>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a92      	ldr	r2, [pc, #584]	; (8002834 <HAL_ADC_Init+0x2a4>)
 80025ec:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a91      	ldr	r2, [pc, #580]	; (8002838 <HAL_ADC_Init+0x2a8>)
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a91      	ldr	r2, [pc, #580]	; (800283c <HAL_ADC_Init+0x2ac>)
 80025f8:	659a      	str	r2, [r3, #88]	; 0x58
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a90      	ldr	r2, [pc, #576]	; (8002840 <HAL_ADC_Init+0x2b0>)
 80025fe:	65da      	str	r2, [r3, #92]	; 0x5c
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a90      	ldr	r2, [pc, #576]	; (8002844 <HAL_ADC_Init+0x2b4>)
 8002604:	661a      	str	r2, [r3, #96]	; 0x60
    
    if (hadc->MspInitCallback == NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800260a:	2b00      	cmp	r3, #0
 800260c:	d102      	bne.n	8002614 <HAL_ADC_Init+0x84>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a8d      	ldr	r2, [pc, #564]	; (8002848 <HAL_ADC_Init+0x2b8>)
 8002612:	665a      	str	r2, [r3, #100]	; 0x64
    }
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d13b      	bne.n	80026a2 <HAL_ADC_Init+0x112>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f001 fa82 	bl	8003b34 <ADC_Disable>
 8002630:	4603      	mov	r3, r0
 8002632:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	2b00      	cmp	r3, #0
 8002640:	d12f      	bne.n	80026a2 <HAL_ADC_Init+0x112>
 8002642:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002646:	2b00      	cmp	r3, #0
 8002648:	d12b      	bne.n	80026a2 <HAL_ADC_Init+0x112>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002652:	f023 0302 	bic.w	r3, r3, #2
 8002656:	f043 0202 	orr.w	r2, r3, #2
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800266c:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800267c:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800267e:	4b73      	ldr	r3, [pc, #460]	; (800284c <HAL_ADC_Init+0x2bc>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a73      	ldr	r2, [pc, #460]	; (8002850 <HAL_ADC_Init+0x2c0>)
 8002684:	fba2 2303 	umull	r2, r3, r2, r3
 8002688:	0c9a      	lsrs	r2, r3, #18
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8002694:	e002      	b.n	800269c <HAL_ADC_Init+0x10c>
          {
            wait_loop_index--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	3b01      	subs	r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f9      	bne.n	8002696 <HAL_ADC_Init+0x106>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d007      	beq.n	80026c0 <HAL_ADC_Init+0x130>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80026ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026be:	d110      	bne.n	80026e2 <HAL_ADC_Init+0x152>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	f023 0312 	bic.w	r3, r3, #18
 80026c8:	f043 0210 	orr.w	r2, r3, #16
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	f043 0201 	orr.w	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f040 8165 	bne.w	80029ba <HAL_ADC_Init+0x42a>
 80026f0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f040 8160 	bne.w	80029ba <HAL_ADC_Init+0x42a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002704:	2b00      	cmp	r3, #0
 8002706:	f040 8158 	bne.w	80029ba <HAL_ADC_Init+0x42a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002712:	f043 0202 	orr.w	r2, r3, #2
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002722:	d004      	beq.n	800272e <HAL_ADC_Init+0x19e>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a4a      	ldr	r2, [pc, #296]	; (8002854 <HAL_ADC_Init+0x2c4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d101      	bne.n	8002732 <HAL_ADC_Init+0x1a2>
 800272e:	4b4a      	ldr	r3, [pc, #296]	; (8002858 <HAL_ADC_Init+0x2c8>)
 8002730:	e000      	b.n	8002734 <HAL_ADC_Init+0x1a4>
 8002732:	4b4a      	ldr	r3, [pc, #296]	; (800285c <HAL_ADC_Init+0x2cc>)
 8002734:	67fb      	str	r3, [r7, #124]	; 0x7c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800273e:	d102      	bne.n	8002746 <HAL_ADC_Init+0x1b6>
 8002740:	4b44      	ldr	r3, [pc, #272]	; (8002854 <HAL_ADC_Init+0x2c4>)
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	e01a      	b.n	800277c <HAL_ADC_Init+0x1ec>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a42      	ldr	r2, [pc, #264]	; (8002854 <HAL_ADC_Init+0x2c4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d103      	bne.n	8002758 <HAL_ADC_Init+0x1c8>
 8002750:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	e011      	b.n	800277c <HAL_ADC_Init+0x1ec>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a40      	ldr	r2, [pc, #256]	; (8002860 <HAL_ADC_Init+0x2d0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d102      	bne.n	8002768 <HAL_ADC_Init+0x1d8>
 8002762:	4b40      	ldr	r3, [pc, #256]	; (8002864 <HAL_ADC_Init+0x2d4>)
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	e009      	b.n	800277c <HAL_ADC_Init+0x1ec>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a3d      	ldr	r2, [pc, #244]	; (8002864 <HAL_ADC_Init+0x2d4>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d102      	bne.n	8002778 <HAL_ADC_Init+0x1e8>
 8002772:	4b3b      	ldr	r3, [pc, #236]	; (8002860 <HAL_ADC_Init+0x2d0>)
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	e001      	b.n	800277c <HAL_ADC_Init+0x1ec>
 8002778:	2300      	movs	r3, #0
 800277a:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d108      	bne.n	800279c <HAL_ADC_Init+0x20c>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_ADC_Init+0x20c>
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <HAL_ADC_Init+0x20e>
 800279c:	2300      	movs	r3, #0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d11c      	bne.n	80027dc <HAL_ADC_Init+0x24c>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027a2:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d010      	beq.n	80027ca <HAL_ADC_Init+0x23a>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d107      	bne.n	80027c4 <HAL_ADC_Init+0x234>
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_ADC_Init+0x234>
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <HAL_ADC_Init+0x236>
 80027c4:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d108      	bne.n	80027dc <HAL_ADC_Init+0x24c>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80027ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027da:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	7e5b      	ldrb	r3, [r3, #25]
 80027e0:	035b      	lsls	r3, r3, #13
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027e6:	2a01      	cmp	r2, #1
 80027e8:	d002      	beq.n	80027f0 <HAL_ADC_Init+0x260>
 80027ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027ee:	e000      	b.n	80027f2 <HAL_ADC_Init+0x262>
 80027f0:	2200      	movs	r2, #0
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d137      	bne.n	8002884 <HAL_ADC_Init+0x2f4>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	7e5b      	ldrb	r3, [r3, #25]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d125      	bne.n	8002868 <HAL_ADC_Init+0x2d8>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	3b01      	subs	r3, #1
 8002822:	045a      	lsls	r2, r3, #17
 8002824:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002828:	4313      	orrs	r3, r2
 800282a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002832:	e027      	b.n	8002884 <HAL_ADC_Init+0x2f4>
 8002834:	0800150d 	.word	0x0800150d
 8002838:	0800253d 	.word	0x0800253d
 800283c:	08002551 	.word	0x08002551
 8002840:	08002565 	.word	0x08002565
 8002844:	08003259 	.word	0x08003259
 8002848:	08001235 	.word	0x08001235
 800284c:	20000008 	.word	0x20000008
 8002850:	431bde83 	.word	0x431bde83
 8002854:	50000100 	.word	0x50000100
 8002858:	50000300 	.word	0x50000300
 800285c:	50000700 	.word	0x50000700
 8002860:	50000400 	.word	0x50000400
 8002864:	50000500 	.word	0x50000500
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002870:	f043 0220 	orr.w	r2, r3, #32
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287c:	f043 0201 	orr.w	r2, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	2b01      	cmp	r3, #1
 800288a:	d048      	beq.n	800291e <HAL_ADC_Init+0x38e>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a52      	ldr	r2, [pc, #328]	; (80029dc <HAL_ADC_Init+0x44c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d004      	beq.n	80028a0 <HAL_ADC_Init+0x310>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a51      	ldr	r2, [pc, #324]	; (80029e0 <HAL_ADC_Init+0x450>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d132      	bne.n	8002906 <HAL_ADC_Init+0x376>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80028a8:	d02a      	beq.n	8002900 <HAL_ADC_Init+0x370>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028b2:	d022      	beq.n	80028fa <HAL_ADC_Init+0x36a>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b8:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80028bc:	d01a      	beq.n	80028f4 <HAL_ADC_Init+0x364>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80028c6:	d012      	beq.n	80028ee <HAL_ADC_Init+0x35e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80028d0:	d00a      	beq.n	80028e8 <HAL_ADC_Init+0x358>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80028da:	d002      	beq.n	80028e2 <HAL_ADC_Init+0x352>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e0:	e015      	b.n	800290e <HAL_ADC_Init+0x37e>
 80028e2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80028e6:	e012      	b.n	800290e <HAL_ADC_Init+0x37e>
 80028e8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80028ec:	e00f      	b.n	800290e <HAL_ADC_Init+0x37e>
 80028ee:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80028f2:	e00c      	b.n	800290e <HAL_ADC_Init+0x37e>
 80028f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028f8:	e009      	b.n	800290e <HAL_ADC_Init+0x37e>
 80028fa:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80028fe:	e006      	b.n	800290e <HAL_ADC_Init+0x37e>
 8002900:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002904:	e003      	b.n	800290e <HAL_ADC_Init+0x37e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002912:	4313      	orrs	r3, r2
 8002914:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 030c 	and.w	r3, r3, #12
 8002928:	2b00      	cmp	r3, #0
 800292a:	d116      	bne.n	800295a <HAL_ADC_Init+0x3ca>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800293a:	f023 0302 	bic.w	r3, r3, #2
 800293e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	7e1b      	ldrb	r3, [r3, #24]
 8002944:	039a      	lsls	r2, r3, #14
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4313      	orrs	r3, r2
 8002950:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	4b20      	ldr	r3, [pc, #128]	; (80029e4 <HAL_ADC_Init+0x454>)
 8002962:	4013      	ands	r3, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800296c:	430b      	orrs	r3, r1
 800296e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d10c      	bne.n	8002992 <HAL_ADC_Init+0x402>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f023 010f 	bic.w	r1, r3, #15
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	1e5a      	subs	r2, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
 8002990:	e007      	b.n	80029a2 <HAL_ADC_Init+0x412>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 020f 	bic.w	r2, r2, #15
 80029a0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f023 0303 	bic.w	r3, r3, #3
 80029b0:	f043 0201 	orr.w	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40
 80029b8:	e00a      	b.n	80029d0 <HAL_ADC_Init+0x440>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f023 0312 	bic.w	r3, r3, #18
 80029c2:	f043 0210 	orr.w	r2, r3, #16
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80029ca:	2301      	movs	r3, #1
 80029cc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80029d0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3788      	adds	r7, #136	; 0x88
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	50000400 	.word	0x50000400
 80029e0:	50000500 	.word	0x50000500
 80029e4:	fff0c007 	.word	0xfff0c007

080029e8 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f040 8123 	bne.w	8002c4a <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_ADC_Start_IT+0x2a>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e11e      	b.n	8002c50 <HAL_ADC_Start_IT+0x268>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f001 f826 	bl	8003a6c <ADC_Enable>
 8002a20:	4603      	mov	r3, r0
 8002a22:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f040 810a 	bne.w	8002c40 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a34:	f023 0301 	bic.w	r3, r3, #1
 8002a38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a48:	d004      	beq.n	8002a54 <HAL_ADC_Start_IT+0x6c>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a82      	ldr	r2, [pc, #520]	; (8002c58 <HAL_ADC_Start_IT+0x270>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d106      	bne.n	8002a62 <HAL_ADC_Start_IT+0x7a>
 8002a54:	4b81      	ldr	r3, [pc, #516]	; (8002c5c <HAL_ADC_Start_IT+0x274>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 031f 	and.w	r3, r3, #31
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d010      	beq.n	8002a82 <HAL_ADC_Start_IT+0x9a>
 8002a60:	e005      	b.n	8002a6e <HAL_ADC_Start_IT+0x86>
 8002a62:	4b7f      	ldr	r3, [pc, #508]	; (8002c60 <HAL_ADC_Start_IT+0x278>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d009      	beq.n	8002a82 <HAL_ADC_Start_IT+0x9a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a76:	d004      	beq.n	8002a82 <HAL_ADC_Start_IT+0x9a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a79      	ldr	r2, [pc, #484]	; (8002c64 <HAL_ADC_Start_IT+0x27c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d115      	bne.n	8002aae <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d036      	beq.n	8002b0a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002aa4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002aac:	e02d      	b.n	8002b0a <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ac2:	d004      	beq.n	8002ace <HAL_ADC_Start_IT+0xe6>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a63      	ldr	r2, [pc, #396]	; (8002c58 <HAL_ADC_Start_IT+0x270>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d10a      	bne.n	8002ae4 <HAL_ADC_Start_IT+0xfc>
 8002ace:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bf14      	ite	ne
 8002adc:	2301      	movne	r3, #1
 8002ade:	2300      	moveq	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	e008      	b.n	8002af6 <HAL_ADC_Start_IT+0x10e>
 8002ae4:	4b5f      	ldr	r3, [pc, #380]	; (8002c64 <HAL_ADC_Start_IT+0x27c>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	bf14      	ite	ne
 8002af0:	2301      	movne	r3, #1
 8002af2:	2300      	moveq	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d007      	beq.n	8002b0a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b16:	d106      	bne.n	8002b26 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1c:	f023 0206 	bic.w	r2, r3, #6
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	645a      	str	r2, [r3, #68]	; 0x44
 8002b24:	e002      	b.n	8002b2c <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	221c      	movs	r2, #28
 8002b3a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d110      	bne.n	8002b66 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0204 	bic.w	r2, r2, #4
 8002b52:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0208 	orr.w	r2, r2, #8
 8002b62:	605a      	str	r2, [r3, #4]
          break;
 8002b64:	e008      	b.n	8002b78 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f042 020c 	orr.w	r2, r2, #12
 8002b74:	605a      	str	r2, [r3, #4]
          break;
 8002b76:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d107      	bne.n	8002b90 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0210 	bic.w	r2, r2, #16
 8002b8e:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b98:	d004      	beq.n	8002ba4 <HAL_ADC_Start_IT+0x1bc>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a2e      	ldr	r2, [pc, #184]	; (8002c58 <HAL_ADC_Start_IT+0x270>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d106      	bne.n	8002bb2 <HAL_ADC_Start_IT+0x1ca>
 8002ba4:	4b2d      	ldr	r3, [pc, #180]	; (8002c5c <HAL_ADC_Start_IT+0x274>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d03e      	beq.n	8002c2e <HAL_ADC_Start_IT+0x246>
 8002bb0:	e005      	b.n	8002bbe <HAL_ADC_Start_IT+0x1d6>
 8002bb2:	4b2b      	ldr	r3, [pc, #172]	; (8002c60 <HAL_ADC_Start_IT+0x278>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 031f 	and.w	r3, r3, #31
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d037      	beq.n	8002c2e <HAL_ADC_Start_IT+0x246>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bc6:	d004      	beq.n	8002bd2 <HAL_ADC_Start_IT+0x1ea>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a22      	ldr	r2, [pc, #136]	; (8002c58 <HAL_ADC_Start_IT+0x270>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d106      	bne.n	8002be0 <HAL_ADC_Start_IT+0x1f8>
 8002bd2:	4b22      	ldr	r3, [pc, #136]	; (8002c5c <HAL_ADC_Start_IT+0x274>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 031f 	and.w	r3, r3, #31
 8002bda:	2b05      	cmp	r3, #5
 8002bdc:	d027      	beq.n	8002c2e <HAL_ADC_Start_IT+0x246>
 8002bde:	e005      	b.n	8002bec <HAL_ADC_Start_IT+0x204>
 8002be0:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <HAL_ADC_Start_IT+0x278>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	d020      	beq.n	8002c2e <HAL_ADC_Start_IT+0x246>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bf4:	d004      	beq.n	8002c00 <HAL_ADC_Start_IT+0x218>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a17      	ldr	r2, [pc, #92]	; (8002c58 <HAL_ADC_Start_IT+0x270>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d106      	bne.n	8002c0e <HAL_ADC_Start_IT+0x226>
 8002c00:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <HAL_ADC_Start_IT+0x274>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	2b09      	cmp	r3, #9
 8002c0a:	d010      	beq.n	8002c2e <HAL_ADC_Start_IT+0x246>
 8002c0c:	e005      	b.n	8002c1a <HAL_ADC_Start_IT+0x232>
 8002c0e:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <HAL_ADC_Start_IT+0x278>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	2b09      	cmp	r3, #9
 8002c18:	d009      	beq.n	8002c2e <HAL_ADC_Start_IT+0x246>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c22:	d004      	beq.n	8002c2e <HAL_ADC_Start_IT+0x246>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0e      	ldr	r2, [pc, #56]	; (8002c64 <HAL_ADC_Start_IT+0x27c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d10f      	bne.n	8002c4e <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0204 	orr.w	r2, r2, #4
 8002c3c:	609a      	str	r2, [r3, #8]
 8002c3e:	e006      	b.n	8002c4e <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c48:	e001      	b.n	8002c4e <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	50000100 	.word	0x50000100
 8002c5c:	50000300 	.word	0x50000300
 8002c60:	50000700 	.word	0x50000700
 8002c64:	50000400 	.word	0x50000400

08002c68 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d004      	beq.n	8002cbc <HAL_ADC_IRQHandler+0x38>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10b      	bne.n	8002cd4 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 80bd 	beq.w	8002e42 <HAL_ADC_IRQHandler+0x1be>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 80b7 	beq.w	8002e42 <HAL_ADC_IRQHandler+0x1be>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d105      	bne.n	8002cec <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf4:	d004      	beq.n	8002d00 <HAL_ADC_IRQHandler+0x7c>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a90      	ldr	r2, [pc, #576]	; (8002f3c <HAL_ADC_IRQHandler+0x2b8>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d106      	bne.n	8002d0e <HAL_ADC_IRQHandler+0x8a>
 8002d00:	4b8f      	ldr	r3, [pc, #572]	; (8002f40 <HAL_ADC_IRQHandler+0x2bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 031f 	and.w	r3, r3, #31
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d03e      	beq.n	8002d8a <HAL_ADC_IRQHandler+0x106>
 8002d0c:	e005      	b.n	8002d1a <HAL_ADC_IRQHandler+0x96>
 8002d0e:	4b8d      	ldr	r3, [pc, #564]	; (8002f44 <HAL_ADC_IRQHandler+0x2c0>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d037      	beq.n	8002d8a <HAL_ADC_IRQHandler+0x106>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d22:	d004      	beq.n	8002d2e <HAL_ADC_IRQHandler+0xaa>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a84      	ldr	r2, [pc, #528]	; (8002f3c <HAL_ADC_IRQHandler+0x2b8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d106      	bne.n	8002d3c <HAL_ADC_IRQHandler+0xb8>
 8002d2e:	4b84      	ldr	r3, [pc, #528]	; (8002f40 <HAL_ADC_IRQHandler+0x2bc>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	2b05      	cmp	r3, #5
 8002d38:	d027      	beq.n	8002d8a <HAL_ADC_IRQHandler+0x106>
 8002d3a:	e005      	b.n	8002d48 <HAL_ADC_IRQHandler+0xc4>
 8002d3c:	4b81      	ldr	r3, [pc, #516]	; (8002f44 <HAL_ADC_IRQHandler+0x2c0>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	2b05      	cmp	r3, #5
 8002d46:	d020      	beq.n	8002d8a <HAL_ADC_IRQHandler+0x106>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d50:	d004      	beq.n	8002d5c <HAL_ADC_IRQHandler+0xd8>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a79      	ldr	r2, [pc, #484]	; (8002f3c <HAL_ADC_IRQHandler+0x2b8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d106      	bne.n	8002d6a <HAL_ADC_IRQHandler+0xe6>
 8002d5c:	4b78      	ldr	r3, [pc, #480]	; (8002f40 <HAL_ADC_IRQHandler+0x2bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	2b09      	cmp	r3, #9
 8002d66:	d010      	beq.n	8002d8a <HAL_ADC_IRQHandler+0x106>
 8002d68:	e005      	b.n	8002d76 <HAL_ADC_IRQHandler+0xf2>
 8002d6a:	4b76      	ldr	r3, [pc, #472]	; (8002f44 <HAL_ADC_IRQHandler+0x2c0>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 031f 	and.w	r3, r3, #31
 8002d72:	2b09      	cmp	r3, #9
 8002d74:	d009      	beq.n	8002d8a <HAL_ADC_IRQHandler+0x106>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d7e:	d004      	beq.n	8002d8a <HAL_ADC_IRQHandler+0x106>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a70      	ldr	r2, [pc, #448]	; (8002f48 <HAL_ADC_IRQHandler+0x2c4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d104      	bne.n	8002d94 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	61bb      	str	r3, [r7, #24]
 8002d92:	e00f      	b.n	8002db4 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d9c:	d004      	beq.n	8002da8 <HAL_ADC_IRQHandler+0x124>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a66      	ldr	r2, [pc, #408]	; (8002f3c <HAL_ADC_IRQHandler+0x2b8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d102      	bne.n	8002dae <HAL_ADC_IRQHandler+0x12a>
 8002da8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002dac:	e000      	b.n	8002db0 <HAL_ADC_IRQHandler+0x12c>
 8002dae:	4b66      	ldr	r3, [pc, #408]	; (8002f48 <HAL_ADC_IRQHandler+0x2c4>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d137      	bne.n	8002e32 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d132      	bne.n	8002e32 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d02d      	beq.n	8002e32 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d11a      	bne.n	8002e1a <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 020c 	bic.w	r2, r2, #12
 8002df2:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d112      	bne.n	8002e32 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	f043 0201 	orr.w	r2, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	641a      	str	r2, [r3, #64]	; 0x40
 8002e18:	e00b      	b.n	8002e32 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f043 0210 	orr.w	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	f043 0201 	orr.w	r2, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	645a      	str	r2, [r3, #68]	; 0x44
    /* Conversion complete callback */
    /* Note: into callback, to determine if conversion has been triggered     */
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	4798      	blx	r3
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	220c      	movs	r2, #12
 8002e40:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d004      	beq.n	8002e56 <HAL_ADC_IRQHandler+0x1d2>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10b      	bne.n	8002e6e <HAL_ADC_IRQHandler+0x1ea>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 8138 	beq.w	80030d2 <HAL_ADC_IRQHandler+0x44e>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 8132 	beq.w	80030d2 <HAL_ADC_IRQHandler+0x44e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e82:	d004      	beq.n	8002e8e <HAL_ADC_IRQHandler+0x20a>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a2c      	ldr	r2, [pc, #176]	; (8002f3c <HAL_ADC_IRQHandler+0x2b8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d106      	bne.n	8002e9c <HAL_ADC_IRQHandler+0x218>
 8002e8e:	4b2c      	ldr	r3, [pc, #176]	; (8002f40 <HAL_ADC_IRQHandler+0x2bc>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d03e      	beq.n	8002f18 <HAL_ADC_IRQHandler+0x294>
 8002e9a:	e005      	b.n	8002ea8 <HAL_ADC_IRQHandler+0x224>
 8002e9c:	4b29      	ldr	r3, [pc, #164]	; (8002f44 <HAL_ADC_IRQHandler+0x2c0>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 031f 	and.w	r3, r3, #31
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d037      	beq.n	8002f18 <HAL_ADC_IRQHandler+0x294>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eb0:	d004      	beq.n	8002ebc <HAL_ADC_IRQHandler+0x238>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a21      	ldr	r2, [pc, #132]	; (8002f3c <HAL_ADC_IRQHandler+0x2b8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d106      	bne.n	8002eca <HAL_ADC_IRQHandler+0x246>
 8002ebc:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <HAL_ADC_IRQHandler+0x2bc>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	2b05      	cmp	r3, #5
 8002ec6:	d027      	beq.n	8002f18 <HAL_ADC_IRQHandler+0x294>
 8002ec8:	e005      	b.n	8002ed6 <HAL_ADC_IRQHandler+0x252>
 8002eca:	4b1e      	ldr	r3, [pc, #120]	; (8002f44 <HAL_ADC_IRQHandler+0x2c0>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	2b05      	cmp	r3, #5
 8002ed4:	d020      	beq.n	8002f18 <HAL_ADC_IRQHandler+0x294>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ede:	d004      	beq.n	8002eea <HAL_ADC_IRQHandler+0x266>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a15      	ldr	r2, [pc, #84]	; (8002f3c <HAL_ADC_IRQHandler+0x2b8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d106      	bne.n	8002ef8 <HAL_ADC_IRQHandler+0x274>
 8002eea:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <HAL_ADC_IRQHandler+0x2bc>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 031f 	and.w	r3, r3, #31
 8002ef2:	2b09      	cmp	r3, #9
 8002ef4:	d010      	beq.n	8002f18 <HAL_ADC_IRQHandler+0x294>
 8002ef6:	e005      	b.n	8002f04 <HAL_ADC_IRQHandler+0x280>
 8002ef8:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_ADC_IRQHandler+0x2c0>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	2b09      	cmp	r3, #9
 8002f02:	d009      	beq.n	8002f18 <HAL_ADC_IRQHandler+0x294>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f0c:	d004      	beq.n	8002f18 <HAL_ADC_IRQHandler+0x294>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a0d      	ldr	r2, [pc, #52]	; (8002f48 <HAL_ADC_IRQHandler+0x2c4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d104      	bne.n	8002f22 <HAL_ADC_IRQHandler+0x29e>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	61bb      	str	r3, [r7, #24]
 8002f20:	e017      	b.n	8002f52 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f2a:	d004      	beq.n	8002f36 <HAL_ADC_IRQHandler+0x2b2>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a02      	ldr	r2, [pc, #8]	; (8002f3c <HAL_ADC_IRQHandler+0x2b8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d10a      	bne.n	8002f4c <HAL_ADC_IRQHandler+0x2c8>
 8002f36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f3a:	e008      	b.n	8002f4e <HAL_ADC_IRQHandler+0x2ca>
 8002f3c:	50000100 	.word	0x50000100
 8002f40:	50000300 	.word	0x50000300
 8002f44:	50000700 	.word	0x50000700
 8002f48:	50000400 	.word	0x50000400
 8002f4c:	4b93      	ldr	r3, [pc, #588]	; (800319c <HAL_ADC_IRQHandler+0x518>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f58:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f040 80b0 	bne.w	80030c2 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00d      	beq.n	8002f88 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 80a3 	bne.w	80030c2 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f040 809d 	bne.w	80030c2 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8097 	beq.w	80030c2 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f9c:	d004      	beq.n	8002fa8 <HAL_ADC_IRQHandler+0x324>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a7f      	ldr	r2, [pc, #508]	; (80031a0 <HAL_ADC_IRQHandler+0x51c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d106      	bne.n	8002fb6 <HAL_ADC_IRQHandler+0x332>
 8002fa8:	4b7e      	ldr	r3, [pc, #504]	; (80031a4 <HAL_ADC_IRQHandler+0x520>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d03e      	beq.n	8003032 <HAL_ADC_IRQHandler+0x3ae>
 8002fb4:	e005      	b.n	8002fc2 <HAL_ADC_IRQHandler+0x33e>
 8002fb6:	4b7c      	ldr	r3, [pc, #496]	; (80031a8 <HAL_ADC_IRQHandler+0x524>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d037      	beq.n	8003032 <HAL_ADC_IRQHandler+0x3ae>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fca:	d004      	beq.n	8002fd6 <HAL_ADC_IRQHandler+0x352>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a73      	ldr	r2, [pc, #460]	; (80031a0 <HAL_ADC_IRQHandler+0x51c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d106      	bne.n	8002fe4 <HAL_ADC_IRQHandler+0x360>
 8002fd6:	4b73      	ldr	r3, [pc, #460]	; (80031a4 <HAL_ADC_IRQHandler+0x520>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	2b06      	cmp	r3, #6
 8002fe0:	d027      	beq.n	8003032 <HAL_ADC_IRQHandler+0x3ae>
 8002fe2:	e005      	b.n	8002ff0 <HAL_ADC_IRQHandler+0x36c>
 8002fe4:	4b70      	ldr	r3, [pc, #448]	; (80031a8 <HAL_ADC_IRQHandler+0x524>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	2b06      	cmp	r3, #6
 8002fee:	d020      	beq.n	8003032 <HAL_ADC_IRQHandler+0x3ae>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ff8:	d004      	beq.n	8003004 <HAL_ADC_IRQHandler+0x380>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a68      	ldr	r2, [pc, #416]	; (80031a0 <HAL_ADC_IRQHandler+0x51c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d106      	bne.n	8003012 <HAL_ADC_IRQHandler+0x38e>
 8003004:	4b67      	ldr	r3, [pc, #412]	; (80031a4 <HAL_ADC_IRQHandler+0x520>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	2b07      	cmp	r3, #7
 800300e:	d010      	beq.n	8003032 <HAL_ADC_IRQHandler+0x3ae>
 8003010:	e005      	b.n	800301e <HAL_ADC_IRQHandler+0x39a>
 8003012:	4b65      	ldr	r3, [pc, #404]	; (80031a8 <HAL_ADC_IRQHandler+0x524>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 031f 	and.w	r3, r3, #31
 800301a:	2b07      	cmp	r3, #7
 800301c:	d009      	beq.n	8003032 <HAL_ADC_IRQHandler+0x3ae>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003026:	d004      	beq.n	8003032 <HAL_ADC_IRQHandler+0x3ae>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a5b      	ldr	r2, [pc, #364]	; (800319c <HAL_ADC_IRQHandler+0x518>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d104      	bne.n	800303c <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	e00f      	b.n	800305c <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003044:	d004      	beq.n	8003050 <HAL_ADC_IRQHandler+0x3cc>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a55      	ldr	r2, [pc, #340]	; (80031a0 <HAL_ADC_IRQHandler+0x51c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d102      	bne.n	8003056 <HAL_ADC_IRQHandler+0x3d2>
 8003050:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003054:	e000      	b.n	8003058 <HAL_ADC_IRQHandler+0x3d4>
 8003056:	4b51      	ldr	r3, [pc, #324]	; (800319c <HAL_ADC_IRQHandler+0x518>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d12d      	bne.n	80030c2 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b00      	cmp	r3, #0
 8003072:	d11a      	bne.n	80030aa <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003082:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d112      	bne.n	80030c2 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	f043 0201 	orr.w	r2, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	641a      	str	r2, [r3, #64]	; 0x40
 80030a8:	e00b      	b.n	80030c2 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f043 0210 	orr.w	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	f043 0201 	orr.w	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Conversion complete callback */
    /* Note: into callback, to determine if conversion has been triggered     */
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2260      	movs	r2, #96	; 0x60
 80030d0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d012      	beq.n	8003102 <HAL_ADC_IRQHandler+0x47e>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00d      	beq.n	8003102 <HAL_ADC_IRQHandler+0x47e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2280      	movs	r2, #128	; 0x80
 8003100:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d012      	beq.n	8003132 <HAL_ADC_IRQHandler+0x4ae>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00d      	beq.n	8003132 <HAL_ADC_IRQHandler+0x4ae>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f8ac 	bl	8003280 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003130:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003138:	2b00      	cmp	r3, #0
 800313a:	d012      	beq.n	8003162 <HAL_ADC_IRQHandler+0x4de>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00d      	beq.n	8003162 <HAL_ADC_IRQHandler+0x4de>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f89e 	bl	8003294 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003160:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b00      	cmp	r3, #0
 800316a:	d050      	beq.n	800320e <HAL_ADC_IRQHandler+0x58a>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 0310 	and.w	r3, r3, #16
 8003172:	2b00      	cmp	r3, #0
 8003174:	d04b      	beq.n	800320e <HAL_ADC_IRQHandler+0x58a>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317a:	2b01      	cmp	r3, #1
 800317c:	d102      	bne.n	8003184 <HAL_ADC_IRQHandler+0x500>
    {
      overrun_error = 1U;
 800317e:	2301      	movs	r3, #1
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	e02d      	b.n	80031e0 <HAL_ADC_IRQHandler+0x55c>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800318c:	d004      	beq.n	8003198 <HAL_ADC_IRQHandler+0x514>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a03      	ldr	r2, [pc, #12]	; (80031a0 <HAL_ADC_IRQHandler+0x51c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d109      	bne.n	80031ac <HAL_ADC_IRQHandler+0x528>
 8003198:	4b02      	ldr	r3, [pc, #8]	; (80031a4 <HAL_ADC_IRQHandler+0x520>)
 800319a:	e008      	b.n	80031ae <HAL_ADC_IRQHandler+0x52a>
 800319c:	50000400 	.word	0x50000400
 80031a0:	50000100 	.word	0x50000100
 80031a4:	50000300 	.word	0x50000300
 80031a8:	50000700 	.word	0x50000700
 80031ac:	4b29      	ldr	r3, [pc, #164]	; (8003254 <HAL_ADC_IRQHandler+0x5d0>)
 80031ae:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d109      	bne.n	80031d0 <HAL_ADC_IRQHandler+0x54c>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d10a      	bne.n	80031e0 <HAL_ADC_IRQHandler+0x55c>
        {
          overrun_error = 1U;  
 80031ca:	2301      	movs	r3, #1
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	e007      	b.n	80031e0 <HAL_ADC_IRQHandler+0x55c>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_ADC_IRQHandler+0x55c>
        {
          overrun_error = 1U;  
 80031dc:	2301      	movs	r3, #1
 80031de:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d10f      	bne.n	8003206 <HAL_ADC_IRQHandler+0x582>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f6:	f043 0202 	orr.w	r2, r3, #2
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	4798      	blx	r3
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2210      	movs	r2, #16
 800320c:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003214:	2b00      	cmp	r3, #0
 8003216:	d018      	beq.n	800324a <HAL_ADC_IRQHandler+0x5c6>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321e:	2b00      	cmp	r3, #0
 8003220:	d013      	beq.n	800324a <HAL_ADC_IRQHandler+0x5c6>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	f043 0208 	orr.w	r2, r3, #8
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003242:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f811 	bl	800326c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800324a:	bf00      	nop
 800324c:	3720      	adds	r7, #32
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	50000700 	.word	0x50000700

08003258 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b0a3      	sub	sp, #140	; 0x8c
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x22>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e2ce      	b.n	8003868 <HAL_ADC_ConfigChannel+0x5c0>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f040 82b2 	bne.w	8003846 <HAL_ADC_ConfigChannel+0x59e>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d81c      	bhi.n	8003324 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	4413      	add	r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	461a      	mov	r2, r3
 80032fe:	231f      	movs	r3, #31
 8003300:	4093      	lsls	r3, r2
 8003302:	43db      	mvns	r3, r3
 8003304:	4019      	ands	r1, r3
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	4413      	add	r3, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	fa00 f203 	lsl.w	r2, r0, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	631a      	str	r2, [r3, #48]	; 0x30
 8003322:	e063      	b.n	80033ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b09      	cmp	r3, #9
 800332a:	d81e      	bhi.n	800336a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4413      	add	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	3b1e      	subs	r3, #30
 8003340:	221f      	movs	r2, #31
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	4019      	ands	r1, r3
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4413      	add	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	3b1e      	subs	r3, #30
 800335c:	fa00 f203 	lsl.w	r2, r0, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	635a      	str	r2, [r3, #52]	; 0x34
 8003368:	e040      	b.n	80033ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b0e      	cmp	r3, #14
 8003370:	d81e      	bhi.n	80033b0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	4413      	add	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	3b3c      	subs	r3, #60	; 0x3c
 8003386:	221f      	movs	r2, #31
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	4019      	ands	r1, r3
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	3b3c      	subs	r3, #60	; 0x3c
 80033a2:	fa00 f203 	lsl.w	r2, r0, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	639a      	str	r2, [r3, #56]	; 0x38
 80033ae:	e01d      	b.n	80033ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	3b5a      	subs	r3, #90	; 0x5a
 80033c4:	221f      	movs	r2, #31
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	4019      	ands	r1, r3
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4413      	add	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	3b5a      	subs	r3, #90	; 0x5a
 80033e0:	fa00 f203 	lsl.w	r2, r0, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f040 80e9 	bne.w	80035ce <HAL_ADC_ConfigChannel+0x326>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b09      	cmp	r3, #9
 8003402:	d91c      	bls.n	800343e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6999      	ldr	r1, [r3, #24]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	4613      	mov	r3, r2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4413      	add	r3, r2
 8003414:	3b1e      	subs	r3, #30
 8003416:	2207      	movs	r2, #7
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	4019      	ands	r1, r3
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	6898      	ldr	r0, [r3, #8]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4613      	mov	r3, r2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	4413      	add	r3, r2
 800342e:	3b1e      	subs	r3, #30
 8003430:	fa00 f203 	lsl.w	r2, r0, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	619a      	str	r2, [r3, #24]
 800343c:	e019      	b.n	8003472 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6959      	ldr	r1, [r3, #20]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4613      	mov	r3, r2
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	4413      	add	r3, r2
 800344e:	2207      	movs	r2, #7
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	4019      	ands	r1, r3
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6898      	ldr	r0, [r3, #8]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4413      	add	r3, r2
 8003466:	fa00 f203 	lsl.w	r2, r0, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	695a      	ldr	r2, [r3, #20]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	08db      	lsrs	r3, r3, #3
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	3b01      	subs	r3, #1
 8003492:	2b03      	cmp	r3, #3
 8003494:	d852      	bhi.n	800353c <HAL_ADC_ConfigChannel+0x294>
 8003496:	a201      	add	r2, pc, #4	; (adr r2, 800349c <HAL_ADC_ConfigChannel+0x1f4>)
 8003498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349c:	080034ad 	.word	0x080034ad
 80034a0:	080034d1 	.word	0x080034d1
 80034a4:	080034f5 	.word	0x080034f5
 80034a8:	08003519 	.word	0x08003519
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034b2:	4b9c      	ldr	r3, [pc, #624]	; (8003724 <HAL_ADC_ConfigChannel+0x47c>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	6812      	ldr	r2, [r2, #0]
 80034ba:	0691      	lsls	r1, r2, #26
 80034bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034c0:	430a      	orrs	r2, r1
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034cc:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80034ce:	e081      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x32c>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80034d6:	4b93      	ldr	r3, [pc, #588]	; (8003724 <HAL_ADC_ConfigChannel+0x47c>)
 80034d8:	4013      	ands	r3, r2
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	6812      	ldr	r2, [r2, #0]
 80034de:	0691      	lsls	r1, r2, #26
 80034e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034e4:	430a      	orrs	r2, r1
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034f0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80034f2:	e06f      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x32c>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80034fa:	4b8a      	ldr	r3, [pc, #552]	; (8003724 <HAL_ADC_ConfigChannel+0x47c>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	0691      	lsls	r1, r2, #26
 8003504:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003508:	430a      	orrs	r2, r1
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003514:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003516:	e05d      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x32c>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800351e:	4b81      	ldr	r3, [pc, #516]	; (8003724 <HAL_ADC_ConfigChannel+0x47c>)
 8003520:	4013      	ands	r3, r2
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	6812      	ldr	r2, [r2, #0]
 8003526:	0691      	lsls	r1, r2, #26
 8003528:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800352c:	430a      	orrs	r2, r1
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003538:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800353a:	e04b      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x32c>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003542:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	069b      	lsls	r3, r3, #26
 800354c:	429a      	cmp	r2, r3
 800354e:	d107      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x2b8>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800355e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003566:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	069b      	lsls	r3, r3, #26
 8003570:	429a      	cmp	r2, r3
 8003572:	d107      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x2dc>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003582:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800358a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	069b      	lsls	r3, r3, #26
 8003594:	429a      	cmp	r2, r3
 8003596:	d107      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x300>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035a6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	069b      	lsls	r3, r3, #26
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d10a      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x32a>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035ca:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80035cc:	e001      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x32a>
    }

  }
 80035ce:	bf00      	nop
 80035d0:	e000      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x32c>
      break;
 80035d2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d108      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x34c>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x34c>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x34e>
 80035f4:	2300      	movs	r3, #0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f040 8130 	bne.w	800385c <HAL_ADC_ConfigChannel+0x5b4>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d00f      	beq.n	8003624 <HAL_ADC_ConfigChannel+0x37c>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2201      	movs	r2, #1
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43da      	mvns	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	400a      	ands	r2, r1
 800361e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003622:	e049      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x410>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2201      	movs	r2, #1
 8003632:	409a      	lsls	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b09      	cmp	r3, #9
 8003644:	d91c      	bls.n	8003680 <HAL_ADC_ConfigChannel+0x3d8>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6999      	ldr	r1, [r3, #24]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	4613      	mov	r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	4413      	add	r3, r2
 8003656:	3b1b      	subs	r3, #27
 8003658:	2207      	movs	r2, #7
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43db      	mvns	r3, r3
 8003660:	4019      	ands	r1, r3
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	6898      	ldr	r0, [r3, #8]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	4613      	mov	r3, r2
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	4413      	add	r3, r2
 8003670:	3b1b      	subs	r3, #27
 8003672:	fa00 f203 	lsl.w	r2, r0, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	619a      	str	r2, [r3, #24]
 800367e:	e01b      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x410>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6959      	ldr	r1, [r3, #20]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	4613      	mov	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	4413      	add	r3, r2
 8003692:	2207      	movs	r2, #7
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	43db      	mvns	r3, r3
 800369a:	4019      	ands	r1, r3
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	6898      	ldr	r0, [r3, #8]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	4613      	mov	r3, r2
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	4413      	add	r3, r2
 80036ac:	fa00 f203 	lsl.w	r2, r0, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036c0:	d004      	beq.n	80036cc <HAL_ADC_ConfigChannel+0x424>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a18      	ldr	r2, [pc, #96]	; (8003728 <HAL_ADC_ConfigChannel+0x480>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x428>
 80036cc:	4b17      	ldr	r3, [pc, #92]	; (800372c <HAL_ADC_ConfigChannel+0x484>)
 80036ce:	e000      	b.n	80036d2 <HAL_ADC_ConfigChannel+0x42a>
 80036d0:	4b17      	ldr	r3, [pc, #92]	; (8003730 <HAL_ADC_ConfigChannel+0x488>)
 80036d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d105      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x440>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80036dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d015      	beq.n	8003714 <HAL_ADC_ConfigChannel+0x46c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80036ec:	2b11      	cmp	r3, #17
 80036ee:	d105      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x454>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80036f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00b      	beq.n	8003714 <HAL_ADC_ConfigChannel+0x46c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003700:	2b12      	cmp	r3, #18
 8003702:	f040 80ab 	bne.w	800385c <HAL_ADC_ConfigChannel+0x5b4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003706:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800370e:	2b00      	cmp	r3, #0
 8003710:	f040 80a4 	bne.w	800385c <HAL_ADC_ConfigChannel+0x5b4>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800371c:	d10a      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x48c>
 800371e:	4b02      	ldr	r3, [pc, #8]	; (8003728 <HAL_ADC_ConfigChannel+0x480>)
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	e022      	b.n	800376a <HAL_ADC_ConfigChannel+0x4c2>
 8003724:	83fff000 	.word	0x83fff000
 8003728:	50000100 	.word	0x50000100
 800372c:	50000300 	.word	0x50000300
 8003730:	50000700 	.word	0x50000700
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a4e      	ldr	r2, [pc, #312]	; (8003874 <HAL_ADC_ConfigChannel+0x5cc>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d103      	bne.n	8003746 <HAL_ADC_ConfigChannel+0x49e>
 800373e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	e011      	b.n	800376a <HAL_ADC_ConfigChannel+0x4c2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a4b      	ldr	r2, [pc, #300]	; (8003878 <HAL_ADC_ConfigChannel+0x5d0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d102      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x4ae>
 8003750:	4b4a      	ldr	r3, [pc, #296]	; (800387c <HAL_ADC_ConfigChannel+0x5d4>)
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	e009      	b.n	800376a <HAL_ADC_ConfigChannel+0x4c2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a48      	ldr	r2, [pc, #288]	; (800387c <HAL_ADC_ConfigChannel+0x5d4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d102      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x4be>
 8003760:	4b45      	ldr	r3, [pc, #276]	; (8003878 <HAL_ADC_ConfigChannel+0x5d0>)
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	e001      	b.n	800376a <HAL_ADC_ConfigChannel+0x4c2>
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	2b01      	cmp	r3, #1
 8003776:	d108      	bne.n	800378a <HAL_ADC_ConfigChannel+0x4e2>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_ADC_ConfigChannel+0x4e2>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <HAL_ADC_ConfigChannel+0x4e4>
 800378a:	2300      	movs	r3, #0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d150      	bne.n	8003832 <HAL_ADC_ConfigChannel+0x58a>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003790:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003792:	2b00      	cmp	r3, #0
 8003794:	d010      	beq.n	80037b8 <HAL_ADC_ConfigChannel+0x510>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d107      	bne.n	80037b2 <HAL_ADC_ConfigChannel+0x50a>
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_ADC_ConfigChannel+0x50a>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x50c>
 80037b2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d13c      	bne.n	8003832 <HAL_ADC_ConfigChannel+0x58a>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b10      	cmp	r3, #16
 80037be:	d11d      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x554>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037c8:	d118      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x554>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80037ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80037d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037d4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037d6:	4b2a      	ldr	r3, [pc, #168]	; (8003880 <HAL_ADC_ConfigChannel+0x5d8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2a      	ldr	r2, [pc, #168]	; (8003884 <HAL_ADC_ConfigChannel+0x5dc>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	0c9a      	lsrs	r2, r3, #18
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80037ec:	e002      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x54c>
          {
            wait_loop_index--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f9      	bne.n	80037ee <HAL_ADC_ConfigChannel+0x546>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80037fa:	e02e      	b.n	800385a <HAL_ADC_ConfigChannel+0x5b2>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b11      	cmp	r3, #17
 8003802:	d10b      	bne.n	800381c <HAL_ADC_ConfigChannel+0x574>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800380c:	d106      	bne.n	800381c <HAL_ADC_ConfigChannel+0x574>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800380e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003816:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003818:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800381a:	e01e      	b.n	800385a <HAL_ADC_ConfigChannel+0x5b2>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b12      	cmp	r3, #18
 8003822:	d11a      	bne.n	800385a <HAL_ADC_ConfigChannel+0x5b2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003824:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800382c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800382e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003830:	e013      	b.n	800385a <HAL_ADC_ConfigChannel+0x5b2>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f043 0220 	orr.w	r2, r3, #32
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003844:	e00a      	b.n	800385c <HAL_ADC_ConfigChannel+0x5b4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	f043 0220 	orr.w	r2, r3, #32
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003858:	e000      	b.n	800385c <HAL_ADC_ConfigChannel+0x5b4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800385a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003864:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003868:	4618      	mov	r0, r3
 800386a:	378c      	adds	r7, #140	; 0x8c
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	50000100 	.word	0x50000100
 8003878:	50000400 	.word	0x50000400
 800387c:	50000500 	.word	0x50000500
 8003880:	20000008 	.word	0x20000008
 8003884:	431bde83 	.word	0x431bde83

08003888 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003888:	b480      	push	{r7}
 800388a:	b0a1      	sub	sp, #132	; 0x84
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038a0:	d102      	bne.n	80038a8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80038a2:	4b6d      	ldr	r3, [pc, #436]	; (8003a58 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	e01a      	b.n	80038de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a6a      	ldr	r2, [pc, #424]	; (8003a58 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d103      	bne.n	80038ba <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80038b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	e011      	b.n	80038de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a67      	ldr	r2, [pc, #412]	; (8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d102      	bne.n	80038ca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80038c4:	4b66      	ldr	r3, [pc, #408]	; (8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	e009      	b.n	80038de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a64      	ldr	r2, [pc, #400]	; (8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d102      	bne.n	80038da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80038d4:	4b61      	ldr	r3, [pc, #388]	; (8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	e001      	b.n	80038de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0b0      	b.n	8003a4a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e0a9      	b.n	8003a4a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	f040 808d 	bne.w	8003a28 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b00      	cmp	r3, #0
 8003918:	f040 8086 	bne.w	8003a28 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003924:	d004      	beq.n	8003930 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a4b      	ldr	r2, [pc, #300]	; (8003a58 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d101      	bne.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003930:	4b4c      	ldr	r3, [pc, #304]	; (8003a64 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003932:	e000      	b.n	8003936 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003934:	4b4c      	ldr	r3, [pc, #304]	; (8003a68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003936:	67bb      	str	r3, [r7, #120]	; 0x78
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d040      	beq.n	80039c2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	6859      	ldr	r1, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003952:	035b      	lsls	r3, r3, #13
 8003954:	430b      	orrs	r3, r1
 8003956:	431a      	orrs	r2, r3
 8003958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800395a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	2b01      	cmp	r3, #1
 8003968:	d108      	bne.n	800397c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800397c:	2300      	movs	r3, #0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d15c      	bne.n	8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b01      	cmp	r3, #1
 800398c:	d107      	bne.n	800399e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800399e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d14b      	bne.n	8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80039a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80039ac:	f023 030f 	bic.w	r3, r3, #15
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	6811      	ldr	r1, [r2, #0]
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	6892      	ldr	r2, [r2, #8]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	431a      	orrs	r2, r3
 80039bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039be:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80039c0:	e03c      	b.n	8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80039c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039cc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d108      	bne.n	80039ee <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80039ee:	2300      	movs	r3, #0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d123      	bne.n	8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d107      	bne.n	8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003a10:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d112      	bne.n	8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a1e:	f023 030f 	bic.w	r3, r3, #15
 8003a22:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a24:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a26:	e009      	b.n	8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	f043 0220 	orr.w	r2, r3, #32
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003a3a:	e000      	b.n	8003a3e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a3c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003a46:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
} 
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3784      	adds	r7, #132	; 0x84
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	50000100 	.word	0x50000100
 8003a5c:	50000400 	.word	0x50000400
 8003a60:	50000500 	.word	0x50000500
 8003a64:	50000300 	.word	0x50000300
 8003a68:	50000700 	.word	0x50000700

08003a6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d108      	bne.n	8003a98 <ADC_Enable+0x2c>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <ADC_Enable+0x2c>
 8003a94:	2301      	movs	r3, #1
 8003a96:	e000      	b.n	8003a9a <ADC_Enable+0x2e>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d143      	bne.n	8003b26 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	4b22      	ldr	r3, [pc, #136]	; (8003b30 <ADC_Enable+0xc4>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00d      	beq.n	8003ac8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	f043 0210 	orr.w	r2, r3, #16
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abc:	f043 0201 	orr.w	r2, r3, #1
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e02f      	b.n	8003b28 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003ad8:	f7fe fd00 	bl	80024dc <HAL_GetTick>
 8003adc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003ade:	e01b      	b.n	8003b18 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ae0:	f7fe fcfc 	bl	80024dc <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d914      	bls.n	8003b18 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d00d      	beq.n	8003b18 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	f043 0210 	orr.w	r2, r3, #16
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	f043 0201 	orr.w	r2, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e007      	b.n	8003b28 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d1dc      	bne.n	8003ae0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	8000003f 	.word	0x8000003f

08003b34 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d108      	bne.n	8003b60 <ADC_Disable+0x2c>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <ADC_Disable+0x2c>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <ADC_Disable+0x2e>
 8003b60:	2300      	movs	r3, #0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d047      	beq.n	8003bf6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 030d 	and.w	r3, r3, #13
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d10f      	bne.n	8003b94 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0202 	orr.w	r2, r2, #2
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2203      	movs	r2, #3
 8003b8a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003b8c:	f7fe fca6 	bl	80024dc <HAL_GetTick>
 8003b90:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b92:	e029      	b.n	8003be8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	f043 0210 	orr.w	r2, r3, #16
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba4:	f043 0201 	orr.w	r2, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e023      	b.n	8003bf8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003bb0:	f7fe fc94 	bl	80024dc <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d914      	bls.n	8003be8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d10d      	bne.n	8003be8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	f043 0210 	orr.w	r2, r3, #16
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bdc:	f043 0201 	orr.w	r2, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e007      	b.n	8003bf8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d0dc      	beq.n	8003bb0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c10:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <__NVIC_SetPriorityGrouping+0x44>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c32:	4a04      	ldr	r2, [pc, #16]	; (8003c44 <__NVIC_SetPriorityGrouping+0x44>)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	60d3      	str	r3, [r2, #12]
}
 8003c38:	bf00      	nop
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	e000ed00 	.word	0xe000ed00

08003c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c4c:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <__NVIC_GetPriorityGrouping+0x18>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	0a1b      	lsrs	r3, r3, #8
 8003c52:	f003 0307 	and.w	r3, r3, #7
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	db0b      	blt.n	8003c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	f003 021f 	and.w	r2, r3, #31
 8003c7c:	4907      	ldr	r1, [pc, #28]	; (8003c9c <__NVIC_EnableIRQ+0x38>)
 8003c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	2001      	movs	r0, #1
 8003c86:	fa00 f202 	lsl.w	r2, r0, r2
 8003c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	e000e100 	.word	0xe000e100

08003ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	6039      	str	r1, [r7, #0]
 8003caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	db0a      	blt.n	8003cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	490c      	ldr	r1, [pc, #48]	; (8003cec <__NVIC_SetPriority+0x4c>)
 8003cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cbe:	0112      	lsls	r2, r2, #4
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cc8:	e00a      	b.n	8003ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	4908      	ldr	r1, [pc, #32]	; (8003cf0 <__NVIC_SetPriority+0x50>)
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	3b04      	subs	r3, #4
 8003cd8:	0112      	lsls	r2, r2, #4
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	440b      	add	r3, r1
 8003cde:	761a      	strb	r2, [r3, #24]
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	e000e100 	.word	0xe000e100
 8003cf0:	e000ed00 	.word	0xe000ed00

08003cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b089      	sub	sp, #36	; 0x24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f1c3 0307 	rsb	r3, r3, #7
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	bf28      	it	cs
 8003d12:	2304      	movcs	r3, #4
 8003d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	2b06      	cmp	r3, #6
 8003d1c:	d902      	bls.n	8003d24 <NVIC_EncodePriority+0x30>
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	3b03      	subs	r3, #3
 8003d22:	e000      	b.n	8003d26 <NVIC_EncodePriority+0x32>
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d28:	f04f 32ff 	mov.w	r2, #4294967295
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43da      	mvns	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	401a      	ands	r2, r3
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	fa01 f303 	lsl.w	r3, r1, r3
 8003d46:	43d9      	mvns	r1, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d4c:	4313      	orrs	r3, r2
         );
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3724      	adds	r7, #36	; 0x24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
	...

08003d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d6c:	d301      	bcc.n	8003d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e00f      	b.n	8003d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d72:	4a0a      	ldr	r2, [pc, #40]	; (8003d9c <SysTick_Config+0x40>)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d7a:	210f      	movs	r1, #15
 8003d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d80:	f7ff ff8e 	bl	8003ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <SysTick_Config+0x40>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d8a:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <SysTick_Config+0x40>)
 8003d8c:	2207      	movs	r2, #7
 8003d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	e000e010 	.word	0xe000e010

08003da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ff29 	bl	8003c00 <__NVIC_SetPriorityGrouping>
}
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b086      	sub	sp, #24
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
 8003dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dc8:	f7ff ff3e 	bl	8003c48 <__NVIC_GetPriorityGrouping>
 8003dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	6978      	ldr	r0, [r7, #20]
 8003dd4:	f7ff ff8e 	bl	8003cf4 <NVIC_EncodePriority>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dde:	4611      	mov	r1, r2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff5d 	bl	8003ca0 <__NVIC_SetPriority>
}
 8003de6:	bf00      	nop
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	4603      	mov	r3, r0
 8003df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff31 	bl	8003c64 <__NVIC_EnableIRQ>
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff ffa2 	bl	8003d5c <SysTick_Config>
 8003e18:	4603      	mov	r3, r0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e32:	e160      	b.n	80040f6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	2101      	movs	r1, #1
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e40:	4013      	ands	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 8152 	beq.w	80040f0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d005      	beq.n	8003e64 <HAL_GPIO_Init+0x40>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d130      	bne.n	8003ec6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	2203      	movs	r2, #3
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	091b      	lsrs	r3, r3, #4
 8003eb0:	f003 0201 	and.w	r2, r3, #1
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d017      	beq.n	8003f02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	2203      	movs	r2, #3
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d123      	bne.n	8003f56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	08da      	lsrs	r2, r3, #3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3208      	adds	r2, #8
 8003f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	220f      	movs	r2, #15
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	08da      	lsrs	r2, r3, #3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3208      	adds	r2, #8
 8003f50:	6939      	ldr	r1, [r7, #16]
 8003f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	2203      	movs	r2, #3
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f003 0203 	and.w	r2, r3, #3
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 80ac 	beq.w	80040f0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f98:	4b5e      	ldr	r3, [pc, #376]	; (8004114 <HAL_GPIO_Init+0x2f0>)
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	4a5d      	ldr	r2, [pc, #372]	; (8004114 <HAL_GPIO_Init+0x2f0>)
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	6193      	str	r3, [r2, #24]
 8003fa4:	4b5b      	ldr	r3, [pc, #364]	; (8004114 <HAL_GPIO_Init+0x2f0>)
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fb0:	4a59      	ldr	r2, [pc, #356]	; (8004118 <HAL_GPIO_Init+0x2f4>)
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	089b      	lsrs	r3, r3, #2
 8003fb6:	3302      	adds	r3, #2
 8003fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	220f      	movs	r2, #15
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fda:	d025      	beq.n	8004028 <HAL_GPIO_Init+0x204>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a4f      	ldr	r2, [pc, #316]	; (800411c <HAL_GPIO_Init+0x2f8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d01f      	beq.n	8004024 <HAL_GPIO_Init+0x200>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a4e      	ldr	r2, [pc, #312]	; (8004120 <HAL_GPIO_Init+0x2fc>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d019      	beq.n	8004020 <HAL_GPIO_Init+0x1fc>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a4d      	ldr	r2, [pc, #308]	; (8004124 <HAL_GPIO_Init+0x300>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d013      	beq.n	800401c <HAL_GPIO_Init+0x1f8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a4c      	ldr	r2, [pc, #304]	; (8004128 <HAL_GPIO_Init+0x304>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00d      	beq.n	8004018 <HAL_GPIO_Init+0x1f4>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a4b      	ldr	r2, [pc, #300]	; (800412c <HAL_GPIO_Init+0x308>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d007      	beq.n	8004014 <HAL_GPIO_Init+0x1f0>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a4a      	ldr	r2, [pc, #296]	; (8004130 <HAL_GPIO_Init+0x30c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d101      	bne.n	8004010 <HAL_GPIO_Init+0x1ec>
 800400c:	2306      	movs	r3, #6
 800400e:	e00c      	b.n	800402a <HAL_GPIO_Init+0x206>
 8004010:	2307      	movs	r3, #7
 8004012:	e00a      	b.n	800402a <HAL_GPIO_Init+0x206>
 8004014:	2305      	movs	r3, #5
 8004016:	e008      	b.n	800402a <HAL_GPIO_Init+0x206>
 8004018:	2304      	movs	r3, #4
 800401a:	e006      	b.n	800402a <HAL_GPIO_Init+0x206>
 800401c:	2303      	movs	r3, #3
 800401e:	e004      	b.n	800402a <HAL_GPIO_Init+0x206>
 8004020:	2302      	movs	r3, #2
 8004022:	e002      	b.n	800402a <HAL_GPIO_Init+0x206>
 8004024:	2301      	movs	r3, #1
 8004026:	e000      	b.n	800402a <HAL_GPIO_Init+0x206>
 8004028:	2300      	movs	r3, #0
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	f002 0203 	and.w	r2, r2, #3
 8004030:	0092      	lsls	r2, r2, #2
 8004032:	4093      	lsls	r3, r2
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800403a:	4937      	ldr	r1, [pc, #220]	; (8004118 <HAL_GPIO_Init+0x2f4>)
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	089b      	lsrs	r3, r3, #2
 8004040:	3302      	adds	r3, #2
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004048:	4b3a      	ldr	r3, [pc, #232]	; (8004134 <HAL_GPIO_Init+0x310>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	43db      	mvns	r3, r3
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4013      	ands	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800406c:	4a31      	ldr	r2, [pc, #196]	; (8004134 <HAL_GPIO_Init+0x310>)
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004072:	4b30      	ldr	r3, [pc, #192]	; (8004134 <HAL_GPIO_Init+0x310>)
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	43db      	mvns	r3, r3
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4013      	ands	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004096:	4a27      	ldr	r2, [pc, #156]	; (8004134 <HAL_GPIO_Init+0x310>)
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800409c:	4b25      	ldr	r3, [pc, #148]	; (8004134 <HAL_GPIO_Init+0x310>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	43db      	mvns	r3, r3
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4013      	ands	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80040c0:	4a1c      	ldr	r2, [pc, #112]	; (8004134 <HAL_GPIO_Init+0x310>)
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040c6:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <HAL_GPIO_Init+0x310>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	43db      	mvns	r3, r3
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4013      	ands	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80040ea:	4a12      	ldr	r2, [pc, #72]	; (8004134 <HAL_GPIO_Init+0x310>)
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	3301      	adds	r3, #1
 80040f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	f47f ae97 	bne.w	8003e34 <HAL_GPIO_Init+0x10>
  }
}
 8004106:	bf00      	nop
 8004108:	bf00      	nop
 800410a:	371c      	adds	r7, #28
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	40021000 	.word	0x40021000
 8004118:	40010000 	.word	0x40010000
 800411c:	48000400 	.word	0x48000400
 8004120:	48000800 	.word	0x48000800
 8004124:	48000c00 	.word	0x48000c00
 8004128:	48001000 	.word	0x48001000
 800412c:	48001400 	.word	0x48001400
 8004130:	48001800 	.word	0x48001800
 8004134:	40010400 	.word	0x40010400

08004138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	807b      	strh	r3, [r7, #2]
 8004144:	4613      	mov	r3, r2
 8004146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004148:	787b      	ldrb	r3, [r7, #1]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800414e:	887a      	ldrh	r2, [r7, #2]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004154:	e002      	b.n	800415c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004156:	887a      	ldrh	r2, [r7, #2]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800417a:	887a      	ldrh	r2, [r7, #2]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4013      	ands	r3, r2
 8004180:	041a      	lsls	r2, r3, #16
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	43d9      	mvns	r1, r3
 8004186:	887b      	ldrh	r3, [r7, #2]
 8004188:	400b      	ands	r3, r1
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	619a      	str	r2, [r3, #24]
}
 8004190:	bf00      	nop
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e081      	b.n	80042b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fd f956 	bl	8001474 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2224      	movs	r2, #36	; 0x24
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d107      	bne.n	8004216 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004212:	609a      	str	r2, [r3, #8]
 8004214:	e006      	b.n	8004224 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004222:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	2b02      	cmp	r3, #2
 800422a:	d104      	bne.n	8004236 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004234:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004248:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004258:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691a      	ldr	r2, [r3, #16]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69d9      	ldr	r1, [r3, #28]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a1a      	ldr	r2, [r3, #32]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	607a      	str	r2, [r7, #4]
 80042c6:	461a      	mov	r2, r3
 80042c8:	460b      	mov	r3, r1
 80042ca:	817b      	strh	r3, [r7, #10]
 80042cc:	4613      	mov	r3, r2
 80042ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b20      	cmp	r3, #32
 80042da:	f040 80da 	bne.w	8004492 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_I2C_Master_Transmit+0x30>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e0d3      	b.n	8004494 <HAL_I2C_Master_Transmit+0x1d8>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042f4:	f7fe f8f2 	bl	80024dc <HAL_GetTick>
 80042f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	2319      	movs	r3, #25
 8004300:	2201      	movs	r2, #1
 8004302:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 fa13 	bl	8004732 <I2C_WaitOnFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e0be      	b.n	8004494 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2221      	movs	r2, #33	; 0x21
 800431a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2210      	movs	r2, #16
 8004322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	893a      	ldrh	r2, [r7, #8]
 8004336:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004342:	b29b      	uxth	r3, r3
 8004344:	2bff      	cmp	r3, #255	; 0xff
 8004346:	d90e      	bls.n	8004366 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	22ff      	movs	r2, #255	; 0xff
 800434c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004352:	b2da      	uxtb	r2, r3
 8004354:	8979      	ldrh	r1, [r7, #10]
 8004356:	4b51      	ldr	r3, [pc, #324]	; (800449c <HAL_I2C_Master_Transmit+0x1e0>)
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 fba0 	bl	8004aa4 <I2C_TransferConfig>
 8004364:	e06c      	b.n	8004440 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004374:	b2da      	uxtb	r2, r3
 8004376:	8979      	ldrh	r1, [r7, #10]
 8004378:	4b48      	ldr	r3, [pc, #288]	; (800449c <HAL_I2C_Master_Transmit+0x1e0>)
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 fb8f 	bl	8004aa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004386:	e05b      	b.n	8004440 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	6a39      	ldr	r1, [r7, #32]
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 fa1f 	bl	80047d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e07b      	b.n	8004494 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d034      	beq.n	8004440 <HAL_I2C_Master_Transmit+0x184>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d130      	bne.n	8004440 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	2200      	movs	r2, #0
 80043e6:	2180      	movs	r1, #128	; 0x80
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 f9a2 	bl	8004732 <I2C_WaitOnFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e04d      	b.n	8004494 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2bff      	cmp	r3, #255	; 0xff
 8004400:	d90e      	bls.n	8004420 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	22ff      	movs	r2, #255	; 0xff
 8004406:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440c:	b2da      	uxtb	r2, r3
 800440e:	8979      	ldrh	r1, [r7, #10]
 8004410:	2300      	movs	r3, #0
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 fb43 	bl	8004aa4 <I2C_TransferConfig>
 800441e:	e00f      	b.n	8004440 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442e:	b2da      	uxtb	r2, r3
 8004430:	8979      	ldrh	r1, [r7, #10]
 8004432:	2300      	movs	r3, #0
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 fb32 	bl	8004aa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d19e      	bne.n	8004388 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	6a39      	ldr	r1, [r7, #32]
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 fa05 	bl	800485e <I2C_WaitOnSTOPFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e01a      	b.n	8004494 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2220      	movs	r2, #32
 8004464:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6859      	ldr	r1, [r3, #4]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <HAL_I2C_Master_Transmit+0x1e4>)
 8004472:	400b      	ands	r3, r1
 8004474:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2220      	movs	r2, #32
 800447a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	e000      	b.n	8004494 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004492:	2302      	movs	r3, #2
  }
}
 8004494:	4618      	mov	r0, r3
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	80002000 	.word	0x80002000
 80044a0:	fe00e800 	.word	0xfe00e800

080044a4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	; 0x28
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	607a      	str	r2, [r7, #4]
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	460b      	mov	r3, r1
 80044b2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	f040 80f3 	bne.w	80046ac <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044d4:	d101      	bne.n	80044da <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80044d6:	2302      	movs	r3, #2
 80044d8:	e0e9      	b.n	80046ae <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_I2C_IsDeviceReady+0x44>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e0e2      	b.n	80046ae <HAL_I2C_IsDeviceReady+0x20a>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2224      	movs	r2, #36	; 0x24
 80044f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d107      	bne.n	8004516 <HAL_I2C_IsDeviceReady+0x72>
 8004506:	897b      	ldrh	r3, [r7, #10]
 8004508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800450c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004510:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004514:	e006      	b.n	8004524 <HAL_I2C_IsDeviceReady+0x80>
 8004516:	897b      	ldrh	r3, [r7, #10]
 8004518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800451c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004520:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800452a:	f7fd ffd7 	bl	80024dc <HAL_GetTick>
 800452e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b20      	cmp	r3, #32
 800453c:	bf0c      	ite	eq
 800453e:	2301      	moveq	r3, #1
 8004540:	2300      	movne	r3, #0
 8004542:	b2db      	uxtb	r3, r3
 8004544:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	f003 0310 	and.w	r3, r3, #16
 8004550:	2b10      	cmp	r3, #16
 8004552:	bf0c      	ite	eq
 8004554:	2301      	moveq	r3, #1
 8004556:	2300      	movne	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800455c:	e034      	b.n	80045c8 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d01a      	beq.n	800459c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004566:	f7fd ffb9 	bl	80024dc <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d302      	bcc.n	800457c <HAL_I2C_IsDeviceReady+0xd8>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10f      	bne.n	800459c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004588:	f043 0220 	orr.w	r2, r3, #32
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e088      	b.n	80046ae <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	bf0c      	ite	eq
 80045aa:	2301      	moveq	r3, #1
 80045ac:	2300      	movne	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	f003 0310 	and.w	r3, r3, #16
 80045bc:	2b10      	cmp	r3, #16
 80045be:	bf0c      	ite	eq
 80045c0:	2301      	moveq	r3, #1
 80045c2:	2300      	movne	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80045c8:	7ffb      	ldrb	r3, [r7, #31]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d102      	bne.n	80045d4 <HAL_I2C_IsDeviceReady+0x130>
 80045ce:	7fbb      	ldrb	r3, [r7, #30]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0c4      	beq.n	800455e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	f003 0310 	and.w	r3, r3, #16
 80045de:	2b10      	cmp	r3, #16
 80045e0:	d01a      	beq.n	8004618 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2200      	movs	r2, #0
 80045ea:	2120      	movs	r1, #32
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f8a0 	bl	8004732 <I2C_WaitOnFlagUntilTimeout>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e058      	b.n	80046ae <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2220      	movs	r2, #32
 8004602:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	e04a      	b.n	80046ae <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2200      	movs	r2, #0
 8004620:	2120      	movs	r1, #32
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f885 	bl	8004732 <I2C_WaitOnFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e03d      	b.n	80046ae <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2210      	movs	r2, #16
 8004638:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2220      	movs	r2, #32
 8004640:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	429a      	cmp	r2, r3
 8004648:	d118      	bne.n	800467c <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004658:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2200      	movs	r2, #0
 8004662:	2120      	movs	r1, #32
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f864 	bl	8004732 <I2C_WaitOnFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e01c      	b.n	80046ae <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2220      	movs	r2, #32
 800467a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	3301      	adds	r3, #1
 8004680:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	429a      	cmp	r2, r3
 8004688:	f63f af39 	bhi.w	80044fe <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004698:	f043 0220 	orr.w	r2, r3, #32
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80046ac:	2302      	movs	r3, #2
  }
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3720      	adds	r7, #32
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b084      	sub	sp, #16
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d005      	beq.n	80046e2 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	68f9      	ldr	r1, [r7, #12]
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	4798      	blx	r3
  }
}
 80046e2:	bf00      	nop
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d103      	bne.n	8004708 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2200      	movs	r2, #0
 8004706:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b01      	cmp	r3, #1
 8004714:	d007      	beq.n	8004726 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699a      	ldr	r2, [r3, #24]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0201 	orr.w	r2, r2, #1
 8004724:	619a      	str	r2, [r3, #24]
  }
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	603b      	str	r3, [r7, #0]
 800473e:	4613      	mov	r3, r2
 8004740:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004742:	e031      	b.n	80047a8 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474a:	d02d      	beq.n	80047a8 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474c:	f7fd fec6 	bl	80024dc <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d302      	bcc.n	8004762 <I2C_WaitOnFlagUntilTimeout+0x30>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d122      	bne.n	80047a8 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699a      	ldr	r2, [r3, #24]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4013      	ands	r3, r2
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	429a      	cmp	r2, r3
 8004770:	bf0c      	ite	eq
 8004772:	2301      	moveq	r3, #1
 8004774:	2300      	movne	r3, #0
 8004776:	b2db      	uxtb	r3, r3
 8004778:	461a      	mov	r2, r3
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	429a      	cmp	r2, r3
 800477e:	d113      	bne.n	80047a8 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004784:	f043 0220 	orr.w	r2, r3, #32
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e00f      	b.n	80047c8 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	4013      	ands	r3, r2
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	bf0c      	ite	eq
 80047b8:	2301      	moveq	r3, #1
 80047ba:	2300      	movne	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	461a      	mov	r2, r3
 80047c0:	79fb      	ldrb	r3, [r7, #7]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d0be      	beq.n	8004744 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047dc:	e033      	b.n	8004846 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f87e 	bl	80048e4 <I2C_IsErrorOccurred>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e031      	b.n	8004856 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f8:	d025      	beq.n	8004846 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fa:	f7fd fe6f 	bl	80024dc <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	429a      	cmp	r2, r3
 8004808:	d302      	bcc.n	8004810 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d11a      	bne.n	8004846 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b02      	cmp	r3, #2
 800481c:	d013      	beq.n	8004846 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004822:	f043 0220 	orr.w	r2, r3, #32
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e007      	b.n	8004856 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b02      	cmp	r3, #2
 8004852:	d1c4      	bne.n	80047de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	60f8      	str	r0, [r7, #12]
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800486a:	e02f      	b.n	80048cc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	68b9      	ldr	r1, [r7, #8]
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 f837 	bl	80048e4 <I2C_IsErrorOccurred>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e02d      	b.n	80048dc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004880:	f7fd fe2c 	bl	80024dc <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	429a      	cmp	r2, r3
 800488e:	d302      	bcc.n	8004896 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d11a      	bne.n	80048cc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	d013      	beq.n	80048cc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a8:	f043 0220 	orr.w	r2, r3, #32
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e007      	b.n	80048dc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	f003 0320 	and.w	r3, r3, #32
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d1c8      	bne.n	800486c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08a      	sub	sp, #40	; 0x28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b00      	cmp	r3, #0
 800490e:	d068      	beq.n	80049e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2210      	movs	r2, #16
 8004916:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004918:	e049      	b.n	80049ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004920:	d045      	beq.n	80049ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004922:	f7fd fddb 	bl	80024dc <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	429a      	cmp	r2, r3
 8004930:	d302      	bcc.n	8004938 <I2C_IsErrorOccurred+0x54>
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d13a      	bne.n	80049ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004942:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800494a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004956:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800495a:	d121      	bne.n	80049a0 <I2C_IsErrorOccurred+0xbc>
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004962:	d01d      	beq.n	80049a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004964:	7cfb      	ldrb	r3, [r7, #19]
 8004966:	2b20      	cmp	r3, #32
 8004968:	d01a      	beq.n	80049a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004978:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800497a:	f7fd fdaf 	bl	80024dc <HAL_GetTick>
 800497e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004980:	e00e      	b.n	80049a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004982:	f7fd fdab 	bl	80024dc <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b19      	cmp	r3, #25
 800498e:	d907      	bls.n	80049a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	f043 0320 	orr.w	r3, r3, #32
 8004996:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800499e:	e006      	b.n	80049ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	f003 0320 	and.w	r3, r3, #32
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	d1e9      	bne.n	8004982 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b20      	cmp	r3, #32
 80049ba:	d003      	beq.n	80049c4 <I2C_IsErrorOccurred+0xe0>
 80049bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0aa      	beq.n	800491a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80049c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d103      	bne.n	80049d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2220      	movs	r2, #32
 80049d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	f043 0304 	orr.w	r3, r3, #4
 80049da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00b      	beq.n	8004a0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	f043 0301 	orr.w	r3, r3, #1
 80049fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00b      	beq.n	8004a2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	f043 0308 	orr.w	r3, r3, #8
 8004a1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00b      	beq.n	8004a50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	f043 0302 	orr.w	r3, r3, #2
 8004a3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d01c      	beq.n	8004a92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f7ff fe46 	bl	80046ea <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6859      	ldr	r1, [r3, #4]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	4b0d      	ldr	r3, [pc, #52]	; (8004aa0 <I2C_IsErrorOccurred+0x1bc>)
 8004a6a:	400b      	ands	r3, r1
 8004a6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	431a      	orrs	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004a92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3728      	adds	r7, #40	; 0x28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	fe00e800 	.word	0xfe00e800

08004aa4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	607b      	str	r3, [r7, #4]
 8004aae:	460b      	mov	r3, r1
 8004ab0:	817b      	strh	r3, [r7, #10]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ab6:	897b      	ldrh	r3, [r7, #10]
 8004ab8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004abc:	7a7b      	ldrb	r3, [r7, #9]
 8004abe:	041b      	lsls	r3, r3, #16
 8004ac0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ac4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ad2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	0d5b      	lsrs	r3, r3, #21
 8004ade:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004ae2:	4b08      	ldr	r3, [pc, #32]	; (8004b04 <I2C_TransferConfig+0x60>)
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	ea02 0103 	and.w	r1, r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004af6:	bf00      	nop
 8004af8:	371c      	adds	r7, #28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	03ff63ff 	.word	0x03ff63ff

08004b08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	d138      	bne.n	8004b90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e032      	b.n	8004b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2224      	movs	r2, #36	; 0x24
 8004b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0201 	bic.w	r2, r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6819      	ldr	r1, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	e000      	b.n	8004b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b90:	2302      	movs	r3, #2
  }
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b085      	sub	sp, #20
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
 8004ba6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	d139      	bne.n	8004c28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e033      	b.n	8004c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2224      	movs	r2, #36	; 0x24
 8004bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0201 	bic.w	r2, r2, #1
 8004be0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004bf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	021b      	lsls	r3, r3, #8
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0201 	orr.w	r2, r2, #1
 8004c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c24:	2300      	movs	r3, #0
 8004c26:	e000      	b.n	8004c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c28:	2302      	movs	r3, #2
  }
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
	...

08004c38 <HAL_OPAMP_Init>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)

{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e08f      	b.n	8004d6e <HAL_OPAMP_Init+0x136>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b05      	cmp	r3, #5
 8004c58:	d101      	bne.n	8004c5e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e087      	b.n	8004d6e <HAL_OPAMP_Init+0x136>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d101      	bne.n	8004c6e <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e07f      	b.n	8004d6e <HAL_OPAMP_Init+0x136>
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
    }

    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));

    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b80      	cmp	r3, #128	; 0x80
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c74:	4b40      	ldr	r3, [pc, #256]	; (8004d78 <HAL_OPAMP_Init+0x140>)
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	4a3f      	ldr	r2, [pc, #252]	; (8004d78 <HAL_OPAMP_Init+0x140>)
 8004c7a:	f043 0301 	orr.w	r3, r3, #1
 8004c7e:	6193      	str	r3, [r2, #24]
 8004c80:	4b3d      	ldr	r3, [pc, #244]	; (8004d78 <HAL_OPAMP_Init+0x140>)
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	60bb      	str	r3, [r7, #8]
 8004c8a:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d103      	bne.n	8004ca0 <HAL_OPAMP_Init+0x68>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7fc fdb7 	bl	8001814 <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b40      	cmp	r3, #64	; 0x40
 8004cac:	d003      	beq.n	8004cb6 <HAL_OPAMP_Init+0x7e>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b60      	cmp	r3, #96	; 0x60
 8004cb4:	d125      	bne.n	8004d02 <HAL_OPAMP_Init+0xca>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	4b2f      	ldr	r3, [pc, #188]	; (8004d7c <HAL_OPAMP_Init+0x144>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6851      	ldr	r1, [r2, #4]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	68d2      	ldr	r2, [r2, #12]
 8004cc8:	4311      	orrs	r1, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6912      	ldr	r2, [r2, #16]
 8004cce:	4311      	orrs	r1, r2
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6992      	ldr	r2, [r2, #24]
 8004cd4:	4311      	orrs	r1, r2
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	69d2      	ldr	r2, [r2, #28]
 8004cda:	4311      	orrs	r1, r2
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6a12      	ldr	r2, [r2, #32]
 8004ce0:	4311      	orrs	r1, r2
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ce6:	4311      	orrs	r1, r2
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004cec:	04d2      	lsls	r2, r2, #19
 8004cee:	4311      	orrs	r1, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004cf4:	0612      	lsls	r2, r2, #24
 8004cf6:	4311      	orrs	r1, r2
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6812      	ldr	r2, [r2, #0]
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	e02a      	b.n	8004d58 <HAL_OPAMP_Init+0x120>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	4b1c      	ldr	r3, [pc, #112]	; (8004d7c <HAL_OPAMP_Init+0x144>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6851      	ldr	r1, [r2, #4]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6892      	ldr	r2, [r2, #8]
 8004d14:	4311      	orrs	r1, r2
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	68d2      	ldr	r2, [r2, #12]
 8004d1a:	4311      	orrs	r1, r2
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	6912      	ldr	r2, [r2, #16]
 8004d20:	4311      	orrs	r1, r2
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	6952      	ldr	r2, [r2, #20]
 8004d26:	4311      	orrs	r1, r2
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6992      	ldr	r2, [r2, #24]
 8004d2c:	4311      	orrs	r1, r2
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	69d2      	ldr	r2, [r2, #28]
 8004d32:	4311      	orrs	r1, r2
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6a12      	ldr	r2, [r2, #32]
 8004d38:	4311      	orrs	r1, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d3e:	4311      	orrs	r1, r2
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004d44:	04d2      	lsls	r2, r2, #19
 8004d46:	4311      	orrs	r1, r2
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d4c:	0612      	lsls	r2, r2, #24
 8004d4e:	4311      	orrs	r1, r2
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6812      	ldr	r2, [r2, #0]
 8004d54:	430b      	orrs	r3, r1
 8004d56:	6013      	str	r3, [r2, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d103      	bne.n	8004d6c <HAL_OPAMP_Init+0x134>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	e0003811 	.word	0xe0003811

08004d80 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d102      	bne.n	8004d98 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	73fb      	strb	r3, [r7, #15]
 8004d96:	e01d      	b.n	8004dd4 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b05      	cmp	r3, #5
 8004da2:	d102      	bne.n	8004daa <HAL_OPAMP_Start+0x2a>

  {
    status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
 8004da8:	e014      	b.n	8004dd4 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d10c      	bne.n	8004dd0 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0201 	orr.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2204      	movs	r2, #4
 8004dca:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8004dce:	e001      	b.n	8004dd4 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <HAL_OPAMP_GetState>:
  * @brief  Return the OPAMP state
  * @param  hopamp OPAMP handle
  * @retval HAL state
  */
HAL_OPAMP_StateTypeDef HAL_OPAMP_GetState(OPAMP_HandleTypeDef *hopamp)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  /* Check the OPAMP handle allocation */
  if (hopamp == NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_OPAMP_GetState+0x12>
  {
    return HAL_OPAMP_STATE_RESET;
 8004df0:	2300      	movs	r3, #0
 8004df2:	e003      	b.n	8004dfc <HAL_OPAMP_GetState+0x1a>
  }

  /* Check the parameter */
  assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

  return hopamp->State;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004dfa:	b2db      	uxtb	r3, r3
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e0a:	b08b      	sub	sp, #44	; 0x2c
 8004e0c:	af06      	add	r7, sp, #24
 8004e0e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e0c4      	b.n	8004fa4 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f009 fb70 	bl	800e514 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2203      	movs	r2, #3
 8004e38:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f005 f93b 	bl	800a0bc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e46:	2300      	movs	r3, #0
 8004e48:	73fb      	strb	r3, [r7, #15]
 8004e4a:	e040      	b.n	8004ece <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	440b      	add	r3, r1
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	2201      	movs	r2, #1
 8004e60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	440b      	add	r3, r1
 8004e72:	7bfa      	ldrb	r2, [r7, #15]
 8004e74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	440b      	add	r3, r1
 8004e86:	3303      	adds	r3, #3
 8004e88:	2200      	movs	r2, #0
 8004e8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e8c:	7bfa      	ldrb	r2, [r7, #15]
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	440b      	add	r3, r1
 8004e9a:	3338      	adds	r3, #56	; 0x38
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ea0:	7bfa      	ldrb	r2, [r7, #15]
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	440b      	add	r3, r1
 8004eae:	333c      	adds	r3, #60	; 0x3c
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004eb4:	7bfa      	ldrb	r2, [r7, #15]
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	440b      	add	r3, r1
 8004ec2:	3340      	adds	r3, #64	; 0x40
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	73fb      	strb	r3, [r7, #15]
 8004ece:	7bfa      	ldrb	r2, [r7, #15]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d3b9      	bcc.n	8004e4c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ed8:	2300      	movs	r3, #0
 8004eda:	73fb      	strb	r3, [r7, #15]
 8004edc:	e044      	b.n	8004f68 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ede:	7bfa      	ldrb	r2, [r7, #15]
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	440b      	add	r3, r1
 8004eec:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ef4:	7bfa      	ldrb	r2, [r7, #15]
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	440b      	add	r3, r1
 8004f02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f06:	7bfa      	ldrb	r2, [r7, #15]
 8004f08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f0a:	7bfa      	ldrb	r2, [r7, #15]
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	440b      	add	r3, r1
 8004f18:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f20:	7bfa      	ldrb	r2, [r7, #15]
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	4613      	mov	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	440b      	add	r3, r1
 8004f2e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f36:	7bfa      	ldrb	r2, [r7, #15]
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	440b      	add	r3, r1
 8004f44:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f4c:	7bfa      	ldrb	r2, [r7, #15]
 8004f4e:	6879      	ldr	r1, [r7, #4]
 8004f50:	4613      	mov	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	440b      	add	r3, r1
 8004f5a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f62:	7bfb      	ldrb	r3, [r7, #15]
 8004f64:	3301      	adds	r3, #1
 8004f66:	73fb      	strb	r3, [r7, #15]
 8004f68:	7bfa      	ldrb	r2, [r7, #15]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d3b5      	bcc.n	8004ede <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	687e      	ldr	r6, [r7, #4]
 8004f7a:	466d      	mov	r5, sp
 8004f7c:	f106 0410 	add.w	r4, r6, #16
 8004f80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	602b      	str	r3, [r5, #0]
 8004f88:	1d33      	adds	r3, r6, #4
 8004f8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f8c:	6838      	ldr	r0, [r7, #0]
 8004f8e:	f005 f8b0 	bl	800a0f2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d101      	bne.n	8004fc2 <HAL_PCD_Start+0x16>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	e016      	b.n	8004ff0 <HAL_PCD_Start+0x44>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f005 f85d 	bl	800a08e <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f009 fce4 	bl	800e9a4 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f007 f92f 	bl	800c244 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005006:	2b01      	cmp	r3, #1
 8005008:	d101      	bne.n	800500e <HAL_PCD_Stop+0x16>
 800500a:	2302      	movs	r3, #2
 800500c:	e016      	b.n	800503c <HAL_PCD_Stop+0x44>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f005 f84e 	bl	800a0bc <USB_DisableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 0U);
 8005020:	2100      	movs	r1, #0
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f009 fcbe 	bl	800e9a4 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevDisconnect(hpcd->Instance);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f007 f914 	bl	800c25a <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f007 f90d 	bl	800c270 <USB_ReadInterrupts>
 8005056:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fa52 	bl	800550c <PCD_EP_ISR_Handler>

    return;
 8005068:	e0bd      	b.n	80051e6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005070:	2b00      	cmp	r3, #0
 8005072:	d013      	beq.n	800509c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800507c:	b29a      	uxth	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005086:	b292      	uxth	r2, r2
 8005088:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f009 fabc 	bl	800e60a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005092:	2100      	movs	r1, #0
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f8a9 	bl	80051ec <HAL_PCD_SetAddress>

    return;
 800509a:	e0a4      	b.n	80051e6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00c      	beq.n	80050c0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050b8:	b292      	uxth	r2, r2
 80050ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80050be:	e092      	b.n	80051e6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00c      	beq.n	80050e4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050dc:	b292      	uxth	r2, r2
 80050de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80050e2:	e080      	b.n	80051e6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d027      	beq.n	800513e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0204 	bic.w	r2, r2, #4
 8005100:	b292      	uxth	r2, r2
 8005102:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800510e:	b29a      	uxth	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0208 	bic.w	r2, r2, #8
 8005118:	b292      	uxth	r2, r2
 800511a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f009 faac 	bl	800e67c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800512c:	b29a      	uxth	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005136:	b292      	uxth	r2, r2
 8005138:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800513c:	e053      	b.n	80051e6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005144:	2b00      	cmp	r3, #0
 8005146:	d027      	beq.n	8005198 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005150:	b29a      	uxth	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0208 	orr.w	r2, r2, #8
 800515a:	b292      	uxth	r2, r2
 800515c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005168:	b29a      	uxth	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005172:	b292      	uxth	r2, r2
 8005174:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005180:	b29a      	uxth	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0204 	orr.w	r2, r2, #4
 800518a:	b292      	uxth	r2, r2
 800518c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f009 fa59 	bl	800e648 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005196:	e026      	b.n	80051e6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00f      	beq.n	80051c2 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80051b4:	b292      	uxth	r2, r2
 80051b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f009 fa17 	bl	800e5ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80051c0:	e011      	b.n	80051e6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00c      	beq.n	80051e6 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051de:	b292      	uxth	r2, r2
 80051e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80051e4:	bf00      	nop
  }
}
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d101      	bne.n	8005206 <HAL_PCD_SetAddress+0x1a>
 8005202:	2302      	movs	r3, #2
 8005204:	e013      	b.n	800522e <HAL_PCD_SetAddress+0x42>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	78fa      	ldrb	r2, [r7, #3]
 8005212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	78fa      	ldrb	r2, [r7, #3]
 800521c:	4611      	mov	r1, r2
 800521e:	4618      	mov	r0, r3
 8005220:	f006 fffc 	bl	800c21c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b084      	sub	sp, #16
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	4608      	mov	r0, r1
 8005240:	4611      	mov	r1, r2
 8005242:	461a      	mov	r2, r3
 8005244:	4603      	mov	r3, r0
 8005246:	70fb      	strb	r3, [r7, #3]
 8005248:	460b      	mov	r3, r1
 800524a:	803b      	strh	r3, [r7, #0]
 800524c:	4613      	mov	r3, r2
 800524e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005250:	2300      	movs	r3, #0
 8005252:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005254:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005258:	2b00      	cmp	r3, #0
 800525a:	da0e      	bge.n	800527a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	4613      	mov	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	4413      	add	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	705a      	strb	r2, [r3, #1]
 8005278:	e00e      	b.n	8005298 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800527a:	78fb      	ldrb	r3, [r7, #3]
 800527c:	f003 0207 	and.w	r2, r3, #7
 8005280:	4613      	mov	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	4413      	add	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005298:	78fb      	ldrb	r3, [r7, #3]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80052a4:	883a      	ldrh	r2, [r7, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	78ba      	ldrb	r2, [r7, #2]
 80052ae:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80052b0:	78bb      	ldrb	r3, [r7, #2]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d102      	bne.n	80052bc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <HAL_PCD_EP_Open+0x94>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e00e      	b.n	80052e8 <HAL_PCD_EP_Open+0xb2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68f9      	ldr	r1, [r7, #12]
 80052d8:	4618      	mov	r0, r3
 80052da:	f004 ff2b 	bl	800a134 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80052e6:	7afb      	ldrb	r3, [r7, #11]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	607a      	str	r2, [r7, #4]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	460b      	mov	r3, r1
 80052fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005300:	7afb      	ldrb	r3, [r7, #11]
 8005302:	f003 0207 	and.w	r2, r3, #7
 8005306:	4613      	mov	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4413      	add	r3, r2
 8005316:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	2200      	movs	r2, #0
 8005328:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2200      	movs	r2, #0
 800532e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005330:	7afb      	ldrb	r3, [r7, #11]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	b2da      	uxtb	r2, r3
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6979      	ldr	r1, [r7, #20]
 8005342:	4618      	mov	r0, r3
 8005344:	f005 faba 	bl	800a8bc <USB_EPStartXfer>

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b086      	sub	sp, #24
 8005356:	af00      	add	r7, sp, #0
 8005358:	60f8      	str	r0, [r7, #12]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
 800535e:	460b      	mov	r3, r1
 8005360:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005362:	7afb      	ldrb	r3, [r7, #11]
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	4613      	mov	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4413      	add	r3, r2
 8005376:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2200      	movs	r2, #0
 8005396:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2201      	movs	r2, #1
 800539c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800539e:	7afb      	ldrb	r3, [r7, #11]
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6979      	ldr	r1, [r7, #20]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f005 fa83 	bl	800a8bc <USB_EPStartXfer>

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	f003 0207 	and.w	r2, r3, #7
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d901      	bls.n	80053de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e03e      	b.n	800545c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	da0e      	bge.n	8005404 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053e6:	78fb      	ldrb	r3, [r7, #3]
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	4613      	mov	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	4413      	add	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2201      	movs	r2, #1
 8005400:	705a      	strb	r2, [r3, #1]
 8005402:	e00c      	b.n	800541e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005404:	78fa      	ldrb	r2, [r7, #3]
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	4413      	add	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2201      	movs	r2, #1
 8005422:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	b2da      	uxtb	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005436:	2b01      	cmp	r3, #1
 8005438:	d101      	bne.n	800543e <HAL_PCD_EP_SetStall+0x7e>
 800543a:	2302      	movs	r3, #2
 800543c:	e00e      	b.n	800545c <HAL_PCD_EP_SetStall+0x9c>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68f9      	ldr	r1, [r7, #12]
 800544c:	4618      	mov	r0, r3
 800544e:	f006 fde6 	bl	800c01e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	460b      	mov	r3, r1
 800546e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	f003 020f 	and.w	r2, r3, #15
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	429a      	cmp	r2, r3
 800547c:	d901      	bls.n	8005482 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e040      	b.n	8005504 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005482:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005486:	2b00      	cmp	r3, #0
 8005488:	da0e      	bge.n	80054a8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800548a:	78fb      	ldrb	r3, [r7, #3]
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	4613      	mov	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	4413      	add	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2201      	movs	r2, #1
 80054a4:	705a      	strb	r2, [r3, #1]
 80054a6:	e00e      	b.n	80054c6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	f003 0207 	and.w	r2, r3, #7
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054cc:	78fb      	ldrb	r3, [r7, #3]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d101      	bne.n	80054e6 <HAL_PCD_EP_ClrStall+0x82>
 80054e2:	2302      	movs	r3, #2
 80054e4:	e00e      	b.n	8005504 <HAL_PCD_EP_ClrStall+0xa0>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68f9      	ldr	r1, [r7, #12]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f006 fde3 	bl	800c0c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b096      	sub	sp, #88	; 0x58
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005514:	e3b1      	b.n	8005c7a <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800551e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005522:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005526:	b2db      	uxtb	r3, r3
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8005530:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005534:	2b00      	cmp	r3, #0
 8005536:	f040 8173 	bne.w	8005820 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800553a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800553e:	f003 0310 	and.w	r3, r3, #16
 8005542:	2b00      	cmp	r3, #0
 8005544:	d150      	bne.n	80055e8 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	b29b      	uxth	r3, r3
 800554e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005556:	81fb      	strh	r3, [r7, #14]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	89fb      	ldrh	r3, [r7, #14]
 800555e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005566:	b29b      	uxth	r3, r3
 8005568:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3328      	adds	r3, #40	; 0x28
 800556e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005578:	b29b      	uxth	r3, r3
 800557a:	461a      	mov	r2, r3
 800557c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	4413      	add	r3, r2
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6812      	ldr	r2, [r2, #0]
 8005588:	4413      	add	r3, r2
 800558a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005596:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800559a:	695a      	ldr	r2, [r3, #20]
 800559c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	441a      	add	r2, r3
 80055a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055a4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80055a6:	2100      	movs	r1, #0
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f009 f806 	bl	800e5ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 835f 	beq.w	8005c7a <PCD_EP_ISR_Handler+0x76e>
 80055bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f040 835a 	bne.w	8005c7a <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	b292      	uxth	r2, r2
 80055da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80055e6:	e348      	b.n	8005c7a <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80055ee:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80055fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80055fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005602:	2b00      	cmp	r3, #0
 8005604:	d032      	beq.n	800566c <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800560e:	b29b      	uxth	r3, r3
 8005610:	461a      	mov	r2, r3
 8005612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	4413      	add	r3, r2
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6812      	ldr	r2, [r2, #0]
 800561e:	4413      	add	r3, r2
 8005620:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800562a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800562c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6818      	ldr	r0, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800563a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800563c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800563e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005640:	b29b      	uxth	r3, r3
 8005642:	f006 fe67 	bl	800c314 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	881b      	ldrh	r3, [r3, #0]
 800564c:	b29a      	uxth	r2, r3
 800564e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005652:	4013      	ands	r3, r2
 8005654:	823b      	strh	r3, [r7, #16]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	8a3a      	ldrh	r2, [r7, #16]
 800565c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005660:	b292      	uxth	r2, r2
 8005662:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f008 ff7b 	bl	800e560 <HAL_PCD_SetupStageCallback>
 800566a:	e306      	b.n	8005c7a <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800566c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005670:	2b00      	cmp	r3, #0
 8005672:	f280 8302 	bge.w	8005c7a <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	b29a      	uxth	r2, r3
 800567e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005682:	4013      	ands	r3, r2
 8005684:	83fb      	strh	r3, [r7, #30]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	8bfa      	ldrh	r2, [r7, #30]
 800568c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005690:	b292      	uxth	r2, r2
 8005692:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800569c:	b29b      	uxth	r3, r3
 800569e:	461a      	mov	r2, r3
 80056a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	4413      	add	r3, r2
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	6812      	ldr	r2, [r2, #0]
 80056ac:	4413      	add	r3, r2
 80056ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80056b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056ba:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80056bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d019      	beq.n	80056f8 <PCD_EP_ISR_Handler+0x1ec>
 80056c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d015      	beq.n	80056f8 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6818      	ldr	r0, [r3, #0]
 80056d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056d2:	6959      	ldr	r1, [r3, #20]
 80056d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056d6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80056d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056da:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80056dc:	b29b      	uxth	r3, r3
 80056de:	f006 fe19 	bl	800c314 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80056e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056e4:	695a      	ldr	r2, [r3, #20]
 80056e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	441a      	add	r2, r3
 80056ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056ee:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80056f0:	2100      	movs	r1, #0
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f008 ff46 	bl	800e584 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005702:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800570a:	2b00      	cmp	r3, #0
 800570c:	f040 82b5 	bne.w	8005c7a <PCD_EP_ISR_Handler+0x76e>
 8005710:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005714:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005718:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800571c:	f000 82ad 	beq.w	8005c7a <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	61bb      	str	r3, [r7, #24]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800572e:	b29b      	uxth	r3, r3
 8005730:	461a      	mov	r2, r3
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	4413      	add	r3, r2
 8005736:	61bb      	str	r3, [r7, #24]
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	b29b      	uxth	r3, r3
 8005746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800574a:	b29a      	uxth	r2, r3
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	801a      	strh	r2, [r3, #0]
 8005750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	2b3e      	cmp	r3, #62	; 0x3e
 8005756:	d91d      	bls.n	8005794 <PCD_EP_ISR_Handler+0x288>
 8005758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	095b      	lsrs	r3, r3, #5
 800575e:	647b      	str	r3, [r7, #68]	; 0x44
 8005760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	2b00      	cmp	r3, #0
 800576a:	d102      	bne.n	8005772 <PCD_EP_ISR_Handler+0x266>
 800576c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800576e:	3b01      	subs	r3, #1
 8005770:	647b      	str	r3, [r7, #68]	; 0x44
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	b29a      	uxth	r2, r3
 8005778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800577a:	b29b      	uxth	r3, r3
 800577c:	029b      	lsls	r3, r3, #10
 800577e:	b29b      	uxth	r3, r3
 8005780:	4313      	orrs	r3, r2
 8005782:	b29b      	uxth	r3, r3
 8005784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800578c:	b29a      	uxth	r2, r3
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	801a      	strh	r2, [r3, #0]
 8005792:	e026      	b.n	80057e2 <PCD_EP_ISR_Handler+0x2d6>
 8005794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10a      	bne.n	80057b2 <PCD_EP_ISR_Handler+0x2a6>
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	801a      	strh	r2, [r3, #0]
 80057b0:	e017      	b.n	80057e2 <PCD_EP_ISR_Handler+0x2d6>
 80057b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	085b      	lsrs	r3, r3, #1
 80057b8:	647b      	str	r3, [r7, #68]	; 0x44
 80057ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d002      	beq.n	80057cc <PCD_EP_ISR_Handler+0x2c0>
 80057c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057c8:	3301      	adds	r3, #1
 80057ca:	647b      	str	r3, [r7, #68]	; 0x44
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	029b      	lsls	r3, r3, #10
 80057d8:	b29b      	uxth	r3, r3
 80057da:	4313      	orrs	r3, r2
 80057dc:	b29a      	uxth	r2, r3
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f2:	827b      	strh	r3, [r7, #18]
 80057f4:	8a7b      	ldrh	r3, [r7, #18]
 80057f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80057fa:	827b      	strh	r3, [r7, #18]
 80057fc:	8a7b      	ldrh	r3, [r7, #18]
 80057fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005802:	827b      	strh	r3, [r7, #18]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	8a7b      	ldrh	r3, [r7, #18]
 800580a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800580e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800581a:	b29b      	uxth	r3, r3
 800581c:	8013      	strh	r3, [r2, #0]
 800581e:	e22c      	b.n	8005c7a <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	461a      	mov	r2, r3
 8005826:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005834:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005838:	2b00      	cmp	r3, #0
 800583a:	f280 80f6 	bge.w	8005a2a <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	b29a      	uxth	r2, r3
 8005850:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005854:	4013      	ands	r3, r2
 8005856:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	461a      	mov	r2, r3
 8005860:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800586c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005870:	b292      	uxth	r2, r2
 8005872:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005874:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005878:	4613      	mov	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	4413      	add	r3, r2
 8005888:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800588a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800588c:	7b1b      	ldrb	r3, [r3, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d123      	bne.n	80058da <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800589a:	b29b      	uxth	r3, r3
 800589c:	461a      	mov	r2, r3
 800589e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	4413      	add	r3, r2
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6812      	ldr	r2, [r2, #0]
 80058aa:	4413      	add	r3, r2
 80058ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058b6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80058ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f000 808e 	beq.w	80059e0 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6818      	ldr	r0, [r3, #0]
 80058c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ca:	6959      	ldr	r1, [r3, #20]
 80058cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ce:	88da      	ldrh	r2, [r3, #6]
 80058d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80058d4:	f006 fd1e 	bl	800c314 <USB_ReadPMA>
 80058d8:	e082      	b.n	80059e0 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80058da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058dc:	78db      	ldrb	r3, [r3, #3]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d10a      	bne.n	80058f8 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80058e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80058e6:	461a      	mov	r2, r3
 80058e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f9d3 	bl	8005c96 <HAL_PCD_EP_DB_Receive>
 80058f0:	4603      	mov	r3, r0
 80058f2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80058f6:	e073      	b.n	80059e0 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	461a      	mov	r2, r3
 80058fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	b29b      	uxth	r3, r3
 800590a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800590e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005912:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	441a      	add	r2, r3
 8005924:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800592c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005934:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005938:	b29b      	uxth	r3, r3
 800593a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	461a      	mov	r2, r3
 8005942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	b29b      	uxth	r3, r3
 800594e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d022      	beq.n	800599c <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800595e:	b29b      	uxth	r3, r3
 8005960:	461a      	mov	r2, r3
 8005962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	4413      	add	r3, r2
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6812      	ldr	r2, [r2, #0]
 800596e:	4413      	add	r3, r2
 8005970:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800597a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800597e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005982:	2b00      	cmp	r3, #0
 8005984:	d02c      	beq.n	80059e0 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800598c:	6959      	ldr	r1, [r3, #20]
 800598e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005990:	891a      	ldrh	r2, [r3, #8]
 8005992:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005996:	f006 fcbd 	bl	800c314 <USB_ReadPMA>
 800599a:	e021      	b.n	80059e0 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	461a      	mov	r2, r3
 80059a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	4413      	add	r3, r2
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6812      	ldr	r2, [r2, #0]
 80059b4:	4413      	add	r3, r2
 80059b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059c0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80059c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d009      	beq.n	80059e0 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6818      	ldr	r0, [r3, #0]
 80059d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059d2:	6959      	ldr	r1, [r3, #20]
 80059d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059d6:	895a      	ldrh	r2, [r3, #10]
 80059d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80059dc:	f006 fc9a 	bl	800c314 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80059e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059e2:	69da      	ldr	r2, [r3, #28]
 80059e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80059e8:	441a      	add	r2, r3
 80059ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80059ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f0:	695a      	ldr	r2, [r3, #20]
 80059f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80059f6:	441a      	add	r2, r3
 80059f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059fa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80059fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <PCD_EP_ISR_Handler+0x504>
 8005a04:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d206      	bcs.n	8005a1e <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	4619      	mov	r1, r3
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f008 fdb4 	bl	800e584 <HAL_PCD_DataOutStageCallback>
 8005a1c:	e005      	b.n	8005a2a <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a24:	4618      	mov	r0, r3
 8005a26:	f004 ff49 	bl	800a8bc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005a2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 8121 	beq.w	8005c7a <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8005a38:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	00db      	lsls	r3, r3, #3
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	4413      	add	r3, r2
 8005a4a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	461a      	mov	r2, r3
 8005a52:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a66:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	441a      	add	r2, r3
 8005a78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a8a:	78db      	ldrb	r3, [r3, #3]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	f040 80a2 	bne.w	8005bd6 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8005a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a94:	2200      	movs	r2, #0
 8005a96:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a9a:	7b1b      	ldrb	r3, [r3, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 8093 	beq.w	8005bc8 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005aa2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d046      	beq.n	8005b3c <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ab0:	785b      	ldrb	r3, [r3, #1]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d126      	bne.n	8005b04 <PCD_EP_ISR_Handler+0x5f8>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	4413      	add	r3, r2
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	00da      	lsls	r2, r3, #3
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005adc:	623b      	str	r3, [r7, #32]
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	801a      	strh	r2, [r3, #0]
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	801a      	strh	r2, [r3, #0]
 8005b02:	e061      	b.n	8005bc8 <PCD_EP_ISR_Handler+0x6bc>
 8005b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b06:	785b      	ldrb	r3, [r3, #1]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d15d      	bne.n	8005bc8 <PCD_EP_ISR_Handler+0x6bc>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b20:	4413      	add	r3, r2
 8005b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	00da      	lsls	r2, r3, #3
 8005b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b32:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b36:	2200      	movs	r2, #0
 8005b38:	801a      	strh	r2, [r3, #0]
 8005b3a:	e045      	b.n	8005bc8 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b44:	785b      	ldrb	r3, [r3, #1]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d126      	bne.n	8005b98 <PCD_EP_ISR_Handler+0x68c>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5e:	4413      	add	r3, r2
 8005b60:	637b      	str	r3, [r7, #52]	; 0x34
 8005b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	00da      	lsls	r2, r3, #3
 8005b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b70:	633b      	str	r3, [r7, #48]	; 0x30
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	801a      	strh	r2, [r3, #0]
 8005b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	801a      	strh	r2, [r3, #0]
 8005b96:	e017      	b.n	8005bc8 <PCD_EP_ISR_Handler+0x6bc>
 8005b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b9a:	785b      	ldrb	r3, [r3, #1]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d113      	bne.n	8005bc8 <PCD_EP_ISR_Handler+0x6bc>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	461a      	mov	r2, r3
 8005bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bae:	4413      	add	r3, r2
 8005bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	00da      	lsls	r2, r3, #3
 8005bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bba:	4413      	add	r3, r2
 8005bbc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	4619      	mov	r1, r3
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f008 fcf3 	bl	800e5ba <HAL_PCD_DataInStageCallback>
 8005bd4:	e051      	b.n	8005c7a <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005bd6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d144      	bne.n	8005c6c <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	461a      	mov	r2, r3
 8005bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	4413      	add	r3, r2
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6812      	ldr	r2, [r2, #0]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8005c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c0c:	699a      	ldr	r2, [r3, #24]
 8005c0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d907      	bls.n	8005c26 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8005c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c1e:	1ad2      	subs	r2, r2, r3
 8005c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c22:	619a      	str	r2, [r3, #24]
 8005c24:	e002      	b.n	8005c2c <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8005c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c28:	2200      	movs	r2, #0
 8005c2a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d106      	bne.n	8005c42 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	4619      	mov	r1, r3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f008 fcbd 	bl	800e5ba <HAL_PCD_DataInStageCallback>
 8005c40:	e01b      	b.n	8005c7a <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c44:	695a      	ldr	r2, [r3, #20]
 8005c46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c4a:	441a      	add	r2, r3
 8005c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c4e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c52:	69da      	ldr	r2, [r3, #28]
 8005c54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c58:	441a      	add	r2, r3
 8005c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c5c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c64:	4618      	mov	r0, r3
 8005c66:	f004 fe29 	bl	800a8bc <USB_EPStartXfer>
 8005c6a:	e006      	b.n	8005c7a <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005c6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005c70:	461a      	mov	r2, r3
 8005c72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f917 	bl	8005ea8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	b21b      	sxth	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f6ff ac45 	blt.w	8005516 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3758      	adds	r7, #88	; 0x58
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b088      	sub	sp, #32
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005ca4:	88fb      	ldrh	r3, [r7, #6]
 8005ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d07c      	beq.n	8005da8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	461a      	mov	r2, r3
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	4413      	add	r3, r2
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	6812      	ldr	r2, [r2, #0]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cd2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	699a      	ldr	r2, [r3, #24]
 8005cd8:	8b7b      	ldrh	r3, [r7, #26]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d306      	bcc.n	8005cec <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	699a      	ldr	r2, [r3, #24]
 8005ce2:	8b7b      	ldrh	r3, [r7, #26]
 8005ce4:	1ad2      	subs	r2, r2, r3
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	619a      	str	r2, [r3, #24]
 8005cea:	e002      	b.n	8005cf2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d123      	bne.n	8005d42 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d14:	833b      	strh	r3, [r7, #24]
 8005d16:	8b3b      	ldrh	r3, [r7, #24]
 8005d18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d1c:	833b      	strh	r3, [r7, #24]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	441a      	add	r2, r3
 8005d2c:	8b3b      	ldrh	r3, [r7, #24]
 8005d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005d42:	88fb      	ldrh	r3, [r7, #6]
 8005d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d01f      	beq.n	8005d8c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	461a      	mov	r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d66:	82fb      	strh	r3, [r7, #22]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	441a      	add	r2, r3
 8005d76:	8afb      	ldrh	r3, [r7, #22]
 8005d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005d8c:	8b7b      	ldrh	r3, [r7, #26]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 8085 	beq.w	8005e9e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6818      	ldr	r0, [r3, #0]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	6959      	ldr	r1, [r3, #20]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	891a      	ldrh	r2, [r3, #8]
 8005da0:	8b7b      	ldrh	r3, [r7, #26]
 8005da2:	f006 fab7 	bl	800c314 <USB_ReadPMA>
 8005da6:	e07a      	b.n	8005e9e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	461a      	mov	r2, r3
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	4413      	add	r3, r2
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	6812      	ldr	r2, [r2, #0]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dcc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	699a      	ldr	r2, [r3, #24]
 8005dd2:	8b7b      	ldrh	r3, [r7, #26]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d306      	bcc.n	8005de6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	699a      	ldr	r2, [r3, #24]
 8005ddc:	8b7b      	ldrh	r3, [r7, #26]
 8005dde:	1ad2      	subs	r2, r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	619a      	str	r2, [r3, #24]
 8005de4:	e002      	b.n	8005dec <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	2200      	movs	r2, #0
 8005dea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d123      	bne.n	8005e3c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0e:	83fb      	strh	r3, [r7, #30]
 8005e10:	8bfb      	ldrh	r3, [r7, #30]
 8005e12:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e16:	83fb      	strh	r3, [r7, #30]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	441a      	add	r2, r3
 8005e26:	8bfb      	ldrh	r3, [r7, #30]
 8005e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005e3c:	88fb      	ldrh	r3, [r7, #6]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d11f      	bne.n	8005e86 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e60:	83bb      	strh	r3, [r7, #28]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	441a      	add	r2, r3
 8005e70:	8bbb      	ldrh	r3, [r7, #28]
 8005e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005e86:	8b7b      	ldrh	r3, [r7, #26]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d008      	beq.n	8005e9e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6818      	ldr	r0, [r3, #0]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	6959      	ldr	r1, [r3, #20]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	895a      	ldrh	r2, [r3, #10]
 8005e98:	8b7b      	ldrh	r3, [r7, #26]
 8005e9a:	f006 fa3b 	bl	800c314 <USB_ReadPMA>
    }
  }

  return count;
 8005e9e:	8b7b      	ldrh	r3, [r7, #26]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3720      	adds	r7, #32
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b0a4      	sub	sp, #144	; 0x90
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 81db 	beq.w	8006278 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	461a      	mov	r2, r3
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	4413      	add	r3, r2
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	6812      	ldr	r2, [r2, #0]
 8005eda:	4413      	add	r3, r2
 8005edc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ee6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	699a      	ldr	r2, [r3, #24]
 8005eee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d907      	bls.n	8005f06 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	699a      	ldr	r2, [r3, #24]
 8005efa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005efe:	1ad2      	subs	r2, r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	619a      	str	r2, [r3, #24]
 8005f04:	e002      	b.n	8005f0c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f040 80b9 	bne.w	8006088 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	785b      	ldrb	r3, [r3, #1]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d126      	bne.n	8005f6c <HAL_PCD_EP_DB_Transmit+0xc4>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	461a      	mov	r2, r3
 8005f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f32:	4413      	add	r3, r2
 8005f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	00da      	lsls	r2, r3, #3
 8005f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3e:	4413      	add	r3, r2
 8005f40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f54:	801a      	strh	r2, [r3, #0]
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	801a      	strh	r2, [r3, #0]
 8005f6a:	e01a      	b.n	8005fa2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	785b      	ldrb	r3, [r3, #1]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d116      	bne.n	8005fa2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	637b      	str	r3, [r7, #52]	; 0x34
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	461a      	mov	r2, r3
 8005f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f88:	4413      	add	r3, r2
 8005f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	00da      	lsls	r2, r3, #3
 8005f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f94:	4413      	add	r3, r2
 8005f96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	785b      	ldrb	r3, [r3, #1]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d126      	bne.n	8005ffe <HAL_PCD_EP_DB_Transmit+0x156>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	61fb      	str	r3, [r7, #28]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	61fb      	str	r3, [r7, #28]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	00da      	lsls	r2, r3, #3
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fd6:	61bb      	str	r3, [r7, #24]
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	801a      	strh	r2, [r3, #0]
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	801a      	strh	r2, [r3, #0]
 8005ffc:	e017      	b.n	800602e <HAL_PCD_EP_DB_Transmit+0x186>
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	785b      	ldrb	r3, [r3, #1]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d113      	bne.n	800602e <HAL_PCD_EP_DB_Transmit+0x186>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800600e:	b29b      	uxth	r3, r3
 8006010:	461a      	mov	r2, r3
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	4413      	add	r3, r2
 8006016:	627b      	str	r3, [r7, #36]	; 0x24
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	00da      	lsls	r2, r3, #3
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	4413      	add	r3, r2
 8006022:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006026:	623b      	str	r3, [r7, #32]
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	2200      	movs	r2, #0
 800602c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	4619      	mov	r1, r3
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f008 fac0 	bl	800e5ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800603a:	88fb      	ldrh	r3, [r7, #6]
 800603c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 82fa 	beq.w	800663a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	b29b      	uxth	r3, r3
 8006058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800605c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006060:	82fb      	strh	r3, [r7, #22]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	441a      	add	r2, r3
 8006070:	8afb      	ldrh	r3, [r7, #22]
 8006072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800607a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800607e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006082:	b29b      	uxth	r3, r3
 8006084:	8013      	strh	r3, [r2, #0]
 8006086:	e2d8      	b.n	800663a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006088:	88fb      	ldrh	r3, [r7, #6]
 800608a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d021      	beq.n	80060d6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	461a      	mov	r2, r3
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	441a      	add	r2, r3
 80060be:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80060c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80060dc:	2b01      	cmp	r3, #1
 80060de:	f040 82ac 	bne.w	800663a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	695a      	ldr	r2, [r3, #20]
 80060e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80060ea:	441a      	add	r2, r3
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	69da      	ldr	r2, [r3, #28]
 80060f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80060f8:	441a      	add	r2, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	6a1a      	ldr	r2, [r3, #32]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	429a      	cmp	r2, r3
 8006108:	d30b      	bcc.n	8006122 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	6a1a      	ldr	r2, [r3, #32]
 8006116:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800611a:	1ad2      	subs	r2, r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	621a      	str	r2, [r3, #32]
 8006120:	e017      	b.n	8006152 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d108      	bne.n	800613c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800612a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800612e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800613a:	e00a      	b.n	8006152 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	2200      	movs	r2, #0
 8006150:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d165      	bne.n	8006226 <HAL_PCD_EP_DB_Transmit+0x37e>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006168:	b29b      	uxth	r3, r3
 800616a:	461a      	mov	r2, r3
 800616c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800616e:	4413      	add	r3, r2
 8006170:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	00da      	lsls	r2, r3, #3
 8006178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617a:	4413      	add	r3, r2
 800617c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006180:	63bb      	str	r3, [r7, #56]	; 0x38
 8006182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	b29b      	uxth	r3, r3
 8006188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800618c:	b29a      	uxth	r2, r3
 800618e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006190:	801a      	strh	r2, [r3, #0]
 8006192:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006196:	2b3e      	cmp	r3, #62	; 0x3e
 8006198:	d91d      	bls.n	80061d6 <HAL_PCD_EP_DB_Transmit+0x32e>
 800619a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800619e:	095b      	lsrs	r3, r3, #5
 80061a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80061a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061a6:	f003 031f 	and.w	r3, r3, #31
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d102      	bne.n	80061b4 <HAL_PCD_EP_DB_Transmit+0x30c>
 80061ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b0:	3b01      	subs	r3, #1
 80061b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80061b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b6:	881b      	ldrh	r3, [r3, #0]
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061bc:	b29b      	uxth	r3, r3
 80061be:	029b      	lsls	r3, r3, #10
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	4313      	orrs	r3, r2
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d2:	801a      	strh	r2, [r3, #0]
 80061d4:	e044      	b.n	8006260 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80061d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10a      	bne.n	80061f4 <HAL_PCD_EP_DB_Transmit+0x34c>
 80061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f0:	801a      	strh	r2, [r3, #0]
 80061f2:	e035      	b.n	8006260 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80061f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061f8:	085b      	lsrs	r3, r3, #1
 80061fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80061fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <HAL_PCD_EP_DB_Transmit+0x366>
 8006208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800620a:	3301      	adds	r3, #1
 800620c:	64bb      	str	r3, [r7, #72]	; 0x48
 800620e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	b29a      	uxth	r2, r3
 8006214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006216:	b29b      	uxth	r3, r3
 8006218:	029b      	lsls	r3, r3, #10
 800621a:	b29b      	uxth	r3, r3
 800621c:	4313      	orrs	r3, r2
 800621e:	b29a      	uxth	r2, r3
 8006220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006222:	801a      	strh	r2, [r3, #0]
 8006224:	e01c      	b.n	8006260 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	785b      	ldrb	r3, [r3, #1]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d118      	bne.n	8006260 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	647b      	str	r3, [r7, #68]	; 0x44
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800623c:	b29b      	uxth	r3, r3
 800623e:	461a      	mov	r2, r3
 8006240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006242:	4413      	add	r3, r2
 8006244:	647b      	str	r3, [r7, #68]	; 0x44
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	00da      	lsls	r2, r3, #3
 800624c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800624e:	4413      	add	r3, r2
 8006250:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006254:	643b      	str	r3, [r7, #64]	; 0x40
 8006256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800625a:	b29a      	uxth	r2, r3
 800625c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800625e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6818      	ldr	r0, [r3, #0]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	6959      	ldr	r1, [r3, #20]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	891a      	ldrh	r2, [r3, #8]
 800626c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006270:	b29b      	uxth	r3, r3
 8006272:	f006 f80d 	bl	800c290 <USB_WritePMA>
 8006276:	e1e0      	b.n	800663a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006280:	b29b      	uxth	r3, r3
 8006282:	461a      	mov	r2, r3
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	4413      	add	r3, r2
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	6812      	ldr	r2, [r2, #0]
 8006290:	4413      	add	r3, r2
 8006292:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800629c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	699a      	ldr	r2, [r3, #24]
 80062a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d307      	bcc.n	80062bc <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	699a      	ldr	r2, [r3, #24]
 80062b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80062b4:	1ad2      	subs	r2, r2, r3
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	619a      	str	r2, [r3, #24]
 80062ba:	e002      	b.n	80062c2 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2200      	movs	r2, #0
 80062c0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f040 80c0 	bne.w	800644c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	785b      	ldrb	r3, [r3, #1]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d126      	bne.n	8006322 <HAL_PCD_EP_DB_Transmit+0x47a>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	461a      	mov	r2, r3
 80062e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062e8:	4413      	add	r3, r2
 80062ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	00da      	lsls	r2, r3, #3
 80062f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062f4:	4413      	add	r3, r2
 80062f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80062fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	b29b      	uxth	r3, r3
 8006302:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006306:	b29a      	uxth	r2, r3
 8006308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800630a:	801a      	strh	r2, [r3, #0]
 800630c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	b29b      	uxth	r3, r3
 8006312:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800631a:	b29a      	uxth	r2, r3
 800631c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800631e:	801a      	strh	r2, [r3, #0]
 8006320:	e01a      	b.n	8006358 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	785b      	ldrb	r3, [r3, #1]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d116      	bne.n	8006358 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	667b      	str	r3, [r7, #100]	; 0x64
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006338:	b29b      	uxth	r3, r3
 800633a:	461a      	mov	r2, r3
 800633c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800633e:	4413      	add	r3, r2
 8006340:	667b      	str	r3, [r7, #100]	; 0x64
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	00da      	lsls	r2, r3, #3
 8006348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800634a:	4413      	add	r3, r2
 800634c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006350:	663b      	str	r3, [r7, #96]	; 0x60
 8006352:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006354:	2200      	movs	r2, #0
 8006356:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	677b      	str	r3, [r7, #116]	; 0x74
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	785b      	ldrb	r3, [r3, #1]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d12b      	bne.n	80063be <HAL_PCD_EP_DB_Transmit+0x516>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006374:	b29b      	uxth	r3, r3
 8006376:	461a      	mov	r2, r3
 8006378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800637a:	4413      	add	r3, r2
 800637c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	00da      	lsls	r2, r3, #3
 8006384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006386:	4413      	add	r3, r2
 8006388:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800638c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006390:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	b29b      	uxth	r3, r3
 8006398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800639c:	b29a      	uxth	r2, r3
 800639e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063a2:	801a      	strh	r2, [r3, #0]
 80063a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063ba:	801a      	strh	r2, [r3, #0]
 80063bc:	e017      	b.n	80063ee <HAL_PCD_EP_DB_Transmit+0x546>
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	785b      	ldrb	r3, [r3, #1]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d113      	bne.n	80063ee <HAL_PCD_EP_DB_Transmit+0x546>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	461a      	mov	r2, r3
 80063d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063d4:	4413      	add	r3, r2
 80063d6:	677b      	str	r3, [r7, #116]	; 0x74
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	00da      	lsls	r2, r3, #3
 80063de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063e0:	4413      	add	r3, r2
 80063e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063e6:	673b      	str	r3, [r7, #112]	; 0x70
 80063e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063ea:	2200      	movs	r2, #0
 80063ec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	4619      	mov	r1, r3
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f008 f8e0 	bl	800e5ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80063fa:	88fb      	ldrh	r3, [r7, #6]
 80063fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006400:	2b00      	cmp	r3, #0
 8006402:	f040 811a 	bne.w	800663a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	b29b      	uxth	r3, r3
 8006418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800641c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006420:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	461a      	mov	r2, r3
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	441a      	add	r2, r3
 8006432:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8006436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800643a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800643e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006446:	b29b      	uxth	r3, r3
 8006448:	8013      	strh	r3, [r2, #0]
 800644a:	e0f6      	b.n	800663a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800644c:	88fb      	ldrh	r3, [r7, #6]
 800644e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d121      	bne.n	800649a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	b29b      	uxth	r3, r3
 8006468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800646c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006470:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	441a      	add	r2, r3
 8006482:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800648a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800648e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006496:	b29b      	uxth	r3, r3
 8006498:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	f040 80ca 	bne.w	800663a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	695a      	ldr	r2, [r3, #20]
 80064aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80064ae:	441a      	add	r2, r3
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	69da      	ldr	r2, [r3, #28]
 80064b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80064bc:	441a      	add	r2, r3
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	6a1a      	ldr	r2, [r3, #32]
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d30b      	bcc.n	80064e6 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	6a1a      	ldr	r2, [r3, #32]
 80064da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064de:	1ad2      	subs	r2, r2, r3
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	621a      	str	r2, [r3, #32]
 80064e4:	e017      	b.n	8006516 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d108      	bne.n	8006500 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80064ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80064f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80064fe:	e00a      	b.n	8006516 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2200      	movs	r2, #0
 800650c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	657b      	str	r3, [r7, #84]	; 0x54
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	785b      	ldrb	r3, [r3, #1]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d165      	bne.n	80065f0 <HAL_PCD_EP_DB_Transmit+0x748>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	65fb      	str	r3, [r7, #92]	; 0x5c
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006532:	b29b      	uxth	r3, r3
 8006534:	461a      	mov	r2, r3
 8006536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006538:	4413      	add	r3, r2
 800653a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	00da      	lsls	r2, r3, #3
 8006542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006544:	4413      	add	r3, r2
 8006546:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800654a:	65bb      	str	r3, [r7, #88]	; 0x58
 800654c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	b29b      	uxth	r3, r3
 8006552:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006556:	b29a      	uxth	r2, r3
 8006558:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800655a:	801a      	strh	r2, [r3, #0]
 800655c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006560:	2b3e      	cmp	r3, #62	; 0x3e
 8006562:	d91d      	bls.n	80065a0 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8006564:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006568:	095b      	lsrs	r3, r3, #5
 800656a:	66bb      	str	r3, [r7, #104]	; 0x68
 800656c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006570:	f003 031f 	and.w	r3, r3, #31
 8006574:	2b00      	cmp	r3, #0
 8006576:	d102      	bne.n	800657e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006578:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800657a:	3b01      	subs	r3, #1
 800657c:	66bb      	str	r3, [r7, #104]	; 0x68
 800657e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29a      	uxth	r2, r3
 8006584:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006586:	b29b      	uxth	r3, r3
 8006588:	029b      	lsls	r3, r3, #10
 800658a:	b29b      	uxth	r3, r3
 800658c:	4313      	orrs	r3, r2
 800658e:	b29b      	uxth	r3, r3
 8006590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006598:	b29a      	uxth	r2, r3
 800659a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800659c:	801a      	strh	r2, [r3, #0]
 800659e:	e041      	b.n	8006624 <HAL_PCD_EP_DB_Transmit+0x77c>
 80065a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10a      	bne.n	80065be <HAL_PCD_EP_DB_Transmit+0x716>
 80065a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065ba:	801a      	strh	r2, [r3, #0]
 80065bc:	e032      	b.n	8006624 <HAL_PCD_EP_DB_Transmit+0x77c>
 80065be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065c2:	085b      	lsrs	r3, r3, #1
 80065c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80065c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <HAL_PCD_EP_DB_Transmit+0x730>
 80065d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065d4:	3301      	adds	r3, #1
 80065d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80065d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	b29a      	uxth	r2, r3
 80065de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	029b      	lsls	r3, r3, #10
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	4313      	orrs	r3, r2
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065ec:	801a      	strh	r2, [r3, #0]
 80065ee:	e019      	b.n	8006624 <HAL_PCD_EP_DB_Transmit+0x77c>
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	785b      	ldrb	r3, [r3, #1]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d115      	bne.n	8006624 <HAL_PCD_EP_DB_Transmit+0x77c>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006600:	b29b      	uxth	r3, r3
 8006602:	461a      	mov	r2, r3
 8006604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006606:	4413      	add	r3, r2
 8006608:	657b      	str	r3, [r7, #84]	; 0x54
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	00da      	lsls	r2, r3, #3
 8006610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006612:	4413      	add	r3, r2
 8006614:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006618:	653b      	str	r3, [r7, #80]	; 0x50
 800661a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800661e:	b29a      	uxth	r2, r3
 8006620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006622:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6818      	ldr	r0, [r3, #0]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	6959      	ldr	r1, [r3, #20]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	895a      	ldrh	r2, [r3, #10]
 8006630:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006634:	b29b      	uxth	r3, r3
 8006636:	f005 fe2b 	bl	800c290 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	b29b      	uxth	r3, r3
 800664c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006654:	82bb      	strh	r3, [r7, #20]
 8006656:	8abb      	ldrh	r3, [r7, #20]
 8006658:	f083 0310 	eor.w	r3, r3, #16
 800665c:	82bb      	strh	r3, [r7, #20]
 800665e:	8abb      	ldrh	r3, [r7, #20]
 8006660:	f083 0320 	eor.w	r3, r3, #32
 8006664:	82bb      	strh	r3, [r7, #20]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	461a      	mov	r2, r3
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	441a      	add	r2, r3
 8006674:	8abb      	ldrh	r3, [r7, #20]
 8006676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800667a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800667e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006686:	b29b      	uxth	r3, r3
 8006688:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3790      	adds	r7, #144	; 0x90
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	607b      	str	r3, [r7, #4]
 800669e:	460b      	mov	r3, r1
 80066a0:	817b      	strh	r3, [r7, #10]
 80066a2:	4613      	mov	r3, r2
 80066a4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80066a6:	897b      	ldrh	r3, [r7, #10]
 80066a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00b      	beq.n	80066ca <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066b2:	897b      	ldrh	r3, [r7, #10]
 80066b4:	f003 0307 	and.w	r3, r3, #7
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	00db      	lsls	r3, r3, #3
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	4413      	add	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]
 80066c8:	e009      	b.n	80066de <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80066ca:	897a      	ldrh	r2, [r7, #10]
 80066cc:	4613      	mov	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	00db      	lsls	r3, r3, #3
 80066d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	4413      	add	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80066de:	893b      	ldrh	r3, [r7, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d107      	bne.n	80066f4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	2200      	movs	r2, #0
 80066e8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	80da      	strh	r2, [r3, #6]
 80066f2:	e00b      	b.n	800670c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	2201      	movs	r2, #1
 80066f8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	0c1b      	lsrs	r3, r3, #16
 8006706:	b29a      	uxth	r2, r3
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	371c      	adds	r7, #28
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
	...

0800671c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8006722:	af00      	add	r7, sp, #0
 8006724:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006728:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800672c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800672e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006732:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d102      	bne.n	8006742 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	f001 b83a 	b.w	80077b6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006746:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 816f 	beq.w	8006a36 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006758:	4bb5      	ldr	r3, [pc, #724]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f003 030c 	and.w	r3, r3, #12
 8006760:	2b04      	cmp	r3, #4
 8006762:	d00c      	beq.n	800677e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006764:	4bb2      	ldr	r3, [pc, #712]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f003 030c 	and.w	r3, r3, #12
 800676c:	2b08      	cmp	r3, #8
 800676e:	d15c      	bne.n	800682a <HAL_RCC_OscConfig+0x10e>
 8006770:	4baf      	ldr	r3, [pc, #700]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8006778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800677c:	d155      	bne.n	800682a <HAL_RCC_OscConfig+0x10e>
 800677e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006782:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006786:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800678a:	fa93 f3a3 	rbit	r3, r3
 800678e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006792:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006796:	fab3 f383 	clz	r3, r3
 800679a:	b2db      	uxtb	r3, r3
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	f043 0301 	orr.w	r3, r3, #1
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d102      	bne.n	80067b0 <HAL_RCC_OscConfig+0x94>
 80067aa:	4ba1      	ldr	r3, [pc, #644]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	e015      	b.n	80067dc <HAL_RCC_OscConfig+0xc0>
 80067b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067b4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067b8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80067bc:	fa93 f3a3 	rbit	r3, r3
 80067c0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80067c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067c8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80067cc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80067d0:	fa93 f3a3 	rbit	r3, r3
 80067d4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80067d8:	4b95      	ldr	r3, [pc, #596]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80067e0:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80067e4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80067e8:	fa92 f2a2 	rbit	r2, r2
 80067ec:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80067f0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80067f4:	fab2 f282 	clz	r2, r2
 80067f8:	b2d2      	uxtb	r2, r2
 80067fa:	f042 0220 	orr.w	r2, r2, #32
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	f002 021f 	and.w	r2, r2, #31
 8006804:	2101      	movs	r1, #1
 8006806:	fa01 f202 	lsl.w	r2, r1, r2
 800680a:	4013      	ands	r3, r2
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 8111 	beq.w	8006a34 <HAL_RCC_OscConfig+0x318>
 8006812:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006816:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	f040 8108 	bne.w	8006a34 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	f000 bfc6 	b.w	80077b6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800682a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800682e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800683a:	d106      	bne.n	800684a <HAL_RCC_OscConfig+0x12e>
 800683c:	4b7c      	ldr	r3, [pc, #496]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a7b      	ldr	r2, [pc, #492]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 8006842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006846:	6013      	str	r3, [r2, #0]
 8006848:	e036      	b.n	80068b8 <HAL_RCC_OscConfig+0x19c>
 800684a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800684e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10c      	bne.n	8006874 <HAL_RCC_OscConfig+0x158>
 800685a:	4b75      	ldr	r3, [pc, #468]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a74      	ldr	r2, [pc, #464]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 8006860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	4b72      	ldr	r3, [pc, #456]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a71      	ldr	r2, [pc, #452]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 800686c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	e021      	b.n	80068b8 <HAL_RCC_OscConfig+0x19c>
 8006874:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006878:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006884:	d10c      	bne.n	80068a0 <HAL_RCC_OscConfig+0x184>
 8006886:	4b6a      	ldr	r3, [pc, #424]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a69      	ldr	r2, [pc, #420]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 800688c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006890:	6013      	str	r3, [r2, #0]
 8006892:	4b67      	ldr	r3, [pc, #412]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a66      	ldr	r2, [pc, #408]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 8006898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	e00b      	b.n	80068b8 <HAL_RCC_OscConfig+0x19c>
 80068a0:	4b63      	ldr	r3, [pc, #396]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a62      	ldr	r2, [pc, #392]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 80068a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068aa:	6013      	str	r3, [r2, #0]
 80068ac:	4b60      	ldr	r3, [pc, #384]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a5f      	ldr	r2, [pc, #380]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 80068b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068b6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d059      	beq.n	800697c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c8:	f7fb fe08 	bl	80024dc <HAL_GetTick>
 80068cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068d0:	e00a      	b.n	80068e8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068d2:	f7fb fe03 	bl	80024dc <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b64      	cmp	r3, #100	; 0x64
 80068e0:	d902      	bls.n	80068e8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	f000 bf67 	b.w	80077b6 <HAL_RCC_OscConfig+0x109a>
 80068e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068ec:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068f0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80068f4:	fa93 f3a3 	rbit	r3, r3
 80068f8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80068fc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006900:	fab3 f383 	clz	r3, r3
 8006904:	b2db      	uxtb	r3, r3
 8006906:	095b      	lsrs	r3, r3, #5
 8006908:	b2db      	uxtb	r3, r3
 800690a:	f043 0301 	orr.w	r3, r3, #1
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b01      	cmp	r3, #1
 8006912:	d102      	bne.n	800691a <HAL_RCC_OscConfig+0x1fe>
 8006914:	4b46      	ldr	r3, [pc, #280]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	e015      	b.n	8006946 <HAL_RCC_OscConfig+0x22a>
 800691a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800691e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006922:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8006926:	fa93 f3a3 	rbit	r3, r3
 800692a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800692e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006932:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006936:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800693a:	fa93 f3a3 	rbit	r3, r3
 800693e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006942:	4b3b      	ldr	r3, [pc, #236]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800694a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800694e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8006952:	fa92 f2a2 	rbit	r2, r2
 8006956:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800695a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800695e:	fab2 f282 	clz	r2, r2
 8006962:	b2d2      	uxtb	r2, r2
 8006964:	f042 0220 	orr.w	r2, r2, #32
 8006968:	b2d2      	uxtb	r2, r2
 800696a:	f002 021f 	and.w	r2, r2, #31
 800696e:	2101      	movs	r1, #1
 8006970:	fa01 f202 	lsl.w	r2, r1, r2
 8006974:	4013      	ands	r3, r2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0ab      	beq.n	80068d2 <HAL_RCC_OscConfig+0x1b6>
 800697a:	e05c      	b.n	8006a36 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800697c:	f7fb fdae 	bl	80024dc <HAL_GetTick>
 8006980:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006984:	e00a      	b.n	800699c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006986:	f7fb fda9 	bl	80024dc <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	2b64      	cmp	r3, #100	; 0x64
 8006994:	d902      	bls.n	800699c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	f000 bf0d 	b.w	80077b6 <HAL_RCC_OscConfig+0x109a>
 800699c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069a0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80069a8:	fa93 f3a3 	rbit	r3, r3
 80069ac:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80069b0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069b4:	fab3 f383 	clz	r3, r3
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	095b      	lsrs	r3, r3, #5
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	f043 0301 	orr.w	r3, r3, #1
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d102      	bne.n	80069ce <HAL_RCC_OscConfig+0x2b2>
 80069c8:	4b19      	ldr	r3, [pc, #100]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	e015      	b.n	80069fa <HAL_RCC_OscConfig+0x2de>
 80069ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069d2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80069da:	fa93 f3a3 	rbit	r3, r3
 80069de:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80069e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069e6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80069ea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80069ee:	fa93 f3a3 	rbit	r3, r3
 80069f2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80069f6:	4b0e      	ldr	r3, [pc, #56]	; (8006a30 <HAL_RCC_OscConfig+0x314>)
 80069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80069fe:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8006a02:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006a06:	fa92 f2a2 	rbit	r2, r2
 8006a0a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8006a0e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006a12:	fab2 f282 	clz	r2, r2
 8006a16:	b2d2      	uxtb	r2, r2
 8006a18:	f042 0220 	orr.w	r2, r2, #32
 8006a1c:	b2d2      	uxtb	r2, r2
 8006a1e:	f002 021f 	and.w	r2, r2, #31
 8006a22:	2101      	movs	r1, #1
 8006a24:	fa01 f202 	lsl.w	r2, r1, r2
 8006a28:	4013      	ands	r3, r2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1ab      	bne.n	8006986 <HAL_RCC_OscConfig+0x26a>
 8006a2e:	e002      	b.n	8006a36 <HAL_RCC_OscConfig+0x31a>
 8006a30:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 817f 	beq.w	8006d4a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006a4c:	4ba7      	ldr	r3, [pc, #668]	; (8006cec <HAL_RCC_OscConfig+0x5d0>)
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f003 030c 	and.w	r3, r3, #12
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00c      	beq.n	8006a72 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006a58:	4ba4      	ldr	r3, [pc, #656]	; (8006cec <HAL_RCC_OscConfig+0x5d0>)
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f003 030c 	and.w	r3, r3, #12
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d173      	bne.n	8006b4c <HAL_RCC_OscConfig+0x430>
 8006a64:	4ba1      	ldr	r3, [pc, #644]	; (8006cec <HAL_RCC_OscConfig+0x5d0>)
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8006a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a70:	d16c      	bne.n	8006b4c <HAL_RCC_OscConfig+0x430>
 8006a72:	2302      	movs	r3, #2
 8006a74:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a78:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8006a7c:	fa93 f3a3 	rbit	r3, r3
 8006a80:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8006a84:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a88:	fab3 f383 	clz	r3, r3
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	095b      	lsrs	r3, r3, #5
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	f043 0301 	orr.w	r3, r3, #1
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d102      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x386>
 8006a9c:	4b93      	ldr	r3, [pc, #588]	; (8006cec <HAL_RCC_OscConfig+0x5d0>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	e013      	b.n	8006aca <HAL_RCC_OscConfig+0x3ae>
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aa8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8006aac:	fa93 f3a3 	rbit	r3, r3
 8006ab0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006aba:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8006abe:	fa93 f3a3 	rbit	r3, r3
 8006ac2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006ac6:	4b89      	ldr	r3, [pc, #548]	; (8006cec <HAL_RCC_OscConfig+0x5d0>)
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	2202      	movs	r2, #2
 8006acc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8006ad0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8006ad4:	fa92 f2a2 	rbit	r2, r2
 8006ad8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8006adc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006ae0:	fab2 f282 	clz	r2, r2
 8006ae4:	b2d2      	uxtb	r2, r2
 8006ae6:	f042 0220 	orr.w	r2, r2, #32
 8006aea:	b2d2      	uxtb	r2, r2
 8006aec:	f002 021f 	and.w	r2, r2, #31
 8006af0:	2101      	movs	r1, #1
 8006af2:	fa01 f202 	lsl.w	r2, r1, r2
 8006af6:	4013      	ands	r3, r2
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00a      	beq.n	8006b12 <HAL_RCC_OscConfig+0x3f6>
 8006afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d002      	beq.n	8006b12 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	f000 be52 	b.w	80077b6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b12:	4b76      	ldr	r3, [pc, #472]	; (8006cec <HAL_RCC_OscConfig+0x5d0>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	21f8      	movs	r1, #248	; 0xf8
 8006b28:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b2c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8006b30:	fa91 f1a1 	rbit	r1, r1
 8006b34:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8006b38:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006b3c:	fab1 f181 	clz	r1, r1
 8006b40:	b2c9      	uxtb	r1, r1
 8006b42:	408b      	lsls	r3, r1
 8006b44:	4969      	ldr	r1, [pc, #420]	; (8006cec <HAL_RCC_OscConfig+0x5d0>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b4a:	e0fe      	b.n	8006d4a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 8088 	beq.w	8006c6e <HAL_RCC_OscConfig+0x552>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b64:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006b68:	fa93 f3a3 	rbit	r3, r3
 8006b6c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8006b70:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b74:	fab3 f383 	clz	r3, r3
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006b7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	461a      	mov	r2, r3
 8006b86:	2301      	movs	r3, #1
 8006b88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b8a:	f7fb fca7 	bl	80024dc <HAL_GetTick>
 8006b8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b92:	e00a      	b.n	8006baa <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b94:	f7fb fca2 	bl	80024dc <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d902      	bls.n	8006baa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	f000 be06 	b.w	80077b6 <HAL_RCC_OscConfig+0x109a>
 8006baa:	2302      	movs	r3, #2
 8006bac:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bb0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006bb4:	fa93 f3a3 	rbit	r3, r3
 8006bb8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8006bbc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bc0:	fab3 f383 	clz	r3, r3
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	095b      	lsrs	r3, r3, #5
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	f043 0301 	orr.w	r3, r3, #1
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d102      	bne.n	8006bda <HAL_RCC_OscConfig+0x4be>
 8006bd4:	4b45      	ldr	r3, [pc, #276]	; (8006cec <HAL_RCC_OscConfig+0x5d0>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	e013      	b.n	8006c02 <HAL_RCC_OscConfig+0x4e6>
 8006bda:	2302      	movs	r3, #2
 8006bdc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006be4:	fa93 f3a3 	rbit	r3, r3
 8006be8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8006bec:	2302      	movs	r3, #2
 8006bee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006bf2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006bf6:	fa93 f3a3 	rbit	r3, r3
 8006bfa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006bfe:	4b3b      	ldr	r3, [pc, #236]	; (8006cec <HAL_RCC_OscConfig+0x5d0>)
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	2202      	movs	r2, #2
 8006c04:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8006c08:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006c0c:	fa92 f2a2 	rbit	r2, r2
 8006c10:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8006c14:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006c18:	fab2 f282 	clz	r2, r2
 8006c1c:	b2d2      	uxtb	r2, r2
 8006c1e:	f042 0220 	orr.w	r2, r2, #32
 8006c22:	b2d2      	uxtb	r2, r2
 8006c24:	f002 021f 	and.w	r2, r2, #31
 8006c28:	2101      	movs	r1, #1
 8006c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8006c2e:	4013      	ands	r3, r2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0af      	beq.n	8006b94 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c34:	4b2d      	ldr	r3, [pc, #180]	; (8006cec <HAL_RCC_OscConfig+0x5d0>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	21f8      	movs	r1, #248	; 0xf8
 8006c4a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c4e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8006c52:	fa91 f1a1 	rbit	r1, r1
 8006c56:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8006c5a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006c5e:	fab1 f181 	clz	r1, r1
 8006c62:	b2c9      	uxtb	r1, r1
 8006c64:	408b      	lsls	r3, r1
 8006c66:	4921      	ldr	r1, [pc, #132]	; (8006cec <HAL_RCC_OscConfig+0x5d0>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	600b      	str	r3, [r1, #0]
 8006c6c:	e06d      	b.n	8006d4a <HAL_RCC_OscConfig+0x62e>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c74:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006c78:	fa93 f3a3 	rbit	r3, r3
 8006c7c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8006c80:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c84:	fab3 f383 	clz	r3, r3
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006c8e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	461a      	mov	r2, r3
 8006c96:	2300      	movs	r3, #0
 8006c98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c9a:	f7fb fc1f 	bl	80024dc <HAL_GetTick>
 8006c9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ca2:	e00a      	b.n	8006cba <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ca4:	f7fb fc1a 	bl	80024dc <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d902      	bls.n	8006cba <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	f000 bd7e 	b.w	80077b6 <HAL_RCC_OscConfig+0x109a>
 8006cba:	2302      	movs	r3, #2
 8006cbc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006cc4:	fa93 f3a3 	rbit	r3, r3
 8006cc8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8006ccc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cd0:	fab3 f383 	clz	r3, r3
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	095b      	lsrs	r3, r3, #5
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	f043 0301 	orr.w	r3, r3, #1
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d105      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x5d4>
 8006ce4:	4b01      	ldr	r3, [pc, #4]	; (8006cec <HAL_RCC_OscConfig+0x5d0>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	e016      	b.n	8006d18 <HAL_RCC_OscConfig+0x5fc>
 8006cea:	bf00      	nop
 8006cec:	40021000 	.word	0x40021000
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cfa:	fa93 f3a3 	rbit	r3, r3
 8006cfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006d02:	2302      	movs	r3, #2
 8006d04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006d08:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006d0c:	fa93 f3a3 	rbit	r3, r3
 8006d10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d14:	4bbf      	ldr	r3, [pc, #764]	; (8007014 <HAL_RCC_OscConfig+0x8f8>)
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	2202      	movs	r2, #2
 8006d1a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8006d1e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006d22:	fa92 f2a2 	rbit	r2, r2
 8006d26:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8006d2a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006d2e:	fab2 f282 	clz	r2, r2
 8006d32:	b2d2      	uxtb	r2, r2
 8006d34:	f042 0220 	orr.w	r2, r2, #32
 8006d38:	b2d2      	uxtb	r2, r2
 8006d3a:	f002 021f 	and.w	r2, r2, #31
 8006d3e:	2101      	movs	r1, #1
 8006d40:	fa01 f202 	lsl.w	r2, r1, r2
 8006d44:	4013      	ands	r3, r2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1ac      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d4e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0308 	and.w	r3, r3, #8
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 8113 	beq.w	8006f86 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d07c      	beq.n	8006e6a <HAL_RCC_OscConfig+0x74e>
 8006d70:	2301      	movs	r3, #1
 8006d72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d7a:	fa93 f3a3 	rbit	r3, r3
 8006d7e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8006d82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d86:	fab3 f383 	clz	r3, r3
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	4ba2      	ldr	r3, [pc, #648]	; (8007018 <HAL_RCC_OscConfig+0x8fc>)
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	461a      	mov	r2, r3
 8006d96:	2301      	movs	r3, #1
 8006d98:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d9a:	f7fb fb9f 	bl	80024dc <HAL_GetTick>
 8006d9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006da2:	e00a      	b.n	8006dba <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006da4:	f7fb fb9a 	bl	80024dc <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d902      	bls.n	8006dba <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	f000 bcfe 	b.w	80077b6 <HAL_RCC_OscConfig+0x109a>
 8006dba:	2302      	movs	r3, #2
 8006dbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dc4:	fa93 f2a3 	rbit	r2, r3
 8006dc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006dcc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006dd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dda:	2202      	movs	r2, #2
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	fa93 f2a3 	rbit	r2, r3
 8006dec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006dfa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006dfe:	2202      	movs	r2, #2
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	fa93 f2a3 	rbit	r2, r3
 8006e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e14:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e18:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e1a:	4b7e      	ldr	r3, [pc, #504]	; (8007014 <HAL_RCC_OscConfig+0x8f8>)
 8006e1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e22:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006e26:	2102      	movs	r1, #2
 8006e28:	6019      	str	r1, [r3, #0]
 8006e2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	fa93 f1a3 	rbit	r1, r3
 8006e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e3c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006e40:	6019      	str	r1, [r3, #0]
  return result;
 8006e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e46:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	fab3 f383 	clz	r3, r3
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	f003 031f 	and.w	r3, r3, #31
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e62:	4013      	ands	r3, r2
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d09d      	beq.n	8006da4 <HAL_RCC_OscConfig+0x688>
 8006e68:	e08d      	b.n	8006f86 <HAL_RCC_OscConfig+0x86a>
 8006e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e6e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006e72:	2201      	movs	r2, #1
 8006e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e7a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	fa93 f2a3 	rbit	r2, r3
 8006e84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e88:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006e8c:	601a      	str	r2, [r3, #0]
  return result;
 8006e8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e92:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006e96:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e98:	fab3 f383 	clz	r3, r3
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	4b5d      	ldr	r3, [pc, #372]	; (8007018 <HAL_RCC_OscConfig+0x8fc>)
 8006ea2:	4413      	add	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eac:	f7fb fb16 	bl	80024dc <HAL_GetTick>
 8006eb0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006eb4:	e00a      	b.n	8006ecc <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006eb6:	f7fb fb11 	bl	80024dc <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d902      	bls.n	8006ecc <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	f000 bc75 	b.w	80077b6 <HAL_RCC_OscConfig+0x109a>
 8006ecc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ed0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006ed4:	2202      	movs	r2, #2
 8006ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ed8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006edc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	fa93 f2a3 	rbit	r2, r3
 8006ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006eea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ef4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ef8:	2202      	movs	r2, #2
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	fa93 f2a3 	rbit	r2, r3
 8006f0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f18:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f24:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	fa93 f2a3 	rbit	r2, r3
 8006f2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f32:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006f36:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f38:	4b36      	ldr	r3, [pc, #216]	; (8007014 <HAL_RCC_OscConfig+0x8f8>)
 8006f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f40:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006f44:	2102      	movs	r1, #2
 8006f46:	6019      	str	r1, [r3, #0]
 8006f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f4c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	fa93 f1a3 	rbit	r1, r3
 8006f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f5a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006f5e:	6019      	str	r1, [r3, #0]
  return result;
 8006f60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f64:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	fab3 f383 	clz	r3, r3
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	f003 031f 	and.w	r3, r3, #31
 8006f7a:	2101      	movs	r1, #1
 8006f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f80:	4013      	ands	r3, r2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d197      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0304 	and.w	r3, r3, #4
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 81a5 	beq.w	80072e6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fa2:	4b1c      	ldr	r3, [pc, #112]	; (8007014 <HAL_RCC_OscConfig+0x8f8>)
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d116      	bne.n	8006fdc <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fae:	4b19      	ldr	r3, [pc, #100]	; (8007014 <HAL_RCC_OscConfig+0x8f8>)
 8006fb0:	69db      	ldr	r3, [r3, #28]
 8006fb2:	4a18      	ldr	r2, [pc, #96]	; (8007014 <HAL_RCC_OscConfig+0x8f8>)
 8006fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fb8:	61d3      	str	r3, [r2, #28]
 8006fba:	4b16      	ldr	r3, [pc, #88]	; (8007014 <HAL_RCC_OscConfig+0x8f8>)
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006fc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006fd4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fdc:	4b0f      	ldr	r3, [pc, #60]	; (800701c <HAL_RCC_OscConfig+0x900>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d121      	bne.n	800702c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fe8:	4b0c      	ldr	r3, [pc, #48]	; (800701c <HAL_RCC_OscConfig+0x900>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a0b      	ldr	r2, [pc, #44]	; (800701c <HAL_RCC_OscConfig+0x900>)
 8006fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ff2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ff4:	f7fb fa72 	bl	80024dc <HAL_GetTick>
 8006ff8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ffc:	e010      	b.n	8007020 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ffe:	f7fb fa6d 	bl	80024dc <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	2b64      	cmp	r3, #100	; 0x64
 800700c:	d908      	bls.n	8007020 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e3d1      	b.n	80077b6 <HAL_RCC_OscConfig+0x109a>
 8007012:	bf00      	nop
 8007014:	40021000 	.word	0x40021000
 8007018:	10908120 	.word	0x10908120
 800701c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007020:	4b8d      	ldr	r3, [pc, #564]	; (8007258 <HAL_RCC_OscConfig+0xb3c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0e8      	beq.n	8006ffe <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800702c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007030:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d106      	bne.n	800704a <HAL_RCC_OscConfig+0x92e>
 800703c:	4b87      	ldr	r3, [pc, #540]	; (800725c <HAL_RCC_OscConfig+0xb40>)
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	4a86      	ldr	r2, [pc, #536]	; (800725c <HAL_RCC_OscConfig+0xb40>)
 8007042:	f043 0301 	orr.w	r3, r3, #1
 8007046:	6213      	str	r3, [r2, #32]
 8007048:	e035      	b.n	80070b6 <HAL_RCC_OscConfig+0x99a>
 800704a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800704e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10c      	bne.n	8007074 <HAL_RCC_OscConfig+0x958>
 800705a:	4b80      	ldr	r3, [pc, #512]	; (800725c <HAL_RCC_OscConfig+0xb40>)
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	4a7f      	ldr	r2, [pc, #508]	; (800725c <HAL_RCC_OscConfig+0xb40>)
 8007060:	f023 0301 	bic.w	r3, r3, #1
 8007064:	6213      	str	r3, [r2, #32]
 8007066:	4b7d      	ldr	r3, [pc, #500]	; (800725c <HAL_RCC_OscConfig+0xb40>)
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	4a7c      	ldr	r2, [pc, #496]	; (800725c <HAL_RCC_OscConfig+0xb40>)
 800706c:	f023 0304 	bic.w	r3, r3, #4
 8007070:	6213      	str	r3, [r2, #32]
 8007072:	e020      	b.n	80070b6 <HAL_RCC_OscConfig+0x99a>
 8007074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007078:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	2b05      	cmp	r3, #5
 8007082:	d10c      	bne.n	800709e <HAL_RCC_OscConfig+0x982>
 8007084:	4b75      	ldr	r3, [pc, #468]	; (800725c <HAL_RCC_OscConfig+0xb40>)
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	4a74      	ldr	r2, [pc, #464]	; (800725c <HAL_RCC_OscConfig+0xb40>)
 800708a:	f043 0304 	orr.w	r3, r3, #4
 800708e:	6213      	str	r3, [r2, #32]
 8007090:	4b72      	ldr	r3, [pc, #456]	; (800725c <HAL_RCC_OscConfig+0xb40>)
 8007092:	6a1b      	ldr	r3, [r3, #32]
 8007094:	4a71      	ldr	r2, [pc, #452]	; (800725c <HAL_RCC_OscConfig+0xb40>)
 8007096:	f043 0301 	orr.w	r3, r3, #1
 800709a:	6213      	str	r3, [r2, #32]
 800709c:	e00b      	b.n	80070b6 <HAL_RCC_OscConfig+0x99a>
 800709e:	4b6f      	ldr	r3, [pc, #444]	; (800725c <HAL_RCC_OscConfig+0xb40>)
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	4a6e      	ldr	r2, [pc, #440]	; (800725c <HAL_RCC_OscConfig+0xb40>)
 80070a4:	f023 0301 	bic.w	r3, r3, #1
 80070a8:	6213      	str	r3, [r2, #32]
 80070aa:	4b6c      	ldr	r3, [pc, #432]	; (800725c <HAL_RCC_OscConfig+0xb40>)
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	4a6b      	ldr	r2, [pc, #428]	; (800725c <HAL_RCC_OscConfig+0xb40>)
 80070b0:	f023 0304 	bic.w	r3, r3, #4
 80070b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80070b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 8081 	beq.w	80071ca <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070c8:	f7fb fa08 	bl	80024dc <HAL_GetTick>
 80070cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070d0:	e00b      	b.n	80070ea <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070d2:	f7fb fa03 	bl	80024dc <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	f241 3288 	movw	r2, #5000	; 0x1388
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d901      	bls.n	80070ea <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e365      	b.n	80077b6 <HAL_RCC_OscConfig+0x109a>
 80070ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070ee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80070f2:	2202      	movs	r2, #2
 80070f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070fa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	fa93 f2a3 	rbit	r2, r3
 8007104:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007108:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800710c:	601a      	str	r2, [r3, #0]
 800710e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007112:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007116:	2202      	movs	r2, #2
 8007118:	601a      	str	r2, [r3, #0]
 800711a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800711e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	fa93 f2a3 	rbit	r2, r3
 8007128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800712c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007130:	601a      	str	r2, [r3, #0]
  return result;
 8007132:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007136:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800713a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800713c:	fab3 f383 	clz	r3, r3
 8007140:	b2db      	uxtb	r3, r3
 8007142:	095b      	lsrs	r3, r3, #5
 8007144:	b2db      	uxtb	r3, r3
 8007146:	f043 0302 	orr.w	r3, r3, #2
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d102      	bne.n	8007156 <HAL_RCC_OscConfig+0xa3a>
 8007150:	4b42      	ldr	r3, [pc, #264]	; (800725c <HAL_RCC_OscConfig+0xb40>)
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	e013      	b.n	800717e <HAL_RCC_OscConfig+0xa62>
 8007156:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800715a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800715e:	2202      	movs	r2, #2
 8007160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007166:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	fa93 f2a3 	rbit	r2, r3
 8007170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007174:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	4b38      	ldr	r3, [pc, #224]	; (800725c <HAL_RCC_OscConfig+0xb40>)
 800717c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007182:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007186:	2102      	movs	r1, #2
 8007188:	6011      	str	r1, [r2, #0]
 800718a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800718e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007192:	6812      	ldr	r2, [r2, #0]
 8007194:	fa92 f1a2 	rbit	r1, r2
 8007198:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800719c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80071a0:	6011      	str	r1, [r2, #0]
  return result;
 80071a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80071a6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80071aa:	6812      	ldr	r2, [r2, #0]
 80071ac:	fab2 f282 	clz	r2, r2
 80071b0:	b2d2      	uxtb	r2, r2
 80071b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071b6:	b2d2      	uxtb	r2, r2
 80071b8:	f002 021f 	and.w	r2, r2, #31
 80071bc:	2101      	movs	r1, #1
 80071be:	fa01 f202 	lsl.w	r2, r1, r2
 80071c2:	4013      	ands	r3, r2
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d084      	beq.n	80070d2 <HAL_RCC_OscConfig+0x9b6>
 80071c8:	e083      	b.n	80072d2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071ca:	f7fb f987 	bl	80024dc <HAL_GetTick>
 80071ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071d2:	e00b      	b.n	80071ec <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071d4:	f7fb f982 	bl	80024dc <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d901      	bls.n	80071ec <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e2e4      	b.n	80077b6 <HAL_RCC_OscConfig+0x109a>
 80071ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80071f0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80071f4:	2202      	movs	r2, #2
 80071f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80071fc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	fa93 f2a3 	rbit	r2, r3
 8007206:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800720a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007214:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007218:	2202      	movs	r2, #2
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007220:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	fa93 f2a3 	rbit	r2, r3
 800722a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800722e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007232:	601a      	str	r2, [r3, #0]
  return result;
 8007234:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007238:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800723c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800723e:	fab3 f383 	clz	r3, r3
 8007242:	b2db      	uxtb	r3, r3
 8007244:	095b      	lsrs	r3, r3, #5
 8007246:	b2db      	uxtb	r3, r3
 8007248:	f043 0302 	orr.w	r3, r3, #2
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b02      	cmp	r3, #2
 8007250:	d106      	bne.n	8007260 <HAL_RCC_OscConfig+0xb44>
 8007252:	4b02      	ldr	r3, [pc, #8]	; (800725c <HAL_RCC_OscConfig+0xb40>)
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	e017      	b.n	8007288 <HAL_RCC_OscConfig+0xb6c>
 8007258:	40007000 	.word	0x40007000
 800725c:	40021000 	.word	0x40021000
 8007260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007264:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007268:	2202      	movs	r2, #2
 800726a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800726c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007270:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	fa93 f2a3 	rbit	r2, r3
 800727a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800727e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	4bb3      	ldr	r3, [pc, #716]	; (8007554 <HAL_RCC_OscConfig+0xe38>)
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800728c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007290:	2102      	movs	r1, #2
 8007292:	6011      	str	r1, [r2, #0]
 8007294:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007298:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800729c:	6812      	ldr	r2, [r2, #0]
 800729e:	fa92 f1a2 	rbit	r1, r2
 80072a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80072a6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80072aa:	6011      	str	r1, [r2, #0]
  return result;
 80072ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80072b0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80072b4:	6812      	ldr	r2, [r2, #0]
 80072b6:	fab2 f282 	clz	r2, r2
 80072ba:	b2d2      	uxtb	r2, r2
 80072bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072c0:	b2d2      	uxtb	r2, r2
 80072c2:	f002 021f 	and.w	r2, r2, #31
 80072c6:	2101      	movs	r1, #1
 80072c8:	fa01 f202 	lsl.w	r2, r1, r2
 80072cc:	4013      	ands	r3, r2
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d180      	bne.n	80071d4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80072d2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d105      	bne.n	80072e6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072da:	4b9e      	ldr	r3, [pc, #632]	; (8007554 <HAL_RCC_OscConfig+0xe38>)
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	4a9d      	ldr	r2, [pc, #628]	; (8007554 <HAL_RCC_OscConfig+0xe38>)
 80072e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072e4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80072ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 825e 	beq.w	80077b4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072f8:	4b96      	ldr	r3, [pc, #600]	; (8007554 <HAL_RCC_OscConfig+0xe38>)
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f003 030c 	and.w	r3, r3, #12
 8007300:	2b08      	cmp	r3, #8
 8007302:	f000 821f 	beq.w	8007744 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800730a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	2b02      	cmp	r3, #2
 8007314:	f040 8170 	bne.w	80075f8 <HAL_RCC_OscConfig+0xedc>
 8007318:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800731c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007320:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007324:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007326:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800732a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	fa93 f2a3 	rbit	r2, r3
 8007334:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007338:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800733c:	601a      	str	r2, [r3, #0]
  return result;
 800733e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007342:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007346:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007348:	fab3 f383 	clz	r3, r3
 800734c:	b2db      	uxtb	r3, r3
 800734e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007352:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	461a      	mov	r2, r3
 800735a:	2300      	movs	r3, #0
 800735c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800735e:	f7fb f8bd 	bl	80024dc <HAL_GetTick>
 8007362:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007366:	e009      	b.n	800737c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007368:	f7fb f8b8 	bl	80024dc <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	2b02      	cmp	r3, #2
 8007376:	d901      	bls.n	800737c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e21c      	b.n	80077b6 <HAL_RCC_OscConfig+0x109a>
 800737c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007380:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007384:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007388:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800738a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800738e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	fa93 f2a3 	rbit	r2, r3
 8007398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800739c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80073a0:	601a      	str	r2, [r3, #0]
  return result;
 80073a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80073a6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80073aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073ac:	fab3 f383 	clz	r3, r3
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	095b      	lsrs	r3, r3, #5
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	f043 0301 	orr.w	r3, r3, #1
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d102      	bne.n	80073c6 <HAL_RCC_OscConfig+0xcaa>
 80073c0:	4b64      	ldr	r3, [pc, #400]	; (8007554 <HAL_RCC_OscConfig+0xe38>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	e027      	b.n	8007416 <HAL_RCC_OscConfig+0xcfa>
 80073c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80073ca:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80073ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80073d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80073d8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	fa93 f2a3 	rbit	r2, r3
 80073e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80073e6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80073ea:	601a      	str	r2, [r3, #0]
 80073ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80073f0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80073f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80073f8:	601a      	str	r2, [r3, #0]
 80073fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80073fe:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	fa93 f2a3 	rbit	r2, r3
 8007408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800740c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	4b50      	ldr	r3, [pc, #320]	; (8007554 <HAL_RCC_OscConfig+0xe38>)
 8007414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007416:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800741a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800741e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007422:	6011      	str	r1, [r2, #0]
 8007424:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007428:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800742c:	6812      	ldr	r2, [r2, #0]
 800742e:	fa92 f1a2 	rbit	r1, r2
 8007432:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007436:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800743a:	6011      	str	r1, [r2, #0]
  return result;
 800743c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007440:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8007444:	6812      	ldr	r2, [r2, #0]
 8007446:	fab2 f282 	clz	r2, r2
 800744a:	b2d2      	uxtb	r2, r2
 800744c:	f042 0220 	orr.w	r2, r2, #32
 8007450:	b2d2      	uxtb	r2, r2
 8007452:	f002 021f 	and.w	r2, r2, #31
 8007456:	2101      	movs	r1, #1
 8007458:	fa01 f202 	lsl.w	r2, r1, r2
 800745c:	4013      	ands	r3, r2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d182      	bne.n	8007368 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007462:	4b3c      	ldr	r3, [pc, #240]	; (8007554 <HAL_RCC_OscConfig+0xe38>)
 8007464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007466:	f023 020f 	bic.w	r2, r3, #15
 800746a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800746e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007476:	4937      	ldr	r1, [pc, #220]	; (8007554 <HAL_RCC_OscConfig+0xe38>)
 8007478:	4313      	orrs	r3, r2
 800747a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800747c:	4b35      	ldr	r3, [pc, #212]	; (8007554 <HAL_RCC_OscConfig+0xe38>)
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8007484:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007488:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6a19      	ldr	r1, [r3, #32]
 8007490:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007494:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	69db      	ldr	r3, [r3, #28]
 800749c:	430b      	orrs	r3, r1
 800749e:	492d      	ldr	r1, [pc, #180]	; (8007554 <HAL_RCC_OscConfig+0xe38>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	604b      	str	r3, [r1, #4]
 80074a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80074a8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80074ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80074b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80074b6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	fa93 f2a3 	rbit	r2, r3
 80074c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80074c4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80074c8:	601a      	str	r2, [r3, #0]
  return result;
 80074ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80074ce:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80074d2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074d4:	fab3 f383 	clz	r3, r3
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80074de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	461a      	mov	r2, r3
 80074e6:	2301      	movs	r3, #1
 80074e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ea:	f7fa fff7 	bl	80024dc <HAL_GetTick>
 80074ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80074f2:	e009      	b.n	8007508 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074f4:	f7fa fff2 	bl	80024dc <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	2b02      	cmp	r3, #2
 8007502:	d901      	bls.n	8007508 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e156      	b.n	80077b6 <HAL_RCC_OscConfig+0x109a>
 8007508:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800750c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007510:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007514:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007516:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800751a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	fa93 f2a3 	rbit	r2, r3
 8007524:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007528:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800752c:	601a      	str	r2, [r3, #0]
  return result;
 800752e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007532:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007536:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007538:	fab3 f383 	clz	r3, r3
 800753c:	b2db      	uxtb	r3, r3
 800753e:	095b      	lsrs	r3, r3, #5
 8007540:	b2db      	uxtb	r3, r3
 8007542:	f043 0301 	orr.w	r3, r3, #1
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b01      	cmp	r3, #1
 800754a:	d105      	bne.n	8007558 <HAL_RCC_OscConfig+0xe3c>
 800754c:	4b01      	ldr	r3, [pc, #4]	; (8007554 <HAL_RCC_OscConfig+0xe38>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	e02a      	b.n	80075a8 <HAL_RCC_OscConfig+0xe8c>
 8007552:	bf00      	nop
 8007554:	40021000 	.word	0x40021000
 8007558:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800755c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007560:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007566:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800756a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	fa93 f2a3 	rbit	r2, r3
 8007574:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007578:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007582:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007586:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007590:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	fa93 f2a3 	rbit	r2, r3
 800759a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800759e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	4b86      	ldr	r3, [pc, #536]	; (80077c0 <HAL_RCC_OscConfig+0x10a4>)
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80075ac:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80075b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80075b4:	6011      	str	r1, [r2, #0]
 80075b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80075ba:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80075be:	6812      	ldr	r2, [r2, #0]
 80075c0:	fa92 f1a2 	rbit	r1, r2
 80075c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80075c8:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80075cc:	6011      	str	r1, [r2, #0]
  return result;
 80075ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80075d2:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80075d6:	6812      	ldr	r2, [r2, #0]
 80075d8:	fab2 f282 	clz	r2, r2
 80075dc:	b2d2      	uxtb	r2, r2
 80075de:	f042 0220 	orr.w	r2, r2, #32
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	f002 021f 	and.w	r2, r2, #31
 80075e8:	2101      	movs	r1, #1
 80075ea:	fa01 f202 	lsl.w	r2, r1, r2
 80075ee:	4013      	ands	r3, r2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f43f af7f 	beq.w	80074f4 <HAL_RCC_OscConfig+0xdd8>
 80075f6:	e0dd      	b.n	80077b4 <HAL_RCC_OscConfig+0x1098>
 80075f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80075fc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007600:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007606:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800760a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	fa93 f2a3 	rbit	r2, r3
 8007614:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007618:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800761c:	601a      	str	r2, [r3, #0]
  return result;
 800761e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007622:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007626:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007628:	fab3 f383 	clz	r3, r3
 800762c:	b2db      	uxtb	r3, r3
 800762e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007632:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	461a      	mov	r2, r3
 800763a:	2300      	movs	r3, #0
 800763c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800763e:	f7fa ff4d 	bl	80024dc <HAL_GetTick>
 8007642:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007646:	e009      	b.n	800765c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007648:	f7fa ff48 	bl	80024dc <HAL_GetTick>
 800764c:	4602      	mov	r2, r0
 800764e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	2b02      	cmp	r3, #2
 8007656:	d901      	bls.n	800765c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e0ac      	b.n	80077b6 <HAL_RCC_OscConfig+0x109a>
 800765c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007660:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007664:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007668:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800766a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800766e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	fa93 f2a3 	rbit	r2, r3
 8007678:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800767c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007680:	601a      	str	r2, [r3, #0]
  return result;
 8007682:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007686:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800768a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800768c:	fab3 f383 	clz	r3, r3
 8007690:	b2db      	uxtb	r3, r3
 8007692:	095b      	lsrs	r3, r3, #5
 8007694:	b2db      	uxtb	r3, r3
 8007696:	f043 0301 	orr.w	r3, r3, #1
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b01      	cmp	r3, #1
 800769e:	d102      	bne.n	80076a6 <HAL_RCC_OscConfig+0xf8a>
 80076a0:	4b47      	ldr	r3, [pc, #284]	; (80077c0 <HAL_RCC_OscConfig+0x10a4>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	e027      	b.n	80076f6 <HAL_RCC_OscConfig+0xfda>
 80076a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80076aa:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80076ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80076b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80076b8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	fa93 f2a3 	rbit	r2, r3
 80076c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80076c6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80076d0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80076d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80076de:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	fa93 f2a3 	rbit	r2, r3
 80076e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80076ec:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	4b33      	ldr	r3, [pc, #204]	; (80077c0 <HAL_RCC_OscConfig+0x10a4>)
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80076fa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80076fe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007702:	6011      	str	r1, [r2, #0]
 8007704:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007708:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800770c:	6812      	ldr	r2, [r2, #0]
 800770e:	fa92 f1a2 	rbit	r1, r2
 8007712:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007716:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800771a:	6011      	str	r1, [r2, #0]
  return result;
 800771c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007720:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8007724:	6812      	ldr	r2, [r2, #0]
 8007726:	fab2 f282 	clz	r2, r2
 800772a:	b2d2      	uxtb	r2, r2
 800772c:	f042 0220 	orr.w	r2, r2, #32
 8007730:	b2d2      	uxtb	r2, r2
 8007732:	f002 021f 	and.w	r2, r2, #31
 8007736:	2101      	movs	r1, #1
 8007738:	fa01 f202 	lsl.w	r2, r1, r2
 800773c:	4013      	ands	r3, r2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d182      	bne.n	8007648 <HAL_RCC_OscConfig+0xf2c>
 8007742:	e037      	b.n	80077b4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007748:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d101      	bne.n	8007758 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e02e      	b.n	80077b6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007758:	4b19      	ldr	r3, [pc, #100]	; (80077c0 <HAL_RCC_OscConfig+0x10a4>)
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8007760:	4b17      	ldr	r3, [pc, #92]	; (80077c0 <HAL_RCC_OscConfig+0x10a4>)
 8007762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007764:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007768:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800776c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8007770:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007774:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	69db      	ldr	r3, [r3, #28]
 800777c:	429a      	cmp	r2, r3
 800777e:	d117      	bne.n	80077b0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8007780:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007784:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007788:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800778c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007794:	429a      	cmp	r2, r3
 8007796:	d10b      	bne.n	80077b0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8007798:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800779c:	f003 020f 	and.w	r2, r3, #15
 80077a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80077a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d001      	beq.n	80077b4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e000      	b.n	80077b6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	40021000 	.word	0x40021000

080077c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b09e      	sub	sp, #120	; 0x78
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80077ce:	2300      	movs	r3, #0
 80077d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d101      	bne.n	80077dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e162      	b.n	8007aa2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077dc:	4b90      	ldr	r3, [pc, #576]	; (8007a20 <HAL_RCC_ClockConfig+0x25c>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0307 	and.w	r3, r3, #7
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d910      	bls.n	800780c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ea:	4b8d      	ldr	r3, [pc, #564]	; (8007a20 <HAL_RCC_ClockConfig+0x25c>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f023 0207 	bic.w	r2, r3, #7
 80077f2:	498b      	ldr	r1, [pc, #556]	; (8007a20 <HAL_RCC_ClockConfig+0x25c>)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077fa:	4b89      	ldr	r3, [pc, #548]	; (8007a20 <HAL_RCC_ClockConfig+0x25c>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0307 	and.w	r3, r3, #7
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	429a      	cmp	r2, r3
 8007806:	d001      	beq.n	800780c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e14a      	b.n	8007aa2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b00      	cmp	r3, #0
 8007816:	d008      	beq.n	800782a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007818:	4b82      	ldr	r3, [pc, #520]	; (8007a24 <HAL_RCC_ClockConfig+0x260>)
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	497f      	ldr	r1, [pc, #508]	; (8007a24 <HAL_RCC_ClockConfig+0x260>)
 8007826:	4313      	orrs	r3, r2
 8007828:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 80dc 	beq.w	80079f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d13c      	bne.n	80078ba <HAL_RCC_ClockConfig+0xf6>
 8007840:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007844:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007846:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007848:	fa93 f3a3 	rbit	r3, r3
 800784c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800784e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007850:	fab3 f383 	clz	r3, r3
 8007854:	b2db      	uxtb	r3, r3
 8007856:	095b      	lsrs	r3, r3, #5
 8007858:	b2db      	uxtb	r3, r3
 800785a:	f043 0301 	orr.w	r3, r3, #1
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b01      	cmp	r3, #1
 8007862:	d102      	bne.n	800786a <HAL_RCC_ClockConfig+0xa6>
 8007864:	4b6f      	ldr	r3, [pc, #444]	; (8007a24 <HAL_RCC_ClockConfig+0x260>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	e00f      	b.n	800788a <HAL_RCC_ClockConfig+0xc6>
 800786a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800786e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007870:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007872:	fa93 f3a3 	rbit	r3, r3
 8007876:	667b      	str	r3, [r7, #100]	; 0x64
 8007878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800787c:	663b      	str	r3, [r7, #96]	; 0x60
 800787e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007880:	fa93 f3a3 	rbit	r3, r3
 8007884:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007886:	4b67      	ldr	r3, [pc, #412]	; (8007a24 <HAL_RCC_ClockConfig+0x260>)
 8007888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800788e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007890:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007892:	fa92 f2a2 	rbit	r2, r2
 8007896:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007898:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800789a:	fab2 f282 	clz	r2, r2
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	f042 0220 	orr.w	r2, r2, #32
 80078a4:	b2d2      	uxtb	r2, r2
 80078a6:	f002 021f 	and.w	r2, r2, #31
 80078aa:	2101      	movs	r1, #1
 80078ac:	fa01 f202 	lsl.w	r2, r1, r2
 80078b0:	4013      	ands	r3, r2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d17b      	bne.n	80079ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e0f3      	b.n	8007aa2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d13c      	bne.n	800793c <HAL_RCC_ClockConfig+0x178>
 80078c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ca:	fa93 f3a3 	rbit	r3, r3
 80078ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80078d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078d2:	fab3 f383 	clz	r3, r3
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	095b      	lsrs	r3, r3, #5
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	f043 0301 	orr.w	r3, r3, #1
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d102      	bne.n	80078ec <HAL_RCC_ClockConfig+0x128>
 80078e6:	4b4f      	ldr	r3, [pc, #316]	; (8007a24 <HAL_RCC_ClockConfig+0x260>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	e00f      	b.n	800790c <HAL_RCC_ClockConfig+0x148>
 80078ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078f4:	fa93 f3a3 	rbit	r3, r3
 80078f8:	647b      	str	r3, [r7, #68]	; 0x44
 80078fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078fe:	643b      	str	r3, [r7, #64]	; 0x40
 8007900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007902:	fa93 f3a3 	rbit	r3, r3
 8007906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007908:	4b46      	ldr	r3, [pc, #280]	; (8007a24 <HAL_RCC_ClockConfig+0x260>)
 800790a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007910:	63ba      	str	r2, [r7, #56]	; 0x38
 8007912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007914:	fa92 f2a2 	rbit	r2, r2
 8007918:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800791a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800791c:	fab2 f282 	clz	r2, r2
 8007920:	b2d2      	uxtb	r2, r2
 8007922:	f042 0220 	orr.w	r2, r2, #32
 8007926:	b2d2      	uxtb	r2, r2
 8007928:	f002 021f 	and.w	r2, r2, #31
 800792c:	2101      	movs	r1, #1
 800792e:	fa01 f202 	lsl.w	r2, r1, r2
 8007932:	4013      	ands	r3, r2
 8007934:	2b00      	cmp	r3, #0
 8007936:	d13a      	bne.n	80079ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e0b2      	b.n	8007aa2 <HAL_RCC_ClockConfig+0x2de>
 800793c:	2302      	movs	r3, #2
 800793e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007942:	fa93 f3a3 	rbit	r3, r3
 8007946:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800794a:	fab3 f383 	clz	r3, r3
 800794e:	b2db      	uxtb	r3, r3
 8007950:	095b      	lsrs	r3, r3, #5
 8007952:	b2db      	uxtb	r3, r3
 8007954:	f043 0301 	orr.w	r3, r3, #1
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b01      	cmp	r3, #1
 800795c:	d102      	bne.n	8007964 <HAL_RCC_ClockConfig+0x1a0>
 800795e:	4b31      	ldr	r3, [pc, #196]	; (8007a24 <HAL_RCC_ClockConfig+0x260>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	e00d      	b.n	8007980 <HAL_RCC_ClockConfig+0x1bc>
 8007964:	2302      	movs	r3, #2
 8007966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796a:	fa93 f3a3 	rbit	r3, r3
 800796e:	627b      	str	r3, [r7, #36]	; 0x24
 8007970:	2302      	movs	r3, #2
 8007972:	623b      	str	r3, [r7, #32]
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	fa93 f3a3 	rbit	r3, r3
 800797a:	61fb      	str	r3, [r7, #28]
 800797c:	4b29      	ldr	r3, [pc, #164]	; (8007a24 <HAL_RCC_ClockConfig+0x260>)
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	2202      	movs	r2, #2
 8007982:	61ba      	str	r2, [r7, #24]
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	fa92 f2a2 	rbit	r2, r2
 800798a:	617a      	str	r2, [r7, #20]
  return result;
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	fab2 f282 	clz	r2, r2
 8007992:	b2d2      	uxtb	r2, r2
 8007994:	f042 0220 	orr.w	r2, r2, #32
 8007998:	b2d2      	uxtb	r2, r2
 800799a:	f002 021f 	and.w	r2, r2, #31
 800799e:	2101      	movs	r1, #1
 80079a0:	fa01 f202 	lsl.w	r2, r1, r2
 80079a4:	4013      	ands	r3, r2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e079      	b.n	8007aa2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80079ae:	4b1d      	ldr	r3, [pc, #116]	; (8007a24 <HAL_RCC_ClockConfig+0x260>)
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f023 0203 	bic.w	r2, r3, #3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	491a      	ldr	r1, [pc, #104]	; (8007a24 <HAL_RCC_ClockConfig+0x260>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80079c0:	f7fa fd8c 	bl	80024dc <HAL_GetTick>
 80079c4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079c6:	e00a      	b.n	80079de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079c8:	f7fa fd88 	bl	80024dc <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d901      	bls.n	80079de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e061      	b.n	8007aa2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079de:	4b11      	ldr	r3, [pc, #68]	; (8007a24 <HAL_RCC_ClockConfig+0x260>)
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f003 020c 	and.w	r2, r3, #12
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d1eb      	bne.n	80079c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80079f0:	4b0b      	ldr	r3, [pc, #44]	; (8007a20 <HAL_RCC_ClockConfig+0x25c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0307 	and.w	r3, r3, #7
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d214      	bcs.n	8007a28 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079fe:	4b08      	ldr	r3, [pc, #32]	; (8007a20 <HAL_RCC_ClockConfig+0x25c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f023 0207 	bic.w	r2, r3, #7
 8007a06:	4906      	ldr	r1, [pc, #24]	; (8007a20 <HAL_RCC_ClockConfig+0x25c>)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a0e:	4b04      	ldr	r3, [pc, #16]	; (8007a20 <HAL_RCC_ClockConfig+0x25c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0307 	and.w	r3, r3, #7
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d005      	beq.n	8007a28 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e040      	b.n	8007aa2 <HAL_RCC_ClockConfig+0x2de>
 8007a20:	40022000 	.word	0x40022000
 8007a24:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0304 	and.w	r3, r3, #4
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d008      	beq.n	8007a46 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a34:	4b1d      	ldr	r3, [pc, #116]	; (8007aac <HAL_RCC_ClockConfig+0x2e8>)
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	491a      	ldr	r1, [pc, #104]	; (8007aac <HAL_RCC_ClockConfig+0x2e8>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0308 	and.w	r3, r3, #8
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d009      	beq.n	8007a66 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a52:	4b16      	ldr	r3, [pc, #88]	; (8007aac <HAL_RCC_ClockConfig+0x2e8>)
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	00db      	lsls	r3, r3, #3
 8007a60:	4912      	ldr	r1, [pc, #72]	; (8007aac <HAL_RCC_ClockConfig+0x2e8>)
 8007a62:	4313      	orrs	r3, r2
 8007a64:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007a66:	f000 f829 	bl	8007abc <HAL_RCC_GetSysClockFreq>
 8007a6a:	4601      	mov	r1, r0
 8007a6c:	4b0f      	ldr	r3, [pc, #60]	; (8007aac <HAL_RCC_ClockConfig+0x2e8>)
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a74:	22f0      	movs	r2, #240	; 0xf0
 8007a76:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	fa92 f2a2 	rbit	r2, r2
 8007a7e:	60fa      	str	r2, [r7, #12]
  return result;
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	fab2 f282 	clz	r2, r2
 8007a86:	b2d2      	uxtb	r2, r2
 8007a88:	40d3      	lsrs	r3, r2
 8007a8a:	4a09      	ldr	r2, [pc, #36]	; (8007ab0 <HAL_RCC_ClockConfig+0x2ec>)
 8007a8c:	5cd3      	ldrb	r3, [r2, r3]
 8007a8e:	fa21 f303 	lsr.w	r3, r1, r3
 8007a92:	4a08      	ldr	r2, [pc, #32]	; (8007ab4 <HAL_RCC_ClockConfig+0x2f0>)
 8007a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007a96:	4b08      	ldr	r3, [pc, #32]	; (8007ab8 <HAL_RCC_ClockConfig+0x2f4>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fa fcda 	bl	8002454 <HAL_InitTick>
  
  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3778      	adds	r7, #120	; 0x78
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	40021000 	.word	0x40021000
 8007ab0:	080120b4 	.word	0x080120b4
 8007ab4:	20000008 	.word	0x20000008
 8007ab8:	2000000c 	.word	0x2000000c

08007abc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b08b      	sub	sp, #44	; 0x2c
 8007ac0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	61fb      	str	r3, [r7, #28]
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	61bb      	str	r3, [r7, #24]
 8007aca:	2300      	movs	r3, #0
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ace:	2300      	movs	r3, #0
 8007ad0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007ad6:	4b2a      	ldr	r3, [pc, #168]	; (8007b80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	f003 030c 	and.w	r3, r3, #12
 8007ae2:	2b04      	cmp	r3, #4
 8007ae4:	d002      	beq.n	8007aec <HAL_RCC_GetSysClockFreq+0x30>
 8007ae6:	2b08      	cmp	r3, #8
 8007ae8:	d003      	beq.n	8007af2 <HAL_RCC_GetSysClockFreq+0x36>
 8007aea:	e03f      	b.n	8007b6c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007aec:	4b25      	ldr	r3, [pc, #148]	; (8007b84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007aee:	623b      	str	r3, [r7, #32]
      break;
 8007af0:	e03f      	b.n	8007b72 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007af8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007afc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	fa92 f2a2 	rbit	r2, r2
 8007b04:	607a      	str	r2, [r7, #4]
  return result;
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	fab2 f282 	clz	r2, r2
 8007b0c:	b2d2      	uxtb	r2, r2
 8007b0e:	40d3      	lsrs	r3, r2
 8007b10:	4a1d      	ldr	r2, [pc, #116]	; (8007b88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007b12:	5cd3      	ldrb	r3, [r2, r3]
 8007b14:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007b16:	4b1a      	ldr	r3, [pc, #104]	; (8007b80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1a:	f003 030f 	and.w	r3, r3, #15
 8007b1e:	220f      	movs	r2, #15
 8007b20:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	fa92 f2a2 	rbit	r2, r2
 8007b28:	60fa      	str	r2, [r7, #12]
  return result;
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	fab2 f282 	clz	r2, r2
 8007b30:	b2d2      	uxtb	r2, r2
 8007b32:	40d3      	lsrs	r3, r2
 8007b34:	4a15      	ldr	r2, [pc, #84]	; (8007b8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8007b36:	5cd3      	ldrb	r3, [r2, r3]
 8007b38:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d008      	beq.n	8007b56 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007b44:	4a0f      	ldr	r2, [pc, #60]	; (8007b84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	fb02 f303 	mul.w	r3, r2, r3
 8007b52:	627b      	str	r3, [r7, #36]	; 0x24
 8007b54:	e007      	b.n	8007b66 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007b56:	4a0b      	ldr	r2, [pc, #44]	; (8007b84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	fb02 f303 	mul.w	r3, r2, r3
 8007b64:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b68:	623b      	str	r3, [r7, #32]
      break;
 8007b6a:	e002      	b.n	8007b72 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007b6c:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007b6e:	623b      	str	r3, [r7, #32]
      break;
 8007b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b72:	6a3b      	ldr	r3, [r7, #32]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	372c      	adds	r7, #44	; 0x2c
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	40021000 	.word	0x40021000
 8007b84:	007a1200 	.word	0x007a1200
 8007b88:	080120cc 	.word	0x080120cc
 8007b8c:	080120dc 	.word	0x080120dc

08007b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b90:	b480      	push	{r7}
 8007b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b94:	4b03      	ldr	r3, [pc, #12]	; (8007ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b96:	681b      	ldr	r3, [r3, #0]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	20000008 	.word	0x20000008

08007ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007bae:	f7ff ffef 	bl	8007b90 <HAL_RCC_GetHCLKFreq>
 8007bb2:	4601      	mov	r1, r0
 8007bb4:	4b0b      	ldr	r3, [pc, #44]	; (8007be4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007bbc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007bc0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	fa92 f2a2 	rbit	r2, r2
 8007bc8:	603a      	str	r2, [r7, #0]
  return result;
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	fab2 f282 	clz	r2, r2
 8007bd0:	b2d2      	uxtb	r2, r2
 8007bd2:	40d3      	lsrs	r3, r2
 8007bd4:	4a04      	ldr	r2, [pc, #16]	; (8007be8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007bd6:	5cd3      	ldrb	r3, [r2, r3]
 8007bd8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	40021000 	.word	0x40021000
 8007be8:	080120c4 	.word	0x080120c4

08007bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007bf2:	f7ff ffcd 	bl	8007b90 <HAL_RCC_GetHCLKFreq>
 8007bf6:	4601      	mov	r1, r0
 8007bf8:	4b0b      	ldr	r3, [pc, #44]	; (8007c28 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007c00:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007c04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	fa92 f2a2 	rbit	r2, r2
 8007c0c:	603a      	str	r2, [r7, #0]
  return result;
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	fab2 f282 	clz	r2, r2
 8007c14:	b2d2      	uxtb	r2, r2
 8007c16:	40d3      	lsrs	r3, r2
 8007c18:	4a04      	ldr	r2, [pc, #16]	; (8007c2c <HAL_RCC_GetPCLK2Freq+0x40>)
 8007c1a:	5cd3      	ldrb	r3, [r2, r3]
 8007c1c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007c20:	4618      	mov	r0, r3
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	40021000 	.word	0x40021000
 8007c2c:	080120c4 	.word	0x080120c4

08007c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b092      	sub	sp, #72	; 0x48
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007c40:	2300      	movs	r3, #0
 8007c42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 80d4 	beq.w	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c54:	4b4e      	ldr	r3, [pc, #312]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c56:	69db      	ldr	r3, [r3, #28]
 8007c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10e      	bne.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c60:	4b4b      	ldr	r3, [pc, #300]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c62:	69db      	ldr	r3, [r3, #28]
 8007c64:	4a4a      	ldr	r2, [pc, #296]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c6a:	61d3      	str	r3, [r2, #28]
 8007c6c:	4b48      	ldr	r3, [pc, #288]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c6e:	69db      	ldr	r3, [r3, #28]
 8007c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c74:	60bb      	str	r3, [r7, #8]
 8007c76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c7e:	4b45      	ldr	r3, [pc, #276]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d118      	bne.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c8a:	4b42      	ldr	r3, [pc, #264]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a41      	ldr	r2, [pc, #260]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c96:	f7fa fc21 	bl	80024dc <HAL_GetTick>
 8007c9a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c9c:	e008      	b.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c9e:	f7fa fc1d 	bl	80024dc <HAL_GetTick>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	2b64      	cmp	r3, #100	; 0x64
 8007caa:	d901      	bls.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e1d6      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cb0:	4b38      	ldr	r3, [pc, #224]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d0f0      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007cbc:	4b34      	ldr	r3, [pc, #208]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cbe:	6a1b      	ldr	r3, [r3, #32]
 8007cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 8084 	beq.w	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d07c      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007cdc:	4b2c      	ldr	r3, [pc, #176]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007cea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cee:	fa93 f3a3 	rbit	r3, r3
 8007cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007cf6:	fab3 f383 	clz	r3, r3
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	4b26      	ldr	r3, [pc, #152]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007d00:	4413      	add	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	461a      	mov	r2, r3
 8007d06:	2301      	movs	r3, #1
 8007d08:	6013      	str	r3, [r2, #0]
 8007d0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d12:	fa93 f3a3 	rbit	r3, r3
 8007d16:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d1a:	fab3 f383 	clz	r3, r3
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	461a      	mov	r2, r3
 8007d22:	4b1d      	ldr	r3, [pc, #116]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007d24:	4413      	add	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	461a      	mov	r2, r3
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007d2e:	4a18      	ldr	r2, [pc, #96]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d32:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d04b      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d3e:	f7fa fbcd 	bl	80024dc <HAL_GetTick>
 8007d42:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d44:	e00a      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d46:	f7fa fbc9 	bl	80024dc <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d901      	bls.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e180      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d62:	fa93 f3a3 	rbit	r3, r3
 8007d66:	627b      	str	r3, [r7, #36]	; 0x24
 8007d68:	2302      	movs	r3, #2
 8007d6a:	623b      	str	r3, [r7, #32]
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	fa93 f3a3 	rbit	r3, r3
 8007d72:	61fb      	str	r3, [r7, #28]
  return result;
 8007d74:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d76:	fab3 f383 	clz	r3, r3
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	095b      	lsrs	r3, r3, #5
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	f043 0302 	orr.w	r3, r3, #2
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d108      	bne.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007d8a:	4b01      	ldr	r3, [pc, #4]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d8c:	6a1b      	ldr	r3, [r3, #32]
 8007d8e:	e00d      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007d90:	40021000 	.word	0x40021000
 8007d94:	40007000 	.word	0x40007000
 8007d98:	10908100 	.word	0x10908100
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	fa93 f3a3 	rbit	r3, r3
 8007da6:	617b      	str	r3, [r7, #20]
 8007da8:	4b9a      	ldr	r3, [pc, #616]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	2202      	movs	r2, #2
 8007dae:	613a      	str	r2, [r7, #16]
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	fa92 f2a2 	rbit	r2, r2
 8007db6:	60fa      	str	r2, [r7, #12]
  return result;
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	fab2 f282 	clz	r2, r2
 8007dbe:	b2d2      	uxtb	r2, r2
 8007dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dc4:	b2d2      	uxtb	r2, r2
 8007dc6:	f002 021f 	and.w	r2, r2, #31
 8007dca:	2101      	movs	r1, #1
 8007dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d0b7      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007dd6:	4b8f      	ldr	r3, [pc, #572]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	498c      	ldr	r1, [pc, #560]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007de8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d105      	bne.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007df0:	4b88      	ldr	r3, [pc, #544]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007df2:	69db      	ldr	r3, [r3, #28]
 8007df4:	4a87      	ldr	r2, [pc, #540]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dfa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 0301 	and.w	r3, r3, #1
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d008      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e08:	4b82      	ldr	r3, [pc, #520]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0c:	f023 0203 	bic.w	r2, r3, #3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	497f      	ldr	r1, [pc, #508]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d008      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e26:	4b7b      	ldr	r3, [pc, #492]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	4978      	ldr	r1, [pc, #480]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0304 	and.w	r3, r3, #4
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d008      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007e44:	4b73      	ldr	r3, [pc, #460]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	4970      	ldr	r1, [pc, #448]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0320 	and.w	r3, r3, #32
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d008      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e62:	4b6c      	ldr	r3, [pc, #432]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e66:	f023 0210 	bic.w	r2, r3, #16
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	69db      	ldr	r3, [r3, #28]
 8007e6e:	4969      	ldr	r1, [pc, #420]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d008      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007e80:	4b64      	ldr	r3, [pc, #400]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e8c:	4961      	ldr	r1, [pc, #388]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d008      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e9e:	4b5d      	ldr	r3, [pc, #372]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea2:	f023 0220 	bic.w	r2, r3, #32
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	495a      	ldr	r1, [pc, #360]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d008      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ebc:	4b55      	ldr	r3, [pc, #340]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec8:	4952      	ldr	r1, [pc, #328]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0308 	and.w	r3, r3, #8
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d008      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007eda:	4b4e      	ldr	r3, [pc, #312]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ede:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	494b      	ldr	r1, [pc, #300]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 0310 	and.w	r3, r3, #16
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d008      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007ef8:	4b46      	ldr	r3, [pc, #280]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	4943      	ldr	r1, [pc, #268]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f06:	4313      	orrs	r3, r2
 8007f08:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d008      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007f16:	4b3f      	ldr	r3, [pc, #252]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f22:	493c      	ldr	r1, [pc, #240]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d008      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007f34:	4b37      	ldr	r3, [pc, #220]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f38:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f40:	4934      	ldr	r1, [pc, #208]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f42:	4313      	orrs	r3, r2
 8007f44:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d008      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007f52:	4b30      	ldr	r3, [pc, #192]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f56:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5e:	492d      	ldr	r1, [pc, #180]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f60:	4313      	orrs	r3, r2
 8007f62:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d008      	beq.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007f70:	4b28      	ldr	r3, [pc, #160]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f7c:	4925      	ldr	r1, [pc, #148]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d008      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007f8e:	4b21      	ldr	r3, [pc, #132]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f92:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9a:	491e      	ldr	r1, [pc, #120]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d008      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8007fac:	4b19      	ldr	r3, [pc, #100]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb8:	4916      	ldr	r1, [pc, #88]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d008      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8007fca:	4b12      	ldr	r3, [pc, #72]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd6:	490f      	ldr	r1, [pc, #60]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d008      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007fe8:	4b0a      	ldr	r3, [pc, #40]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff4:	4907      	ldr	r1, [pc, #28]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00c      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8008006:	4b03      	ldr	r3, [pc, #12]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	e002      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008012:	bf00      	nop
 8008014:	40021000 	.word	0x40021000
 8008018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800801a:	4913      	ldr	r1, [pc, #76]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800801c:	4313      	orrs	r3, r2
 800801e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d008      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800802c:	4b0e      	ldr	r3, [pc, #56]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800802e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008030:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008038:	490b      	ldr	r1, [pc, #44]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800803a:	4313      	orrs	r3, r2
 800803c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d008      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800804a:	4b07      	ldr	r3, [pc, #28]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800804c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008056:	4904      	ldr	r1, [pc, #16]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008058:	4313      	orrs	r3, r2
 800805a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3748      	adds	r7, #72	; 0x48
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	40021000 	.word	0x40021000

0800806c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d101      	bne.n	800807e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e054      	b.n	8008128 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d111      	bne.n	80080ae <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f001 fa28 	bl	80094e8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800809c:	2b00      	cmp	r3, #0
 800809e:	d102      	bne.n	80080a6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a23      	ldr	r2, [pc, #140]	; (8008130 <HAL_TIM_Base_Init+0xc4>)
 80080a4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2202      	movs	r2, #2
 80080b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	3304      	adds	r3, #4
 80080be:	4619      	mov	r1, r3
 80080c0:	4610      	mov	r0, r2
 80080c2:	f000 fdad 	bl	8008c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	080021f9 	.word	0x080021f9

08008134 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008142:	b2db      	uxtb	r3, r3
 8008144:	2b01      	cmp	r3, #1
 8008146:	d001      	beq.n	800814c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e04f      	b.n	80081ec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2202      	movs	r2, #2
 8008150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68da      	ldr	r2, [r3, #12]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f042 0201 	orr.w	r2, r2, #1
 8008162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a23      	ldr	r2, [pc, #140]	; (80081f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d01d      	beq.n	80081aa <HAL_TIM_Base_Start_IT+0x76>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008176:	d018      	beq.n	80081aa <HAL_TIM_Base_Start_IT+0x76>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a1f      	ldr	r2, [pc, #124]	; (80081fc <HAL_TIM_Base_Start_IT+0xc8>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d013      	beq.n	80081aa <HAL_TIM_Base_Start_IT+0x76>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a1e      	ldr	r2, [pc, #120]	; (8008200 <HAL_TIM_Base_Start_IT+0xcc>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d00e      	beq.n	80081aa <HAL_TIM_Base_Start_IT+0x76>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a1c      	ldr	r2, [pc, #112]	; (8008204 <HAL_TIM_Base_Start_IT+0xd0>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d009      	beq.n	80081aa <HAL_TIM_Base_Start_IT+0x76>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a1b      	ldr	r2, [pc, #108]	; (8008208 <HAL_TIM_Base_Start_IT+0xd4>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d004      	beq.n	80081aa <HAL_TIM_Base_Start_IT+0x76>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a19      	ldr	r2, [pc, #100]	; (800820c <HAL_TIM_Base_Start_IT+0xd8>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d115      	bne.n	80081d6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	689a      	ldr	r2, [r3, #8]
 80081b0:	4b17      	ldr	r3, [pc, #92]	; (8008210 <HAL_TIM_Base_Start_IT+0xdc>)
 80081b2:	4013      	ands	r3, r2
 80081b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2b06      	cmp	r3, #6
 80081ba:	d015      	beq.n	80081e8 <HAL_TIM_Base_Start_IT+0xb4>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081c2:	d011      	beq.n	80081e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f042 0201 	orr.w	r2, r2, #1
 80081d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081d4:	e008      	b.n	80081e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f042 0201 	orr.w	r2, r2, #1
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	e000      	b.n	80081ea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	40012c00 	.word	0x40012c00
 80081fc:	40000400 	.word	0x40000400
 8008200:	40000800 	.word	0x40000800
 8008204:	40013400 	.word	0x40013400
 8008208:	40014000 	.word	0x40014000
 800820c:	40015000 	.word	0x40015000
 8008210:	00010007 	.word	0x00010007

08008214 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e054      	b.n	80082d0 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	d111      	bne.n	8008256 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f001 f954 	bl	80094e8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008244:	2b00      	cmp	r3, #0
 8008246:	d102      	bne.n	800824e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a23      	ldr	r2, [pc, #140]	; (80082d8 <HAL_TIM_PWM_Init+0xc4>)
 800824c:	665a      	str	r2, [r3, #100]	; 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2202      	movs	r2, #2
 800825a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	3304      	adds	r3, #4
 8008266:	4619      	mov	r1, r3
 8008268:	4610      	mov	r0, r2
 800826a:	f000 fcd9 	bl	8008c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	08002241 	.word	0x08002241

080082dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d109      	bne.n	8008300 <HAL_TIM_PWM_Start+0x24>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	bf14      	ite	ne
 80082f8:	2301      	movne	r3, #1
 80082fa:	2300      	moveq	r3, #0
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	e03c      	b.n	800837a <HAL_TIM_PWM_Start+0x9e>
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	2b04      	cmp	r3, #4
 8008304:	d109      	bne.n	800831a <HAL_TIM_PWM_Start+0x3e>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b01      	cmp	r3, #1
 8008310:	bf14      	ite	ne
 8008312:	2301      	movne	r3, #1
 8008314:	2300      	moveq	r3, #0
 8008316:	b2db      	uxtb	r3, r3
 8008318:	e02f      	b.n	800837a <HAL_TIM_PWM_Start+0x9e>
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	2b08      	cmp	r3, #8
 800831e:	d109      	bne.n	8008334 <HAL_TIM_PWM_Start+0x58>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b01      	cmp	r3, #1
 800832a:	bf14      	ite	ne
 800832c:	2301      	movne	r3, #1
 800832e:	2300      	moveq	r3, #0
 8008330:	b2db      	uxtb	r3, r3
 8008332:	e022      	b.n	800837a <HAL_TIM_PWM_Start+0x9e>
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	2b0c      	cmp	r3, #12
 8008338:	d109      	bne.n	800834e <HAL_TIM_PWM_Start+0x72>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b01      	cmp	r3, #1
 8008344:	bf14      	ite	ne
 8008346:	2301      	movne	r3, #1
 8008348:	2300      	moveq	r3, #0
 800834a:	b2db      	uxtb	r3, r3
 800834c:	e015      	b.n	800837a <HAL_TIM_PWM_Start+0x9e>
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	2b10      	cmp	r3, #16
 8008352:	d109      	bne.n	8008368 <HAL_TIM_PWM_Start+0x8c>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b01      	cmp	r3, #1
 800835e:	bf14      	ite	ne
 8008360:	2301      	movne	r3, #1
 8008362:	2300      	moveq	r3, #0
 8008364:	b2db      	uxtb	r3, r3
 8008366:	e008      	b.n	800837a <HAL_TIM_PWM_Start+0x9e>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800836e:	b2db      	uxtb	r3, r3
 8008370:	2b01      	cmp	r3, #1
 8008372:	bf14      	ite	ne
 8008374:	2301      	movne	r3, #1
 8008376:	2300      	moveq	r3, #0
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e0a1      	b.n	80084c6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d104      	bne.n	8008392 <HAL_TIM_PWM_Start+0xb6>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2202      	movs	r2, #2
 800838c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008390:	e023      	b.n	80083da <HAL_TIM_PWM_Start+0xfe>
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b04      	cmp	r3, #4
 8008396:	d104      	bne.n	80083a2 <HAL_TIM_PWM_Start+0xc6>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2202      	movs	r2, #2
 800839c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083a0:	e01b      	b.n	80083da <HAL_TIM_PWM_Start+0xfe>
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2b08      	cmp	r3, #8
 80083a6:	d104      	bne.n	80083b2 <HAL_TIM_PWM_Start+0xd6>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2202      	movs	r2, #2
 80083ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083b0:	e013      	b.n	80083da <HAL_TIM_PWM_Start+0xfe>
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	2b0c      	cmp	r3, #12
 80083b6:	d104      	bne.n	80083c2 <HAL_TIM_PWM_Start+0xe6>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2202      	movs	r2, #2
 80083bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083c0:	e00b      	b.n	80083da <HAL_TIM_PWM_Start+0xfe>
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b10      	cmp	r3, #16
 80083c6:	d104      	bne.n	80083d2 <HAL_TIM_PWM_Start+0xf6>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2202      	movs	r2, #2
 80083cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083d0:	e003      	b.n	80083da <HAL_TIM_PWM_Start+0xfe>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2202      	movs	r2, #2
 80083d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2201      	movs	r2, #1
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f001 f85a 	bl	800949c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a38      	ldr	r2, [pc, #224]	; (80084d0 <HAL_TIM_PWM_Start+0x1f4>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d018      	beq.n	8008424 <HAL_TIM_PWM_Start+0x148>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a37      	ldr	r2, [pc, #220]	; (80084d4 <HAL_TIM_PWM_Start+0x1f8>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d013      	beq.n	8008424 <HAL_TIM_PWM_Start+0x148>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a35      	ldr	r2, [pc, #212]	; (80084d8 <HAL_TIM_PWM_Start+0x1fc>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d00e      	beq.n	8008424 <HAL_TIM_PWM_Start+0x148>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a34      	ldr	r2, [pc, #208]	; (80084dc <HAL_TIM_PWM_Start+0x200>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d009      	beq.n	8008424 <HAL_TIM_PWM_Start+0x148>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a32      	ldr	r2, [pc, #200]	; (80084e0 <HAL_TIM_PWM_Start+0x204>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d004      	beq.n	8008424 <HAL_TIM_PWM_Start+0x148>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a31      	ldr	r2, [pc, #196]	; (80084e4 <HAL_TIM_PWM_Start+0x208>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d101      	bne.n	8008428 <HAL_TIM_PWM_Start+0x14c>
 8008424:	2301      	movs	r3, #1
 8008426:	e000      	b.n	800842a <HAL_TIM_PWM_Start+0x14e>
 8008428:	2300      	movs	r3, #0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d007      	beq.n	800843e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800843c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a23      	ldr	r2, [pc, #140]	; (80084d0 <HAL_TIM_PWM_Start+0x1f4>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d01d      	beq.n	8008484 <HAL_TIM_PWM_Start+0x1a8>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008450:	d018      	beq.n	8008484 <HAL_TIM_PWM_Start+0x1a8>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a24      	ldr	r2, [pc, #144]	; (80084e8 <HAL_TIM_PWM_Start+0x20c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d013      	beq.n	8008484 <HAL_TIM_PWM_Start+0x1a8>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a22      	ldr	r2, [pc, #136]	; (80084ec <HAL_TIM_PWM_Start+0x210>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d00e      	beq.n	8008484 <HAL_TIM_PWM_Start+0x1a8>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a1a      	ldr	r2, [pc, #104]	; (80084d4 <HAL_TIM_PWM_Start+0x1f8>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d009      	beq.n	8008484 <HAL_TIM_PWM_Start+0x1a8>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a18      	ldr	r2, [pc, #96]	; (80084d8 <HAL_TIM_PWM_Start+0x1fc>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d004      	beq.n	8008484 <HAL_TIM_PWM_Start+0x1a8>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a19      	ldr	r2, [pc, #100]	; (80084e4 <HAL_TIM_PWM_Start+0x208>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d115      	bne.n	80084b0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	689a      	ldr	r2, [r3, #8]
 800848a:	4b19      	ldr	r3, [pc, #100]	; (80084f0 <HAL_TIM_PWM_Start+0x214>)
 800848c:	4013      	ands	r3, r2
 800848e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2b06      	cmp	r3, #6
 8008494:	d015      	beq.n	80084c2 <HAL_TIM_PWM_Start+0x1e6>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800849c:	d011      	beq.n	80084c2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f042 0201 	orr.w	r2, r2, #1
 80084ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ae:	e008      	b.n	80084c2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f042 0201 	orr.w	r2, r2, #1
 80084be:	601a      	str	r2, [r3, #0]
 80084c0:	e000      	b.n	80084c4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	40012c00 	.word	0x40012c00
 80084d4:	40013400 	.word	0x40013400
 80084d8:	40014000 	.word	0x40014000
 80084dc:	40014400 	.word	0x40014400
 80084e0:	40014800 	.word	0x40014800
 80084e4:	40015000 	.word	0x40015000
 80084e8:	40000400 	.word	0x40000400
 80084ec:	40000800 	.word	0x40000800
 80084f0:	00010007 	.word	0x00010007

080084f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	f003 0302 	and.w	r3, r3, #2
 8008506:	2b02      	cmp	r3, #2
 8008508:	d128      	bne.n	800855c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	f003 0302 	and.w	r3, r3, #2
 8008514:	2b02      	cmp	r3, #2
 8008516:	d121      	bne.n	800855c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f06f 0202 	mvn.w	r2, #2
 8008520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	f003 0303 	and.w	r3, r3, #3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d005      	beq.n	8008542 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	4798      	blx	r3
 8008540:	e009      	b.n	8008556 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	f003 0304 	and.w	r3, r3, #4
 8008566:	2b04      	cmp	r3, #4
 8008568:	d128      	bne.n	80085bc <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	f003 0304 	and.w	r3, r3, #4
 8008574:	2b04      	cmp	r3, #4
 8008576:	d121      	bne.n	80085bc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f06f 0204 	mvn.w	r2, #4
 8008580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2202      	movs	r2, #2
 8008586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008592:	2b00      	cmp	r3, #0
 8008594:	d005      	beq.n	80085a2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	4798      	blx	r3
 80085a0:	e009      	b.n	80085b6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	f003 0308 	and.w	r3, r3, #8
 80085c6:	2b08      	cmp	r3, #8
 80085c8:	d128      	bne.n	800861c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	f003 0308 	and.w	r3, r3, #8
 80085d4:	2b08      	cmp	r3, #8
 80085d6:	d121      	bne.n	800861c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f06f 0208 	mvn.w	r2, #8
 80085e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2204      	movs	r2, #4
 80085e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	69db      	ldr	r3, [r3, #28]
 80085ee:	f003 0303 	and.w	r3, r3, #3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d005      	beq.n	8008602 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	4798      	blx	r3
 8008600:	e009      	b.n	8008616 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	f003 0310 	and.w	r3, r3, #16
 8008626:	2b10      	cmp	r3, #16
 8008628:	d128      	bne.n	800867c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	f003 0310 	and.w	r3, r3, #16
 8008634:	2b10      	cmp	r3, #16
 8008636:	d121      	bne.n	800867c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f06f 0210 	mvn.w	r2, #16
 8008640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2208      	movs	r2, #8
 8008646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	69db      	ldr	r3, [r3, #28]
 800864e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008652:	2b00      	cmp	r3, #0
 8008654:	d005      	beq.n	8008662 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	4798      	blx	r3
 8008660:	e009      	b.n	8008676 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b01      	cmp	r3, #1
 8008688:	d110      	bne.n	80086ac <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f003 0301 	and.w	r3, r3, #1
 8008694:	2b01      	cmp	r3, #1
 8008696:	d109      	bne.n	80086ac <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f06f 0201 	mvn.w	r2, #1
 80086a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b6:	2b80      	cmp	r3, #128	; 0x80
 80086b8:	d110      	bne.n	80086dc <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c4:	2b80      	cmp	r3, #128	; 0x80
 80086c6:	d109      	bne.n	80086dc <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80086d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	4798      	blx	r3
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086ea:	d110      	bne.n	800870e <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f6:	2b80      	cmp	r3, #128	; 0x80
 80086f8:	d109      	bne.n	800870e <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	4798      	blx	r3
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008718:	2b40      	cmp	r3, #64	; 0x40
 800871a:	d110      	bne.n	800873e <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008726:	2b40      	cmp	r3, #64	; 0x40
 8008728:	d109      	bne.n	800873e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	f003 0320 	and.w	r3, r3, #32
 8008748:	2b20      	cmp	r3, #32
 800874a:	d110      	bne.n	800876e <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	f003 0320 	and.w	r3, r3, #32
 8008756:	2b20      	cmp	r3, #32
 8008758:	d109      	bne.n	800876e <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f06f 0220 	mvn.w	r2, #32
 8008762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800876e:	bf00      	nop
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
	...

08008778 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800878e:	2b01      	cmp	r3, #1
 8008790:	d101      	bne.n	8008796 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008792:	2302      	movs	r3, #2
 8008794:	e0ff      	b.n	8008996 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b14      	cmp	r3, #20
 80087a2:	f200 80f0 	bhi.w	8008986 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80087a6:	a201      	add	r2, pc, #4	; (adr r2, 80087ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80087a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ac:	08008801 	.word	0x08008801
 80087b0:	08008987 	.word	0x08008987
 80087b4:	08008987 	.word	0x08008987
 80087b8:	08008987 	.word	0x08008987
 80087bc:	08008841 	.word	0x08008841
 80087c0:	08008987 	.word	0x08008987
 80087c4:	08008987 	.word	0x08008987
 80087c8:	08008987 	.word	0x08008987
 80087cc:	08008883 	.word	0x08008883
 80087d0:	08008987 	.word	0x08008987
 80087d4:	08008987 	.word	0x08008987
 80087d8:	08008987 	.word	0x08008987
 80087dc:	080088c3 	.word	0x080088c3
 80087e0:	08008987 	.word	0x08008987
 80087e4:	08008987 	.word	0x08008987
 80087e8:	08008987 	.word	0x08008987
 80087ec:	08008905 	.word	0x08008905
 80087f0:	08008987 	.word	0x08008987
 80087f4:	08008987 	.word	0x08008987
 80087f8:	08008987 	.word	0x08008987
 80087fc:	08008945 	.word	0x08008945
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68b9      	ldr	r1, [r7, #8]
 8008806:	4618      	mov	r0, r3
 8008808:	f000 faa8 	bl	8008d5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	699a      	ldr	r2, [r3, #24]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f042 0208 	orr.w	r2, r2, #8
 800881a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	699a      	ldr	r2, [r3, #24]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f022 0204 	bic.w	r2, r2, #4
 800882a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6999      	ldr	r1, [r3, #24]
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	691a      	ldr	r2, [r3, #16]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	430a      	orrs	r2, r1
 800883c:	619a      	str	r2, [r3, #24]
      break;
 800883e:	e0a5      	b.n	800898c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68b9      	ldr	r1, [r7, #8]
 8008846:	4618      	mov	r0, r3
 8008848:	f000 fb22 	bl	8008e90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	699a      	ldr	r2, [r3, #24]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800885a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	699a      	ldr	r2, [r3, #24]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800886a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	6999      	ldr	r1, [r3, #24]
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	021a      	lsls	r2, r3, #8
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	430a      	orrs	r2, r1
 800887e:	619a      	str	r2, [r3, #24]
      break;
 8008880:	e084      	b.n	800898c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68b9      	ldr	r1, [r7, #8]
 8008888:	4618      	mov	r0, r3
 800888a:	f000 fb95 	bl	8008fb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	69da      	ldr	r2, [r3, #28]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f042 0208 	orr.w	r2, r2, #8
 800889c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	69da      	ldr	r2, [r3, #28]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f022 0204 	bic.w	r2, r2, #4
 80088ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	69d9      	ldr	r1, [r3, #28]
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	691a      	ldr	r2, [r3, #16]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	430a      	orrs	r2, r1
 80088be:	61da      	str	r2, [r3, #28]
      break;
 80088c0:	e064      	b.n	800898c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68b9      	ldr	r1, [r7, #8]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 fc07 	bl	80090dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	69da      	ldr	r2, [r3, #28]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	69da      	ldr	r2, [r3, #28]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	69d9      	ldr	r1, [r3, #28]
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	021a      	lsls	r2, r3, #8
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	430a      	orrs	r2, r1
 8008900:	61da      	str	r2, [r3, #28]
      break;
 8008902:	e043      	b.n	800898c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68b9      	ldr	r1, [r7, #8]
 800890a:	4618      	mov	r0, r3
 800890c:	f000 fc56 	bl	80091bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f042 0208 	orr.w	r2, r2, #8
 800891e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f022 0204 	bic.w	r2, r2, #4
 800892e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	691a      	ldr	r2, [r3, #16]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	430a      	orrs	r2, r1
 8008940:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008942:	e023      	b.n	800898c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68b9      	ldr	r1, [r7, #8]
 800894a:	4618      	mov	r0, r3
 800894c:	f000 fca0 	bl	8009290 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800895e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800896e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	021a      	lsls	r2, r3, #8
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	430a      	orrs	r2, r1
 8008982:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008984:	e002      	b.n	800898c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	75fb      	strb	r3, [r7, #23]
      break;
 800898a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008994:	7dfb      	ldrb	r3, [r7, #23]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3718      	adds	r7, #24
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop

080089a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d101      	bne.n	80089bc <HAL_TIM_ConfigClockSource+0x1c>
 80089b8:	2302      	movs	r3, #2
 80089ba:	e0b6      	b.n	8008b2a <HAL_TIM_ConfigClockSource+0x18a>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2202      	movs	r2, #2
 80089c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80089de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089f8:	d03e      	beq.n	8008a78 <HAL_TIM_ConfigClockSource+0xd8>
 80089fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089fe:	f200 8087 	bhi.w	8008b10 <HAL_TIM_ConfigClockSource+0x170>
 8008a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a06:	f000 8086 	beq.w	8008b16 <HAL_TIM_ConfigClockSource+0x176>
 8008a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a0e:	d87f      	bhi.n	8008b10 <HAL_TIM_ConfigClockSource+0x170>
 8008a10:	2b70      	cmp	r3, #112	; 0x70
 8008a12:	d01a      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0xaa>
 8008a14:	2b70      	cmp	r3, #112	; 0x70
 8008a16:	d87b      	bhi.n	8008b10 <HAL_TIM_ConfigClockSource+0x170>
 8008a18:	2b60      	cmp	r3, #96	; 0x60
 8008a1a:	d050      	beq.n	8008abe <HAL_TIM_ConfigClockSource+0x11e>
 8008a1c:	2b60      	cmp	r3, #96	; 0x60
 8008a1e:	d877      	bhi.n	8008b10 <HAL_TIM_ConfigClockSource+0x170>
 8008a20:	2b50      	cmp	r3, #80	; 0x50
 8008a22:	d03c      	beq.n	8008a9e <HAL_TIM_ConfigClockSource+0xfe>
 8008a24:	2b50      	cmp	r3, #80	; 0x50
 8008a26:	d873      	bhi.n	8008b10 <HAL_TIM_ConfigClockSource+0x170>
 8008a28:	2b40      	cmp	r3, #64	; 0x40
 8008a2a:	d058      	beq.n	8008ade <HAL_TIM_ConfigClockSource+0x13e>
 8008a2c:	2b40      	cmp	r3, #64	; 0x40
 8008a2e:	d86f      	bhi.n	8008b10 <HAL_TIM_ConfigClockSource+0x170>
 8008a30:	2b30      	cmp	r3, #48	; 0x30
 8008a32:	d064      	beq.n	8008afe <HAL_TIM_ConfigClockSource+0x15e>
 8008a34:	2b30      	cmp	r3, #48	; 0x30
 8008a36:	d86b      	bhi.n	8008b10 <HAL_TIM_ConfigClockSource+0x170>
 8008a38:	2b20      	cmp	r3, #32
 8008a3a:	d060      	beq.n	8008afe <HAL_TIM_ConfigClockSource+0x15e>
 8008a3c:	2b20      	cmp	r3, #32
 8008a3e:	d867      	bhi.n	8008b10 <HAL_TIM_ConfigClockSource+0x170>
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d05c      	beq.n	8008afe <HAL_TIM_ConfigClockSource+0x15e>
 8008a44:	2b10      	cmp	r3, #16
 8008a46:	d05a      	beq.n	8008afe <HAL_TIM_ConfigClockSource+0x15e>
 8008a48:	e062      	b.n	8008b10 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6818      	ldr	r0, [r3, #0]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	6899      	ldr	r1, [r3, #8]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	f000 fcff 	bl	800945c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008a6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	609a      	str	r2, [r3, #8]
      break;
 8008a76:	e04f      	b.n	8008b18 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6818      	ldr	r0, [r3, #0]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	6899      	ldr	r1, [r3, #8]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	685a      	ldr	r2, [r3, #4]
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f000 fce8 	bl	800945c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689a      	ldr	r2, [r3, #8]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a9a:	609a      	str	r2, [r3, #8]
      break;
 8008a9c:	e03c      	b.n	8008b18 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6818      	ldr	r0, [r3, #0]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	6859      	ldr	r1, [r3, #4]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	f000 fc5c 	bl	8009368 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2150      	movs	r1, #80	; 0x50
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f000 fcb5 	bl	8009426 <TIM_ITRx_SetConfig>
      break;
 8008abc:	e02c      	b.n	8008b18 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6818      	ldr	r0, [r3, #0]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	6859      	ldr	r1, [r3, #4]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	461a      	mov	r2, r3
 8008acc:	f000 fc7b 	bl	80093c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2160      	movs	r1, #96	; 0x60
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 fca5 	bl	8009426 <TIM_ITRx_SetConfig>
      break;
 8008adc:	e01c      	b.n	8008b18 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6818      	ldr	r0, [r3, #0]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	6859      	ldr	r1, [r3, #4]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	461a      	mov	r2, r3
 8008aec:	f000 fc3c 	bl	8009368 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2140      	movs	r1, #64	; 0x40
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 fc95 	bl	8009426 <TIM_ITRx_SetConfig>
      break;
 8008afc:	e00c      	b.n	8008b18 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4619      	mov	r1, r3
 8008b08:	4610      	mov	r0, r2
 8008b0a:	f000 fc8c 	bl	8009426 <TIM_ITRx_SetConfig>
      break;
 8008b0e:	e003      	b.n	8008b18 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	73fb      	strb	r3, [r7, #15]
      break;
 8008b14:	e000      	b.n	8008b18 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008b16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b083      	sub	sp, #12
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008b3a:	bf00      	nop
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b46:	b480      	push	{r7}
 8008b48:	b083      	sub	sp, #12
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b4e:	bf00      	nop
 8008b50:	370c      	adds	r7, #12
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b083      	sub	sp, #12
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b62:	bf00      	nop
 8008b64:	370c      	adds	r7, #12
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008b6e:	b480      	push	{r7}
 8008b70:	b083      	sub	sp, #12
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008b76:	bf00      	nop
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b82:	b480      	push	{r7}
 8008b84:	b083      	sub	sp, #12
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b8a:	bf00      	nop
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr

08008b96 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008b9e:	bf00      	nop
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr

08008baa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bb2:	bf00      	nop
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008bc6:	bf00      	nop
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008bd2:	b480      	push	{r7}
 8008bd4:	b083      	sub	sp, #12
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008bda:	bf00      	nop
 8008bdc:	370c      	adds	r7, #12
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(const TIM_HandleTypeDef *htim)
{
 8008be6:	b480      	push	{r7}
 8008be8:	b083      	sub	sp, #12
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  return htim->State;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bf4:	b2db      	uxtb	r3, r3
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <HAL_TIM_PWM_GetState>:
  * @brief  Return the TIM PWM handle state.
  * @param  htim TIM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(const TIM_HandleTypeDef *htim)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b083      	sub	sp, #12
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  return htim->State;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c10:	b2db      	uxtb	r3, r3
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
	...

08008c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a42      	ldr	r2, [pc, #264]	; (8008d3c <TIM_Base_SetConfig+0x11c>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d013      	beq.n	8008c60 <TIM_Base_SetConfig+0x40>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c3e:	d00f      	beq.n	8008c60 <TIM_Base_SetConfig+0x40>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a3f      	ldr	r2, [pc, #252]	; (8008d40 <TIM_Base_SetConfig+0x120>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d00b      	beq.n	8008c60 <TIM_Base_SetConfig+0x40>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a3e      	ldr	r2, [pc, #248]	; (8008d44 <TIM_Base_SetConfig+0x124>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d007      	beq.n	8008c60 <TIM_Base_SetConfig+0x40>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a3d      	ldr	r2, [pc, #244]	; (8008d48 <TIM_Base_SetConfig+0x128>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d003      	beq.n	8008c60 <TIM_Base_SetConfig+0x40>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a3c      	ldr	r2, [pc, #240]	; (8008d4c <TIM_Base_SetConfig+0x12c>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d108      	bne.n	8008c72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a31      	ldr	r2, [pc, #196]	; (8008d3c <TIM_Base_SetConfig+0x11c>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d01f      	beq.n	8008cba <TIM_Base_SetConfig+0x9a>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c80:	d01b      	beq.n	8008cba <TIM_Base_SetConfig+0x9a>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a2e      	ldr	r2, [pc, #184]	; (8008d40 <TIM_Base_SetConfig+0x120>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d017      	beq.n	8008cba <TIM_Base_SetConfig+0x9a>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a2d      	ldr	r2, [pc, #180]	; (8008d44 <TIM_Base_SetConfig+0x124>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d013      	beq.n	8008cba <TIM_Base_SetConfig+0x9a>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4a2c      	ldr	r2, [pc, #176]	; (8008d48 <TIM_Base_SetConfig+0x128>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d00f      	beq.n	8008cba <TIM_Base_SetConfig+0x9a>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a2c      	ldr	r2, [pc, #176]	; (8008d50 <TIM_Base_SetConfig+0x130>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d00b      	beq.n	8008cba <TIM_Base_SetConfig+0x9a>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a2b      	ldr	r2, [pc, #172]	; (8008d54 <TIM_Base_SetConfig+0x134>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d007      	beq.n	8008cba <TIM_Base_SetConfig+0x9a>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a2a      	ldr	r2, [pc, #168]	; (8008d58 <TIM_Base_SetConfig+0x138>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d003      	beq.n	8008cba <TIM_Base_SetConfig+0x9a>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a25      	ldr	r2, [pc, #148]	; (8008d4c <TIM_Base_SetConfig+0x12c>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d108      	bne.n	8008ccc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	695b      	ldr	r3, [r3, #20]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	689a      	ldr	r2, [r3, #8]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a12      	ldr	r2, [pc, #72]	; (8008d3c <TIM_Base_SetConfig+0x11c>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d013      	beq.n	8008d20 <TIM_Base_SetConfig+0x100>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a13      	ldr	r2, [pc, #76]	; (8008d48 <TIM_Base_SetConfig+0x128>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d00f      	beq.n	8008d20 <TIM_Base_SetConfig+0x100>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a13      	ldr	r2, [pc, #76]	; (8008d50 <TIM_Base_SetConfig+0x130>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d00b      	beq.n	8008d20 <TIM_Base_SetConfig+0x100>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a12      	ldr	r2, [pc, #72]	; (8008d54 <TIM_Base_SetConfig+0x134>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d007      	beq.n	8008d20 <TIM_Base_SetConfig+0x100>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a11      	ldr	r2, [pc, #68]	; (8008d58 <TIM_Base_SetConfig+0x138>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d003      	beq.n	8008d20 <TIM_Base_SetConfig+0x100>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a0c      	ldr	r2, [pc, #48]	; (8008d4c <TIM_Base_SetConfig+0x12c>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d103      	bne.n	8008d28 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	691a      	ldr	r2, [r3, #16]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	615a      	str	r2, [r3, #20]
}
 8008d2e:	bf00      	nop
 8008d30:	3714      	adds	r7, #20
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	40012c00 	.word	0x40012c00
 8008d40:	40000400 	.word	0x40000400
 8008d44:	40000800 	.word	0x40000800
 8008d48:	40013400 	.word	0x40013400
 8008d4c:	40015000 	.word	0x40015000
 8008d50:	40014000 	.word	0x40014000
 8008d54:	40014400 	.word	0x40014400
 8008d58:	40014800 	.word	0x40014800

08008d5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	f023 0201 	bic.w	r2, r3, #1
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a1b      	ldr	r3, [r3, #32]
 8008d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f023 0303 	bic.w	r3, r3, #3
 8008d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f023 0302 	bic.w	r3, r3, #2
 8008da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a30      	ldr	r2, [pc, #192]	; (8008e78 <TIM_OC1_SetConfig+0x11c>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d013      	beq.n	8008de4 <TIM_OC1_SetConfig+0x88>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a2f      	ldr	r2, [pc, #188]	; (8008e7c <TIM_OC1_SetConfig+0x120>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d00f      	beq.n	8008de4 <TIM_OC1_SetConfig+0x88>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a2e      	ldr	r2, [pc, #184]	; (8008e80 <TIM_OC1_SetConfig+0x124>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d00b      	beq.n	8008de4 <TIM_OC1_SetConfig+0x88>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a2d      	ldr	r2, [pc, #180]	; (8008e84 <TIM_OC1_SetConfig+0x128>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d007      	beq.n	8008de4 <TIM_OC1_SetConfig+0x88>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a2c      	ldr	r2, [pc, #176]	; (8008e88 <TIM_OC1_SetConfig+0x12c>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d003      	beq.n	8008de4 <TIM_OC1_SetConfig+0x88>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a2b      	ldr	r2, [pc, #172]	; (8008e8c <TIM_OC1_SetConfig+0x130>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d10c      	bne.n	8008dfe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	f023 0308 	bic.w	r3, r3, #8
 8008dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	697a      	ldr	r2, [r7, #20]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f023 0304 	bic.w	r3, r3, #4
 8008dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a1d      	ldr	r2, [pc, #116]	; (8008e78 <TIM_OC1_SetConfig+0x11c>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d013      	beq.n	8008e2e <TIM_OC1_SetConfig+0xd2>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a1c      	ldr	r2, [pc, #112]	; (8008e7c <TIM_OC1_SetConfig+0x120>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d00f      	beq.n	8008e2e <TIM_OC1_SetConfig+0xd2>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a1b      	ldr	r2, [pc, #108]	; (8008e80 <TIM_OC1_SetConfig+0x124>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d00b      	beq.n	8008e2e <TIM_OC1_SetConfig+0xd2>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a1a      	ldr	r2, [pc, #104]	; (8008e84 <TIM_OC1_SetConfig+0x128>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d007      	beq.n	8008e2e <TIM_OC1_SetConfig+0xd2>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a19      	ldr	r2, [pc, #100]	; (8008e88 <TIM_OC1_SetConfig+0x12c>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d003      	beq.n	8008e2e <TIM_OC1_SetConfig+0xd2>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a18      	ldr	r2, [pc, #96]	; (8008e8c <TIM_OC1_SetConfig+0x130>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d111      	bne.n	8008e52 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	695b      	ldr	r3, [r3, #20]
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	693a      	ldr	r2, [r7, #16]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	685a      	ldr	r2, [r3, #4]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	697a      	ldr	r2, [r7, #20]
 8008e6a:	621a      	str	r2, [r3, #32]
}
 8008e6c:	bf00      	nop
 8008e6e:	371c      	adds	r7, #28
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr
 8008e78:	40012c00 	.word	0x40012c00
 8008e7c:	40013400 	.word	0x40013400
 8008e80:	40014000 	.word	0x40014000
 8008e84:	40014400 	.word	0x40014400
 8008e88:	40014800 	.word	0x40014800
 8008e8c:	40015000 	.word	0x40015000

08008e90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b087      	sub	sp, #28
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a1b      	ldr	r3, [r3, #32]
 8008e9e:	f023 0210 	bic.w	r2, r3, #16
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a1b      	ldr	r3, [r3, #32]
 8008eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	699b      	ldr	r3, [r3, #24]
 8008eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	021b      	lsls	r3, r3, #8
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	f023 0320 	bic.w	r3, r3, #32
 8008ede:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	011b      	lsls	r3, r3, #4
 8008ee6:	697a      	ldr	r2, [r7, #20]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a2c      	ldr	r2, [pc, #176]	; (8008fa0 <TIM_OC2_SetConfig+0x110>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d007      	beq.n	8008f04 <TIM_OC2_SetConfig+0x74>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a2b      	ldr	r2, [pc, #172]	; (8008fa4 <TIM_OC2_SetConfig+0x114>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d003      	beq.n	8008f04 <TIM_OC2_SetConfig+0x74>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a2a      	ldr	r2, [pc, #168]	; (8008fa8 <TIM_OC2_SetConfig+0x118>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d10d      	bne.n	8008f20 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	011b      	lsls	r3, r3, #4
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a1f      	ldr	r2, [pc, #124]	; (8008fa0 <TIM_OC2_SetConfig+0x110>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d013      	beq.n	8008f50 <TIM_OC2_SetConfig+0xc0>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a1e      	ldr	r2, [pc, #120]	; (8008fa4 <TIM_OC2_SetConfig+0x114>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d00f      	beq.n	8008f50 <TIM_OC2_SetConfig+0xc0>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a1e      	ldr	r2, [pc, #120]	; (8008fac <TIM_OC2_SetConfig+0x11c>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d00b      	beq.n	8008f50 <TIM_OC2_SetConfig+0xc0>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a1d      	ldr	r2, [pc, #116]	; (8008fb0 <TIM_OC2_SetConfig+0x120>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d007      	beq.n	8008f50 <TIM_OC2_SetConfig+0xc0>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a1c      	ldr	r2, [pc, #112]	; (8008fb4 <TIM_OC2_SetConfig+0x124>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d003      	beq.n	8008f50 <TIM_OC2_SetConfig+0xc0>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a17      	ldr	r2, [pc, #92]	; (8008fa8 <TIM_OC2_SetConfig+0x118>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d113      	bne.n	8008f78 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f56:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f5e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	695b      	ldr	r3, [r3, #20]
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	699b      	ldr	r3, [r3, #24]
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	693a      	ldr	r2, [r7, #16]
 8008f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	621a      	str	r2, [r3, #32]
}
 8008f92:	bf00      	nop
 8008f94:	371c      	adds	r7, #28
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	40012c00 	.word	0x40012c00
 8008fa4:	40013400 	.word	0x40013400
 8008fa8:	40015000 	.word	0x40015000
 8008fac:	40014000 	.word	0x40014000
 8008fb0:	40014400 	.word	0x40014400
 8008fb4:	40014800 	.word	0x40014800

08008fb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b087      	sub	sp, #28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a1b      	ldr	r3, [r3, #32]
 8008fc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
 8008fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	69db      	ldr	r3, [r3, #28]
 8008fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f023 0303 	bic.w	r3, r3, #3
 8008ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	021b      	lsls	r3, r3, #8
 800900c:	697a      	ldr	r2, [r7, #20]
 800900e:	4313      	orrs	r3, r2
 8009010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a2b      	ldr	r2, [pc, #172]	; (80090c4 <TIM_OC3_SetConfig+0x10c>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d007      	beq.n	800902a <TIM_OC3_SetConfig+0x72>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a2a      	ldr	r2, [pc, #168]	; (80090c8 <TIM_OC3_SetConfig+0x110>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d003      	beq.n	800902a <TIM_OC3_SetConfig+0x72>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a29      	ldr	r2, [pc, #164]	; (80090cc <TIM_OC3_SetConfig+0x114>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d10d      	bne.n	8009046 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	021b      	lsls	r3, r3, #8
 8009038:	697a      	ldr	r2, [r7, #20]
 800903a:	4313      	orrs	r3, r2
 800903c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009044:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a1e      	ldr	r2, [pc, #120]	; (80090c4 <TIM_OC3_SetConfig+0x10c>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d013      	beq.n	8009076 <TIM_OC3_SetConfig+0xbe>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a1d      	ldr	r2, [pc, #116]	; (80090c8 <TIM_OC3_SetConfig+0x110>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d00f      	beq.n	8009076 <TIM_OC3_SetConfig+0xbe>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a1d      	ldr	r2, [pc, #116]	; (80090d0 <TIM_OC3_SetConfig+0x118>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d00b      	beq.n	8009076 <TIM_OC3_SetConfig+0xbe>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a1c      	ldr	r2, [pc, #112]	; (80090d4 <TIM_OC3_SetConfig+0x11c>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d007      	beq.n	8009076 <TIM_OC3_SetConfig+0xbe>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a1b      	ldr	r2, [pc, #108]	; (80090d8 <TIM_OC3_SetConfig+0x120>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d003      	beq.n	8009076 <TIM_OC3_SetConfig+0xbe>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a16      	ldr	r2, [pc, #88]	; (80090cc <TIM_OC3_SetConfig+0x114>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d113      	bne.n	800909e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800907c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	011b      	lsls	r3, r3, #4
 800908c:	693a      	ldr	r2, [r7, #16]
 800908e:	4313      	orrs	r3, r2
 8009090:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	011b      	lsls	r3, r3, #4
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	4313      	orrs	r3, r2
 800909c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	697a      	ldr	r2, [r7, #20]
 80090b6:	621a      	str	r2, [r3, #32]
}
 80090b8:	bf00      	nop
 80090ba:	371c      	adds	r7, #28
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr
 80090c4:	40012c00 	.word	0x40012c00
 80090c8:	40013400 	.word	0x40013400
 80090cc:	40015000 	.word	0x40015000
 80090d0:	40014000 	.word	0x40014000
 80090d4:	40014400 	.word	0x40014400
 80090d8:	40014800 	.word	0x40014800

080090dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090dc:	b480      	push	{r7}
 80090de:	b087      	sub	sp, #28
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a1b      	ldr	r3, [r3, #32]
 80090ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a1b      	ldr	r3, [r3, #32]
 80090f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	69db      	ldr	r3, [r3, #28]
 8009102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800910a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800910e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	021b      	lsls	r3, r3, #8
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	4313      	orrs	r3, r2
 8009122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800912a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	031b      	lsls	r3, r3, #12
 8009132:	693a      	ldr	r2, [r7, #16]
 8009134:	4313      	orrs	r3, r2
 8009136:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a1a      	ldr	r2, [pc, #104]	; (80091a4 <TIM_OC4_SetConfig+0xc8>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d013      	beq.n	8009168 <TIM_OC4_SetConfig+0x8c>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a19      	ldr	r2, [pc, #100]	; (80091a8 <TIM_OC4_SetConfig+0xcc>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d00f      	beq.n	8009168 <TIM_OC4_SetConfig+0x8c>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a18      	ldr	r2, [pc, #96]	; (80091ac <TIM_OC4_SetConfig+0xd0>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d00b      	beq.n	8009168 <TIM_OC4_SetConfig+0x8c>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a17      	ldr	r2, [pc, #92]	; (80091b0 <TIM_OC4_SetConfig+0xd4>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d007      	beq.n	8009168 <TIM_OC4_SetConfig+0x8c>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a16      	ldr	r2, [pc, #88]	; (80091b4 <TIM_OC4_SetConfig+0xd8>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d003      	beq.n	8009168 <TIM_OC4_SetConfig+0x8c>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a15      	ldr	r2, [pc, #84]	; (80091b8 <TIM_OC4_SetConfig+0xdc>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d109      	bne.n	800917c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800916e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	695b      	ldr	r3, [r3, #20]
 8009174:	019b      	lsls	r3, r3, #6
 8009176:	697a      	ldr	r2, [r7, #20]
 8009178:	4313      	orrs	r3, r2
 800917a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	697a      	ldr	r2, [r7, #20]
 8009180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	685a      	ldr	r2, [r3, #4]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	693a      	ldr	r2, [r7, #16]
 8009194:	621a      	str	r2, [r3, #32]
}
 8009196:	bf00      	nop
 8009198:	371c      	adds	r7, #28
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	40012c00 	.word	0x40012c00
 80091a8:	40013400 	.word	0x40013400
 80091ac:	40014000 	.word	0x40014000
 80091b0:	40014400 	.word	0x40014400
 80091b4:	40014800 	.word	0x40014800
 80091b8:	40015000 	.word	0x40015000

080091bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80091bc:	b480      	push	{r7}
 80091be:	b087      	sub	sp, #28
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a1b      	ldr	r3, [r3, #32]
 80091ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009200:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	041b      	lsls	r3, r3, #16
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	4313      	orrs	r3, r2
 800920c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a19      	ldr	r2, [pc, #100]	; (8009278 <TIM_OC5_SetConfig+0xbc>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d013      	beq.n	800923e <TIM_OC5_SetConfig+0x82>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a18      	ldr	r2, [pc, #96]	; (800927c <TIM_OC5_SetConfig+0xc0>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d00f      	beq.n	800923e <TIM_OC5_SetConfig+0x82>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a17      	ldr	r2, [pc, #92]	; (8009280 <TIM_OC5_SetConfig+0xc4>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d00b      	beq.n	800923e <TIM_OC5_SetConfig+0x82>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a16      	ldr	r2, [pc, #88]	; (8009284 <TIM_OC5_SetConfig+0xc8>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d007      	beq.n	800923e <TIM_OC5_SetConfig+0x82>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a15      	ldr	r2, [pc, #84]	; (8009288 <TIM_OC5_SetConfig+0xcc>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d003      	beq.n	800923e <TIM_OC5_SetConfig+0x82>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4a14      	ldr	r2, [pc, #80]	; (800928c <TIM_OC5_SetConfig+0xd0>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d109      	bne.n	8009252 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009244:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	021b      	lsls	r3, r3, #8
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	4313      	orrs	r3, r2
 8009250:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	697a      	ldr	r2, [r7, #20]
 8009256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	685a      	ldr	r2, [r3, #4]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	621a      	str	r2, [r3, #32]
}
 800926c:	bf00      	nop
 800926e:	371c      	adds	r7, #28
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr
 8009278:	40012c00 	.word	0x40012c00
 800927c:	40013400 	.word	0x40013400
 8009280:	40014000 	.word	0x40014000
 8009284:	40014400 	.word	0x40014400
 8009288:	40014800 	.word	0x40014800
 800928c:	40015000 	.word	0x40015000

08009290 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009290:	b480      	push	{r7}
 8009292:	b087      	sub	sp, #28
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	021b      	lsls	r3, r3, #8
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	051b      	lsls	r3, r3, #20
 80092de:	693a      	ldr	r2, [r7, #16]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a1a      	ldr	r2, [pc, #104]	; (8009350 <TIM_OC6_SetConfig+0xc0>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d013      	beq.n	8009314 <TIM_OC6_SetConfig+0x84>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a19      	ldr	r2, [pc, #100]	; (8009354 <TIM_OC6_SetConfig+0xc4>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d00f      	beq.n	8009314 <TIM_OC6_SetConfig+0x84>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a18      	ldr	r2, [pc, #96]	; (8009358 <TIM_OC6_SetConfig+0xc8>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d00b      	beq.n	8009314 <TIM_OC6_SetConfig+0x84>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a17      	ldr	r2, [pc, #92]	; (800935c <TIM_OC6_SetConfig+0xcc>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d007      	beq.n	8009314 <TIM_OC6_SetConfig+0x84>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a16      	ldr	r2, [pc, #88]	; (8009360 <TIM_OC6_SetConfig+0xd0>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d003      	beq.n	8009314 <TIM_OC6_SetConfig+0x84>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a15      	ldr	r2, [pc, #84]	; (8009364 <TIM_OC6_SetConfig+0xd4>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d109      	bne.n	8009328 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800931a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	695b      	ldr	r3, [r3, #20]
 8009320:	029b      	lsls	r3, r3, #10
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	4313      	orrs	r3, r2
 8009326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	685a      	ldr	r2, [r3, #4]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	621a      	str	r2, [r3, #32]
}
 8009342:	bf00      	nop
 8009344:	371c      	adds	r7, #28
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	40012c00 	.word	0x40012c00
 8009354:	40013400 	.word	0x40013400
 8009358:	40014000 	.word	0x40014000
 800935c:	40014400 	.word	0x40014400
 8009360:	40014800 	.word	0x40014800
 8009364:	40015000 	.word	0x40015000

08009368 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009368:	b480      	push	{r7}
 800936a:	b087      	sub	sp, #28
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6a1b      	ldr	r3, [r3, #32]
 8009378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	f023 0201 	bic.w	r2, r3, #1
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	699b      	ldr	r3, [r3, #24]
 800938a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	011b      	lsls	r3, r3, #4
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	4313      	orrs	r3, r2
 800939c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	f023 030a 	bic.w	r3, r3, #10
 80093a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	693a      	ldr	r2, [r7, #16]
 80093b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	697a      	ldr	r2, [r7, #20]
 80093b8:	621a      	str	r2, [r3, #32]
}
 80093ba:	bf00      	nop
 80093bc:	371c      	adds	r7, #28
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b087      	sub	sp, #28
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	60f8      	str	r0, [r7, #12]
 80093ce:	60b9      	str	r1, [r7, #8]
 80093d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	f023 0210 	bic.w	r2, r3, #16
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6a1b      	ldr	r3, [r3, #32]
 80093e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80093f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	031b      	lsls	r3, r3, #12
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009402:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	011b      	lsls	r3, r3, #4
 8009408:	693a      	ldr	r2, [r7, #16]
 800940a:	4313      	orrs	r3, r2
 800940c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	697a      	ldr	r2, [r7, #20]
 8009412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	693a      	ldr	r2, [r7, #16]
 8009418:	621a      	str	r2, [r3, #32]
}
 800941a:	bf00      	nop
 800941c:	371c      	adds	r7, #28
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr

08009426 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009426:	b480      	push	{r7}
 8009428:	b085      	sub	sp, #20
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
 800942e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800943c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	4313      	orrs	r3, r2
 8009444:	f043 0307 	orr.w	r3, r3, #7
 8009448:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	609a      	str	r2, [r3, #8]
}
 8009450:	bf00      	nop
 8009452:	3714      	adds	r7, #20
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800945c:	b480      	push	{r7}
 800945e:	b087      	sub	sp, #28
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
 8009468:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009476:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	021a      	lsls	r2, r3, #8
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	431a      	orrs	r2, r3
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	4313      	orrs	r3, r2
 8009484:	697a      	ldr	r2, [r7, #20]
 8009486:	4313      	orrs	r3, r2
 8009488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	609a      	str	r2, [r3, #8]
}
 8009490:	bf00      	nop
 8009492:	371c      	adds	r7, #28
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800949c:	b480      	push	{r7}
 800949e:	b087      	sub	sp, #28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	f003 031f 	and.w	r3, r3, #31
 80094ae:	2201      	movs	r2, #1
 80094b0:	fa02 f303 	lsl.w	r3, r2, r3
 80094b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6a1a      	ldr	r2, [r3, #32]
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	43db      	mvns	r3, r3
 80094be:	401a      	ands	r2, r3
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6a1a      	ldr	r2, [r3, #32]
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	f003 031f 	and.w	r3, r3, #31
 80094ce:	6879      	ldr	r1, [r7, #4]
 80094d0:	fa01 f303 	lsl.w	r3, r1, r3
 80094d4:	431a      	orrs	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	621a      	str	r2, [r3, #32]
}
 80094da:	bf00      	nop
 80094dc:	371c      	adds	r7, #28
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
	...

080094e8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a1e      	ldr	r2, [pc, #120]	; (800956c <TIM_ResetCallback+0x84>)
 80094f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a1d      	ldr	r2, [pc, #116]	; (8009570 <TIM_ResetCallback+0x88>)
 80094fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a1c      	ldr	r2, [pc, #112]	; (8009574 <TIM_ResetCallback+0x8c>)
 8009504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a1b      	ldr	r2, [pc, #108]	; (8009578 <TIM_ResetCallback+0x90>)
 800950c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a1a      	ldr	r2, [pc, #104]	; (800957c <TIM_ResetCallback+0x94>)
 8009514:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a19      	ldr	r2, [pc, #100]	; (8009580 <TIM_ResetCallback+0x98>)
 800951c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a18      	ldr	r2, [pc, #96]	; (8009584 <TIM_ResetCallback+0x9c>)
 8009524:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a17      	ldr	r2, [pc, #92]	; (8009588 <TIM_ResetCallback+0xa0>)
 800952c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a16      	ldr	r2, [pc, #88]	; (800958c <TIM_ResetCallback+0xa4>)
 8009534:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a15      	ldr	r2, [pc, #84]	; (8009590 <TIM_ResetCallback+0xa8>)
 800953c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a14      	ldr	r2, [pc, #80]	; (8009594 <TIM_ResetCallback+0xac>)
 8009544:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a13      	ldr	r2, [pc, #76]	; (8009598 <TIM_ResetCallback+0xb0>)
 800954c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a12      	ldr	r2, [pc, #72]	; (800959c <TIM_ResetCallback+0xb4>)
 8009554:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
#if defined(TIM_BDTR_BK2E)
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a11      	ldr	r2, [pc, #68]	; (80095a0 <TIM_ResetCallback+0xb8>)
 800955c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* TIM_BDTR_BK2E */
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr
 800956c:	08001565 	.word	0x08001565
 8009570:	08008b33 	.word	0x08008b33
 8009574:	08008bab 	.word	0x08008bab
 8009578:	08008bbf 	.word	0x08008bbf
 800957c:	08008b5b 	.word	0x08008b5b
 8009580:	08008b6f 	.word	0x08008b6f
 8009584:	08008b47 	.word	0x08008b47
 8009588:	08008b83 	.word	0x08008b83
 800958c:	08008b97 	.word	0x08008b97
 8009590:	08008bd3 	.word	0x08008bd3
 8009594:	080096bd 	.word	0x080096bd
 8009598:	080096d1 	.word	0x080096d1
 800959c:	080096e5 	.word	0x080096e5
 80095a0:	080096f9 	.word	0x080096f9

080095a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d101      	bne.n	80095bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095b8:	2302      	movs	r3, #2
 80095ba:	e06d      	b.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2202      	movs	r2, #2
 80095c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a30      	ldr	r2, [pc, #192]	; (80096a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d009      	beq.n	80095fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a2f      	ldr	r2, [pc, #188]	; (80096a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d004      	beq.n	80095fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a2d      	ldr	r2, [pc, #180]	; (80096ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d108      	bne.n	800960c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009600:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	4313      	orrs	r3, r2
 800960a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009612:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	4313      	orrs	r3, r2
 800961c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68fa      	ldr	r2, [r7, #12]
 8009624:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a1e      	ldr	r2, [pc, #120]	; (80096a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d01d      	beq.n	800966c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009638:	d018      	beq.n	800966c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a1c      	ldr	r2, [pc, #112]	; (80096b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d013      	beq.n	800966c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a1a      	ldr	r2, [pc, #104]	; (80096b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d00e      	beq.n	800966c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a15      	ldr	r2, [pc, #84]	; (80096a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d009      	beq.n	800966c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a16      	ldr	r2, [pc, #88]	; (80096b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d004      	beq.n	800966c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a11      	ldr	r2, [pc, #68]	; (80096ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d10c      	bne.n	8009686 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009672:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	4313      	orrs	r3, r2
 800967c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	68ba      	ldr	r2, [r7, #8]
 8009684:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3714      	adds	r7, #20
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr
 80096a4:	40012c00 	.word	0x40012c00
 80096a8:	40013400 	.word	0x40013400
 80096ac:	40015000 	.word	0x40015000
 80096b0:	40000400 	.word	0x40000400
 80096b4:	40000800 	.word	0x40000800
 80096b8:	40014000 	.word	0x40014000

080096bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d101      	bne.n	800971e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e040      	b.n	80097a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009722:	2b00      	cmp	r3, #0
 8009724:	d106      	bne.n	8009734 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f7f8 fe0e 	bl	8002350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2224      	movs	r2, #36	; 0x24
 8009738:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f022 0201 	bic.w	r2, r2, #1
 8009748:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f8b6 	bl	80098bc <UART_SetConfig>
 8009750:	4603      	mov	r3, r0
 8009752:	2b01      	cmp	r3, #1
 8009754:	d101      	bne.n	800975a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e022      	b.n	80097a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975e:	2b00      	cmp	r3, #0
 8009760:	d002      	beq.n	8009768 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 fa7e 	bl	8009c64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	685a      	ldr	r2, [r3, #4]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009776:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	689a      	ldr	r2, [r3, #8]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009786:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f042 0201 	orr.w	r2, r2, #1
 8009796:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fb05 	bl	8009da8 <UART_CheckIdleState>
 800979e:	4603      	mov	r3, r0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b08a      	sub	sp, #40	; 0x28
 80097ac:	af02      	add	r7, sp, #8
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	603b      	str	r3, [r7, #0]
 80097b4:	4613      	mov	r3, r2
 80097b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097bc:	2b20      	cmp	r3, #32
 80097be:	d178      	bne.n	80098b2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d002      	beq.n	80097cc <HAL_UART_Transmit+0x24>
 80097c6:	88fb      	ldrh	r3, [r7, #6]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d101      	bne.n	80097d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e071      	b.n	80098b4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2221      	movs	r2, #33	; 0x21
 80097dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097de:	f7f8 fe7d 	bl	80024dc <HAL_GetTick>
 80097e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	88fa      	ldrh	r2, [r7, #6]
 80097e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	88fa      	ldrh	r2, [r7, #6]
 80097f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097fc:	d108      	bne.n	8009810 <HAL_UART_Transmit+0x68>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d104      	bne.n	8009810 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009806:	2300      	movs	r3, #0
 8009808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	61bb      	str	r3, [r7, #24]
 800980e:	e003      	b.n	8009818 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009814:	2300      	movs	r3, #0
 8009816:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009818:	e030      	b.n	800987c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	9300      	str	r3, [sp, #0]
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	2200      	movs	r2, #0
 8009822:	2180      	movs	r1, #128	; 0x80
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f000 fb67 	bl	8009ef8 <UART_WaitOnFlagUntilTimeout>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d004      	beq.n	800983a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2220      	movs	r2, #32
 8009834:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009836:	2303      	movs	r3, #3
 8009838:	e03c      	b.n	80098b4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10b      	bne.n	8009858 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	881a      	ldrh	r2, [r3, #0]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800984c:	b292      	uxth	r2, r2
 800984e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	3302      	adds	r3, #2
 8009854:	61bb      	str	r3, [r7, #24]
 8009856:	e008      	b.n	800986a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	781a      	ldrb	r2, [r3, #0]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	b292      	uxth	r2, r2
 8009862:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	3301      	adds	r3, #1
 8009868:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009870:	b29b      	uxth	r3, r3
 8009872:	3b01      	subs	r3, #1
 8009874:	b29a      	uxth	r2, r3
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009882:	b29b      	uxth	r3, r3
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1c8      	bne.n	800981a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	9300      	str	r3, [sp, #0]
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	2200      	movs	r2, #0
 8009890:	2140      	movs	r1, #64	; 0x40
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f000 fb30 	bl	8009ef8 <UART_WaitOnFlagUntilTimeout>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d004      	beq.n	80098a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2220      	movs	r2, #32
 80098a2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80098a4:	2303      	movs	r3, #3
 80098a6:	e005      	b.n	80098b4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2220      	movs	r2, #32
 80098ac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80098ae:	2300      	movs	r3, #0
 80098b0:	e000      	b.n	80098b4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80098b2:	2302      	movs	r3, #2
  }
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3720      	adds	r7, #32
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b088      	sub	sp, #32
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	689a      	ldr	r2, [r3, #8]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	431a      	orrs	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	431a      	orrs	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	69db      	ldr	r3, [r3, #28]
 80098dc:	4313      	orrs	r3, r2
 80098de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	4b92      	ldr	r3, [pc, #584]	; (8009b30 <UART_SetConfig+0x274>)
 80098e8:	4013      	ands	r3, r2
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	6812      	ldr	r2, [r2, #0]
 80098ee:	6979      	ldr	r1, [r7, #20]
 80098f0:	430b      	orrs	r3, r1
 80098f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	68da      	ldr	r2, [r3, #12]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	430a      	orrs	r2, r1
 8009908:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a1b      	ldr	r3, [r3, #32]
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	4313      	orrs	r3, r2
 8009918:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	697a      	ldr	r2, [r7, #20]
 800992a:	430a      	orrs	r2, r1
 800992c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a80      	ldr	r2, [pc, #512]	; (8009b34 <UART_SetConfig+0x278>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d120      	bne.n	800997a <UART_SetConfig+0xbe>
 8009938:	4b7f      	ldr	r3, [pc, #508]	; (8009b38 <UART_SetConfig+0x27c>)
 800993a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800993c:	f003 0303 	and.w	r3, r3, #3
 8009940:	2b03      	cmp	r3, #3
 8009942:	d817      	bhi.n	8009974 <UART_SetConfig+0xb8>
 8009944:	a201      	add	r2, pc, #4	; (adr r2, 800994c <UART_SetConfig+0x90>)
 8009946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994a:	bf00      	nop
 800994c:	0800995d 	.word	0x0800995d
 8009950:	08009969 	.word	0x08009969
 8009954:	0800996f 	.word	0x0800996f
 8009958:	08009963 	.word	0x08009963
 800995c:	2301      	movs	r3, #1
 800995e:	77fb      	strb	r3, [r7, #31]
 8009960:	e0b5      	b.n	8009ace <UART_SetConfig+0x212>
 8009962:	2302      	movs	r3, #2
 8009964:	77fb      	strb	r3, [r7, #31]
 8009966:	e0b2      	b.n	8009ace <UART_SetConfig+0x212>
 8009968:	2304      	movs	r3, #4
 800996a:	77fb      	strb	r3, [r7, #31]
 800996c:	e0af      	b.n	8009ace <UART_SetConfig+0x212>
 800996e:	2308      	movs	r3, #8
 8009970:	77fb      	strb	r3, [r7, #31]
 8009972:	e0ac      	b.n	8009ace <UART_SetConfig+0x212>
 8009974:	2310      	movs	r3, #16
 8009976:	77fb      	strb	r3, [r7, #31]
 8009978:	e0a9      	b.n	8009ace <UART_SetConfig+0x212>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a6f      	ldr	r2, [pc, #444]	; (8009b3c <UART_SetConfig+0x280>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d124      	bne.n	80099ce <UART_SetConfig+0x112>
 8009984:	4b6c      	ldr	r3, [pc, #432]	; (8009b38 <UART_SetConfig+0x27c>)
 8009986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009988:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800998c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009990:	d011      	beq.n	80099b6 <UART_SetConfig+0xfa>
 8009992:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009996:	d817      	bhi.n	80099c8 <UART_SetConfig+0x10c>
 8009998:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800999c:	d011      	beq.n	80099c2 <UART_SetConfig+0x106>
 800999e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099a2:	d811      	bhi.n	80099c8 <UART_SetConfig+0x10c>
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d003      	beq.n	80099b0 <UART_SetConfig+0xf4>
 80099a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099ac:	d006      	beq.n	80099bc <UART_SetConfig+0x100>
 80099ae:	e00b      	b.n	80099c8 <UART_SetConfig+0x10c>
 80099b0:	2300      	movs	r3, #0
 80099b2:	77fb      	strb	r3, [r7, #31]
 80099b4:	e08b      	b.n	8009ace <UART_SetConfig+0x212>
 80099b6:	2302      	movs	r3, #2
 80099b8:	77fb      	strb	r3, [r7, #31]
 80099ba:	e088      	b.n	8009ace <UART_SetConfig+0x212>
 80099bc:	2304      	movs	r3, #4
 80099be:	77fb      	strb	r3, [r7, #31]
 80099c0:	e085      	b.n	8009ace <UART_SetConfig+0x212>
 80099c2:	2308      	movs	r3, #8
 80099c4:	77fb      	strb	r3, [r7, #31]
 80099c6:	e082      	b.n	8009ace <UART_SetConfig+0x212>
 80099c8:	2310      	movs	r3, #16
 80099ca:	77fb      	strb	r3, [r7, #31]
 80099cc:	e07f      	b.n	8009ace <UART_SetConfig+0x212>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a5b      	ldr	r2, [pc, #364]	; (8009b40 <UART_SetConfig+0x284>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d124      	bne.n	8009a22 <UART_SetConfig+0x166>
 80099d8:	4b57      	ldr	r3, [pc, #348]	; (8009b38 <UART_SetConfig+0x27c>)
 80099da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099dc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80099e0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80099e4:	d011      	beq.n	8009a0a <UART_SetConfig+0x14e>
 80099e6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80099ea:	d817      	bhi.n	8009a1c <UART_SetConfig+0x160>
 80099ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80099f0:	d011      	beq.n	8009a16 <UART_SetConfig+0x15a>
 80099f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80099f6:	d811      	bhi.n	8009a1c <UART_SetConfig+0x160>
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d003      	beq.n	8009a04 <UART_SetConfig+0x148>
 80099fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a00:	d006      	beq.n	8009a10 <UART_SetConfig+0x154>
 8009a02:	e00b      	b.n	8009a1c <UART_SetConfig+0x160>
 8009a04:	2300      	movs	r3, #0
 8009a06:	77fb      	strb	r3, [r7, #31]
 8009a08:	e061      	b.n	8009ace <UART_SetConfig+0x212>
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	77fb      	strb	r3, [r7, #31]
 8009a0e:	e05e      	b.n	8009ace <UART_SetConfig+0x212>
 8009a10:	2304      	movs	r3, #4
 8009a12:	77fb      	strb	r3, [r7, #31]
 8009a14:	e05b      	b.n	8009ace <UART_SetConfig+0x212>
 8009a16:	2308      	movs	r3, #8
 8009a18:	77fb      	strb	r3, [r7, #31]
 8009a1a:	e058      	b.n	8009ace <UART_SetConfig+0x212>
 8009a1c:	2310      	movs	r3, #16
 8009a1e:	77fb      	strb	r3, [r7, #31]
 8009a20:	e055      	b.n	8009ace <UART_SetConfig+0x212>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a47      	ldr	r2, [pc, #284]	; (8009b44 <UART_SetConfig+0x288>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d124      	bne.n	8009a76 <UART_SetConfig+0x1ba>
 8009a2c:	4b42      	ldr	r3, [pc, #264]	; (8009b38 <UART_SetConfig+0x27c>)
 8009a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a30:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009a34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a38:	d011      	beq.n	8009a5e <UART_SetConfig+0x1a2>
 8009a3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a3e:	d817      	bhi.n	8009a70 <UART_SetConfig+0x1b4>
 8009a40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a44:	d011      	beq.n	8009a6a <UART_SetConfig+0x1ae>
 8009a46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a4a:	d811      	bhi.n	8009a70 <UART_SetConfig+0x1b4>
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d003      	beq.n	8009a58 <UART_SetConfig+0x19c>
 8009a50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a54:	d006      	beq.n	8009a64 <UART_SetConfig+0x1a8>
 8009a56:	e00b      	b.n	8009a70 <UART_SetConfig+0x1b4>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	77fb      	strb	r3, [r7, #31]
 8009a5c:	e037      	b.n	8009ace <UART_SetConfig+0x212>
 8009a5e:	2302      	movs	r3, #2
 8009a60:	77fb      	strb	r3, [r7, #31]
 8009a62:	e034      	b.n	8009ace <UART_SetConfig+0x212>
 8009a64:	2304      	movs	r3, #4
 8009a66:	77fb      	strb	r3, [r7, #31]
 8009a68:	e031      	b.n	8009ace <UART_SetConfig+0x212>
 8009a6a:	2308      	movs	r3, #8
 8009a6c:	77fb      	strb	r3, [r7, #31]
 8009a6e:	e02e      	b.n	8009ace <UART_SetConfig+0x212>
 8009a70:	2310      	movs	r3, #16
 8009a72:	77fb      	strb	r3, [r7, #31]
 8009a74:	e02b      	b.n	8009ace <UART_SetConfig+0x212>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a33      	ldr	r2, [pc, #204]	; (8009b48 <UART_SetConfig+0x28c>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d124      	bne.n	8009aca <UART_SetConfig+0x20e>
 8009a80:	4b2d      	ldr	r3, [pc, #180]	; (8009b38 <UART_SetConfig+0x27c>)
 8009a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a84:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009a88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009a8c:	d011      	beq.n	8009ab2 <UART_SetConfig+0x1f6>
 8009a8e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009a92:	d817      	bhi.n	8009ac4 <UART_SetConfig+0x208>
 8009a94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a98:	d011      	beq.n	8009abe <UART_SetConfig+0x202>
 8009a9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a9e:	d811      	bhi.n	8009ac4 <UART_SetConfig+0x208>
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d003      	beq.n	8009aac <UART_SetConfig+0x1f0>
 8009aa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009aa8:	d006      	beq.n	8009ab8 <UART_SetConfig+0x1fc>
 8009aaa:	e00b      	b.n	8009ac4 <UART_SetConfig+0x208>
 8009aac:	2300      	movs	r3, #0
 8009aae:	77fb      	strb	r3, [r7, #31]
 8009ab0:	e00d      	b.n	8009ace <UART_SetConfig+0x212>
 8009ab2:	2302      	movs	r3, #2
 8009ab4:	77fb      	strb	r3, [r7, #31]
 8009ab6:	e00a      	b.n	8009ace <UART_SetConfig+0x212>
 8009ab8:	2304      	movs	r3, #4
 8009aba:	77fb      	strb	r3, [r7, #31]
 8009abc:	e007      	b.n	8009ace <UART_SetConfig+0x212>
 8009abe:	2308      	movs	r3, #8
 8009ac0:	77fb      	strb	r3, [r7, #31]
 8009ac2:	e004      	b.n	8009ace <UART_SetConfig+0x212>
 8009ac4:	2310      	movs	r3, #16
 8009ac6:	77fb      	strb	r3, [r7, #31]
 8009ac8:	e001      	b.n	8009ace <UART_SetConfig+0x212>
 8009aca:	2310      	movs	r3, #16
 8009acc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	69db      	ldr	r3, [r3, #28]
 8009ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ad6:	d16b      	bne.n	8009bb0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8009ad8:	7ffb      	ldrb	r3, [r7, #31]
 8009ada:	2b08      	cmp	r3, #8
 8009adc:	d838      	bhi.n	8009b50 <UART_SetConfig+0x294>
 8009ade:	a201      	add	r2, pc, #4	; (adr r2, 8009ae4 <UART_SetConfig+0x228>)
 8009ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae4:	08009b09 	.word	0x08009b09
 8009ae8:	08009b11 	.word	0x08009b11
 8009aec:	08009b19 	.word	0x08009b19
 8009af0:	08009b51 	.word	0x08009b51
 8009af4:	08009b1f 	.word	0x08009b1f
 8009af8:	08009b51 	.word	0x08009b51
 8009afc:	08009b51 	.word	0x08009b51
 8009b00:	08009b51 	.word	0x08009b51
 8009b04:	08009b27 	.word	0x08009b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b08:	f7fe f84e 	bl	8007ba8 <HAL_RCC_GetPCLK1Freq>
 8009b0c:	61b8      	str	r0, [r7, #24]
        break;
 8009b0e:	e024      	b.n	8009b5a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b10:	f7fe f86c 	bl	8007bec <HAL_RCC_GetPCLK2Freq>
 8009b14:	61b8      	str	r0, [r7, #24]
        break;
 8009b16:	e020      	b.n	8009b5a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b18:	4b0c      	ldr	r3, [pc, #48]	; (8009b4c <UART_SetConfig+0x290>)
 8009b1a:	61bb      	str	r3, [r7, #24]
        break;
 8009b1c:	e01d      	b.n	8009b5a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b1e:	f7fd ffcd 	bl	8007abc <HAL_RCC_GetSysClockFreq>
 8009b22:	61b8      	str	r0, [r7, #24]
        break;
 8009b24:	e019      	b.n	8009b5a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b2a:	61bb      	str	r3, [r7, #24]
        break;
 8009b2c:	e015      	b.n	8009b5a <UART_SetConfig+0x29e>
 8009b2e:	bf00      	nop
 8009b30:	efff69f3 	.word	0xefff69f3
 8009b34:	40013800 	.word	0x40013800
 8009b38:	40021000 	.word	0x40021000
 8009b3c:	40004400 	.word	0x40004400
 8009b40:	40004800 	.word	0x40004800
 8009b44:	40004c00 	.word	0x40004c00
 8009b48:	40005000 	.word	0x40005000
 8009b4c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8009b50:	2300      	movs	r3, #0
 8009b52:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	77bb      	strb	r3, [r7, #30]
        break;
 8009b58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d073      	beq.n	8009c48 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	005a      	lsls	r2, r3, #1
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	085b      	lsrs	r3, r3, #1
 8009b6a:	441a      	add	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	2b0f      	cmp	r3, #15
 8009b7a:	d916      	bls.n	8009baa <UART_SetConfig+0x2ee>
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b82:	d212      	bcs.n	8009baa <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	f023 030f 	bic.w	r3, r3, #15
 8009b8c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	085b      	lsrs	r3, r3, #1
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	f003 0307 	and.w	r3, r3, #7
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	89fb      	ldrh	r3, [r7, #14]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	89fa      	ldrh	r2, [r7, #14]
 8009ba6:	60da      	str	r2, [r3, #12]
 8009ba8:	e04e      	b.n	8009c48 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	77bb      	strb	r3, [r7, #30]
 8009bae:	e04b      	b.n	8009c48 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009bb0:	7ffb      	ldrb	r3, [r7, #31]
 8009bb2:	2b08      	cmp	r3, #8
 8009bb4:	d827      	bhi.n	8009c06 <UART_SetConfig+0x34a>
 8009bb6:	a201      	add	r2, pc, #4	; (adr r2, 8009bbc <UART_SetConfig+0x300>)
 8009bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bbc:	08009be1 	.word	0x08009be1
 8009bc0:	08009be9 	.word	0x08009be9
 8009bc4:	08009bf1 	.word	0x08009bf1
 8009bc8:	08009c07 	.word	0x08009c07
 8009bcc:	08009bf7 	.word	0x08009bf7
 8009bd0:	08009c07 	.word	0x08009c07
 8009bd4:	08009c07 	.word	0x08009c07
 8009bd8:	08009c07 	.word	0x08009c07
 8009bdc:	08009bff 	.word	0x08009bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009be0:	f7fd ffe2 	bl	8007ba8 <HAL_RCC_GetPCLK1Freq>
 8009be4:	61b8      	str	r0, [r7, #24]
        break;
 8009be6:	e013      	b.n	8009c10 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009be8:	f7fe f800 	bl	8007bec <HAL_RCC_GetPCLK2Freq>
 8009bec:	61b8      	str	r0, [r7, #24]
        break;
 8009bee:	e00f      	b.n	8009c10 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bf0:	4b1b      	ldr	r3, [pc, #108]	; (8009c60 <UART_SetConfig+0x3a4>)
 8009bf2:	61bb      	str	r3, [r7, #24]
        break;
 8009bf4:	e00c      	b.n	8009c10 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bf6:	f7fd ff61 	bl	8007abc <HAL_RCC_GetSysClockFreq>
 8009bfa:	61b8      	str	r0, [r7, #24]
        break;
 8009bfc:	e008      	b.n	8009c10 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c02:	61bb      	str	r3, [r7, #24]
        break;
 8009c04:	e004      	b.n	8009c10 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8009c06:	2300      	movs	r3, #0
 8009c08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	77bb      	strb	r3, [r7, #30]
        break;
 8009c0e:	bf00      	nop
    }

    if (pclk != 0U)
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d018      	beq.n	8009c48 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	085a      	lsrs	r2, r3, #1
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	441a      	add	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	2b0f      	cmp	r3, #15
 8009c2e:	d909      	bls.n	8009c44 <UART_SetConfig+0x388>
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c36:	d205      	bcs.n	8009c44 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	60da      	str	r2, [r3, #12]
 8009c42:	e001      	b.n	8009c48 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009c54:	7fbb      	ldrb	r3, [r7, #30]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3720      	adds	r7, #32
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	007a1200 	.word	0x007a1200

08009c64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c70:	f003 0301 	and.w	r3, r3, #1
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00a      	beq.n	8009c8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	430a      	orrs	r2, r1
 8009c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c92:	f003 0302 	and.w	r3, r3, #2
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00a      	beq.n	8009cb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	430a      	orrs	r2, r1
 8009cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb4:	f003 0304 	and.w	r3, r3, #4
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00a      	beq.n	8009cd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd6:	f003 0308 	and.w	r3, r3, #8
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00a      	beq.n	8009cf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	430a      	orrs	r2, r1
 8009cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf8:	f003 0310 	and.w	r3, r3, #16
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00a      	beq.n	8009d16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	430a      	orrs	r2, r1
 8009d14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1a:	f003 0320 	and.w	r3, r3, #32
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00a      	beq.n	8009d38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	430a      	orrs	r2, r1
 8009d36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d01a      	beq.n	8009d7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	430a      	orrs	r2, r1
 8009d58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d62:	d10a      	bne.n	8009d7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	430a      	orrs	r2, r1
 8009d78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00a      	beq.n	8009d9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	430a      	orrs	r2, r1
 8009d9a:	605a      	str	r2, [r3, #4]
  }
}
 8009d9c:	bf00      	nop
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b098      	sub	sp, #96	; 0x60
 8009dac:	af02      	add	r7, sp, #8
 8009dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009db8:	f7f8 fb90 	bl	80024dc <HAL_GetTick>
 8009dbc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f003 0308 	and.w	r3, r3, #8
 8009dc8:	2b08      	cmp	r3, #8
 8009dca:	d12e      	bne.n	8009e2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009dcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f88c 	bl	8009ef8 <UART_WaitOnFlagUntilTimeout>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d021      	beq.n	8009e2a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dee:	e853 3f00 	ldrex	r3, [r3]
 8009df2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009dfa:	653b      	str	r3, [r7, #80]	; 0x50
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	461a      	mov	r2, r3
 8009e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e04:	647b      	str	r3, [r7, #68]	; 0x44
 8009e06:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e0c:	e841 2300 	strex	r3, r2, [r1]
 8009e10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d1e6      	bne.n	8009de6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2220      	movs	r2, #32
 8009e1c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e26:	2303      	movs	r3, #3
 8009e28:	e062      	b.n	8009ef0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 0304 	and.w	r3, r3, #4
 8009e34:	2b04      	cmp	r3, #4
 8009e36:	d149      	bne.n	8009ecc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e40:	2200      	movs	r2, #0
 8009e42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 f856 	bl	8009ef8 <UART_WaitOnFlagUntilTimeout>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d03c      	beq.n	8009ecc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5a:	e853 3f00 	ldrex	r3, [r3]
 8009e5e:	623b      	str	r3, [r7, #32]
   return(result);
 8009e60:	6a3b      	ldr	r3, [r7, #32]
 8009e62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e70:	633b      	str	r3, [r7, #48]	; 0x30
 8009e72:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e78:	e841 2300 	strex	r3, r2, [r1]
 8009e7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1e6      	bne.n	8009e52 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	3308      	adds	r3, #8
 8009e8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	e853 3f00 	ldrex	r3, [r3]
 8009e92:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f023 0301 	bic.w	r3, r3, #1
 8009e9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3308      	adds	r3, #8
 8009ea2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ea4:	61fa      	str	r2, [r7, #28]
 8009ea6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea8:	69b9      	ldr	r1, [r7, #24]
 8009eaa:	69fa      	ldr	r2, [r7, #28]
 8009eac:	e841 2300 	strex	r3, r2, [r1]
 8009eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d1e5      	bne.n	8009e84 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2220      	movs	r2, #32
 8009ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ec8:	2303      	movs	r3, #3
 8009eca:	e011      	b.n	8009ef0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2220      	movs	r2, #32
 8009ed0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2220      	movs	r2, #32
 8009ed6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3758      	adds	r7, #88	; 0x58
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	603b      	str	r3, [r7, #0]
 8009f04:	4613      	mov	r3, r2
 8009f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f08:	e049      	b.n	8009f9e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f10:	d045      	beq.n	8009f9e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f12:	f7f8 fae3 	bl	80024dc <HAL_GetTick>
 8009f16:	4602      	mov	r2, r0
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	1ad3      	subs	r3, r2, r3
 8009f1c:	69ba      	ldr	r2, [r7, #24]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d302      	bcc.n	8009f28 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d101      	bne.n	8009f2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009f28:	2303      	movs	r3, #3
 8009f2a:	e048      	b.n	8009fbe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f003 0304 	and.w	r3, r3, #4
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d031      	beq.n	8009f9e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	69db      	ldr	r3, [r3, #28]
 8009f40:	f003 0308 	and.w	r3, r3, #8
 8009f44:	2b08      	cmp	r3, #8
 8009f46:	d110      	bne.n	8009f6a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2208      	movs	r2, #8
 8009f4e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f000 f838 	bl	8009fc6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2208      	movs	r2, #8
 8009f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e029      	b.n	8009fbe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	69db      	ldr	r3, [r3, #28]
 8009f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f78:	d111      	bne.n	8009f9e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f000 f81e 	bl	8009fc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2220      	movs	r2, #32
 8009f8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e00f      	b.n	8009fbe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	69da      	ldr	r2, [r3, #28]
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	bf0c      	ite	eq
 8009fae:	2301      	moveq	r3, #1
 8009fb0:	2300      	movne	r3, #0
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	79fb      	ldrb	r3, [r7, #7]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d0a6      	beq.n	8009f0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009fc6:	b480      	push	{r7}
 8009fc8:	b095      	sub	sp, #84	; 0x54
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd6:	e853 3f00 	ldrex	r3, [r3]
 8009fda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fec:	643b      	str	r3, [r7, #64]	; 0x40
 8009fee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ff2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ff4:	e841 2300 	strex	r3, r2, [r1]
 8009ff8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1e6      	bne.n	8009fce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	3308      	adds	r3, #8
 800a006:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a008:	6a3b      	ldr	r3, [r7, #32]
 800a00a:	e853 3f00 	ldrex	r3, [r3]
 800a00e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	f023 0301 	bic.w	r3, r3, #1
 800a016:	64bb      	str	r3, [r7, #72]	; 0x48
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	3308      	adds	r3, #8
 800a01e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a020:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a022:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a024:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a028:	e841 2300 	strex	r3, r2, [r1]
 800a02c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	2b00      	cmp	r3, #0
 800a032:	d1e5      	bne.n	800a000 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d118      	bne.n	800a06e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	e853 3f00 	ldrex	r3, [r3]
 800a048:	60bb      	str	r3, [r7, #8]
   return(result);
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	f023 0310 	bic.w	r3, r3, #16
 800a050:	647b      	str	r3, [r7, #68]	; 0x44
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	461a      	mov	r2, r3
 800a058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a05a:	61bb      	str	r3, [r7, #24]
 800a05c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05e:	6979      	ldr	r1, [r7, #20]
 800a060:	69ba      	ldr	r2, [r7, #24]
 800a062:	e841 2300 	strex	r3, r2, [r1]
 800a066:	613b      	str	r3, [r7, #16]
   return(result);
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1e6      	bne.n	800a03c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2220      	movs	r2, #32
 800a072:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a082:	bf00      	nop
 800a084:	3754      	adds	r7, #84	; 0x54
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a08e:	b480      	push	{r7}
 800a090:	b085      	sub	sp, #20
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a09e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a0a2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	b29a      	uxth	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a0ae:	2300      	movs	r3, #0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3714      	adds	r7, #20
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a0c4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a0c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	43db      	mvns	r3, r3
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	4013      	ands	r3, r2
 800a0dc:	b29a      	uxth	r2, r3
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3714      	adds	r7, #20
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr

0800a0f2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	f107 0014 	add.w	r0, r7, #20
 800a100:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2201      	movs	r2, #1
 800a108:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	370c      	adds	r7, #12
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	b004      	add	sp, #16
 800a132:	4770      	bx	lr

0800a134 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a134:	b480      	push	{r7}
 800a136:	b09d      	sub	sp, #116	; 0x74
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a13e:	2300      	movs	r3, #0
 800a140:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4413      	add	r3, r2
 800a14e:	881b      	ldrh	r3, [r3, #0]
 800a150:	b29b      	uxth	r3, r3
 800a152:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a15a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	78db      	ldrb	r3, [r3, #3]
 800a162:	2b03      	cmp	r3, #3
 800a164:	d81f      	bhi.n	800a1a6 <USB_ActivateEndpoint+0x72>
 800a166:	a201      	add	r2, pc, #4	; (adr r2, 800a16c <USB_ActivateEndpoint+0x38>)
 800a168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a16c:	0800a17d 	.word	0x0800a17d
 800a170:	0800a199 	.word	0x0800a199
 800a174:	0800a1af 	.word	0x0800a1af
 800a178:	0800a18b 	.word	0x0800a18b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a17c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a180:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a184:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a188:	e012      	b.n	800a1b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a18a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a18e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a192:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a196:	e00b      	b.n	800a1b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a198:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a19c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a1a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a1a4:	e004      	b.n	800a1b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a1ac:	e000      	b.n	800a1b0 <USB_ActivateEndpoint+0x7c>
      break;
 800a1ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	441a      	add	r2, r3
 800a1ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a1be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	4413      	add	r3, r2
 800a1dc:	881b      	ldrh	r3, [r3, #0]
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	b21b      	sxth	r3, r3
 800a1e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ea:	b21a      	sxth	r2, r3
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	b21b      	sxth	r3, r3
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	b21b      	sxth	r3, r3
 800a1f6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	441a      	add	r2, r3
 800a204:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a20c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a218:	b29b      	uxth	r3, r3
 800a21a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	7b1b      	ldrb	r3, [r3, #12]
 800a220:	2b00      	cmp	r3, #0
 800a222:	f040 8178 	bne.w	800a516 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	785b      	ldrb	r3, [r3, #1]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f000 8084 	beq.w	800a338 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	61bb      	str	r3, [r7, #24]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	461a      	mov	r2, r3
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	4413      	add	r3, r2
 800a242:	61bb      	str	r3, [r7, #24]
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	00da      	lsls	r2, r3, #3
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	4413      	add	r3, r2
 800a24e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a252:	617b      	str	r3, [r7, #20]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	88db      	ldrh	r3, [r3, #6]
 800a258:	085b      	lsrs	r3, r3, #1
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	005b      	lsls	r3, r3, #1
 800a25e:	b29a      	uxth	r2, r3
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	4413      	add	r3, r2
 800a26e:	881b      	ldrh	r3, [r3, #0]
 800a270:	827b      	strh	r3, [r7, #18]
 800a272:	8a7b      	ldrh	r3, [r7, #18]
 800a274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d01b      	beq.n	800a2b4 <USB_ActivateEndpoint+0x180>
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4413      	add	r3, r2
 800a286:	881b      	ldrh	r3, [r3, #0]
 800a288:	b29b      	uxth	r3, r3
 800a28a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a28e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a292:	823b      	strh	r3, [r7, #16]
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	441a      	add	r2, r3
 800a29e:	8a3b      	ldrh	r3, [r7, #16]
 800a2a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	78db      	ldrb	r3, [r3, #3]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d020      	beq.n	800a2fe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	4413      	add	r3, r2
 800a2c6:	881b      	ldrh	r3, [r3, #0]
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2d2:	81bb      	strh	r3, [r7, #12]
 800a2d4:	89bb      	ldrh	r3, [r7, #12]
 800a2d6:	f083 0320 	eor.w	r3, r3, #32
 800a2da:	81bb      	strh	r3, [r7, #12]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	441a      	add	r2, r3
 800a2e6:	89bb      	ldrh	r3, [r7, #12]
 800a2e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	8013      	strh	r3, [r2, #0]
 800a2fc:	e2d5      	b.n	800a8aa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4413      	add	r3, r2
 800a308:	881b      	ldrh	r3, [r3, #0]
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a314:	81fb      	strh	r3, [r7, #14]
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	441a      	add	r2, r3
 800a320:	89fb      	ldrh	r3, [r7, #14]
 800a322:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a326:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a32a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a32e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a332:	b29b      	uxth	r3, r3
 800a334:	8013      	strh	r3, [r2, #0]
 800a336:	e2b8      	b.n	800a8aa <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	633b      	str	r3, [r7, #48]	; 0x30
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a342:	b29b      	uxth	r3, r3
 800a344:	461a      	mov	r2, r3
 800a346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a348:	4413      	add	r3, r2
 800a34a:	633b      	str	r3, [r7, #48]	; 0x30
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	00da      	lsls	r2, r3, #3
 800a352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a354:	4413      	add	r3, r2
 800a356:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a35a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	88db      	ldrh	r3, [r3, #6]
 800a360:	085b      	lsrs	r3, r3, #1
 800a362:	b29b      	uxth	r3, r3
 800a364:	005b      	lsls	r3, r3, #1
 800a366:	b29a      	uxth	r2, r3
 800a368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a376:	b29b      	uxth	r3, r3
 800a378:	461a      	mov	r2, r3
 800a37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37c:	4413      	add	r3, r2
 800a37e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	00da      	lsls	r2, r3, #3
 800a386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a388:	4413      	add	r3, r2
 800a38a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a38e:	627b      	str	r3, [r7, #36]	; 0x24
 800a390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a392:	881b      	ldrh	r3, [r3, #0]
 800a394:	b29b      	uxth	r3, r3
 800a396:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39e:	801a      	strh	r2, [r3, #0]
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	2b3e      	cmp	r3, #62	; 0x3e
 800a3a6:	d91d      	bls.n	800a3e4 <USB_ActivateEndpoint+0x2b0>
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	095b      	lsrs	r3, r3, #5
 800a3ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	f003 031f 	and.w	r3, r3, #31
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d102      	bne.n	800a3c2 <USB_ActivateEndpoint+0x28e>
 800a3bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c4:	881b      	ldrh	r3, [r3, #0]
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	029b      	lsls	r3, r3, #10
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e0:	801a      	strh	r2, [r3, #0]
 800a3e2:	e026      	b.n	800a432 <USB_ActivateEndpoint+0x2fe>
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10a      	bne.n	800a402 <USB_ActivateEndpoint+0x2ce>
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ee:	881b      	ldrh	r3, [r3, #0]
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3fa:	b29a      	uxth	r2, r3
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	801a      	strh	r2, [r3, #0]
 800a400:	e017      	b.n	800a432 <USB_ActivateEndpoint+0x2fe>
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	691b      	ldr	r3, [r3, #16]
 800a406:	085b      	lsrs	r3, r3, #1
 800a408:	66bb      	str	r3, [r7, #104]	; 0x68
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	f003 0301 	and.w	r3, r3, #1
 800a412:	2b00      	cmp	r3, #0
 800a414:	d002      	beq.n	800a41c <USB_ActivateEndpoint+0x2e8>
 800a416:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a418:	3301      	adds	r3, #1
 800a41a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41e:	881b      	ldrh	r3, [r3, #0]
 800a420:	b29a      	uxth	r2, r3
 800a422:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a424:	b29b      	uxth	r3, r3
 800a426:	029b      	lsls	r3, r3, #10
 800a428:	b29b      	uxth	r3, r3
 800a42a:	4313      	orrs	r3, r2
 800a42c:	b29a      	uxth	r2, r3
 800a42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a430:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	4413      	add	r3, r2
 800a43c:	881b      	ldrh	r3, [r3, #0]
 800a43e:	847b      	strh	r3, [r7, #34]	; 0x22
 800a440:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a446:	2b00      	cmp	r3, #0
 800a448:	d01b      	beq.n	800a482 <USB_ActivateEndpoint+0x34e>
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	4413      	add	r3, r2
 800a454:	881b      	ldrh	r3, [r3, #0]
 800a456:	b29b      	uxth	r3, r3
 800a458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a45c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a460:	843b      	strh	r3, [r7, #32]
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	441a      	add	r2, r3
 800a46c:	8c3b      	ldrh	r3, [r7, #32]
 800a46e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a476:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a47a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a47e:	b29b      	uxth	r3, r3
 800a480:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d124      	bne.n	800a4d4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	4413      	add	r3, r2
 800a494:	881b      	ldrh	r3, [r3, #0]
 800a496:	b29b      	uxth	r3, r3
 800a498:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a49c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4a0:	83bb      	strh	r3, [r7, #28]
 800a4a2:	8bbb      	ldrh	r3, [r7, #28]
 800a4a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a4a8:	83bb      	strh	r3, [r7, #28]
 800a4aa:	8bbb      	ldrh	r3, [r7, #28]
 800a4ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a4b0:	83bb      	strh	r3, [r7, #28]
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	441a      	add	r2, r3
 800a4bc:	8bbb      	ldrh	r3, [r7, #28]
 800a4be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	8013      	strh	r3, [r2, #0]
 800a4d2:	e1ea      	b.n	800a8aa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	4413      	add	r3, r2
 800a4de:	881b      	ldrh	r3, [r3, #0]
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ea:	83fb      	strh	r3, [r7, #30]
 800a4ec:	8bfb      	ldrh	r3, [r7, #30]
 800a4ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a4f2:	83fb      	strh	r3, [r7, #30]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	441a      	add	r2, r3
 800a4fe:	8bfb      	ldrh	r3, [r7, #30]
 800a500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a50c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a510:	b29b      	uxth	r3, r3
 800a512:	8013      	strh	r3, [r2, #0]
 800a514:	e1c9      	b.n	800a8aa <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	78db      	ldrb	r3, [r3, #3]
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d11e      	bne.n	800a55c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	4413      	add	r3, r2
 800a528:	881b      	ldrh	r3, [r3, #0]
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a534:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	441a      	add	r2, r3
 800a542:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a54a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a54e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a556:	b29b      	uxth	r3, r3
 800a558:	8013      	strh	r3, [r2, #0]
 800a55a:	e01d      	b.n	800a598 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4413      	add	r3, r2
 800a566:	881b      	ldrh	r3, [r3, #0]
 800a568:	b29b      	uxth	r3, r3
 800a56a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a56e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a572:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	441a      	add	r2, r3
 800a580:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a58c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a594:	b29b      	uxth	r3, r3
 800a596:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5a8:	4413      	add	r3, r2
 800a5aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	00da      	lsls	r2, r3, #3
 800a5b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5b4:	4413      	add	r3, r2
 800a5b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5ba:	65bb      	str	r3, [r7, #88]	; 0x58
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	891b      	ldrh	r3, [r3, #8]
 800a5c0:	085b      	lsrs	r3, r3, #1
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5ca:	801a      	strh	r2, [r3, #0]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	657b      	str	r3, [r7, #84]	; 0x54
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	461a      	mov	r2, r3
 800a5da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5dc:	4413      	add	r3, r2
 800a5de:	657b      	str	r3, [r7, #84]	; 0x54
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	00da      	lsls	r2, r3, #3
 800a5e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5e8:	4413      	add	r3, r2
 800a5ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a5ee:	653b      	str	r3, [r7, #80]	; 0x50
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	895b      	ldrh	r3, [r3, #10]
 800a5f4:	085b      	lsrs	r3, r3, #1
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	005b      	lsls	r3, r3, #1
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5fe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	785b      	ldrb	r3, [r3, #1]
 800a604:	2b00      	cmp	r3, #0
 800a606:	f040 8093 	bne.w	800a730 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	4413      	add	r3, r2
 800a614:	881b      	ldrh	r3, [r3, #0]
 800a616:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a61a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a61e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a622:	2b00      	cmp	r3, #0
 800a624:	d01b      	beq.n	800a65e <USB_ActivateEndpoint+0x52a>
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	4413      	add	r3, r2
 800a630:	881b      	ldrh	r3, [r3, #0]
 800a632:	b29b      	uxth	r3, r3
 800a634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a63c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	441a      	add	r2, r3
 800a648:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a64a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a64e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a652:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	4413      	add	r3, r2
 800a668:	881b      	ldrh	r3, [r3, #0]
 800a66a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a66c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a66e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a672:	2b00      	cmp	r3, #0
 800a674:	d01b      	beq.n	800a6ae <USB_ActivateEndpoint+0x57a>
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	4413      	add	r3, r2
 800a680:	881b      	ldrh	r3, [r3, #0]
 800a682:	b29b      	uxth	r3, r3
 800a684:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a68c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	441a      	add	r2, r3
 800a698:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a69a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a69e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	4413      	add	r3, r2
 800a6b8:	881b      	ldrh	r3, [r3, #0]
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6c4:	873b      	strh	r3, [r7, #56]	; 0x38
 800a6c6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a6c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a6cc:	873b      	strh	r3, [r7, #56]	; 0x38
 800a6ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a6d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a6d4:	873b      	strh	r3, [r7, #56]	; 0x38
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	441a      	add	r2, r3
 800a6e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a6e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	4413      	add	r3, r2
 800a700:	881b      	ldrh	r3, [r3, #0]
 800a702:	b29b      	uxth	r3, r3
 800a704:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a70c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	441a      	add	r2, r3
 800a718:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a71a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a71e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	8013      	strh	r3, [r2, #0]
 800a72e:	e0bc      	b.n	800a8aa <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	4413      	add	r3, r2
 800a73a:	881b      	ldrh	r3, [r3, #0]
 800a73c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a740:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d01d      	beq.n	800a788 <USB_ActivateEndpoint+0x654>
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	4413      	add	r3, r2
 800a756:	881b      	ldrh	r3, [r3, #0]
 800a758:	b29b      	uxth	r3, r3
 800a75a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a75e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a762:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	441a      	add	r2, r3
 800a770:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a77c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a784:	b29b      	uxth	r3, r3
 800a786:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4413      	add	r3, r2
 800a792:	881b      	ldrh	r3, [r3, #0]
 800a794:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a798:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a79c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d01d      	beq.n	800a7e0 <USB_ActivateEndpoint+0x6ac>
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	4413      	add	r3, r2
 800a7ae:	881b      	ldrh	r3, [r3, #0]
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	441a      	add	r2, r3
 800a7c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a7cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	78db      	ldrb	r3, [r3, #3]
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d024      	beq.n	800a832 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	4413      	add	r3, r2
 800a7f2:	881b      	ldrh	r3, [r3, #0]
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a802:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a806:	f083 0320 	eor.w	r3, r3, #32
 800a80a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	441a      	add	r2, r3
 800a818:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a81c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	8013      	strh	r3, [r2, #0]
 800a830:	e01d      	b.n	800a86e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	881b      	ldrh	r3, [r3, #0]
 800a83e:	b29b      	uxth	r3, r3
 800a840:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a848:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	441a      	add	r2, r3
 800a856:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a85a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a85e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	4413      	add	r3, r2
 800a878:	881b      	ldrh	r3, [r3, #0]
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a884:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	441a      	add	r2, r3
 800a892:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a89a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a89e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a8aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3774      	adds	r7, #116	; 0x74
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop

0800a8bc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b0c2      	sub	sp, #264	; 0x108
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8ca:	6018      	str	r0, [r3, #0]
 800a8cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8d4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a8d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	785b      	ldrb	r3, [r3, #1]
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	f040 86b7 	bne.w	800b656 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a8e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	699a      	ldr	r2, [r3, #24]
 800a8f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	691b      	ldr	r3, [r3, #16]
 800a900:	429a      	cmp	r2, r3
 800a902:	d908      	bls.n	800a916 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a914:	e007      	b.n	800a926 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a91a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	699b      	ldr	r3, [r3, #24]
 800a922:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a92a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	7b1b      	ldrb	r3, [r3, #12]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d13a      	bne.n	800a9ac <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a93a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	6959      	ldr	r1, [r3, #20]
 800a942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	88da      	ldrh	r2, [r3, #6]
 800a94e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a952:	b29b      	uxth	r3, r3
 800a954:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a958:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a95c:	6800      	ldr	r0, [r0, #0]
 800a95e:	f001 fc97 	bl	800c290 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a966:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	613b      	str	r3, [r7, #16]
 800a96e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a972:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	461a      	mov	r2, r3
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	4413      	add	r3, r2
 800a984:	613b      	str	r3, [r7, #16]
 800a986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a98a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	00da      	lsls	r2, r3, #3
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	4413      	add	r3, r2
 800a998:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a99c:	60fb      	str	r3, [r7, #12]
 800a99e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	801a      	strh	r2, [r3, #0]
 800a9a8:	f000 be1f 	b.w	800b5ea <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a9ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	78db      	ldrb	r3, [r3, #3]
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	f040 8462 	bne.w	800b282 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a9be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	6a1a      	ldr	r2, [r3, #32]
 800a9ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	f240 83df 	bls.w	800b19a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a9dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4413      	add	r3, r2
 800a9f6:	881b      	ldrh	r3, [r3, #0]
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa02:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800aa06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	441a      	add	r2, r3
 800aa20:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800aa24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa2c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800aa30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800aa38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	6a1a      	ldr	r2, [r3, #32]
 800aa44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa48:	1ad2      	subs	r2, r2, r3
 800aa4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aa56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	4413      	add	r3, r2
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f000 81c7 	beq.w	800ae0c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aa7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	633b      	str	r3, [r7, #48]	; 0x30
 800aa8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	785b      	ldrb	r3, [r3, #1]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d177      	bne.n	800ab8a <USB_EPStartXfer+0x2ce>
 800aa9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	62bb      	str	r3, [r7, #40]	; 0x28
 800aaa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	461a      	mov	r2, r3
 800aab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaba:	4413      	add	r3, r2
 800aabc:	62bb      	str	r3, [r7, #40]	; 0x28
 800aabe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	00da      	lsls	r2, r3, #3
 800aacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aace:	4413      	add	r3, r2
 800aad0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aad4:	627b      	str	r3, [r7, #36]	; 0x24
 800aad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad8:	881b      	ldrh	r3, [r3, #0]
 800aada:	b29b      	uxth	r3, r3
 800aadc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aae0:	b29a      	uxth	r2, r3
 800aae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae4:	801a      	strh	r2, [r3, #0]
 800aae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaea:	2b3e      	cmp	r3, #62	; 0x3e
 800aaec:	d921      	bls.n	800ab32 <USB_EPStartXfer+0x276>
 800aaee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf2:	095b      	lsrs	r3, r3, #5
 800aaf4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aaf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aafc:	f003 031f 	and.w	r3, r3, #31
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d104      	bne.n	800ab0e <USB_EPStartXfer+0x252>
 800ab04:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ab0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab10:	881b      	ldrh	r3, [r3, #0]
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	029b      	lsls	r3, r3, #10
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab2a:	b29a      	uxth	r2, r3
 800ab2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2e:	801a      	strh	r2, [r3, #0]
 800ab30:	e050      	b.n	800abd4 <USB_EPStartXfer+0x318>
 800ab32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d10a      	bne.n	800ab50 <USB_EPStartXfer+0x294>
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3c:	881b      	ldrh	r3, [r3, #0]
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4c:	801a      	strh	r2, [r3, #0]
 800ab4e:	e041      	b.n	800abd4 <USB_EPStartXfer+0x318>
 800ab50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab54:	085b      	lsrs	r3, r3, #1
 800ab56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ab5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab5e:	f003 0301 	and.w	r3, r3, #1
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d004      	beq.n	800ab70 <USB_EPStartXfer+0x2b4>
 800ab66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ab70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab72:	881b      	ldrh	r3, [r3, #0]
 800ab74:	b29a      	uxth	r2, r3
 800ab76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	029b      	lsls	r3, r3, #10
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	4313      	orrs	r3, r2
 800ab82:	b29a      	uxth	r2, r3
 800ab84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab86:	801a      	strh	r2, [r3, #0]
 800ab88:	e024      	b.n	800abd4 <USB_EPStartXfer+0x318>
 800ab8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	785b      	ldrb	r3, [r3, #1]
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d11c      	bne.n	800abd4 <USB_EPStartXfer+0x318>
 800ab9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	461a      	mov	r2, r3
 800abac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abae:	4413      	add	r3, r2
 800abb0:	633b      	str	r3, [r7, #48]	; 0x30
 800abb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	00da      	lsls	r2, r3, #3
 800abc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc2:	4413      	add	r3, r2
 800abc4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800abc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abce:	b29a      	uxth	r2, r3
 800abd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800abd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	895b      	ldrh	r3, [r3, #10]
 800abe0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800abe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	6959      	ldr	r1, [r3, #20]
 800abf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800abfa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800abfe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ac02:	6800      	ldr	r0, [r0, #0]
 800ac04:	f001 fb44 	bl	800c290 <USB_WritePMA>
            ep->xfer_buff += len;
 800ac08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	695a      	ldr	r2, [r3, #20]
 800ac14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac18:	441a      	add	r2, r3
 800ac1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ac26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	6a1a      	ldr	r2, [r3, #32]
 800ac32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	691b      	ldr	r3, [r3, #16]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d90f      	bls.n	800ac62 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800ac42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	6a1a      	ldr	r2, [r3, #32]
 800ac4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac52:	1ad2      	subs	r2, r2, r3
 800ac54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	621a      	str	r2, [r3, #32]
 800ac60:	e00e      	b.n	800ac80 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800ac62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	6a1b      	ldr	r3, [r3, #32]
 800ac6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ac72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ac80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	785b      	ldrb	r3, [r3, #1]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d177      	bne.n	800ad80 <USB_EPStartXfer+0x4c4>
 800ac90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	61bb      	str	r3, [r7, #24]
 800ac9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aca0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acaa:	b29b      	uxth	r3, r3
 800acac:	461a      	mov	r2, r3
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	4413      	add	r3, r2
 800acb2:	61bb      	str	r3, [r7, #24]
 800acb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	00da      	lsls	r2, r3, #3
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	4413      	add	r3, r2
 800acc6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800acca:	617b      	str	r3, [r7, #20]
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	881b      	ldrh	r3, [r3, #0]
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	801a      	strh	r2, [r3, #0]
 800acdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ace0:	2b3e      	cmp	r3, #62	; 0x3e
 800ace2:	d921      	bls.n	800ad28 <USB_EPStartXfer+0x46c>
 800ace4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ace8:	095b      	lsrs	r3, r3, #5
 800acea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800acee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acf2:	f003 031f 	and.w	r3, r3, #31
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d104      	bne.n	800ad04 <USB_EPStartXfer+0x448>
 800acfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800acfe:	3b01      	subs	r3, #1
 800ad00:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	881b      	ldrh	r3, [r3, #0]
 800ad08:	b29a      	uxth	r2, r3
 800ad0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	029b      	lsls	r3, r3, #10
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	4313      	orrs	r3, r2
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	801a      	strh	r2, [r3, #0]
 800ad26:	e056      	b.n	800add6 <USB_EPStartXfer+0x51a>
 800ad28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d10a      	bne.n	800ad46 <USB_EPStartXfer+0x48a>
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	881b      	ldrh	r3, [r3, #0]
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad3e:	b29a      	uxth	r2, r3
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	801a      	strh	r2, [r3, #0]
 800ad44:	e047      	b.n	800add6 <USB_EPStartXfer+0x51a>
 800ad46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad4a:	085b      	lsrs	r3, r3, #1
 800ad4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ad50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad54:	f003 0301 	and.w	r3, r3, #1
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d004      	beq.n	800ad66 <USB_EPStartXfer+0x4aa>
 800ad5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad60:	3301      	adds	r3, #1
 800ad62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	881b      	ldrh	r3, [r3, #0]
 800ad6a:	b29a      	uxth	r2, r3
 800ad6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	029b      	lsls	r3, r3, #10
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	4313      	orrs	r3, r2
 800ad78:	b29a      	uxth	r2, r3
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	801a      	strh	r2, [r3, #0]
 800ad7e:	e02a      	b.n	800add6 <USB_EPStartXfer+0x51a>
 800ad80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	785b      	ldrb	r3, [r3, #1]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d122      	bne.n	800add6 <USB_EPStartXfer+0x51a>
 800ad90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	623b      	str	r3, [r7, #32]
 800ad9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ada0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adaa:	b29b      	uxth	r3, r3
 800adac:	461a      	mov	r2, r3
 800adae:	6a3b      	ldr	r3, [r7, #32]
 800adb0:	4413      	add	r3, r2
 800adb2:	623b      	str	r3, [r7, #32]
 800adb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	00da      	lsls	r2, r3, #3
 800adc2:	6a3b      	ldr	r3, [r7, #32]
 800adc4:	4413      	add	r3, r2
 800adc6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800adca:	61fb      	str	r3, [r7, #28]
 800adcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add0:	b29a      	uxth	r2, r3
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800add6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	891b      	ldrh	r3, [r3, #8]
 800ade2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ade6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	6959      	ldr	r1, [r3, #20]
 800adf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800adfc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ae00:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ae04:	6800      	ldr	r0, [r0, #0]
 800ae06:	f001 fa43 	bl	800c290 <USB_WritePMA>
 800ae0a:	e3ee      	b.n	800b5ea <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ae0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	785b      	ldrb	r3, [r3, #1]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d177      	bne.n	800af0c <USB_EPStartXfer+0x650>
 800ae1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	461a      	mov	r2, r3
 800ae3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae3c:	4413      	add	r3, r2
 800ae3e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	00da      	lsls	r2, r3, #3
 800ae4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae50:	4413      	add	r3, r2
 800ae52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ae56:	647b      	str	r3, [r7, #68]	; 0x44
 800ae58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae5a:	881b      	ldrh	r3, [r3, #0]
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae62:	b29a      	uxth	r2, r3
 800ae64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae66:	801a      	strh	r2, [r3, #0]
 800ae68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae6c:	2b3e      	cmp	r3, #62	; 0x3e
 800ae6e:	d921      	bls.n	800aeb4 <USB_EPStartXfer+0x5f8>
 800ae70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae74:	095b      	lsrs	r3, r3, #5
 800ae76:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ae7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae7e:	f003 031f 	and.w	r3, r3, #31
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d104      	bne.n	800ae90 <USB_EPStartXfer+0x5d4>
 800ae86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ae90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae92:	881b      	ldrh	r3, [r3, #0]
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	029b      	lsls	r3, r3, #10
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	4313      	orrs	r3, r2
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aeac:	b29a      	uxth	r2, r3
 800aeae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aeb0:	801a      	strh	r2, [r3, #0]
 800aeb2:	e056      	b.n	800af62 <USB_EPStartXfer+0x6a6>
 800aeb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d10a      	bne.n	800aed2 <USB_EPStartXfer+0x616>
 800aebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aebe:	881b      	ldrh	r3, [r3, #0]
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aeca:	b29a      	uxth	r2, r3
 800aecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aece:	801a      	strh	r2, [r3, #0]
 800aed0:	e047      	b.n	800af62 <USB_EPStartXfer+0x6a6>
 800aed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aed6:	085b      	lsrs	r3, r3, #1
 800aed8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aedc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aee0:	f003 0301 	and.w	r3, r3, #1
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d004      	beq.n	800aef2 <USB_EPStartXfer+0x636>
 800aee8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aeec:	3301      	adds	r3, #1
 800aeee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aef4:	881b      	ldrh	r3, [r3, #0]
 800aef6:	b29a      	uxth	r2, r3
 800aef8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	029b      	lsls	r3, r3, #10
 800af00:	b29b      	uxth	r3, r3
 800af02:	4313      	orrs	r3, r2
 800af04:	b29a      	uxth	r2, r3
 800af06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af08:	801a      	strh	r2, [r3, #0]
 800af0a:	e02a      	b.n	800af62 <USB_EPStartXfer+0x6a6>
 800af0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	785b      	ldrb	r3, [r3, #1]
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d122      	bne.n	800af62 <USB_EPStartXfer+0x6a6>
 800af1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	653b      	str	r3, [r7, #80]	; 0x50
 800af28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af36:	b29b      	uxth	r3, r3
 800af38:	461a      	mov	r2, r3
 800af3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af3c:	4413      	add	r3, r2
 800af3e:	653b      	str	r3, [r7, #80]	; 0x50
 800af40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	00da      	lsls	r2, r3, #3
 800af4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af50:	4413      	add	r3, r2
 800af52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800af56:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af5c:	b29a      	uxth	r2, r3
 800af5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800af62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	891b      	ldrh	r3, [r3, #8]
 800af6e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	6959      	ldr	r1, [r3, #20]
 800af7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af82:	b29b      	uxth	r3, r3
 800af84:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800af88:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800af8c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800af90:	6800      	ldr	r0, [r0, #0]
 800af92:	f001 f97d 	bl	800c290 <USB_WritePMA>
            ep->xfer_buff += len;
 800af96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	695a      	ldr	r2, [r3, #20]
 800afa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afa6:	441a      	add	r2, r3
 800afa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800afb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	6a1a      	ldr	r2, [r3, #32]
 800afc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d90f      	bls.n	800aff0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800afd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	6a1a      	ldr	r2, [r3, #32]
 800afdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afe0:	1ad2      	subs	r2, r2, r3
 800afe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	621a      	str	r2, [r3, #32]
 800afee:	e00e      	b.n	800b00e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800aff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	6a1b      	ldr	r3, [r3, #32]
 800affc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2200      	movs	r2, #0
 800b00c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b00e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b012:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	643b      	str	r3, [r7, #64]	; 0x40
 800b01a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b01e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	785b      	ldrb	r3, [r3, #1]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d177      	bne.n	800b11a <USB_EPStartXfer+0x85e>
 800b02a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b02e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	63bb      	str	r3, [r7, #56]	; 0x38
 800b036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b03a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b044:	b29b      	uxth	r3, r3
 800b046:	461a      	mov	r2, r3
 800b048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04a:	4413      	add	r3, r2
 800b04c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b04e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	00da      	lsls	r2, r3, #3
 800b05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05e:	4413      	add	r3, r2
 800b060:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b064:	637b      	str	r3, [r7, #52]	; 0x34
 800b066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b068:	881b      	ldrh	r3, [r3, #0]
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b070:	b29a      	uxth	r2, r3
 800b072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b074:	801a      	strh	r2, [r3, #0]
 800b076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b07a:	2b3e      	cmp	r3, #62	; 0x3e
 800b07c:	d921      	bls.n	800b0c2 <USB_EPStartXfer+0x806>
 800b07e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b082:	095b      	lsrs	r3, r3, #5
 800b084:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b08c:	f003 031f 	and.w	r3, r3, #31
 800b090:	2b00      	cmp	r3, #0
 800b092:	d104      	bne.n	800b09e <USB_EPStartXfer+0x7e2>
 800b094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b098:	3b01      	subs	r3, #1
 800b09a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a0:	881b      	ldrh	r3, [r3, #0]
 800b0a2:	b29a      	uxth	r2, r3
 800b0a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	029b      	lsls	r3, r3, #10
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0ba:	b29a      	uxth	r2, r3
 800b0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0be:	801a      	strh	r2, [r3, #0]
 800b0c0:	e050      	b.n	800b164 <USB_EPStartXfer+0x8a8>
 800b0c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d10a      	bne.n	800b0e0 <USB_EPStartXfer+0x824>
 800b0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0cc:	881b      	ldrh	r3, [r3, #0]
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0d8:	b29a      	uxth	r2, r3
 800b0da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0dc:	801a      	strh	r2, [r3, #0]
 800b0de:	e041      	b.n	800b164 <USB_EPStartXfer+0x8a8>
 800b0e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0e4:	085b      	lsrs	r3, r3, #1
 800b0e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b0ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ee:	f003 0301 	and.w	r3, r3, #1
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d004      	beq.n	800b100 <USB_EPStartXfer+0x844>
 800b0f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b102:	881b      	ldrh	r3, [r3, #0]
 800b104:	b29a      	uxth	r2, r3
 800b106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	029b      	lsls	r3, r3, #10
 800b10e:	b29b      	uxth	r3, r3
 800b110:	4313      	orrs	r3, r2
 800b112:	b29a      	uxth	r2, r3
 800b114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b116:	801a      	strh	r2, [r3, #0]
 800b118:	e024      	b.n	800b164 <USB_EPStartXfer+0x8a8>
 800b11a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b11e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	785b      	ldrb	r3, [r3, #1]
 800b126:	2b01      	cmp	r3, #1
 800b128:	d11c      	bne.n	800b164 <USB_EPStartXfer+0x8a8>
 800b12a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b12e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b138:	b29b      	uxth	r3, r3
 800b13a:	461a      	mov	r2, r3
 800b13c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b13e:	4413      	add	r3, r2
 800b140:	643b      	str	r3, [r7, #64]	; 0x40
 800b142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	00da      	lsls	r2, r3, #3
 800b150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b152:	4413      	add	r3, r2
 800b154:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b15a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b15e:	b29a      	uxth	r2, r3
 800b160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b162:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	895b      	ldrh	r3, [r3, #10]
 800b170:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	6959      	ldr	r1, [r3, #20]
 800b180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b184:	b29b      	uxth	r3, r3
 800b186:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b18a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b18e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b192:	6800      	ldr	r0, [r0, #0]
 800b194:	f001 f87c 	bl	800c290 <USB_WritePMA>
 800b198:	e227      	b.n	800b5ea <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b19a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b19e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	6a1b      	ldr	r3, [r3, #32]
 800b1a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b1aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	4413      	add	r3, r2
 800b1c4:	881b      	ldrh	r3, [r3, #0]
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b1cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1d0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b1d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	441a      	add	r2, r3
 800b1ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b1f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b202:	b29b      	uxth	r3, r3
 800b204:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b20a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b216:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b220:	b29b      	uxth	r3, r3
 800b222:	461a      	mov	r2, r3
 800b224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b226:	4413      	add	r3, r2
 800b228:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b22a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b22e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	00da      	lsls	r2, r3, #3
 800b238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b23a:	4413      	add	r3, r2
 800b23c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b240:	65bb      	str	r3, [r7, #88]	; 0x58
 800b242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b246:	b29a      	uxth	r2, r3
 800b248:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b24a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b24c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	891b      	ldrh	r3, [r3, #8]
 800b258:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b25c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	6959      	ldr	r1, [r3, #20]
 800b268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b272:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b276:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b27a:	6800      	ldr	r0, [r0, #0]
 800b27c:	f001 f808 	bl	800c290 <USB_WritePMA>
 800b280:	e1b3      	b.n	800b5ea <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	6a1a      	ldr	r2, [r3, #32]
 800b28e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b292:	1ad2      	subs	r2, r2, r3
 800b294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b2a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	4413      	add	r3, r2
 800b2ba:	881b      	ldrh	r3, [r3, #0]
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	f000 80c6 	beq.w	800b454 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b2c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	673b      	str	r3, [r7, #112]	; 0x70
 800b2d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	785b      	ldrb	r3, [r3, #1]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d177      	bne.n	800b3d4 <USB_EPStartXfer+0xb18>
 800b2e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	461a      	mov	r2, r3
 800b302:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b304:	4413      	add	r3, r2
 800b306:	66bb      	str	r3, [r7, #104]	; 0x68
 800b308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b30c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	00da      	lsls	r2, r3, #3
 800b316:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b318:	4413      	add	r3, r2
 800b31a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b31e:	667b      	str	r3, [r7, #100]	; 0x64
 800b320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b322:	881b      	ldrh	r3, [r3, #0]
 800b324:	b29b      	uxth	r3, r3
 800b326:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b32e:	801a      	strh	r2, [r3, #0]
 800b330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b334:	2b3e      	cmp	r3, #62	; 0x3e
 800b336:	d921      	bls.n	800b37c <USB_EPStartXfer+0xac0>
 800b338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b33c:	095b      	lsrs	r3, r3, #5
 800b33e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b346:	f003 031f 	and.w	r3, r3, #31
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d104      	bne.n	800b358 <USB_EPStartXfer+0xa9c>
 800b34e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b352:	3b01      	subs	r3, #1
 800b354:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b35a:	881b      	ldrh	r3, [r3, #0]
 800b35c:	b29a      	uxth	r2, r3
 800b35e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b362:	b29b      	uxth	r3, r3
 800b364:	029b      	lsls	r3, r3, #10
 800b366:	b29b      	uxth	r3, r3
 800b368:	4313      	orrs	r3, r2
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b374:	b29a      	uxth	r2, r3
 800b376:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b378:	801a      	strh	r2, [r3, #0]
 800b37a:	e050      	b.n	800b41e <USB_EPStartXfer+0xb62>
 800b37c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b380:	2b00      	cmp	r3, #0
 800b382:	d10a      	bne.n	800b39a <USB_EPStartXfer+0xade>
 800b384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b386:	881b      	ldrh	r3, [r3, #0]
 800b388:	b29b      	uxth	r3, r3
 800b38a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b38e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b392:	b29a      	uxth	r2, r3
 800b394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b396:	801a      	strh	r2, [r3, #0]
 800b398:	e041      	b.n	800b41e <USB_EPStartXfer+0xb62>
 800b39a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b39e:	085b      	lsrs	r3, r3, #1
 800b3a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b3a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3a8:	f003 0301 	and.w	r3, r3, #1
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d004      	beq.n	800b3ba <USB_EPStartXfer+0xafe>
 800b3b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b3ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3bc:	881b      	ldrh	r3, [r3, #0]
 800b3be:	b29a      	uxth	r2, r3
 800b3c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	029b      	lsls	r3, r3, #10
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	b29a      	uxth	r2, r3
 800b3ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3d0:	801a      	strh	r2, [r3, #0]
 800b3d2:	e024      	b.n	800b41e <USB_EPStartXfer+0xb62>
 800b3d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	785b      	ldrb	r3, [r3, #1]
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d11c      	bne.n	800b41e <USB_EPStartXfer+0xb62>
 800b3e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3f2:	b29b      	uxth	r3, r3
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b3f8:	4413      	add	r3, r2
 800b3fa:	673b      	str	r3, [r7, #112]	; 0x70
 800b3fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	00da      	lsls	r2, r3, #3
 800b40a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b40c:	4413      	add	r3, r2
 800b40e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b412:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b418:	b29a      	uxth	r2, r3
 800b41a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b41c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b41e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	895b      	ldrh	r3, [r3, #10]
 800b42a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b42e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	6959      	ldr	r1, [r3, #20]
 800b43a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b43e:	b29b      	uxth	r3, r3
 800b440:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b444:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b448:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b44c:	6800      	ldr	r0, [r0, #0]
 800b44e:	f000 ff1f 	bl	800c290 <USB_WritePMA>
 800b452:	e0ca      	b.n	800b5ea <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	785b      	ldrb	r3, [r3, #1]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d177      	bne.n	800b554 <USB_EPStartXfer+0xc98>
 800b464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b468:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b474:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b47e:	b29b      	uxth	r3, r3
 800b480:	461a      	mov	r2, r3
 800b482:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b484:	4413      	add	r3, r2
 800b486:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b48c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	00da      	lsls	r2, r3, #3
 800b496:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b498:	4413      	add	r3, r2
 800b49a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b49e:	67bb      	str	r3, [r7, #120]	; 0x78
 800b4a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4a2:	881b      	ldrh	r3, [r3, #0]
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b4aa:	b29a      	uxth	r2, r3
 800b4ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4ae:	801a      	strh	r2, [r3, #0]
 800b4b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4b4:	2b3e      	cmp	r3, #62	; 0x3e
 800b4b6:	d921      	bls.n	800b4fc <USB_EPStartXfer+0xc40>
 800b4b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4bc:	095b      	lsrs	r3, r3, #5
 800b4be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c6:	f003 031f 	and.w	r3, r3, #31
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d104      	bne.n	800b4d8 <USB_EPStartXfer+0xc1c>
 800b4ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b4d2:	3b01      	subs	r3, #1
 800b4d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b4d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4da:	881b      	ldrh	r3, [r3, #0]
 800b4dc:	b29a      	uxth	r2, r3
 800b4de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	029b      	lsls	r3, r3, #10
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4f4:	b29a      	uxth	r2, r3
 800b4f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4f8:	801a      	strh	r2, [r3, #0]
 800b4fa:	e05c      	b.n	800b5b6 <USB_EPStartXfer+0xcfa>
 800b4fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b500:	2b00      	cmp	r3, #0
 800b502:	d10a      	bne.n	800b51a <USB_EPStartXfer+0xc5e>
 800b504:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b506:	881b      	ldrh	r3, [r3, #0]
 800b508:	b29b      	uxth	r3, r3
 800b50a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b50e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b512:	b29a      	uxth	r2, r3
 800b514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b516:	801a      	strh	r2, [r3, #0]
 800b518:	e04d      	b.n	800b5b6 <USB_EPStartXfer+0xcfa>
 800b51a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b51e:	085b      	lsrs	r3, r3, #1
 800b520:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b528:	f003 0301 	and.w	r3, r3, #1
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d004      	beq.n	800b53a <USB_EPStartXfer+0xc7e>
 800b530:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b534:	3301      	adds	r3, #1
 800b536:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b53a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b53c:	881b      	ldrh	r3, [r3, #0]
 800b53e:	b29a      	uxth	r2, r3
 800b540:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b544:	b29b      	uxth	r3, r3
 800b546:	029b      	lsls	r3, r3, #10
 800b548:	b29b      	uxth	r3, r3
 800b54a:	4313      	orrs	r3, r2
 800b54c:	b29a      	uxth	r2, r3
 800b54e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b550:	801a      	strh	r2, [r3, #0]
 800b552:	e030      	b.n	800b5b6 <USB_EPStartXfer+0xcfa>
 800b554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b558:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	785b      	ldrb	r3, [r3, #1]
 800b560:	2b01      	cmp	r3, #1
 800b562:	d128      	bne.n	800b5b6 <USB_EPStartXfer+0xcfa>
 800b564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b568:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b576:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b580:	b29b      	uxth	r3, r3
 800b582:	461a      	mov	r2, r3
 800b584:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b588:	4413      	add	r3, r2
 800b58a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b58e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	00da      	lsls	r2, r3, #3
 800b59c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b5a0:	4413      	add	r3, r2
 800b5a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b5a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b5aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ae:	b29a      	uxth	r2, r3
 800b5b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b5b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b5b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	891b      	ldrh	r3, [r3, #8]
 800b5c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b5c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	6959      	ldr	r1, [r3, #20]
 800b5d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b5dc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b5e0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b5e4:	6800      	ldr	r0, [r0, #0]
 800b5e6:	f000 fe53 	bl	800c290 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b5ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	4413      	add	r3, r2
 800b604:	881b      	ldrh	r3, [r3, #0]
 800b606:	b29b      	uxth	r3, r3
 800b608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b60c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b610:	817b      	strh	r3, [r7, #10]
 800b612:	897b      	ldrh	r3, [r7, #10]
 800b614:	f083 0310 	eor.w	r3, r3, #16
 800b618:	817b      	strh	r3, [r7, #10]
 800b61a:	897b      	ldrh	r3, [r7, #10]
 800b61c:	f083 0320 	eor.w	r3, r3, #32
 800b620:	817b      	strh	r3, [r7, #10]
 800b622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	441a      	add	r2, r3
 800b63c:	897b      	ldrh	r3, [r7, #10]
 800b63e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b64a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b64e:	b29b      	uxth	r3, r3
 800b650:	8013      	strh	r3, [r2, #0]
 800b652:	f000 bcde 	b.w	800c012 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b65a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	7b1b      	ldrb	r3, [r3, #12]
 800b662:	2b00      	cmp	r3, #0
 800b664:	f040 80bb 	bne.w	800b7de <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b66c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	699a      	ldr	r2, [r3, #24]
 800b674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	691b      	ldr	r3, [r3, #16]
 800b680:	429a      	cmp	r2, r3
 800b682:	d917      	bls.n	800b6b4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	691b      	ldr	r3, [r3, #16]
 800b690:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800b694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	699a      	ldr	r2, [r3, #24]
 800b6a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a4:	1ad2      	subs	r2, r2, r3
 800b6a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	619a      	str	r2, [r3, #24]
 800b6b2:	e00e      	b.n	800b6d2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b6b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	699b      	ldr	r3, [r3, #24]
 800b6c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800b6c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b6d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b6e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b6f6:	4413      	add	r3, r2
 800b6f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b6fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	00da      	lsls	r2, r3, #3
 800b70a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b70e:	4413      	add	r3, r2
 800b710:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b714:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b718:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b71c:	881b      	ldrh	r3, [r3, #0]
 800b71e:	b29b      	uxth	r3, r3
 800b720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b724:	b29a      	uxth	r2, r3
 800b726:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b72a:	801a      	strh	r2, [r3, #0]
 800b72c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b730:	2b3e      	cmp	r3, #62	; 0x3e
 800b732:	d924      	bls.n	800b77e <USB_EPStartXfer+0xec2>
 800b734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b738:	095b      	lsrs	r3, r3, #5
 800b73a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b73e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b742:	f003 031f 	and.w	r3, r3, #31
 800b746:	2b00      	cmp	r3, #0
 800b748:	d104      	bne.n	800b754 <USB_EPStartXfer+0xe98>
 800b74a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b74e:	3b01      	subs	r3, #1
 800b750:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b754:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b758:	881b      	ldrh	r3, [r3, #0]
 800b75a:	b29a      	uxth	r2, r3
 800b75c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b760:	b29b      	uxth	r3, r3
 800b762:	029b      	lsls	r3, r3, #10
 800b764:	b29b      	uxth	r3, r3
 800b766:	4313      	orrs	r3, r2
 800b768:	b29b      	uxth	r3, r3
 800b76a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b76e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b772:	b29a      	uxth	r2, r3
 800b774:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b778:	801a      	strh	r2, [r3, #0]
 800b77a:	f000 bc10 	b.w	800bf9e <USB_EPStartXfer+0x16e2>
 800b77e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b782:	2b00      	cmp	r3, #0
 800b784:	d10c      	bne.n	800b7a0 <USB_EPStartXfer+0xee4>
 800b786:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b78a:	881b      	ldrh	r3, [r3, #0]
 800b78c:	b29b      	uxth	r3, r3
 800b78e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b796:	b29a      	uxth	r2, r3
 800b798:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b79c:	801a      	strh	r2, [r3, #0]
 800b79e:	e3fe      	b.n	800bf9e <USB_EPStartXfer+0x16e2>
 800b7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a4:	085b      	lsrs	r3, r3, #1
 800b7a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ae:	f003 0301 	and.w	r3, r3, #1
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d004      	beq.n	800b7c0 <USB_EPStartXfer+0xf04>
 800b7b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b7c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b7c4:	881b      	ldrh	r3, [r3, #0]
 800b7c6:	b29a      	uxth	r2, r3
 800b7c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	029b      	lsls	r3, r3, #10
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	b29a      	uxth	r2, r3
 800b7d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b7da:	801a      	strh	r2, [r3, #0]
 800b7dc:	e3df      	b.n	800bf9e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b7de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	78db      	ldrb	r3, [r3, #3]
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	f040 8218 	bne.w	800bc20 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b7f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	785b      	ldrb	r3, [r3, #1]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	f040 809d 	bne.w	800b93c <USB_EPStartXfer+0x1080>
 800b802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b806:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b814:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b81e:	b29b      	uxth	r3, r3
 800b820:	461a      	mov	r2, r3
 800b822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b826:	4413      	add	r3, r2
 800b828:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b82c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	00da      	lsls	r2, r3, #3
 800b83a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b83e:	4413      	add	r3, r2
 800b840:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b844:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b848:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b84c:	881b      	ldrh	r3, [r3, #0]
 800b84e:	b29b      	uxth	r3, r3
 800b850:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b854:	b29a      	uxth	r2, r3
 800b856:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b85a:	801a      	strh	r2, [r3, #0]
 800b85c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	691b      	ldr	r3, [r3, #16]
 800b868:	2b3e      	cmp	r3, #62	; 0x3e
 800b86a:	d92b      	bls.n	800b8c4 <USB_EPStartXfer+0x1008>
 800b86c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	691b      	ldr	r3, [r3, #16]
 800b878:	095b      	lsrs	r3, r3, #5
 800b87a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b87e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	691b      	ldr	r3, [r3, #16]
 800b88a:	f003 031f 	and.w	r3, r3, #31
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d104      	bne.n	800b89c <USB_EPStartXfer+0xfe0>
 800b892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b896:	3b01      	subs	r3, #1
 800b898:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b89c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b8a0:	881b      	ldrh	r3, [r3, #0]
 800b8a2:	b29a      	uxth	r2, r3
 800b8a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	029b      	lsls	r3, r3, #10
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b8c0:	801a      	strh	r2, [r3, #0]
 800b8c2:	e070      	b.n	800b9a6 <USB_EPStartXfer+0x10ea>
 800b8c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	691b      	ldr	r3, [r3, #16]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d10c      	bne.n	800b8ee <USB_EPStartXfer+0x1032>
 800b8d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b8d8:	881b      	ldrh	r3, [r3, #0]
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b8ea:	801a      	strh	r2, [r3, #0]
 800b8ec:	e05b      	b.n	800b9a6 <USB_EPStartXfer+0x10ea>
 800b8ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	691b      	ldr	r3, [r3, #16]
 800b8fa:	085b      	lsrs	r3, r3, #1
 800b8fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	691b      	ldr	r3, [r3, #16]
 800b90c:	f003 0301 	and.w	r3, r3, #1
 800b910:	2b00      	cmp	r3, #0
 800b912:	d004      	beq.n	800b91e <USB_EPStartXfer+0x1062>
 800b914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b918:	3301      	adds	r3, #1
 800b91a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b91e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b922:	881b      	ldrh	r3, [r3, #0]
 800b924:	b29a      	uxth	r2, r3
 800b926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	029b      	lsls	r3, r3, #10
 800b92e:	b29b      	uxth	r3, r3
 800b930:	4313      	orrs	r3, r2
 800b932:	b29a      	uxth	r2, r3
 800b934:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b938:	801a      	strh	r2, [r3, #0]
 800b93a:	e034      	b.n	800b9a6 <USB_EPStartXfer+0x10ea>
 800b93c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	785b      	ldrb	r3, [r3, #1]
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d12c      	bne.n	800b9a6 <USB_EPStartXfer+0x10ea>
 800b94c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b950:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b95a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b95e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b968:	b29b      	uxth	r3, r3
 800b96a:	461a      	mov	r2, r3
 800b96c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b970:	4413      	add	r3, r2
 800b972:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b97a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	00da      	lsls	r2, r3, #3
 800b984:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b988:	4413      	add	r3, r2
 800b98a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b98e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	691b      	ldr	r3, [r3, #16]
 800b99e:	b29a      	uxth	r2, r3
 800b9a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b9a4:	801a      	strh	r2, [r3, #0]
 800b9a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b9b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	785b      	ldrb	r3, [r3, #1]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f040 809d 	bne.w	800bb00 <USB_EPStartXfer+0x1244>
 800b9c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b9d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b9ea:	4413      	add	r3, r2
 800b9ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b9f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	00da      	lsls	r2, r3, #3
 800b9fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ba02:	4413      	add	r3, r2
 800ba04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ba0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba10:	881b      	ldrh	r3, [r3, #0]
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba18:	b29a      	uxth	r2, r3
 800ba1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba1e:	801a      	strh	r2, [r3, #0]
 800ba20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	691b      	ldr	r3, [r3, #16]
 800ba2c:	2b3e      	cmp	r3, #62	; 0x3e
 800ba2e:	d92b      	bls.n	800ba88 <USB_EPStartXfer+0x11cc>
 800ba30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	691b      	ldr	r3, [r3, #16]
 800ba3c:	095b      	lsrs	r3, r3, #5
 800ba3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ba42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	691b      	ldr	r3, [r3, #16]
 800ba4e:	f003 031f 	and.w	r3, r3, #31
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d104      	bne.n	800ba60 <USB_EPStartXfer+0x11a4>
 800ba56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ba60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba64:	881b      	ldrh	r3, [r3, #0]
 800ba66:	b29a      	uxth	r2, r3
 800ba68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	029b      	lsls	r3, r3, #10
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	4313      	orrs	r3, r2
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba84:	801a      	strh	r2, [r3, #0]
 800ba86:	e069      	b.n	800bb5c <USB_EPStartXfer+0x12a0>
 800ba88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	691b      	ldr	r3, [r3, #16]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d10c      	bne.n	800bab2 <USB_EPStartXfer+0x11f6>
 800ba98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba9c:	881b      	ldrh	r3, [r3, #0]
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800baa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800baa8:	b29a      	uxth	r2, r3
 800baaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800baae:	801a      	strh	r2, [r3, #0]
 800bab0:	e054      	b.n	800bb5c <USB_EPStartXfer+0x12a0>
 800bab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	691b      	ldr	r3, [r3, #16]
 800babe:	085b      	lsrs	r3, r3, #1
 800bac0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	691b      	ldr	r3, [r3, #16]
 800bad0:	f003 0301 	and.w	r3, r3, #1
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d004      	beq.n	800bae2 <USB_EPStartXfer+0x1226>
 800bad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800badc:	3301      	adds	r3, #1
 800bade:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bae2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bae6:	881b      	ldrh	r3, [r3, #0]
 800bae8:	b29a      	uxth	r2, r3
 800baea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baee:	b29b      	uxth	r3, r3
 800baf0:	029b      	lsls	r3, r3, #10
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	4313      	orrs	r3, r2
 800baf6:	b29a      	uxth	r2, r3
 800baf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bafc:	801a      	strh	r2, [r3, #0]
 800bafe:	e02d      	b.n	800bb5c <USB_EPStartXfer+0x12a0>
 800bb00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	785b      	ldrb	r3, [r3, #1]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d125      	bne.n	800bb5c <USB_EPStartXfer+0x12a0>
 800bb10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	461a      	mov	r2, r3
 800bb22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bb26:	4413      	add	r3, r2
 800bb28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bb2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	00da      	lsls	r2, r3, #3
 800bb3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bb3e:	4413      	add	r3, r2
 800bb40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bb44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bb48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	691b      	ldr	r3, [r3, #16]
 800bb54:	b29a      	uxth	r2, r3
 800bb56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb5a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800bb5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	69db      	ldr	r3, [r3, #28]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	f000 8218 	beq.w	800bf9e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bb6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	4413      	add	r3, r2
 800bb88:	881b      	ldrh	r3, [r3, #0]
 800bb8a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bb8e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800bb92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d005      	beq.n	800bba6 <USB_EPStartXfer+0x12ea>
 800bb9a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800bb9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d10d      	bne.n	800bbc2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bba6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800bbaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	f040 81f5 	bne.w	800bf9e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bbb4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800bbb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f040 81ee 	bne.w	800bf9e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800bbc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbca:	681a      	ldr	r2, [r3, #0]
 800bbcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	4413      	add	r3, r2
 800bbdc:	881b      	ldrh	r3, [r3, #0]
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbe8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800bbec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	441a      	add	r2, r3
 800bc06:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800bc0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	8013      	strh	r3, [r2, #0]
 800bc1e:	e1be      	b.n	800bf9e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bc20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	78db      	ldrb	r3, [r3, #3]
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	f040 81b4 	bne.w	800bf9a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800bc32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	699a      	ldr	r2, [r3, #24]
 800bc3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	691b      	ldr	r3, [r3, #16]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d917      	bls.n	800bc7e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800bc4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	691b      	ldr	r3, [r3, #16]
 800bc5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800bc5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	699a      	ldr	r2, [r3, #24]
 800bc6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc6e:	1ad2      	subs	r2, r2, r3
 800bc70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	619a      	str	r2, [r3, #24]
 800bc7c:	e00e      	b.n	800bc9c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800bc7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	699b      	ldr	r3, [r3, #24]
 800bc8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800bc8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bc9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	785b      	ldrb	r3, [r3, #1]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	f040 8085 	bne.w	800bdb8 <USB_EPStartXfer+0x14fc>
 800bcae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bcbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	461a      	mov	r2, r3
 800bcce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bcd2:	4413      	add	r3, r2
 800bcd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bcd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	00da      	lsls	r2, r3, #3
 800bce6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bcea:	4413      	add	r3, r2
 800bcec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bcf0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bcf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bcf8:	881b      	ldrh	r3, [r3, #0]
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd00:	b29a      	uxth	r2, r3
 800bd02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd06:	801a      	strh	r2, [r3, #0]
 800bd08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd0c:	2b3e      	cmp	r3, #62	; 0x3e
 800bd0e:	d923      	bls.n	800bd58 <USB_EPStartXfer+0x149c>
 800bd10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd14:	095b      	lsrs	r3, r3, #5
 800bd16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bd1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd1e:	f003 031f 	and.w	r3, r3, #31
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d104      	bne.n	800bd30 <USB_EPStartXfer+0x1474>
 800bd26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bd30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd34:	881b      	ldrh	r3, [r3, #0]
 800bd36:	b29a      	uxth	r2, r3
 800bd38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	029b      	lsls	r3, r3, #10
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	4313      	orrs	r3, r2
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd4e:	b29a      	uxth	r2, r3
 800bd50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd54:	801a      	strh	r2, [r3, #0]
 800bd56:	e060      	b.n	800be1a <USB_EPStartXfer+0x155e>
 800bd58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10c      	bne.n	800bd7a <USB_EPStartXfer+0x14be>
 800bd60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd64:	881b      	ldrh	r3, [r3, #0]
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd70:	b29a      	uxth	r2, r3
 800bd72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd76:	801a      	strh	r2, [r3, #0]
 800bd78:	e04f      	b.n	800be1a <USB_EPStartXfer+0x155e>
 800bd7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd7e:	085b      	lsrs	r3, r3, #1
 800bd80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bd84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd88:	f003 0301 	and.w	r3, r3, #1
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d004      	beq.n	800bd9a <USB_EPStartXfer+0x14de>
 800bd90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd94:	3301      	adds	r3, #1
 800bd96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bd9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd9e:	881b      	ldrh	r3, [r3, #0]
 800bda0:	b29a      	uxth	r2, r3
 800bda2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	029b      	lsls	r3, r3, #10
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	4313      	orrs	r3, r2
 800bdae:	b29a      	uxth	r2, r3
 800bdb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bdb4:	801a      	strh	r2, [r3, #0]
 800bdb6:	e030      	b.n	800be1a <USB_EPStartXfer+0x155e>
 800bdb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	785b      	ldrb	r3, [r3, #1]
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d128      	bne.n	800be1a <USB_EPStartXfer+0x155e>
 800bdc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bdd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	461a      	mov	r2, r3
 800bde8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bdec:	4413      	add	r3, r2
 800bdee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bdf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	00da      	lsls	r2, r3, #3
 800be00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be04:	4413      	add	r3, r2
 800be06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800be0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800be0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be12:	b29a      	uxth	r2, r3
 800be14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800be18:	801a      	strh	r2, [r3, #0]
 800be1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800be28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	785b      	ldrb	r3, [r3, #1]
 800be34:	2b00      	cmp	r3, #0
 800be36:	f040 8085 	bne.w	800bf44 <USB_EPStartXfer+0x1688>
 800be3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800be48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be56:	b29b      	uxth	r3, r3
 800be58:	461a      	mov	r2, r3
 800be5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800be5e:	4413      	add	r3, r2
 800be60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800be64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	00da      	lsls	r2, r3, #3
 800be72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800be76:	4413      	add	r3, r2
 800be78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800be7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800be80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800be84:	881b      	ldrh	r3, [r3, #0]
 800be86:	b29b      	uxth	r3, r3
 800be88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be8c:	b29a      	uxth	r2, r3
 800be8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800be92:	801a      	strh	r2, [r3, #0]
 800be94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be98:	2b3e      	cmp	r3, #62	; 0x3e
 800be9a:	d923      	bls.n	800bee4 <USB_EPStartXfer+0x1628>
 800be9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bea0:	095b      	lsrs	r3, r3, #5
 800bea2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beaa:	f003 031f 	and.w	r3, r3, #31
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d104      	bne.n	800bebc <USB_EPStartXfer+0x1600>
 800beb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800beb6:	3b01      	subs	r3, #1
 800beb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bebc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bec0:	881b      	ldrh	r3, [r3, #0]
 800bec2:	b29a      	uxth	r2, r3
 800bec4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bec8:	b29b      	uxth	r3, r3
 800beca:	029b      	lsls	r3, r3, #10
 800becc:	b29b      	uxth	r3, r3
 800bece:	4313      	orrs	r3, r2
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800beda:	b29a      	uxth	r2, r3
 800bedc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bee0:	801a      	strh	r2, [r3, #0]
 800bee2:	e05c      	b.n	800bf9e <USB_EPStartXfer+0x16e2>
 800bee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d10c      	bne.n	800bf06 <USB_EPStartXfer+0x164a>
 800beec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bef0:	881b      	ldrh	r3, [r3, #0]
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800befc:	b29a      	uxth	r2, r3
 800befe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bf02:	801a      	strh	r2, [r3, #0]
 800bf04:	e04b      	b.n	800bf9e <USB_EPStartXfer+0x16e2>
 800bf06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf0a:	085b      	lsrs	r3, r3, #1
 800bf0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bf10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf14:	f003 0301 	and.w	r3, r3, #1
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d004      	beq.n	800bf26 <USB_EPStartXfer+0x166a>
 800bf1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf20:	3301      	adds	r3, #1
 800bf22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bf26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bf2a:	881b      	ldrh	r3, [r3, #0]
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	029b      	lsls	r3, r3, #10
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bf40:	801a      	strh	r2, [r3, #0]
 800bf42:	e02c      	b.n	800bf9e <USB_EPStartXfer+0x16e2>
 800bf44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	785b      	ldrb	r3, [r3, #1]
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d124      	bne.n	800bf9e <USB_EPStartXfer+0x16e2>
 800bf54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	461a      	mov	r2, r3
 800bf66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bf6a:	4413      	add	r3, r2
 800bf6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	00da      	lsls	r2, r3, #3
 800bf7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bf82:	4413      	add	r3, r2
 800bf84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bf88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bf8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bf96:	801a      	strh	r2, [r3, #0]
 800bf98:	e001      	b.n	800bf9e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	e03a      	b.n	800c014 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bf9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfa6:	681a      	ldr	r2, [r3, #0]
 800bfa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	009b      	lsls	r3, r3, #2
 800bfb6:	4413      	add	r3, r2
 800bfb8:	881b      	ldrh	r3, [r3, #0]
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bfc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfc4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bfc8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bfcc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bfd0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bfd4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bfd8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bfdc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bfe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfe4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfe8:	681a      	ldr	r2, [r3, #0]
 800bfea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	441a      	add	r2, r3
 800bffa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c00a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c00e:	b29b      	uxth	r3, r3
 800c010:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c012:	2300      	movs	r3, #0
}
 800c014:	4618      	mov	r0, r3
 800c016:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c01e:	b480      	push	{r7}
 800c020:	b085      	sub	sp, #20
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
 800c026:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	785b      	ldrb	r3, [r3, #1]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d020      	beq.n	800c072 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	4413      	add	r3, r2
 800c03a:	881b      	ldrh	r3, [r3, #0]
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c046:	81bb      	strh	r3, [r7, #12]
 800c048:	89bb      	ldrh	r3, [r7, #12]
 800c04a:	f083 0310 	eor.w	r3, r3, #16
 800c04e:	81bb      	strh	r3, [r7, #12]
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	441a      	add	r2, r3
 800c05a:	89bb      	ldrh	r3, [r7, #12]
 800c05c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	8013      	strh	r3, [r2, #0]
 800c070:	e01f      	b.n	800c0b2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	4413      	add	r3, r2
 800c07c:	881b      	ldrh	r3, [r3, #0]
 800c07e:	b29b      	uxth	r3, r3
 800c080:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c088:	81fb      	strh	r3, [r7, #14]
 800c08a:	89fb      	ldrh	r3, [r7, #14]
 800c08c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c090:	81fb      	strh	r3, [r7, #14]
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	441a      	add	r2, r3
 800c09c:	89fb      	ldrh	r3, [r7, #14]
 800c09e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c0b2:	2300      	movs	r3, #0
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3714      	adds	r7, #20
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b087      	sub	sp, #28
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	7b1b      	ldrb	r3, [r3, #12]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	f040 809d 	bne.w	800c20e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	785b      	ldrb	r3, [r3, #1]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d04c      	beq.n	800c176 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	4413      	add	r3, r2
 800c0e6:	881b      	ldrh	r3, [r3, #0]
 800c0e8:	823b      	strh	r3, [r7, #16]
 800c0ea:	8a3b      	ldrh	r3, [r7, #16]
 800c0ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d01b      	beq.n	800c12c <USB_EPClearStall+0x6c>
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	4413      	add	r3, r2
 800c0fe:	881b      	ldrh	r3, [r3, #0]
 800c100:	b29b      	uxth	r3, r3
 800c102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c10a:	81fb      	strh	r3, [r7, #14]
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	441a      	add	r2, r3
 800c116:	89fb      	ldrh	r3, [r7, #14]
 800c118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c11c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c124:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c128:	b29b      	uxth	r3, r3
 800c12a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	78db      	ldrb	r3, [r3, #3]
 800c130:	2b01      	cmp	r3, #1
 800c132:	d06c      	beq.n	800c20e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	4413      	add	r3, r2
 800c13e:	881b      	ldrh	r3, [r3, #0]
 800c140:	b29b      	uxth	r3, r3
 800c142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c14a:	81bb      	strh	r3, [r7, #12]
 800c14c:	89bb      	ldrh	r3, [r7, #12]
 800c14e:	f083 0320 	eor.w	r3, r3, #32
 800c152:	81bb      	strh	r3, [r7, #12]
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	441a      	add	r2, r3
 800c15e:	89bb      	ldrh	r3, [r7, #12]
 800c160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c170:	b29b      	uxth	r3, r3
 800c172:	8013      	strh	r3, [r2, #0]
 800c174:	e04b      	b.n	800c20e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	4413      	add	r3, r2
 800c180:	881b      	ldrh	r3, [r3, #0]
 800c182:	82fb      	strh	r3, [r7, #22]
 800c184:	8afb      	ldrh	r3, [r7, #22]
 800c186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d01b      	beq.n	800c1c6 <USB_EPClearStall+0x106>
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	4413      	add	r3, r2
 800c198:	881b      	ldrh	r3, [r3, #0]
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1a4:	82bb      	strh	r3, [r7, #20]
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	441a      	add	r2, r3
 800c1b0:	8abb      	ldrh	r3, [r7, #20]
 800c1b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c1ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c1be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	009b      	lsls	r3, r3, #2
 800c1ce:	4413      	add	r3, r2
 800c1d0:	881b      	ldrh	r3, [r3, #0]
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c1d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1dc:	827b      	strh	r3, [r7, #18]
 800c1de:	8a7b      	ldrh	r3, [r7, #18]
 800c1e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c1e4:	827b      	strh	r3, [r7, #18]
 800c1e6:	8a7b      	ldrh	r3, [r7, #18]
 800c1e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c1ec:	827b      	strh	r3, [r7, #18]
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	441a      	add	r2, r3
 800c1f8:	8a7b      	ldrh	r3, [r7, #18]
 800c1fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c20e:	2300      	movs	r3, #0
}
 800c210:	4618      	mov	r0, r3
 800c212:	371c      	adds	r7, #28
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	460b      	mov	r3, r1
 800c226:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c228:	78fb      	ldrb	r3, [r7, #3]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d103      	bne.n	800c236 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2280      	movs	r2, #128	; 0x80
 800c232:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c236:	2300      	movs	r3, #0
}
 800c238:	4618      	mov	r0, r3
 800c23a:	370c      	adds	r7, #12
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	370c      	adds	r7, #12
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr

0800c25a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800c25a:	b480      	push	{r7}
 800c25c:	b083      	sub	sp, #12
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c262:	2300      	movs	r3, #0
}
 800c264:	4618      	mov	r0, r3
 800c266:	370c      	adds	r7, #12
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c270:	b480      	push	{r7}
 800c272:	b085      	sub	sp, #20
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c27e:	b29b      	uxth	r3, r3
 800c280:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c282:	68fb      	ldr	r3, [r7, #12]
}
 800c284:	4618      	mov	r0, r3
 800c286:	3714      	adds	r7, #20
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c290:	b480      	push	{r7}
 800c292:	b08b      	sub	sp, #44	; 0x2c
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	4611      	mov	r1, r2
 800c29c:	461a      	mov	r2, r3
 800c29e:	460b      	mov	r3, r1
 800c2a0:	80fb      	strh	r3, [r7, #6]
 800c2a2:	4613      	mov	r3, r2
 800c2a4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c2a6:	88bb      	ldrh	r3, [r7, #4]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	085b      	lsrs	r3, r3, #1
 800c2ac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c2b6:	88fa      	ldrh	r2, [r7, #6]
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	4413      	add	r3, r2
 800c2bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c2c0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	627b      	str	r3, [r7, #36]	; 0x24
 800c2c6:	e01b      	b.n	800c300 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c2ce:	69fb      	ldr	r3, [r7, #28]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	021b      	lsls	r3, r3, #8
 800c2d6:	b21a      	sxth	r2, r3
 800c2d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	b21b      	sxth	r3, r3
 800c2e0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c2e2:	6a3b      	ldr	r3, [r7, #32]
 800c2e4:	8a7a      	ldrh	r2, [r7, #18]
 800c2e6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c2e8:	6a3b      	ldr	r3, [r7, #32]
 800c2ea:	3302      	adds	r3, #2
 800c2ec:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c2ee:	69fb      	ldr	r3, [r7, #28]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fc:	3b01      	subs	r3, #1
 800c2fe:	627b      	str	r3, [r7, #36]	; 0x24
 800c300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c302:	2b00      	cmp	r3, #0
 800c304:	d1e0      	bne.n	800c2c8 <USB_WritePMA+0x38>
  }
}
 800c306:	bf00      	nop
 800c308:	bf00      	nop
 800c30a:	372c      	adds	r7, #44	; 0x2c
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c314:	b480      	push	{r7}
 800c316:	b08b      	sub	sp, #44	; 0x2c
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	4611      	mov	r1, r2
 800c320:	461a      	mov	r2, r3
 800c322:	460b      	mov	r3, r1
 800c324:	80fb      	strh	r3, [r7, #6]
 800c326:	4613      	mov	r3, r2
 800c328:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c32a:	88bb      	ldrh	r3, [r7, #4]
 800c32c:	085b      	lsrs	r3, r3, #1
 800c32e:	b29b      	uxth	r3, r3
 800c330:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c33a:	88fa      	ldrh	r2, [r7, #6]
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	4413      	add	r3, r2
 800c340:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c344:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c346:	69bb      	ldr	r3, [r7, #24]
 800c348:	627b      	str	r3, [r7, #36]	; 0x24
 800c34a:	e018      	b.n	800c37e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c34c:	6a3b      	ldr	r3, [r7, #32]
 800c34e:	881b      	ldrh	r3, [r3, #0]
 800c350:	b29b      	uxth	r3, r3
 800c352:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c354:	6a3b      	ldr	r3, [r7, #32]
 800c356:	3302      	adds	r3, #2
 800c358:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	b2da      	uxtb	r2, r3
 800c35e:	69fb      	ldr	r3, [r7, #28]
 800c360:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c362:	69fb      	ldr	r3, [r7, #28]
 800c364:	3301      	adds	r3, #1
 800c366:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	0a1b      	lsrs	r3, r3, #8
 800c36c:	b2da      	uxtb	r2, r3
 800c36e:	69fb      	ldr	r3, [r7, #28]
 800c370:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	3301      	adds	r3, #1
 800c376:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37a:	3b01      	subs	r3, #1
 800c37c:	627b      	str	r3, [r7, #36]	; 0x24
 800c37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c380:	2b00      	cmp	r3, #0
 800c382:	d1e3      	bne.n	800c34c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c384:	88bb      	ldrh	r3, [r7, #4]
 800c386:	f003 0301 	and.w	r3, r3, #1
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d007      	beq.n	800c3a0 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800c390:	6a3b      	ldr	r3, [r7, #32]
 800c392:	881b      	ldrh	r3, [r3, #0]
 800c394:	b29b      	uxth	r3, r3
 800c396:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	b2da      	uxtb	r2, r3
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	701a      	strb	r2, [r3, #0]
  }
}
 800c3a0:	bf00      	nop
 800c3a2:	372c      	adds	r7, #44	; 0x2c
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr

0800c3ac <__NVIC_SystemReset>:
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800c3b0:	f3bf 8f4f 	dsb	sy
}
 800c3b4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c3b6:	4b06      	ldr	r3, [pc, #24]	; (800c3d0 <__NVIC_SystemReset+0x24>)
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800c3be:	4904      	ldr	r1, [pc, #16]	; (800c3d0 <__NVIC_SystemReset+0x24>)
 800c3c0:	4b04      	ldr	r3, [pc, #16]	; (800c3d4 <__NVIC_SystemReset+0x28>)
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c3c6:	f3bf 8f4f 	dsb	sy
}
 800c3ca:	bf00      	nop
    __NOP();
 800c3cc:	bf00      	nop
 800c3ce:	e7fd      	b.n	800c3cc <__NVIC_SystemReset+0x20>
 800c3d0:	e000ed00 	.word	0xe000ed00
 800c3d4:	05fa0004 	.word	0x05fa0004

0800c3d8 <USBD_DFU_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_Init(USBD_HandleTypeDef *pdev,
                              uint8_t cfgidx)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;

  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 800c3e4:	f240 401c 	movw	r0, #1052	; 0x41c
 800c3e8:	f002 fac4 	bl	800e974 <USBD_static_malloc>
 800c3ec:	4602      	mov	r2, r0
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d101      	bne.n	800c402 <USBD_DFU_Init+0x2a>
  {
    return USBD_FAIL;
 800c3fe:	2302      	movs	r3, #2
 800c400:	e03f      	b.n	800c482 <USBD_DFU_Init+0xaa>
  }
  else
  {
    hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c408:	60fb      	str	r3, [r7, #12]

    hdfu->alt_setting = 0U;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2200      	movs	r2, #0
 800c40e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c418:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    hdfu->wblock_num = 0U;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2200      	movs	r2, #0
 800c420:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2200      	movs	r2, #0
 800c428:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

    hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2200      	movs	r2, #0
 800c430:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    hdfu->dev_state = DFU_STATE_IDLE;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2202      	movs	r2, #2
 800c438:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2200      	movs	r2, #0
 800c440:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2200      	movs	r2, #0
 800c448:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2200      	movs	r2, #0
 800c450:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2200      	movs	r2, #0
 800c458:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = DFU_STATE_IDLE;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2202      	movs	r2, #2
 800c460:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2200      	movs	r2, #0
 800c468:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    /* Initialize Hardware layer */
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	4798      	blx	r3
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d001      	beq.n	800c480 <USBD_DFU_Init+0xa8>
    {
      return USBD_FAIL;
 800c47c:	2302      	movs	r3, #2
 800c47e:	e000      	b.n	800c482 <USBD_DFU_Init+0xaa>
    }
  }
  return USBD_OK;
 800c480:	2300      	movs	r3, #0
}
 800c482:	4618      	mov	r0, r3
 800c484:	3710      	adds	r7, #16
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <USBD_DFU_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b084      	sub	sp, #16
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
 800c492:	460b      	mov	r3, r1
 800c494:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c49c:	60fb      	str	r3, [r7, #12]

  hdfu->wblock_num = 0U;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2202      	movs	r2, #2
 800c4b2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2202      	movs	r2, #2
 800c4c2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d00e      	beq.n	800c4ee <USBD_DFU_DeInit+0x64>
  {
    /* De-Initialize Hardware layer */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c4d6:	689b      	ldr	r3, [r3, #8]
 800c4d8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f002 fa55 	bl	800e990 <USBD_static_free>
    pdev->pClassData = NULL;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800c4ee:	2300      	movs	r3, #0
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3710      	adds	r7, #16
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <USBD_DFU_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_DFU_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b086      	sub	sp, #24
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;
  uint8_t *pbuf = 0U;
 800c502:	2300      	movs	r3, #0
 800c504:	617b      	str	r3, [r7, #20]
  uint16_t len = 0U;
 800c506:	2300      	movs	r3, #0
 800c508:	827b      	strh	r3, [r7, #18]
  uint16_t status_info = 0U;
 800c50a:	2300      	movs	r3, #0
 800c50c:	817b      	strh	r3, [r7, #10]
  uint8_t ret = USBD_OK;
 800c50e:	2300      	movs	r3, #0
 800c510:	747b      	strb	r3, [r7, #17]

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c518:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c522:	2b00      	cmp	r3, #0
 800c524:	d03f      	beq.n	800c5a6 <USBD_DFU_Setup+0xae>
 800c526:	2b20      	cmp	r3, #32
 800c528:	f040 80c2 	bne.w	800c6b0 <USBD_DFU_Setup+0x1b8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	785b      	ldrb	r3, [r3, #1]
 800c530:	2b06      	cmp	r3, #6
 800c532:	d830      	bhi.n	800c596 <USBD_DFU_Setup+0x9e>
 800c534:	a201      	add	r2, pc, #4	; (adr r2, 800c53c <USBD_DFU_Setup+0x44>)
 800c536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c53a:	bf00      	nop
 800c53c:	0800c58d 	.word	0x0800c58d
 800c540:	0800c559 	.word	0x0800c559
 800c544:	0800c563 	.word	0x0800c563
 800c548:	0800c56d 	.word	0x0800c56d
 800c54c:	0800c575 	.word	0x0800c575
 800c550:	0800c57d 	.word	0x0800c57d
 800c554:	0800c585 	.word	0x0800c585
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 800c558:	6839      	ldr	r1, [r7, #0]
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 fa96 	bl	800ca8c <DFU_Download>
          break;
 800c560:	e020      	b.n	800c5a4 <USBD_DFU_Setup+0xac>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 800c562:	6839      	ldr	r1, [r7, #0]
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 fafb 	bl	800cb60 <DFU_Upload>
          break;
 800c56a:	e01b      	b.n	800c5a4 <USBD_DFU_Setup+0xac>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 fbcf 	bl	800cd10 <DFU_GetStatus>
          break;
 800c572:	e017      	b.n	800c5a4 <USBD_DFU_Setup+0xac>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 fc7d 	bl	800ce74 <DFU_ClearStatus>
          break;
 800c57a:	e013      	b.n	800c5a4 <USBD_DFU_Setup+0xac>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 fcc9 	bl	800cf14 <DFU_GetState>
          break;
 800c582:	e00f      	b.n	800c5a4 <USBD_DFU_Setup+0xac>

        case DFU_ABORT:
          DFU_Abort(pdev);
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f000 fcd9 	bl	800cf3c <DFU_Abort>
          break;
 800c58a:	e00b      	b.n	800c5a4 <USBD_DFU_Setup+0xac>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 800c58c:	6839      	ldr	r1, [r7, #0]
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f000 fa1c 	bl	800c9cc <DFU_Detach>
          break;
 800c594:	e006      	b.n	800c5a4 <USBD_DFU_Setup+0xac>

        default:
          USBD_CtlError(pdev, req);
 800c596:	6839      	ldr	r1, [r7, #0]
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f001 fd45 	bl	800e028 <USBD_CtlError>
          ret = USBD_FAIL;
 800c59e:	2302      	movs	r3, #2
 800c5a0:	747b      	strb	r3, [r7, #17]
          break;
 800c5a2:	bf00      	nop
      }
      break;
 800c5a4:	e08b      	b.n	800c6be <USBD_DFU_Setup+0x1c6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	785b      	ldrb	r3, [r3, #1]
 800c5aa:	2b0b      	cmp	r3, #11
 800c5ac:	d878      	bhi.n	800c6a0 <USBD_DFU_Setup+0x1a8>
 800c5ae:	a201      	add	r2, pc, #4	; (adr r2, 800c5b4 <USBD_DFU_Setup+0xbc>)
 800c5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b4:	0800c5e5 	.word	0x0800c5e5
 800c5b8:	0800c6a1 	.word	0x0800c6a1
 800c5bc:	0800c6a1 	.word	0x0800c6a1
 800c5c0:	0800c6a1 	.word	0x0800c6a1
 800c5c4:	0800c6a1 	.word	0x0800c6a1
 800c5c8:	0800c6a1 	.word	0x0800c6a1
 800c5cc:	0800c60d 	.word	0x0800c60d
 800c5d0:	0800c6a1 	.word	0x0800c6a1
 800c5d4:	0800c6a1 	.word	0x0800c6a1
 800c5d8:	0800c6a1 	.word	0x0800c6a1
 800c5dc:	0800c637 	.word	0x0800c637
 800c5e0:	0800c661 	.word	0x0800c661
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5ea:	2b03      	cmp	r3, #3
 800c5ec:	d107      	bne.n	800c5fe <USBD_DFU_Setup+0x106>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800c5ee:	f107 030a 	add.w	r3, r7, #10
 800c5f2:	2202      	movs	r2, #2
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f001 fd81 	bl	800e0fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c5fc:	e057      	b.n	800c6ae <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 800c5fe:	6839      	ldr	r1, [r7, #0]
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f001 fd11 	bl	800e028 <USBD_CtlError>
            ret = USBD_FAIL;
 800c606:	2302      	movs	r3, #2
 800c608:	747b      	strb	r3, [r7, #17]
          break;
 800c60a:	e050      	b.n	800c6ae <USBD_DFU_Setup+0x1b6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	885b      	ldrh	r3, [r3, #2]
 800c610:	0a1b      	lsrs	r3, r3, #8
 800c612:	b29b      	uxth	r3, r3
 800c614:	2b21      	cmp	r3, #33	; 0x21
 800c616:	d107      	bne.n	800c628 <USBD_DFU_Setup+0x130>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 800c618:	4b2b      	ldr	r3, [pc, #172]	; (800c6c8 <USBD_DFU_Setup+0x1d0>)
 800c61a:	617b      	str	r3, [r7, #20]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	88db      	ldrh	r3, [r3, #6]
 800c620:	2b09      	cmp	r3, #9
 800c622:	bf28      	it	cs
 800c624:	2309      	movcs	r3, #9
 800c626:	827b      	strh	r3, [r7, #18]
          }

          USBD_CtlSendData(pdev, pbuf, len);
 800c628:	8a7b      	ldrh	r3, [r7, #18]
 800c62a:	461a      	mov	r2, r3
 800c62c:	6979      	ldr	r1, [r7, #20]
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f001 fd65 	bl	800e0fe <USBD_CtlSendData>
          break;
 800c634:	e03b      	b.n	800c6ae <USBD_DFU_Setup+0x1b6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c63c:	2b03      	cmp	r3, #3
 800c63e:	d108      	bne.n	800c652 <USBD_DFU_Setup+0x15a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c646:	2201      	movs	r2, #1
 800c648:	4619      	mov	r1, r3
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f001 fd57 	bl	800e0fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c650:	e02d      	b.n	800c6ae <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 800c652:	6839      	ldr	r1, [r7, #0]
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f001 fce7 	bl	800e028 <USBD_CtlError>
            ret = USBD_FAIL;
 800c65a:	2302      	movs	r3, #2
 800c65c:	747b      	strb	r3, [r7, #17]
          break;
 800c65e:	e026      	b.n	800c6ae <USBD_DFU_Setup+0x1b6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	885b      	ldrh	r3, [r3, #2]
 800c664:	b2db      	uxtb	r3, r3
 800c666:	2b00      	cmp	r3, #0
 800c668:	d113      	bne.n	800c692 <USBD_DFU_Setup+0x19a>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c670:	2b03      	cmp	r3, #3
 800c672:	d107      	bne.n	800c684 <USBD_DFU_Setup+0x18c>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	885b      	ldrh	r3, [r3, #2]
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	461a      	mov	r2, r3
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be nacked */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c682:	e014      	b.n	800c6ae <USBD_DFU_Setup+0x1b6>
              USBD_CtlError(pdev, req);
 800c684:	6839      	ldr	r1, [r7, #0]
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f001 fcce 	bl	800e028 <USBD_CtlError>
              ret = USBD_FAIL;
 800c68c:	2302      	movs	r3, #2
 800c68e:	747b      	strb	r3, [r7, #17]
          break;
 800c690:	e00d      	b.n	800c6ae <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 800c692:	6839      	ldr	r1, [r7, #0]
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f001 fcc7 	bl	800e028 <USBD_CtlError>
            ret = USBD_FAIL;
 800c69a:	2302      	movs	r3, #2
 800c69c:	747b      	strb	r3, [r7, #17]
          break;
 800c69e:	e006      	b.n	800c6ae <USBD_DFU_Setup+0x1b6>

        default:
          USBD_CtlError(pdev, req);
 800c6a0:	6839      	ldr	r1, [r7, #0]
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f001 fcc0 	bl	800e028 <USBD_CtlError>
          ret = USBD_FAIL;
 800c6a8:	2302      	movs	r3, #2
 800c6aa:	747b      	strb	r3, [r7, #17]
          break;
 800c6ac:	bf00      	nop
      }
      break;
 800c6ae:	e006      	b.n	800c6be <USBD_DFU_Setup+0x1c6>

    default:
      USBD_CtlError(pdev, req);
 800c6b0:	6839      	ldr	r1, [r7, #0]
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f001 fcb8 	bl	800e028 <USBD_CtlError>
      ret = USBD_FAIL;
 800c6b8:	2302      	movs	r3, #2
 800c6ba:	747b      	strb	r3, [r7, #17]
      break;
 800c6bc:	bf00      	nop
  }

  return ret;
 800c6be:	7c7b      	ldrb	r3, [r7, #17]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3718      	adds	r7, #24
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	20000062 	.word	0x20000062

0800c6cc <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b083      	sub	sp, #12
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_CfgDesc);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	221b      	movs	r2, #27
 800c6d8:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_CfgDesc;
 800c6da:	4b03      	ldr	r3, [pc, #12]	; (800c6e8 <USBD_DFU_GetCfgDesc+0x1c>)
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	370c      	adds	r7, #12
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr
 800c6e8:	20000050 	.word	0x20000050

0800c6ec <USBD_DFU_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800c6f8:	2300      	movs	r3, #0
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	370c      	adds	r7, #12
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr

0800c706 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c706:	b480      	push	{r7}
 800c708:	b083      	sub	sp, #12
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800c70e:	2300      	movs	r3, #0
}
 800c710:	4618      	mov	r0, r3
 800c712:	370c      	adds	r7, #12
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr

0800c71c <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b086      	sub	sp, #24
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  uint32_t addr;
  USBD_SetupReqTypedef     req;
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c72a:	617b      	str	r3, [r7, #20]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c732:	2b04      	cmp	r3, #4
 800c734:	f040 80ca 	bne.w	800c8cc <USBD_DFU_EP0_TxReady+0x1b0>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c73e:	2b00      	cmp	r3, #0
 800c740:	f040 8086 	bne.w	800c850 <USBD_DFU_EP0_TxReady+0x134>
    {
      if ((hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1U))
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d105      	bne.n	800c758 <USBD_DFU_EP0_TxReady+0x3c>
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c752:	2b01      	cmp	r3, #1
 800c754:	f000 809a 	beq.w	800c88c <USBD_DFU_EP0_TxReady+0x170>
      {

      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER) && (hdfu->wlength == 5U))
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	2b21      	cmp	r3, #33	; 0x21
 800c75e:	d129      	bne.n	800c7b4 <USBD_DFU_EP0_TxReady+0x98>
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c766:	2b05      	cmp	r3, #5
 800c768:	d124      	bne.n	800c7b4 <USBD_DFU_EP0_TxReady+0x98>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	785b      	ldrb	r3, [r3, #1]
 800c76e:	461a      	mov	r2, r3
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	789b      	ldrb	r3, [r3, #2]
 800c780:	021b      	lsls	r3, r3, #8
 800c782:	441a      	add	r2, r3
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	78db      	ldrb	r3, [r3, #3]
 800c794:	041b      	lsls	r3, r3, #16
 800c796:	441a      	add	r2, r3
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	791b      	ldrb	r3, [r3, #4]
 800c7a8:	061b      	lsls	r3, r3, #24
 800c7aa:	441a      	add	r2, r3
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800c7b2:	e06b      	b.n	800c88c <USBD_DFU_EP0_TxReady+0x170>
      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_ERASE) && (hdfu->wlength == 5U))
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	2b41      	cmp	r3, #65	; 0x41
 800c7ba:	d136      	bne.n	800c82a <USBD_DFU_EP0_TxReady+0x10e>
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c7c2:	2b05      	cmp	r3, #5
 800c7c4:	d131      	bne.n	800c82a <USBD_DFU_EP0_TxReady+0x10e>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	785b      	ldrb	r3, [r3, #1]
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	789b      	ldrb	r3, [r3, #2]
 800c7dc:	021b      	lsls	r3, r3, #8
 800c7de:	441a      	add	r2, r3
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	78db      	ldrb	r3, [r3, #3]
 800c7f0:	041b      	lsls	r3, r3, #16
 800c7f2:	441a      	add	r2, r3
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	791b      	ldrb	r3, [r3, #4]
 800c804:	061b      	lsls	r3, r3, #24
 800c806:	441a      	add	r2, r3
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c814:	68db      	ldr	r3, [r3, #12]
 800c816:	697a      	ldr	r2, [r7, #20]
 800c818:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 800c81c:	4610      	mov	r0, r2
 800c81e:	4798      	blx	r3
 800c820:	4603      	mov	r3, r0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d032      	beq.n	800c88c <USBD_DFU_EP0_TxReady+0x170>
        {
          return USBD_FAIL;
 800c826:	2302      	movs	r3, #2
 800c828:	e059      	b.n	800c8de <USBD_DFU_EP0_TxReady+0x1c2>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	2200      	movs	r2, #0
 800c82e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	2200      	movs	r2, #0
 800c836:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 800c83a:	2300      	movs	r3, #0
 800c83c:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 800c83e:	2301      	movs	r3, #1
 800c840:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError(pdev, &req);
 800c842:	f107 0308 	add.w	r3, r7, #8
 800c846:	4619      	mov	r1, r3
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f001 fbed 	bl	800e028 <USBD_CtlError>
 800c84e:	e01d      	b.n	800c88c <USBD_DFU_EP0_TxReady+0x170>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c856:	2b01      	cmp	r3, #1
 800c858:	d918      	bls.n	800c88c <USBD_DFU_EP0_TxReady+0x170>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c860:	3b02      	subs	r3, #2
 800c862:	029a      	lsls	r2, r3, #10
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800c86a:	4413      	add	r3, r2
 800c86c:	613b      	str	r3, [r7, #16]

        /* Preform the write operation */
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c874:	691b      	ldr	r3, [r3, #16]
 800c876:	6978      	ldr	r0, [r7, #20]
 800c878:	6939      	ldr	r1, [r7, #16]
 800c87a:	697a      	ldr	r2, [r7, #20]
 800c87c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800c880:	4798      	blx	r3
 800c882:	4603      	mov	r3, r0
 800c884:	2b00      	cmp	r3, #0
 800c886:	d001      	beq.n	800c88c <USBD_DFU_EP0_TxReady+0x170>
                                                              (uint8_t *)addr, hdfu->wlength) != USBD_OK)
        {
          return USBD_FAIL;
 800c888:	2302      	movs	r3, #2
 800c88a:	e028      	b.n	800c8de <USBD_DFU_EP0_TxReady+0x1c2>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	2200      	movs	r2, #0
 800c890:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	2200      	movs	r2, #0
 800c898:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	2203      	movs	r2, #3
 800c8a0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return USBD_OK;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	e008      	b.n	800c8de <USBD_DFU_EP0_TxReady+0x1c2>
  }
  else
  {
    if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c8d2:	2b07      	cmp	r3, #7
 800c8d4:	d102      	bne.n	800c8dc <USBD_DFU_EP0_TxReady+0x1c0>
    {
      /* Start leaving DFU mode */
      DFU_Leave(pdev);
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 fb7e 	bl	800cfd8 <DFU_Leave>
    }
  }

  return USBD_OK;
 800c8dc:	2300      	movs	r3, #0
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3718      	adds	r7, #24
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}

0800c8e6 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800c8e6:	b480      	push	{r7}
 800c8e8:	b083      	sub	sp, #12
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800c8ee:	2300      	movs	r3, #0
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	370c      	adds	r7, #12
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr

0800c8fc <USBD_DFU_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b083      	sub	sp, #12
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	460b      	mov	r3, r1
 800c906:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800c908:	2300      	movs	r3, #0
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	370c      	adds	r7, #12
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr

0800c916 <USBD_DFU_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c916:	b480      	push	{r7}
 800c918:	b083      	sub	sp, #12
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
 800c91e:	460b      	mov	r3, r1
 800c920:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800c922:	2300      	movs	r3, #0
}
 800c924:	4618      	mov	r0, r3
 800c926:	370c      	adds	r7, #12
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <USBD_DFU_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataOut(USBD_HandleTypeDef *pdev,
                                 uint8_t epnum)
{
 800c930:	b480      	push	{r7}
 800c932:	b083      	sub	sp, #12
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	460b      	mov	r3, r1
 800c93a:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800c93c:	2300      	movs	r3, #0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	370c      	adds	r7, #12
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr
	...

0800c94c <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_DeviceQualifierDesc);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	220a      	movs	r2, #10
 800c958:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceQualifierDesc;
 800c95a:	4b03      	ldr	r3, [pc, #12]	; (800c968 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	370c      	adds	r7, #12
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr
 800c968:	2000006c 	.word	0x2000006c

0800c96c <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	460b      	mov	r3, r1
 800c976:	607a      	str	r2, [r7, #4]
 800c978:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800c97a:	7afb      	ldrb	r3, [r7, #11]
 800c97c:	2b06      	cmp	r3, #6
 800c97e:	d80a      	bhi.n	800c996 <USBD_DFU_GetUsrStringDesc+0x2a>
  {
    USBD_GetString((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	4905      	ldr	r1, [pc, #20]	; (800c9a0 <USBD_DFU_GetUsrStringDesc+0x34>)
 800c98c:	4618      	mov	r0, r3
 800c98e:	f001 fb5c 	bl	800e04a <USBD_GetString>
    return USBD_StrDesc;
 800c992:	4b03      	ldr	r3, [pc, #12]	; (800c9a0 <USBD_DFU_GetUsrStringDesc+0x34>)
 800c994:	e000      	b.n	800c998 <USBD_DFU_GetUsrStringDesc+0x2c>
  }
  /* Not supported Interface Descriptor index */
  else
  {
    return NULL;
 800c996:	2300      	movs	r3, #0
  }
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3710      	adds	r7, #16
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	20000a50 	.word	0x20000a50

0800c9a4 <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_DFU_RegisterMedia(USBD_HandleTypeDef   *pdev,
                                USBD_DFU_MediaTypeDef *fops)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d003      	beq.n	800c9bc <USBD_DFU_RegisterMedia+0x18>
  {
    pdev->pUserData = fops;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	683a      	ldr	r2, [r7, #0]
 800c9b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }
  return 0U;
 800c9bc:	2300      	movs	r3, #0
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	370c      	adds	r7, #12
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr
	...

0800c9cc <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9dc:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c9e4:	2b02      	cmp	r3, #2
 800c9e6:	d013      	beq.n	800ca10 <DFU_Detach+0x44>
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c9ee:	2b03      	cmp	r3, #3
 800c9f0:	d00e      	beq.n	800ca10 <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c9f8:	2b05      	cmp	r3, #5
 800c9fa:	d009      	beq.n	800ca10 <DFU_Detach+0x44>
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800ca02:	2b06      	cmp	r3, #6
 800ca04:	d004      	beq.n	800ca10 <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800ca0c:	2b09      	cmp	r3, #9
 800ca0e:	d125      	bne.n	800ca5c <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2202      	movs	r2, #2
 800ca14:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2200      	movs	r2, #0
 800ca34:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2200      	movs	r2, #0
 800ca48:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2200      	movs	r2, #0
 800ca58:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 800ca5c:	4b0a      	ldr	r3, [pc, #40]	; (800ca88 <DFU_Detach+0xbc>)
 800ca5e:	7d5b      	ldrb	r3, [r3, #21]
 800ca60:	f003 0310 	and.w	r3, r3, #16
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d006      	beq.n	800ca76 <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    USBD_Stop(pdev);
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f000 fb54 	bl	800d116 <USBD_Stop>
    USBD_Start(pdev);
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 fb45 	bl	800d0fe <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 800ca74:	e004      	b.n	800ca80 <DFU_Detach+0xb4>
    USBD_Delay((uint32_t)req->wValue);
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	885b      	ldrh	r3, [r3, #2]
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7f5 fd3a 	bl	80024f4 <HAL_Delay>
}
 800ca80:	bf00      	nop
 800ca82:	3710      	adds	r7, #16
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	20000050 	.word	0x20000050

0800ca8c <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b084      	sub	sp, #16
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca9c:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	88db      	ldrh	r3, [r3, #6]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d02e      	beq.n	800cb04 <DFU_Download+0x78>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800caac:	2b02      	cmp	r3, #2
 800caae:	d004      	beq.n	800caba <DFU_Download+0x2e>
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800cab6:	2b05      	cmp	r3, #5
 800cab8:	d11f      	bne.n	800cafa <DFU_Download+0x6e>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	885b      	ldrh	r3, [r3, #2]
 800cabe:	461a      	mov	r2, r3
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	88db      	ldrh	r3, [r3, #6]
 800caca:	461a      	mov	r2, r3
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2203      	movs	r2, #3
 800cad6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 800cae6:	68f9      	ldr	r1, [r7, #12]
                        (uint16_t)hdfu->wlength);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 800caee:	b29b      	uxth	r3, r3
 800caf0:	461a      	mov	r2, r3
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f001 fb31 	bl	800e15a <USBD_CtlPrepareRx>
 800caf8:	e02e      	b.n	800cb58 <DFU_Download+0xcc>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 800cafa:	6839      	ldr	r1, [r7, #0]
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f001 fa93 	bl	800e028 <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 800cb02:	e029      	b.n	800cb58 <DFU_Download+0xcc>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800cb0a:	2b05      	cmp	r3, #5
 800cb0c:	d004      	beq.n	800cb18 <DFU_Download+0x8c>
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800cb14:	2b02      	cmp	r3, #2
 800cb16:	d11a      	bne.n	800cb4e <DFU_Download+0xc2>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2206      	movs	r2, #6
 800cb24:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2200      	movs	r2, #0
 800cb34:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800cb4c:	e004      	b.n	800cb58 <DFU_Download+0xcc>
      USBD_CtlError(pdev, req);
 800cb4e:	6839      	ldr	r1, [r7, #0]
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f001 fa69 	bl	800e028 <USBD_CtlError>
}
 800cb56:	e7ff      	b.n	800cb58 <DFU_Download+0xcc>
 800cb58:	bf00      	nop
 800cb5a:	3710      	adds	r7, #16
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b086      	sub	sp, #24
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb70:	617b      	str	r3, [r7, #20]

  uint8_t *phaddr = NULL;
 800cb72:	2300      	movs	r3, #0
 800cb74:	613b      	str	r3, [r7, #16]
  uint32_t addr = 0U;
 800cb76:	2300      	movs	r3, #0
 800cb78:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	88db      	ldrh	r3, [r3, #6]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	f000 80ab 	beq.w	800ccda <DFU_Upload+0x17a>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800cb8a:	2b02      	cmp	r3, #2
 800cb8c:	d005      	beq.n	800cb9a <DFU_Upload+0x3a>
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800cb94:	2b09      	cmp	r3, #9
 800cb96:	f040 8093 	bne.w	800ccc0 <DFU_Upload+0x160>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	885b      	ldrh	r3, [r3, #2]
 800cb9e:	461a      	mov	r2, r3
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	88db      	ldrh	r3, [r3, #6]
 800cbaa:	461a      	mov	r2, r3
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d12c      	bne.n	800cc16 <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cbc2:	2b03      	cmp	r3, #3
 800cbc4:	d901      	bls.n	800cbca <DFU_Upload+0x6a>
 800cbc6:	2202      	movs	r2, #2
 800cbc8:	e000      	b.n	800cbcc <DFU_Upload+0x6c>
 800cbca:	2209      	movs	r2, #9
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	2221      	movs	r2, #33	; 0x21
 800cc00:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	2241      	movs	r2, #65	; 0x41
 800cc06:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	2203      	movs	r2, #3
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f001 fa75 	bl	800e0fe <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800cc14:	e078      	b.n	800cd08 <DFU_Upload+0x1a8>
      }
      else if (hdfu->wblock_num > 1U)
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d934      	bls.n	800cc8a <DFU_Upload+0x12a>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	2209      	movs	r2, #9
 800cc24:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	2200      	movs	r2, #0
 800cc34:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800cc52:	3b02      	subs	r3, #2
 800cc54:	029a      	lsls	r2, r3, #10
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800cc5c:	4413      	add	r3, r2
 800cc5e:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc66:	695b      	ldr	r3, [r3, #20]
 800cc68:	68f8      	ldr	r0, [r7, #12]
 800cc6a:	6979      	ldr	r1, [r7, #20]
 800cc6c:	697a      	ldr	r2, [r7, #20]
 800cc6e:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800cc72:	4798      	blx	r3
 800cc74:	6138      	str	r0, [r7, #16]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	461a      	mov	r2, r3
 800cc80:	6939      	ldr	r1, [r7, #16]
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f001 fa3b 	bl	800e0fe <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800cc88:	e03e      	b.n	800cd08 <DFU_Upload+0x1a8>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	220f      	movs	r2, #15
 800cc8e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	2200      	movs	r2, #0
 800cc96:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	2200      	movs	r2, #0
 800cca6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 800ccb6:	6839      	ldr	r1, [r7, #0]
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f001 f9b5 	bl	800e028 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800ccbe:	e023      	b.n	800cd08 <DFU_Upload+0x1a8>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	2200      	movs	r2, #0
 800cccc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 800ccd0:	6839      	ldr	r1, [r7, #0]
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f001 f9a8 	bl	800e028 <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 800ccd8:	e016      	b.n	800cd08 <DFU_Upload+0x1a8>
    hdfu->dev_state = DFU_STATE_IDLE;
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	2202      	movs	r2, #2
 800ccde:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	2200      	movs	r2, #0
 800cce6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	2200      	movs	r2, #0
 800ccee:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 800cd06:	e7ff      	b.n	800cd08 <DFU_Upload+0x1a8>
 800cd08:	bf00      	nop
 800cd0a:	3718      	adds	r7, #24
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b084      	sub	sp, #16
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd1e:	60fb      	str	r3, [r7, #12]

  switch (hdfu->dev_state)
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800cd26:	2b03      	cmp	r3, #3
 800cd28:	d002      	beq.n	800cd30 <DFU_GetStatus+0x20>
 800cd2a:	2b06      	cmp	r3, #6
 800cd2c:	d055      	beq.n	800cdda <DFU_GetStatus+0xca>
        }
      }
      break;

    default :
      break;
 800cd2e:	e092      	b.n	800ce56 <DFU_GetStatus+0x146>
      if (hdfu->wlength != 0U)
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d038      	beq.n	800cdac <DFU_GetStatus+0x9c>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2204      	movs	r2, #4
 800cd3e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2200      	movs	r2, #0
 800cd46:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	2200      	movs	r2, #0
 800cd56:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d110      	bne.n	800cd92 <DFU_GetStatus+0x82>
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	2b41      	cmp	r3, #65	; 0x41
 800cd76:	d10c      	bne.n	800cd92 <DFU_GetStatus+0x82>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd7e:	699b      	ldr	r3, [r3, #24]
 800cd80:	68fa      	ldr	r2, [r7, #12]
 800cd82:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800cd86:	68fa      	ldr	r2, [r7, #12]
 800cd88:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800cd8c:	2100      	movs	r1, #0
 800cd8e:	4798      	blx	r3
      break;
 800cd90:	e061      	b.n	800ce56 <DFU_GetStatus+0x146>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd98:	699b      	ldr	r3, [r3, #24]
 800cd9a:	68fa      	ldr	r2, [r7, #12]
 800cd9c:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800cda0:	68fa      	ldr	r2, [r7, #12]
 800cda2:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800cda6:	2101      	movs	r1, #1
 800cda8:	4798      	blx	r3
      break;
 800cdaa:	e054      	b.n	800ce56 <DFU_GetStatus+0x146>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2205      	movs	r2, #5
 800cdb0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 800cdd8:	e03d      	b.n	800ce56 <DFU_GetStatus+0x146>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d116      	bne.n	800ce12 <DFU_GetStatus+0x102>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2207      	movs	r2, #7
 800cde8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 800ce10:	e020      	b.n	800ce54 <DFU_GetStatus+0x144>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d11b      	bne.n	800ce54 <DFU_GetStatus+0x144>
            ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U))
 800ce1c:	4b14      	ldr	r3, [pc, #80]	; (800ce70 <DFU_GetStatus+0x160>)
 800ce1e:	7d1b      	ldrb	r3, [r3, #20]
 800ce20:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d015      	beq.n	800ce54 <DFU_GetStatus+0x144>
          hdfu->dev_state = DFU_STATE_IDLE;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2202      	movs	r2, #2
 800ce2c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2200      	movs	r2, #0
 800ce34:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2200      	movs	r2, #0
 800ce44:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 800ce54:	bf00      	nop
  }

  /* Send the status data over EP0 */
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800ce5c:	2206      	movs	r2, #6
 800ce5e:	4619      	mov	r1, r3
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f001 f94c 	bl	800e0fe <USBD_CtlSendData>
}
 800ce66:	bf00      	nop
 800ce68:	3710      	adds	r7, #16
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	20000050 	.word	0x20000050

0800ce74 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b085      	sub	sp, #20
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce82:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800ce8a:	2b0a      	cmp	r3, #10
 800ce8c:	d11e      	bne.n	800cecc <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2202      	movs	r2, #2
 800ce92:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2200      	movs	r2, #0
 800cea2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2200      	movs	r2, #0
 800cec6:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
    hdfu->dev_status[5] = 0U;/*iString*/
  }
}
 800ceca:	e01d      	b.n	800cf08 <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	220a      	movs	r2, #10
 800ced0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	220e      	movs	r2, #14
 800ced8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2200      	movs	r2, #0
 800cee0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2200      	movs	r2, #0
 800cee8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2200      	movs	r2, #0
 800cef0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2200      	movs	r2, #0
 800cf04:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 800cf08:	bf00      	nop
 800cf0a:	3714      	adds	r7, #20
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr

0800cf14 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf22:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	4619      	mov	r1, r3
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f001 f8e5 	bl	800e0fe <USBD_CtlSendData>
}
 800cf34:	bf00      	nop
 800cf36:	3710      	adds	r7, #16
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf4a:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800cf52:	2b02      	cmp	r3, #2
 800cf54:	d013      	beq.n	800cf7e <DFU_Abort+0x42>
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800cf5c:	2b03      	cmp	r3, #3
 800cf5e:	d00e      	beq.n	800cf7e <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800cf66:	2b05      	cmp	r3, #5
 800cf68:	d009      	beq.n	800cf7e <DFU_Abort+0x42>
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800cf70:	2b06      	cmp	r3, #6
 800cf72:	d004      	beq.n	800cf7e <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800cf7a:	2b09      	cmp	r3, #9
 800cf7c:	d125      	bne.n	800cfca <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2202      	movs	r2, #2
 800cf82:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	2200      	movs	r2, #0
 800cf92:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 800cfca:	bf00      	nop
 800cfcc:	3714      	adds	r7, #20
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd4:	4770      	bx	lr
	...

0800cfd8 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfe6:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2200      	movs	r2, #0
 800cfec:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 800cff0:	4b1f      	ldr	r3, [pc, #124]	; (800d070 <DFU_Leave+0x98>)
 800cff2:	7d1b      	ldrb	r3, [r3, #20]
 800cff4:	f003 0304 	and.w	r3, r3, #4
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d016      	beq.n	800d02a <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2206      	movs	r2, #6
 800d000:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2200      	movs	r2, #0
 800d008:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2200      	movs	r2, #0
 800d010:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2200      	movs	r2, #0
 800d018:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 800d028:	e01f      	b.n	800d06a <DFU_Leave+0x92>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2208      	movs	r2, #8
 800d02e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2200      	movs	r2, #0
 800d036:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2200      	movs	r2, #0
 800d03e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2200      	movs	r2, #0
 800d046:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    USBD_Stop(pdev);
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 f85d 	bl	800d116 <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	4798      	blx	r3

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 800d066:	f7ff f9a1 	bl	800c3ac <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 800d06a:	3710      	adds	r7, #16
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	20000050 	.word	0x20000050

0800d074 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b084      	sub	sp, #16
 800d078:	af00      	add	r7, sp, #0
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	60b9      	str	r1, [r7, #8]
 800d07e:	4613      	mov	r3, r2
 800d080:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d101      	bne.n	800d08c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d088:	2302      	movs	r3, #2
 800d08a:	e01a      	b.n	800d0c2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d092:	2b00      	cmp	r3, #0
 800d094:	d003      	beq.n	800d09e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2200      	movs	r2, #0
 800d09a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d003      	beq.n	800d0ac <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	68ba      	ldr	r2, [r7, #8]
 800d0a8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	79fa      	ldrb	r2, [r7, #7]
 800d0b8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d0ba:	68f8      	ldr	r0, [r7, #12]
 800d0bc:	f001 faec 	bl	800e698 <USBD_LL_Init>

  return USBD_OK;
 800d0c0:	2300      	movs	r3, #0
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3710      	adds	r7, #16
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}

0800d0ca <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d0ca:	b480      	push	{r7}
 800d0cc:	b085      	sub	sp, #20
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]
 800d0d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d006      	beq.n	800d0ec <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	683a      	ldr	r2, [r7, #0]
 800d0e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	73fb      	strb	r3, [r7, #15]
 800d0ea:	e001      	b.n	800d0f0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d0ec:	2302      	movs	r3, #2
 800d0ee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3714      	adds	r7, #20
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr

0800d0fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d0fe:	b580      	push	{r7, lr}
 800d100:	b082      	sub	sp, #8
 800d102:	af00      	add	r7, sp, #0
 800d104:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f001 fb08 	bl	800e71c <USBD_LL_Start>

  return USBD_OK;
 800d10c:	2300      	movs	r3, #0
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3708      	adds	r7, #8
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}

0800d116 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800d116:	b580      	push	{r7, lr}
 800d118:	b082      	sub	sp, #8
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d124:	685b      	ldr	r3, [r3, #4]
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	6852      	ldr	r2, [r2, #4]
 800d12a:	b2d2      	uxtb	r2, r2
 800d12c:	4611      	mov	r1, r2
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f001 fb0d 	bl	800e752 <USBD_LL_Stop>

  return USBD_OK;
 800d138:	2300      	movs	r3, #0
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3708      	adds	r7, #8
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}

0800d142 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d142:	b480      	push	{r7}
 800d144:	b083      	sub	sp, #12
 800d146:	af00      	add	r7, sp, #0
 800d148:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d14a:	2300      	movs	r3, #0
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	370c      	adds	r7, #12
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr

0800d158 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b084      	sub	sp, #16
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	460b      	mov	r3, r1
 800d162:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d164:	2302      	movs	r3, #2
 800d166:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d00c      	beq.n	800d18c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	78fa      	ldrb	r2, [r7, #3]
 800d17c:	4611      	mov	r1, r2
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	4798      	blx	r3
 800d182:	4603      	mov	r3, r0
 800d184:	2b00      	cmp	r3, #0
 800d186:	d101      	bne.n	800d18c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800d188:	2300      	movs	r3, #0
 800d18a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3710      	adds	r7, #16
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}

0800d196 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d196:	b580      	push	{r7, lr}
 800d198:	b082      	sub	sp, #8
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	6078      	str	r0, [r7, #4]
 800d19e:	460b      	mov	r3, r1
 800d1a0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	78fa      	ldrb	r2, [r7, #3]
 800d1ac:	4611      	mov	r1, r2
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	4798      	blx	r3

  return USBD_OK;
 800d1b2:	2300      	movs	r3, #0
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3708      	adds	r7, #8
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d1cc:	6839      	ldr	r1, [r7, #0]
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f000 feed 	bl	800dfae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d1f0:	f003 031f 	and.w	r3, r3, #31
 800d1f4:	2b02      	cmp	r3, #2
 800d1f6:	d016      	beq.n	800d226 <USBD_LL_SetupStage+0x6a>
 800d1f8:	2b02      	cmp	r3, #2
 800d1fa:	d81c      	bhi.n	800d236 <USBD_LL_SetupStage+0x7a>
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d002      	beq.n	800d206 <USBD_LL_SetupStage+0x4a>
 800d200:	2b01      	cmp	r3, #1
 800d202:	d008      	beq.n	800d216 <USBD_LL_SetupStage+0x5a>
 800d204:	e017      	b.n	800d236 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d20c:	4619      	mov	r1, r3
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 f9ce 	bl	800d5b0 <USBD_StdDevReq>
      break;
 800d214:	e01a      	b.n	800d24c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d21c:	4619      	mov	r1, r3
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f000 fa30 	bl	800d684 <USBD_StdItfReq>
      break;
 800d224:	e012      	b.n	800d24c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d22c:	4619      	mov	r1, r3
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f000 fa70 	bl	800d714 <USBD_StdEPReq>
      break;
 800d234:	e00a      	b.n	800d24c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d23c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d240:	b2db      	uxtb	r3, r3
 800d242:	4619      	mov	r1, r3
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f001 fac5 	bl	800e7d4 <USBD_LL_StallEP>
      break;
 800d24a:	bf00      	nop
  }

  return USBD_OK;
 800d24c:	2300      	movs	r3, #0
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3708      	adds	r7, #8
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}

0800d256 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d256:	b580      	push	{r7, lr}
 800d258:	b086      	sub	sp, #24
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	60f8      	str	r0, [r7, #12]
 800d25e:	460b      	mov	r3, r1
 800d260:	607a      	str	r2, [r7, #4]
 800d262:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d264:	7afb      	ldrb	r3, [r7, #11]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d14b      	bne.n	800d302 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d270:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d278:	2b03      	cmp	r3, #3
 800d27a:	d134      	bne.n	800d2e6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	68da      	ldr	r2, [r3, #12]
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	691b      	ldr	r3, [r3, #16]
 800d284:	429a      	cmp	r2, r3
 800d286:	d919      	bls.n	800d2bc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	68da      	ldr	r2, [r3, #12]
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	691b      	ldr	r3, [r3, #16]
 800d290:	1ad2      	subs	r2, r2, r3
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	68da      	ldr	r2, [r3, #12]
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d203      	bcs.n	800d2aa <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	e002      	b.n	800d2b0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	6879      	ldr	r1, [r7, #4]
 800d2b4:	68f8      	ldr	r0, [r7, #12]
 800d2b6:	f000 ff6e 	bl	800e196 <USBD_CtlContinueRx>
 800d2ba:	e038      	b.n	800d32e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d2c2:	691b      	ldr	r3, [r3, #16]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d00a      	beq.n	800d2de <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d2ce:	2b03      	cmp	r3, #3
 800d2d0:	d105      	bne.n	800d2de <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d2d8:	691b      	ldr	r3, [r3, #16]
 800d2da:	68f8      	ldr	r0, [r7, #12]
 800d2dc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d2de:	68f8      	ldr	r0, [r7, #12]
 800d2e0:	f000 ff6b 	bl	800e1ba <USBD_CtlSendStatus>
 800d2e4:	e023      	b.n	800d32e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d2ec:	2b05      	cmp	r3, #5
 800d2ee:	d11e      	bne.n	800d32e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	68f8      	ldr	r0, [r7, #12]
 800d2fc:	f001 fa6a 	bl	800e7d4 <USBD_LL_StallEP>
 800d300:	e015      	b.n	800d32e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d308:	699b      	ldr	r3, [r3, #24]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d00d      	beq.n	800d32a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800d314:	2b03      	cmp	r3, #3
 800d316:	d108      	bne.n	800d32a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d31e:	699b      	ldr	r3, [r3, #24]
 800d320:	7afa      	ldrb	r2, [r7, #11]
 800d322:	4611      	mov	r1, r2
 800d324:	68f8      	ldr	r0, [r7, #12]
 800d326:	4798      	blx	r3
 800d328:	e001      	b.n	800d32e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d32a:	2302      	movs	r3, #2
 800d32c:	e000      	b.n	800d330 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800d32e:	2300      	movs	r3, #0
}
 800d330:	4618      	mov	r0, r3
 800d332:	3718      	adds	r7, #24
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b086      	sub	sp, #24
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	60f8      	str	r0, [r7, #12]
 800d340:	460b      	mov	r3, r1
 800d342:	607a      	str	r2, [r7, #4]
 800d344:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d346:	7afb      	ldrb	r3, [r7, #11]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d17f      	bne.n	800d44c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	3314      	adds	r3, #20
 800d350:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d358:	2b02      	cmp	r3, #2
 800d35a:	d15c      	bne.n	800d416 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	68da      	ldr	r2, [r3, #12]
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	691b      	ldr	r3, [r3, #16]
 800d364:	429a      	cmp	r2, r3
 800d366:	d915      	bls.n	800d394 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	68da      	ldr	r2, [r3, #12]
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	691b      	ldr	r3, [r3, #16]
 800d370:	1ad2      	subs	r2, r2, r3
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	68db      	ldr	r3, [r3, #12]
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	461a      	mov	r2, r3
 800d37e:	6879      	ldr	r1, [r7, #4]
 800d380:	68f8      	ldr	r0, [r7, #12]
 800d382:	f000 fed8 	bl	800e136 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d386:	2300      	movs	r3, #0
 800d388:	2200      	movs	r2, #0
 800d38a:	2100      	movs	r1, #0
 800d38c:	68f8      	ldr	r0, [r7, #12]
 800d38e:	f001 face 	bl	800e92e <USBD_LL_PrepareReceive>
 800d392:	e04e      	b.n	800d432 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	689b      	ldr	r3, [r3, #8]
 800d398:	697a      	ldr	r2, [r7, #20]
 800d39a:	6912      	ldr	r2, [r2, #16]
 800d39c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d3a0:	fb01 f202 	mul.w	r2, r1, r2
 800d3a4:	1a9b      	subs	r3, r3, r2
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d11c      	bne.n	800d3e4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	689a      	ldr	r2, [r3, #8]
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d316      	bcc.n	800d3e4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	689a      	ldr	r2, [r3, #8]
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d20f      	bcs.n	800d3e4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	2100      	movs	r1, #0
 800d3c8:	68f8      	ldr	r0, [r7, #12]
 800d3ca:	f000 feb4 	bl	800e136 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	2200      	movs	r2, #0
 800d3da:	2100      	movs	r1, #0
 800d3dc:	68f8      	ldr	r0, [r7, #12]
 800d3de:	f001 faa6 	bl	800e92e <USBD_LL_PrepareReceive>
 800d3e2:	e026      	b.n	800d432 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3ea:	68db      	ldr	r3, [r3, #12]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00a      	beq.n	800d406 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d3f6:	2b03      	cmp	r3, #3
 800d3f8:	d105      	bne.n	800d406 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d400:	68db      	ldr	r3, [r3, #12]
 800d402:	68f8      	ldr	r0, [r7, #12]
 800d404:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d406:	2180      	movs	r1, #128	; 0x80
 800d408:	68f8      	ldr	r0, [r7, #12]
 800d40a:	f001 f9e3 	bl	800e7d4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800d40e:	68f8      	ldr	r0, [r7, #12]
 800d410:	f000 fee6 	bl	800e1e0 <USBD_CtlReceiveStatus>
 800d414:	e00d      	b.n	800d432 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d41c:	2b04      	cmp	r3, #4
 800d41e:	d004      	beq.n	800d42a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d426:	2b00      	cmp	r3, #0
 800d428:	d103      	bne.n	800d432 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800d42a:	2180      	movs	r1, #128	; 0x80
 800d42c:	68f8      	ldr	r0, [r7, #12]
 800d42e:	f001 f9d1 	bl	800e7d4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d11d      	bne.n	800d478 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800d43c:	68f8      	ldr	r0, [r7, #12]
 800d43e:	f7ff fe80 	bl	800d142 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2200      	movs	r2, #0
 800d446:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d44a:	e015      	b.n	800d478 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d452:	695b      	ldr	r3, [r3, #20]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d00d      	beq.n	800d474 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800d45e:	2b03      	cmp	r3, #3
 800d460:	d108      	bne.n	800d474 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d468:	695b      	ldr	r3, [r3, #20]
 800d46a:	7afa      	ldrb	r2, [r7, #11]
 800d46c:	4611      	mov	r1, r2
 800d46e:	68f8      	ldr	r0, [r7, #12]
 800d470:	4798      	blx	r3
 800d472:	e001      	b.n	800d478 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d474:	2302      	movs	r3, #2
 800d476:	e000      	b.n	800d47a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800d478:	2300      	movs	r3, #0
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3718      	adds	r7, #24
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}

0800d482 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d482:	b580      	push	{r7, lr}
 800d484:	b082      	sub	sp, #8
 800d486:	af00      	add	r7, sp, #0
 800d488:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d48a:	2340      	movs	r3, #64	; 0x40
 800d48c:	2200      	movs	r2, #0
 800d48e:	2100      	movs	r1, #0
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f001 f979 	bl	800e788 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2201      	movs	r2, #1
 800d49a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2240      	movs	r2, #64	; 0x40
 800d4a2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d4a6:	2340      	movs	r3, #64	; 0x40
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	2180      	movs	r1, #128	; 0x80
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f001 f96b 	bl	800e788 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2240      	movs	r2, #64	; 0x40
 800d4bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d009      	beq.n	800d4fa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	6852      	ldr	r2, [r2, #4]
 800d4f2:	b2d2      	uxtb	r2, r2
 800d4f4:	4611      	mov	r1, r2
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	4798      	blx	r3
  }

  return USBD_OK;
 800d4fa:	2300      	movs	r3, #0
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3708      	adds	r7, #8
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}

0800d504 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	460b      	mov	r3, r1
 800d50e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	78fa      	ldrb	r2, [r7, #3]
 800d514:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d516:	2300      	movs	r3, #0
}
 800d518:	4618      	mov	r0, r3
 800d51a:	370c      	adds	r7, #12
 800d51c:	46bd      	mov	sp, r7
 800d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d522:	4770      	bx	lr

0800d524 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2204      	movs	r2, #4
 800d53c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d540:	2300      	movs	r3, #0
}
 800d542:	4618      	mov	r0, r3
 800d544:	370c      	adds	r7, #12
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr

0800d54e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d54e:	b480      	push	{r7}
 800d550:	b083      	sub	sp, #12
 800d552:	af00      	add	r7, sp, #0
 800d554:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d55c:	2b04      	cmp	r3, #4
 800d55e:	d105      	bne.n	800d56c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d56c:	2300      	movs	r3, #0
}
 800d56e:	4618      	mov	r0, r3
 800d570:	370c      	adds	r7, #12
 800d572:	46bd      	mov	sp, r7
 800d574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d578:	4770      	bx	lr

0800d57a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d57a:	b580      	push	{r7, lr}
 800d57c:	b082      	sub	sp, #8
 800d57e:	af00      	add	r7, sp, #0
 800d580:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d588:	2b03      	cmp	r3, #3
 800d58a:	d10b      	bne.n	800d5a4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d592:	69db      	ldr	r3, [r3, #28]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d005      	beq.n	800d5a4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d59e:	69db      	ldr	r3, [r3, #28]
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d5a4:	2300      	movs	r3, #0
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3708      	adds	r7, #8
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}
	...

0800d5b0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d5c6:	2b40      	cmp	r3, #64	; 0x40
 800d5c8:	d005      	beq.n	800d5d6 <USBD_StdDevReq+0x26>
 800d5ca:	2b40      	cmp	r3, #64	; 0x40
 800d5cc:	d84f      	bhi.n	800d66e <USBD_StdDevReq+0xbe>
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d009      	beq.n	800d5e6 <USBD_StdDevReq+0x36>
 800d5d2:	2b20      	cmp	r3, #32
 800d5d4:	d14b      	bne.n	800d66e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5dc:	689b      	ldr	r3, [r3, #8]
 800d5de:	6839      	ldr	r1, [r7, #0]
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	4798      	blx	r3
      break;
 800d5e4:	e048      	b.n	800d678 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	785b      	ldrb	r3, [r3, #1]
 800d5ea:	2b09      	cmp	r3, #9
 800d5ec:	d839      	bhi.n	800d662 <USBD_StdDevReq+0xb2>
 800d5ee:	a201      	add	r2, pc, #4	; (adr r2, 800d5f4 <USBD_StdDevReq+0x44>)
 800d5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5f4:	0800d645 	.word	0x0800d645
 800d5f8:	0800d659 	.word	0x0800d659
 800d5fc:	0800d663 	.word	0x0800d663
 800d600:	0800d64f 	.word	0x0800d64f
 800d604:	0800d663 	.word	0x0800d663
 800d608:	0800d627 	.word	0x0800d627
 800d60c:	0800d61d 	.word	0x0800d61d
 800d610:	0800d663 	.word	0x0800d663
 800d614:	0800d63b 	.word	0x0800d63b
 800d618:	0800d631 	.word	0x0800d631
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d61c:	6839      	ldr	r1, [r7, #0]
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 f9dc 	bl	800d9dc <USBD_GetDescriptor>
          break;
 800d624:	e022      	b.n	800d66c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d626:	6839      	ldr	r1, [r7, #0]
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f000 fb51 	bl	800dcd0 <USBD_SetAddress>
          break;
 800d62e:	e01d      	b.n	800d66c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800d630:	6839      	ldr	r1, [r7, #0]
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f000 fb90 	bl	800dd58 <USBD_SetConfig>
          break;
 800d638:	e018      	b.n	800d66c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d63a:	6839      	ldr	r1, [r7, #0]
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f000 fc19 	bl	800de74 <USBD_GetConfig>
          break;
 800d642:	e013      	b.n	800d66c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d644:	6839      	ldr	r1, [r7, #0]
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 fc49 	bl	800dede <USBD_GetStatus>
          break;
 800d64c:	e00e      	b.n	800d66c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d64e:	6839      	ldr	r1, [r7, #0]
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 fc77 	bl	800df44 <USBD_SetFeature>
          break;
 800d656:	e009      	b.n	800d66c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d658:	6839      	ldr	r1, [r7, #0]
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 fc86 	bl	800df6c <USBD_ClrFeature>
          break;
 800d660:	e004      	b.n	800d66c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800d662:	6839      	ldr	r1, [r7, #0]
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f000 fcdf 	bl	800e028 <USBD_CtlError>
          break;
 800d66a:	bf00      	nop
      }
      break;
 800d66c:	e004      	b.n	800d678 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800d66e:	6839      	ldr	r1, [r7, #0]
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f000 fcd9 	bl	800e028 <USBD_CtlError>
      break;
 800d676:	bf00      	nop
  }

  return ret;
 800d678:	7bfb      	ldrb	r3, [r7, #15]
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3710      	adds	r7, #16
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop

0800d684 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b084      	sub	sp, #16
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d68e:	2300      	movs	r3, #0
 800d690:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d69a:	2b40      	cmp	r3, #64	; 0x40
 800d69c:	d005      	beq.n	800d6aa <USBD_StdItfReq+0x26>
 800d69e:	2b40      	cmp	r3, #64	; 0x40
 800d6a0:	d82e      	bhi.n	800d700 <USBD_StdItfReq+0x7c>
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d001      	beq.n	800d6aa <USBD_StdItfReq+0x26>
 800d6a6:	2b20      	cmp	r3, #32
 800d6a8:	d12a      	bne.n	800d700 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6b0:	3b01      	subs	r3, #1
 800d6b2:	2b02      	cmp	r3, #2
 800d6b4:	d81d      	bhi.n	800d6f2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	889b      	ldrh	r3, [r3, #4]
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d813      	bhi.n	800d6e8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6c6:	689b      	ldr	r3, [r3, #8]
 800d6c8:	6839      	ldr	r1, [r7, #0]
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	4798      	blx	r3
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	88db      	ldrh	r3, [r3, #6]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d110      	bne.n	800d6fc <USBD_StdItfReq+0x78>
 800d6da:	7bfb      	ldrb	r3, [r7, #15]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d10d      	bne.n	800d6fc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f000 fd6a 	bl	800e1ba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d6e6:	e009      	b.n	800d6fc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800d6e8:	6839      	ldr	r1, [r7, #0]
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 fc9c 	bl	800e028 <USBD_CtlError>
          break;
 800d6f0:	e004      	b.n	800d6fc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800d6f2:	6839      	ldr	r1, [r7, #0]
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 fc97 	bl	800e028 <USBD_CtlError>
          break;
 800d6fa:	e000      	b.n	800d6fe <USBD_StdItfReq+0x7a>
          break;
 800d6fc:	bf00      	nop
      }
      break;
 800d6fe:	e004      	b.n	800d70a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800d700:	6839      	ldr	r1, [r7, #0]
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f000 fc90 	bl	800e028 <USBD_CtlError>
      break;
 800d708:	bf00      	nop
  }

  return USBD_OK;
 800d70a:	2300      	movs	r3, #0
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3710      	adds	r7, #16
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d71e:	2300      	movs	r3, #0
 800d720:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	889b      	ldrh	r3, [r3, #4]
 800d726:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d730:	2b40      	cmp	r3, #64	; 0x40
 800d732:	d007      	beq.n	800d744 <USBD_StdEPReq+0x30>
 800d734:	2b40      	cmp	r3, #64	; 0x40
 800d736:	f200 8146 	bhi.w	800d9c6 <USBD_StdEPReq+0x2b2>
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d00a      	beq.n	800d754 <USBD_StdEPReq+0x40>
 800d73e:	2b20      	cmp	r3, #32
 800d740:	f040 8141 	bne.w	800d9c6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d74a:	689b      	ldr	r3, [r3, #8]
 800d74c:	6839      	ldr	r1, [r7, #0]
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	4798      	blx	r3
      break;
 800d752:	e13d      	b.n	800d9d0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d75c:	2b20      	cmp	r3, #32
 800d75e:	d10a      	bne.n	800d776 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d766:	689b      	ldr	r3, [r3, #8]
 800d768:	6839      	ldr	r1, [r7, #0]
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	4798      	blx	r3
 800d76e:	4603      	mov	r3, r0
 800d770:	73fb      	strb	r3, [r7, #15]

        return ret;
 800d772:	7bfb      	ldrb	r3, [r7, #15]
 800d774:	e12d      	b.n	800d9d2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	785b      	ldrb	r3, [r3, #1]
 800d77a:	2b03      	cmp	r3, #3
 800d77c:	d007      	beq.n	800d78e <USBD_StdEPReq+0x7a>
 800d77e:	2b03      	cmp	r3, #3
 800d780:	f300 811b 	bgt.w	800d9ba <USBD_StdEPReq+0x2a6>
 800d784:	2b00      	cmp	r3, #0
 800d786:	d072      	beq.n	800d86e <USBD_StdEPReq+0x15a>
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d03a      	beq.n	800d802 <USBD_StdEPReq+0xee>
 800d78c:	e115      	b.n	800d9ba <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d794:	2b02      	cmp	r3, #2
 800d796:	d002      	beq.n	800d79e <USBD_StdEPReq+0x8a>
 800d798:	2b03      	cmp	r3, #3
 800d79a:	d015      	beq.n	800d7c8 <USBD_StdEPReq+0xb4>
 800d79c:	e02b      	b.n	800d7f6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d79e:	7bbb      	ldrb	r3, [r7, #14]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d00c      	beq.n	800d7be <USBD_StdEPReq+0xaa>
 800d7a4:	7bbb      	ldrb	r3, [r7, #14]
 800d7a6:	2b80      	cmp	r3, #128	; 0x80
 800d7a8:	d009      	beq.n	800d7be <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d7aa:	7bbb      	ldrb	r3, [r7, #14]
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f001 f810 	bl	800e7d4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d7b4:	2180      	movs	r1, #128	; 0x80
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f001 f80c 	bl	800e7d4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d7bc:	e020      	b.n	800d800 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800d7be:	6839      	ldr	r1, [r7, #0]
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f000 fc31 	bl	800e028 <USBD_CtlError>
              break;
 800d7c6:	e01b      	b.n	800d800 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	885b      	ldrh	r3, [r3, #2]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d10e      	bne.n	800d7ee <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800d7d0:	7bbb      	ldrb	r3, [r7, #14]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d00b      	beq.n	800d7ee <USBD_StdEPReq+0xda>
 800d7d6:	7bbb      	ldrb	r3, [r7, #14]
 800d7d8:	2b80      	cmp	r3, #128	; 0x80
 800d7da:	d008      	beq.n	800d7ee <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	88db      	ldrh	r3, [r3, #6]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d104      	bne.n	800d7ee <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800d7e4:	7bbb      	ldrb	r3, [r7, #14]
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f000 fff3 	bl	800e7d4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f000 fce3 	bl	800e1ba <USBD_CtlSendStatus>

              break;
 800d7f4:	e004      	b.n	800d800 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800d7f6:	6839      	ldr	r1, [r7, #0]
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 fc15 	bl	800e028 <USBD_CtlError>
              break;
 800d7fe:	bf00      	nop
          }
          break;
 800d800:	e0e0      	b.n	800d9c4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d808:	2b02      	cmp	r3, #2
 800d80a:	d002      	beq.n	800d812 <USBD_StdEPReq+0xfe>
 800d80c:	2b03      	cmp	r3, #3
 800d80e:	d015      	beq.n	800d83c <USBD_StdEPReq+0x128>
 800d810:	e026      	b.n	800d860 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d812:	7bbb      	ldrb	r3, [r7, #14]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d00c      	beq.n	800d832 <USBD_StdEPReq+0x11e>
 800d818:	7bbb      	ldrb	r3, [r7, #14]
 800d81a:	2b80      	cmp	r3, #128	; 0x80
 800d81c:	d009      	beq.n	800d832 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d81e:	7bbb      	ldrb	r3, [r7, #14]
 800d820:	4619      	mov	r1, r3
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f000 ffd6 	bl	800e7d4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d828:	2180      	movs	r1, #128	; 0x80
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f000 ffd2 	bl	800e7d4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d830:	e01c      	b.n	800d86c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800d832:	6839      	ldr	r1, [r7, #0]
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f000 fbf7 	bl	800e028 <USBD_CtlError>
              break;
 800d83a:	e017      	b.n	800d86c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	885b      	ldrh	r3, [r3, #2]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d112      	bne.n	800d86a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d844:	7bbb      	ldrb	r3, [r7, #14]
 800d846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d004      	beq.n	800d858 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800d84e:	7bbb      	ldrb	r3, [r7, #14]
 800d850:	4619      	mov	r1, r3
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f000 ffdd 	bl	800e812 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f000 fcae 	bl	800e1ba <USBD_CtlSendStatus>
              }
              break;
 800d85e:	e004      	b.n	800d86a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800d860:	6839      	ldr	r1, [r7, #0]
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f000 fbe0 	bl	800e028 <USBD_CtlError>
              break;
 800d868:	e000      	b.n	800d86c <USBD_StdEPReq+0x158>
              break;
 800d86a:	bf00      	nop
          }
          break;
 800d86c:	e0aa      	b.n	800d9c4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d874:	2b02      	cmp	r3, #2
 800d876:	d002      	beq.n	800d87e <USBD_StdEPReq+0x16a>
 800d878:	2b03      	cmp	r3, #3
 800d87a:	d032      	beq.n	800d8e2 <USBD_StdEPReq+0x1ce>
 800d87c:	e097      	b.n	800d9ae <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d87e:	7bbb      	ldrb	r3, [r7, #14]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d007      	beq.n	800d894 <USBD_StdEPReq+0x180>
 800d884:	7bbb      	ldrb	r3, [r7, #14]
 800d886:	2b80      	cmp	r3, #128	; 0x80
 800d888:	d004      	beq.n	800d894 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800d88a:	6839      	ldr	r1, [r7, #0]
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f000 fbcb 	bl	800e028 <USBD_CtlError>
                break;
 800d892:	e091      	b.n	800d9b8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d894:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	da0b      	bge.n	800d8b4 <USBD_StdEPReq+0x1a0>
 800d89c:	7bbb      	ldrb	r3, [r7, #14]
 800d89e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d8a2:	4613      	mov	r3, r2
 800d8a4:	009b      	lsls	r3, r3, #2
 800d8a6:	4413      	add	r3, r2
 800d8a8:	009b      	lsls	r3, r3, #2
 800d8aa:	3310      	adds	r3, #16
 800d8ac:	687a      	ldr	r2, [r7, #4]
 800d8ae:	4413      	add	r3, r2
 800d8b0:	3304      	adds	r3, #4
 800d8b2:	e00b      	b.n	800d8cc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d8b4:	7bbb      	ldrb	r3, [r7, #14]
 800d8b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d8ba:	4613      	mov	r3, r2
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	4413      	add	r3, r2
 800d8c0:	009b      	lsls	r3, r3, #2
 800d8c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d8c6:	687a      	ldr	r2, [r7, #4]
 800d8c8:	4413      	add	r3, r2
 800d8ca:	3304      	adds	r3, #4
 800d8cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	2202      	movs	r2, #2
 800d8d8:	4619      	mov	r1, r3
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f000 fc0f 	bl	800e0fe <USBD_CtlSendData>
              break;
 800d8e0:	e06a      	b.n	800d9b8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d8e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	da11      	bge.n	800d90e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d8ea:	7bbb      	ldrb	r3, [r7, #14]
 800d8ec:	f003 020f 	and.w	r2, r3, #15
 800d8f0:	6879      	ldr	r1, [r7, #4]
 800d8f2:	4613      	mov	r3, r2
 800d8f4:	009b      	lsls	r3, r3, #2
 800d8f6:	4413      	add	r3, r2
 800d8f8:	009b      	lsls	r3, r3, #2
 800d8fa:	440b      	add	r3, r1
 800d8fc:	3318      	adds	r3, #24
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d117      	bne.n	800d934 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800d904:	6839      	ldr	r1, [r7, #0]
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 fb8e 	bl	800e028 <USBD_CtlError>
                  break;
 800d90c:	e054      	b.n	800d9b8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d90e:	7bbb      	ldrb	r3, [r7, #14]
 800d910:	f003 020f 	and.w	r2, r3, #15
 800d914:	6879      	ldr	r1, [r7, #4]
 800d916:	4613      	mov	r3, r2
 800d918:	009b      	lsls	r3, r3, #2
 800d91a:	4413      	add	r3, r2
 800d91c:	009b      	lsls	r3, r3, #2
 800d91e:	440b      	add	r3, r1
 800d920:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d104      	bne.n	800d934 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800d92a:	6839      	ldr	r1, [r7, #0]
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f000 fb7b 	bl	800e028 <USBD_CtlError>
                  break;
 800d932:	e041      	b.n	800d9b8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d934:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	da0b      	bge.n	800d954 <USBD_StdEPReq+0x240>
 800d93c:	7bbb      	ldrb	r3, [r7, #14]
 800d93e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d942:	4613      	mov	r3, r2
 800d944:	009b      	lsls	r3, r3, #2
 800d946:	4413      	add	r3, r2
 800d948:	009b      	lsls	r3, r3, #2
 800d94a:	3310      	adds	r3, #16
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	4413      	add	r3, r2
 800d950:	3304      	adds	r3, #4
 800d952:	e00b      	b.n	800d96c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d954:	7bbb      	ldrb	r3, [r7, #14]
 800d956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d95a:	4613      	mov	r3, r2
 800d95c:	009b      	lsls	r3, r3, #2
 800d95e:	4413      	add	r3, r2
 800d960:	009b      	lsls	r3, r3, #2
 800d962:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d966:	687a      	ldr	r2, [r7, #4]
 800d968:	4413      	add	r3, r2
 800d96a:	3304      	adds	r3, #4
 800d96c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d96e:	7bbb      	ldrb	r3, [r7, #14]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d002      	beq.n	800d97a <USBD_StdEPReq+0x266>
 800d974:	7bbb      	ldrb	r3, [r7, #14]
 800d976:	2b80      	cmp	r3, #128	; 0x80
 800d978:	d103      	bne.n	800d982 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	2200      	movs	r2, #0
 800d97e:	601a      	str	r2, [r3, #0]
 800d980:	e00e      	b.n	800d9a0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800d982:	7bbb      	ldrb	r3, [r7, #14]
 800d984:	4619      	mov	r1, r3
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f000 ff62 	bl	800e850 <USBD_LL_IsStallEP>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d003      	beq.n	800d99a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	2201      	movs	r2, #1
 800d996:	601a      	str	r2, [r3, #0]
 800d998:	e002      	b.n	800d9a0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	2200      	movs	r2, #0
 800d99e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	2202      	movs	r2, #2
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f000 fba9 	bl	800e0fe <USBD_CtlSendData>
              break;
 800d9ac:	e004      	b.n	800d9b8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800d9ae:	6839      	ldr	r1, [r7, #0]
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 fb39 	bl	800e028 <USBD_CtlError>
              break;
 800d9b6:	bf00      	nop
          }
          break;
 800d9b8:	e004      	b.n	800d9c4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800d9ba:	6839      	ldr	r1, [r7, #0]
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f000 fb33 	bl	800e028 <USBD_CtlError>
          break;
 800d9c2:	bf00      	nop
      }
      break;
 800d9c4:	e004      	b.n	800d9d0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800d9c6:	6839      	ldr	r1, [r7, #0]
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f000 fb2d 	bl	800e028 <USBD_CtlError>
      break;
 800d9ce:	bf00      	nop
  }

  return ret;
 800d9d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3710      	adds	r7, #16
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
	...

0800d9dc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	885b      	ldrh	r3, [r3, #2]
 800d9f6:	0a1b      	lsrs	r3, r3, #8
 800d9f8:	b29b      	uxth	r3, r3
 800d9fa:	3b01      	subs	r3, #1
 800d9fc:	2b06      	cmp	r3, #6
 800d9fe:	f200 813b 	bhi.w	800dc78 <USBD_GetDescriptor+0x29c>
 800da02:	a201      	add	r2, pc, #4	; (adr r2, 800da08 <USBD_GetDescriptor+0x2c>)
 800da04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da08:	0800da25 	.word	0x0800da25
 800da0c:	0800da3d 	.word	0x0800da3d
 800da10:	0800da7d 	.word	0x0800da7d
 800da14:	0800dc79 	.word	0x0800dc79
 800da18:	0800dc79 	.word	0x0800dc79
 800da1c:	0800dc19 	.word	0x0800dc19
 800da20:	0800dc45 	.word	0x0800dc45
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	7c12      	ldrb	r2, [r2, #16]
 800da30:	f107 0108 	add.w	r1, r7, #8
 800da34:	4610      	mov	r0, r2
 800da36:	4798      	blx	r3
 800da38:	60f8      	str	r0, [r7, #12]
      break;
 800da3a:	e125      	b.n	800dc88 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	7c1b      	ldrb	r3, [r3, #16]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d10d      	bne.n	800da60 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da4c:	f107 0208 	add.w	r2, r7, #8
 800da50:	4610      	mov	r0, r2
 800da52:	4798      	blx	r3
 800da54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	3301      	adds	r3, #1
 800da5a:	2202      	movs	r2, #2
 800da5c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800da5e:	e113      	b.n	800dc88 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da68:	f107 0208 	add.w	r2, r7, #8
 800da6c:	4610      	mov	r0, r2
 800da6e:	4798      	blx	r3
 800da70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	3301      	adds	r3, #1
 800da76:	2202      	movs	r2, #2
 800da78:	701a      	strb	r2, [r3, #0]
      break;
 800da7a:	e105      	b.n	800dc88 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	885b      	ldrh	r3, [r3, #2]
 800da80:	b2db      	uxtb	r3, r3
 800da82:	2b05      	cmp	r3, #5
 800da84:	f200 80ac 	bhi.w	800dbe0 <USBD_GetDescriptor+0x204>
 800da88:	a201      	add	r2, pc, #4	; (adr r2, 800da90 <USBD_GetDescriptor+0xb4>)
 800da8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da8e:	bf00      	nop
 800da90:	0800daa9 	.word	0x0800daa9
 800da94:	0800dadd 	.word	0x0800dadd
 800da98:	0800db11 	.word	0x0800db11
 800da9c:	0800db45 	.word	0x0800db45
 800daa0:	0800db79 	.word	0x0800db79
 800daa4:	0800dbad 	.word	0x0800dbad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d00b      	beq.n	800dacc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800daba:	685b      	ldr	r3, [r3, #4]
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	7c12      	ldrb	r2, [r2, #16]
 800dac0:	f107 0108 	add.w	r1, r7, #8
 800dac4:	4610      	mov	r0, r2
 800dac6:	4798      	blx	r3
 800dac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800daca:	e0a4      	b.n	800dc16 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800dacc:	6839      	ldr	r1, [r7, #0]
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f000 faaa 	bl	800e028 <USBD_CtlError>
            err++;
 800dad4:	7afb      	ldrb	r3, [r7, #11]
 800dad6:	3301      	adds	r3, #1
 800dad8:	72fb      	strb	r3, [r7, #11]
          break;
 800dada:	e09c      	b.n	800dc16 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dae2:	689b      	ldr	r3, [r3, #8]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d00b      	beq.n	800db00 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800daee:	689b      	ldr	r3, [r3, #8]
 800daf0:	687a      	ldr	r2, [r7, #4]
 800daf2:	7c12      	ldrb	r2, [r2, #16]
 800daf4:	f107 0108 	add.w	r1, r7, #8
 800daf8:	4610      	mov	r0, r2
 800dafa:	4798      	blx	r3
 800dafc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dafe:	e08a      	b.n	800dc16 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800db00:	6839      	ldr	r1, [r7, #0]
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f000 fa90 	bl	800e028 <USBD_CtlError>
            err++;
 800db08:	7afb      	ldrb	r3, [r7, #11]
 800db0a:	3301      	adds	r3, #1
 800db0c:	72fb      	strb	r3, [r7, #11]
          break;
 800db0e:	e082      	b.n	800dc16 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800db16:	68db      	ldr	r3, [r3, #12]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d00b      	beq.n	800db34 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800db22:	68db      	ldr	r3, [r3, #12]
 800db24:	687a      	ldr	r2, [r7, #4]
 800db26:	7c12      	ldrb	r2, [r2, #16]
 800db28:	f107 0108 	add.w	r1, r7, #8
 800db2c:	4610      	mov	r0, r2
 800db2e:	4798      	blx	r3
 800db30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db32:	e070      	b.n	800dc16 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800db34:	6839      	ldr	r1, [r7, #0]
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f000 fa76 	bl	800e028 <USBD_CtlError>
            err++;
 800db3c:	7afb      	ldrb	r3, [r7, #11]
 800db3e:	3301      	adds	r3, #1
 800db40:	72fb      	strb	r3, [r7, #11]
          break;
 800db42:	e068      	b.n	800dc16 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800db4a:	691b      	ldr	r3, [r3, #16]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d00b      	beq.n	800db68 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800db56:	691b      	ldr	r3, [r3, #16]
 800db58:	687a      	ldr	r2, [r7, #4]
 800db5a:	7c12      	ldrb	r2, [r2, #16]
 800db5c:	f107 0108 	add.w	r1, r7, #8
 800db60:	4610      	mov	r0, r2
 800db62:	4798      	blx	r3
 800db64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db66:	e056      	b.n	800dc16 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800db68:	6839      	ldr	r1, [r7, #0]
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 fa5c 	bl	800e028 <USBD_CtlError>
            err++;
 800db70:	7afb      	ldrb	r3, [r7, #11]
 800db72:	3301      	adds	r3, #1
 800db74:	72fb      	strb	r3, [r7, #11]
          break;
 800db76:	e04e      	b.n	800dc16 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800db7e:	695b      	ldr	r3, [r3, #20]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d00b      	beq.n	800db9c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800db8a:	695b      	ldr	r3, [r3, #20]
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	7c12      	ldrb	r2, [r2, #16]
 800db90:	f107 0108 	add.w	r1, r7, #8
 800db94:	4610      	mov	r0, r2
 800db96:	4798      	blx	r3
 800db98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db9a:	e03c      	b.n	800dc16 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800db9c:	6839      	ldr	r1, [r7, #0]
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f000 fa42 	bl	800e028 <USBD_CtlError>
            err++;
 800dba4:	7afb      	ldrb	r3, [r7, #11]
 800dba6:	3301      	adds	r3, #1
 800dba8:	72fb      	strb	r3, [r7, #11]
          break;
 800dbaa:	e034      	b.n	800dc16 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dbb2:	699b      	ldr	r3, [r3, #24]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d00b      	beq.n	800dbd0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dbbe:	699b      	ldr	r3, [r3, #24]
 800dbc0:	687a      	ldr	r2, [r7, #4]
 800dbc2:	7c12      	ldrb	r2, [r2, #16]
 800dbc4:	f107 0108 	add.w	r1, r7, #8
 800dbc8:	4610      	mov	r0, r2
 800dbca:	4798      	blx	r3
 800dbcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbce:	e022      	b.n	800dc16 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800dbd0:	6839      	ldr	r1, [r7, #0]
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f000 fa28 	bl	800e028 <USBD_CtlError>
            err++;
 800dbd8:	7afb      	ldrb	r3, [r7, #11]
 800dbda:	3301      	adds	r3, #1
 800dbdc:	72fb      	strb	r3, [r7, #11]
          break;
 800dbde:	e01a      	b.n	800dc16 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d00c      	beq.n	800dc06 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf4:	683a      	ldr	r2, [r7, #0]
 800dbf6:	8852      	ldrh	r2, [r2, #2]
 800dbf8:	b2d1      	uxtb	r1, r2
 800dbfa:	f107 0208 	add.w	r2, r7, #8
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	4798      	blx	r3
 800dc02:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc04:	e006      	b.n	800dc14 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800dc06:	6839      	ldr	r1, [r7, #0]
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f000 fa0d 	bl	800e028 <USBD_CtlError>
            err++;
 800dc0e:	7afb      	ldrb	r3, [r7, #11]
 800dc10:	3301      	adds	r3, #1
 800dc12:	72fb      	strb	r3, [r7, #11]
          break;
 800dc14:	bf00      	nop
#else
          USBD_CtlError(pdev, req);
          err++;
#endif
      }
      break;
 800dc16:	e037      	b.n	800dc88 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	7c1b      	ldrb	r3, [r3, #16]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d109      	bne.n	800dc34 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc28:	f107 0208 	add.w	r2, r7, #8
 800dc2c:	4610      	mov	r0, r2
 800dc2e:	4798      	blx	r3
 800dc30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dc32:	e029      	b.n	800dc88 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800dc34:	6839      	ldr	r1, [r7, #0]
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f000 f9f6 	bl	800e028 <USBD_CtlError>
        err++;
 800dc3c:	7afb      	ldrb	r3, [r7, #11]
 800dc3e:	3301      	adds	r3, #1
 800dc40:	72fb      	strb	r3, [r7, #11]
      break;
 800dc42:	e021      	b.n	800dc88 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	7c1b      	ldrb	r3, [r3, #16]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d10d      	bne.n	800dc68 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc54:	f107 0208 	add.w	r2, r7, #8
 800dc58:	4610      	mov	r0, r2
 800dc5a:	4798      	blx	r3
 800dc5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	3301      	adds	r3, #1
 800dc62:	2207      	movs	r2, #7
 800dc64:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dc66:	e00f      	b.n	800dc88 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800dc68:	6839      	ldr	r1, [r7, #0]
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 f9dc 	bl	800e028 <USBD_CtlError>
        err++;
 800dc70:	7afb      	ldrb	r3, [r7, #11]
 800dc72:	3301      	adds	r3, #1
 800dc74:	72fb      	strb	r3, [r7, #11]
      break;
 800dc76:	e007      	b.n	800dc88 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800dc78:	6839      	ldr	r1, [r7, #0]
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 f9d4 	bl	800e028 <USBD_CtlError>
      err++;
 800dc80:	7afb      	ldrb	r3, [r7, #11]
 800dc82:	3301      	adds	r3, #1
 800dc84:	72fb      	strb	r3, [r7, #11]
      break;
 800dc86:	bf00      	nop
  }

  if (err != 0U)
 800dc88:	7afb      	ldrb	r3, [r7, #11]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d11c      	bne.n	800dcc8 <USBD_GetDescriptor+0x2ec>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800dc8e:	893b      	ldrh	r3, [r7, #8]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d011      	beq.n	800dcb8 <USBD_GetDescriptor+0x2dc>
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	88db      	ldrh	r3, [r3, #6]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d00d      	beq.n	800dcb8 <USBD_GetDescriptor+0x2dc>
    {
      len = MIN(len, req->wLength);
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	88da      	ldrh	r2, [r3, #6]
 800dca0:	893b      	ldrh	r3, [r7, #8]
 800dca2:	4293      	cmp	r3, r2
 800dca4:	bf28      	it	cs
 800dca6:	4613      	movcs	r3, r2
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dcac:	893b      	ldrh	r3, [r7, #8]
 800dcae:	461a      	mov	r2, r3
 800dcb0:	68f9      	ldr	r1, [r7, #12]
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f000 fa23 	bl	800e0fe <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	88db      	ldrh	r3, [r3, #6]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d104      	bne.n	800dcca <USBD_GetDescriptor+0x2ee>
    {
      (void)USBD_CtlSendStatus(pdev);
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f000 fa7a 	bl	800e1ba <USBD_CtlSendStatus>
 800dcc6:	e000      	b.n	800dcca <USBD_GetDescriptor+0x2ee>
    return;
 800dcc8:	bf00      	nop
    }
  }
}
 800dcca:	3710      	adds	r7, #16
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b084      	sub	sp, #16
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	889b      	ldrh	r3, [r3, #4]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d130      	bne.n	800dd44 <USBD_SetAddress+0x74>
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	88db      	ldrh	r3, [r3, #6]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d12c      	bne.n	800dd44 <USBD_SetAddress+0x74>
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	885b      	ldrh	r3, [r3, #2]
 800dcee:	2b7f      	cmp	r3, #127	; 0x7f
 800dcf0:	d828      	bhi.n	800dd44 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	885b      	ldrh	r3, [r3, #2]
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcfc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd04:	2b03      	cmp	r3, #3
 800dd06:	d104      	bne.n	800dd12 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800dd08:	6839      	ldr	r1, [r7, #0]
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 f98c 	bl	800e028 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd10:	e01d      	b.n	800dd4e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	7bfa      	ldrb	r2, [r7, #15]
 800dd16:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dd1a:	7bfb      	ldrb	r3, [r7, #15]
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f000 fdc3 	bl	800e8aa <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f000 fa48 	bl	800e1ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dd2a:	7bfb      	ldrb	r3, [r7, #15]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d004      	beq.n	800dd3a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2202      	movs	r2, #2
 800dd34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd38:	e009      	b.n	800dd4e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd42:	e004      	b.n	800dd4e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dd44:	6839      	ldr	r1, [r7, #0]
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f000 f96e 	bl	800e028 <USBD_CtlError>
  }
}
 800dd4c:	bf00      	nop
 800dd4e:	bf00      	nop
 800dd50:	3710      	adds	r7, #16
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}
	...

0800dd58 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b082      	sub	sp, #8
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	885b      	ldrh	r3, [r3, #2]
 800dd66:	b2da      	uxtb	r2, r3
 800dd68:	4b41      	ldr	r3, [pc, #260]	; (800de70 <USBD_SetConfig+0x118>)
 800dd6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dd6c:	4b40      	ldr	r3, [pc, #256]	; (800de70 <USBD_SetConfig+0x118>)
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	2b01      	cmp	r3, #1
 800dd72:	d904      	bls.n	800dd7e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800dd74:	6839      	ldr	r1, [r7, #0]
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f000 f956 	bl	800e028 <USBD_CtlError>
 800dd7c:	e075      	b.n	800de6a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd84:	2b02      	cmp	r3, #2
 800dd86:	d002      	beq.n	800dd8e <USBD_SetConfig+0x36>
 800dd88:	2b03      	cmp	r3, #3
 800dd8a:	d023      	beq.n	800ddd4 <USBD_SetConfig+0x7c>
 800dd8c:	e062      	b.n	800de54 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800dd8e:	4b38      	ldr	r3, [pc, #224]	; (800de70 <USBD_SetConfig+0x118>)
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d01a      	beq.n	800ddcc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800dd96:	4b36      	ldr	r3, [pc, #216]	; (800de70 <USBD_SetConfig+0x118>)
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2203      	movs	r2, #3
 800dda4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800dda8:	4b31      	ldr	r3, [pc, #196]	; (800de70 <USBD_SetConfig+0x118>)
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	4619      	mov	r1, r3
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f7ff f9d2 	bl	800d158 <USBD_SetClassConfig>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	2b02      	cmp	r3, #2
 800ddb8:	d104      	bne.n	800ddc4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ddba:	6839      	ldr	r1, [r7, #0]
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f000 f933 	bl	800e028 <USBD_CtlError>
            return;
 800ddc2:	e052      	b.n	800de6a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f000 f9f8 	bl	800e1ba <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ddca:	e04e      	b.n	800de6a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f000 f9f4 	bl	800e1ba <USBD_CtlSendStatus>
        break;
 800ddd2:	e04a      	b.n	800de6a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ddd4:	4b26      	ldr	r3, [pc, #152]	; (800de70 <USBD_SetConfig+0x118>)
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d112      	bne.n	800de02 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2202      	movs	r2, #2
 800dde0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800dde4:	4b22      	ldr	r3, [pc, #136]	; (800de70 <USBD_SetConfig+0x118>)
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	461a      	mov	r2, r3
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ddee:	4b20      	ldr	r3, [pc, #128]	; (800de70 <USBD_SetConfig+0x118>)
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f7ff f9ce 	bl	800d196 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f000 f9dd 	bl	800e1ba <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800de00:	e033      	b.n	800de6a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800de02:	4b1b      	ldr	r3, [pc, #108]	; (800de70 <USBD_SetConfig+0x118>)
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	461a      	mov	r2, r3
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	685b      	ldr	r3, [r3, #4]
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d01d      	beq.n	800de4c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	685b      	ldr	r3, [r3, #4]
 800de14:	b2db      	uxtb	r3, r3
 800de16:	4619      	mov	r1, r3
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f7ff f9bc 	bl	800d196 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800de1e:	4b14      	ldr	r3, [pc, #80]	; (800de70 <USBD_SetConfig+0x118>)
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	461a      	mov	r2, r3
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800de28:	4b11      	ldr	r3, [pc, #68]	; (800de70 <USBD_SetConfig+0x118>)
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	4619      	mov	r1, r3
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f7ff f992 	bl	800d158 <USBD_SetClassConfig>
 800de34:	4603      	mov	r3, r0
 800de36:	2b02      	cmp	r3, #2
 800de38:	d104      	bne.n	800de44 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800de3a:	6839      	ldr	r1, [r7, #0]
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f000 f8f3 	bl	800e028 <USBD_CtlError>
            return;
 800de42:	e012      	b.n	800de6a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f000 f9b8 	bl	800e1ba <USBD_CtlSendStatus>
        break;
 800de4a:	e00e      	b.n	800de6a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f000 f9b4 	bl	800e1ba <USBD_CtlSendStatus>
        break;
 800de52:	e00a      	b.n	800de6a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800de54:	6839      	ldr	r1, [r7, #0]
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f000 f8e6 	bl	800e028 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800de5c:	4b04      	ldr	r3, [pc, #16]	; (800de70 <USBD_SetConfig+0x118>)
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	4619      	mov	r1, r3
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f7ff f997 	bl	800d196 <USBD_ClrClassConfig>
        break;
 800de68:	bf00      	nop
    }
  }
}
 800de6a:	3708      	adds	r7, #8
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}
 800de70:	20000b4f 	.word	0x20000b4f

0800de74 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b082      	sub	sp, #8
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	88db      	ldrh	r3, [r3, #6]
 800de82:	2b01      	cmp	r3, #1
 800de84:	d004      	beq.n	800de90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800de86:	6839      	ldr	r1, [r7, #0]
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f000 f8cd 	bl	800e028 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800de8e:	e022      	b.n	800ded6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de96:	2b02      	cmp	r3, #2
 800de98:	dc02      	bgt.n	800dea0 <USBD_GetConfig+0x2c>
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	dc03      	bgt.n	800dea6 <USBD_GetConfig+0x32>
 800de9e:	e015      	b.n	800decc <USBD_GetConfig+0x58>
 800dea0:	2b03      	cmp	r3, #3
 800dea2:	d00b      	beq.n	800debc <USBD_GetConfig+0x48>
 800dea4:	e012      	b.n	800decc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2200      	movs	r2, #0
 800deaa:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	3308      	adds	r3, #8
 800deb0:	2201      	movs	r2, #1
 800deb2:	4619      	mov	r1, r3
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f000 f922 	bl	800e0fe <USBD_CtlSendData>
        break;
 800deba:	e00c      	b.n	800ded6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	3304      	adds	r3, #4
 800dec0:	2201      	movs	r2, #1
 800dec2:	4619      	mov	r1, r3
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f000 f91a 	bl	800e0fe <USBD_CtlSendData>
        break;
 800deca:	e004      	b.n	800ded6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800decc:	6839      	ldr	r1, [r7, #0]
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f000 f8aa 	bl	800e028 <USBD_CtlError>
        break;
 800ded4:	bf00      	nop
}
 800ded6:	bf00      	nop
 800ded8:	3708      	adds	r7, #8
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}

0800dede <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dede:	b580      	push	{r7, lr}
 800dee0:	b082      	sub	sp, #8
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	6078      	str	r0, [r7, #4]
 800dee6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800deee:	3b01      	subs	r3, #1
 800def0:	2b02      	cmp	r3, #2
 800def2:	d81e      	bhi.n	800df32 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	88db      	ldrh	r3, [r3, #6]
 800def8:	2b02      	cmp	r3, #2
 800defa:	d004      	beq.n	800df06 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800defc:	6839      	ldr	r1, [r7, #0]
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f000 f892 	bl	800e028 <USBD_CtlError>
        break;
 800df04:	e01a      	b.n	800df3c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2201      	movs	r2, #1
 800df0a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800df12:	2b00      	cmp	r3, #0
 800df14:	d005      	beq.n	800df22 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	68db      	ldr	r3, [r3, #12]
 800df1a:	f043 0202 	orr.w	r2, r3, #2
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	330c      	adds	r3, #12
 800df26:	2202      	movs	r2, #2
 800df28:	4619      	mov	r1, r3
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f000 f8e7 	bl	800e0fe <USBD_CtlSendData>
      break;
 800df30:	e004      	b.n	800df3c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800df32:	6839      	ldr	r1, [r7, #0]
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f000 f877 	bl	800e028 <USBD_CtlError>
      break;
 800df3a:	bf00      	nop
  }
}
 800df3c:	bf00      	nop
 800df3e:	3708      	adds	r7, #8
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b082      	sub	sp, #8
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	885b      	ldrh	r3, [r3, #2]
 800df52:	2b01      	cmp	r3, #1
 800df54:	d106      	bne.n	800df64 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2201      	movs	r2, #1
 800df5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f000 f92b 	bl	800e1ba <USBD_CtlSendStatus>
  }
}
 800df64:	bf00      	nop
 800df66:	3708      	adds	r7, #8
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}

0800df6c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b082      	sub	sp, #8
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df7c:	3b01      	subs	r3, #1
 800df7e:	2b02      	cmp	r3, #2
 800df80:	d80b      	bhi.n	800df9a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	885b      	ldrh	r3, [r3, #2]
 800df86:	2b01      	cmp	r3, #1
 800df88:	d10c      	bne.n	800dfa4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2200      	movs	r2, #0
 800df8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f000 f911 	bl	800e1ba <USBD_CtlSendStatus>
      }
      break;
 800df98:	e004      	b.n	800dfa4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800df9a:	6839      	ldr	r1, [r7, #0]
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f000 f843 	bl	800e028 <USBD_CtlError>
      break;
 800dfa2:	e000      	b.n	800dfa6 <USBD_ClrFeature+0x3a>
      break;
 800dfa4:	bf00      	nop
  }
}
 800dfa6:	bf00      	nop
 800dfa8:	3708      	adds	r7, #8
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}

0800dfae <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dfae:	b480      	push	{r7}
 800dfb0:	b083      	sub	sp, #12
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	6078      	str	r0, [r7, #4]
 800dfb6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	781a      	ldrb	r2, [r3, #0]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	785a      	ldrb	r2, [r3, #1]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	3302      	adds	r3, #2
 800dfcc:	781b      	ldrb	r3, [r3, #0]
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	3303      	adds	r3, #3
 800dfd4:	781b      	ldrb	r3, [r3, #0]
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	021b      	lsls	r3, r3, #8
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	4413      	add	r3, r2
 800dfde:	b29a      	uxth	r2, r3
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	3304      	adds	r3, #4
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	b29a      	uxth	r2, r3
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	3305      	adds	r3, #5
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	021b      	lsls	r3, r3, #8
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	4413      	add	r3, r2
 800dffa:	b29a      	uxth	r2, r3
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	3306      	adds	r3, #6
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	b29a      	uxth	r2, r3
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	3307      	adds	r3, #7
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	b29b      	uxth	r3, r3
 800e010:	021b      	lsls	r3, r3, #8
 800e012:	b29b      	uxth	r3, r3
 800e014:	4413      	add	r3, r2
 800e016:	b29a      	uxth	r2, r3
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	80da      	strh	r2, [r3, #6]

}
 800e01c:	bf00      	nop
 800e01e:	370c      	adds	r7, #12
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr

0800e028 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800e032:	2180      	movs	r1, #128	; 0x80
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f000 fbcd 	bl	800e7d4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800e03a:	2100      	movs	r1, #0
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f000 fbc9 	bl	800e7d4 <USBD_LL_StallEP>
}
 800e042:	bf00      	nop
 800e044:	3708      	adds	r7, #8
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}

0800e04a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e04a:	b580      	push	{r7, lr}
 800e04c:	b086      	sub	sp, #24
 800e04e:	af00      	add	r7, sp, #0
 800e050:	60f8      	str	r0, [r7, #12]
 800e052:	60b9      	str	r1, [r7, #8]
 800e054:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e056:	2300      	movs	r3, #0
 800e058:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d032      	beq.n	800e0c6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e060:	68f8      	ldr	r0, [r7, #12]
 800e062:	f000 f834 	bl	800e0ce <USBD_GetLen>
 800e066:	4603      	mov	r3, r0
 800e068:	3301      	adds	r3, #1
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	005b      	lsls	r3, r3, #1
 800e06e:	b29a      	uxth	r2, r3
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e074:	7dfb      	ldrb	r3, [r7, #23]
 800e076:	1c5a      	adds	r2, r3, #1
 800e078:	75fa      	strb	r2, [r7, #23]
 800e07a:	461a      	mov	r2, r3
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	4413      	add	r3, r2
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	7812      	ldrb	r2, [r2, #0]
 800e084:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e086:	7dfb      	ldrb	r3, [r7, #23]
 800e088:	1c5a      	adds	r2, r3, #1
 800e08a:	75fa      	strb	r2, [r7, #23]
 800e08c:	461a      	mov	r2, r3
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	4413      	add	r3, r2
 800e092:	2203      	movs	r2, #3
 800e094:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e096:	e012      	b.n	800e0be <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	1c5a      	adds	r2, r3, #1
 800e09c:	60fa      	str	r2, [r7, #12]
 800e09e:	7dfa      	ldrb	r2, [r7, #23]
 800e0a0:	1c51      	adds	r1, r2, #1
 800e0a2:	75f9      	strb	r1, [r7, #23]
 800e0a4:	4611      	mov	r1, r2
 800e0a6:	68ba      	ldr	r2, [r7, #8]
 800e0a8:	440a      	add	r2, r1
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e0ae:	7dfb      	ldrb	r3, [r7, #23]
 800e0b0:	1c5a      	adds	r2, r3, #1
 800e0b2:	75fa      	strb	r2, [r7, #23]
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d1e8      	bne.n	800e098 <USBD_GetString+0x4e>
    }
  }
}
 800e0c6:	bf00      	nop
 800e0c8:	3718      	adds	r7, #24
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}

0800e0ce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e0ce:	b480      	push	{r7}
 800e0d0:	b085      	sub	sp, #20
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800e0da:	e005      	b.n	800e0e8 <USBD_GetLen+0x1a>
  {
    len++;
 800e0dc:	7bfb      	ldrb	r3, [r7, #15]
 800e0de:	3301      	adds	r3, #1
 800e0e0:	73fb      	strb	r3, [r7, #15]
    buf++;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	3301      	adds	r3, #1
 800e0e6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d1f5      	bne.n	800e0dc <USBD_GetLen+0xe>
  }

  return len;
 800e0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3714      	adds	r7, #20
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr

0800e0fe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800e0fe:	b580      	push	{r7, lr}
 800e100:	b084      	sub	sp, #16
 800e102:	af00      	add	r7, sp, #0
 800e104:	60f8      	str	r0, [r7, #12]
 800e106:	60b9      	str	r1, [r7, #8]
 800e108:	4613      	mov	r3, r2
 800e10a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	2202      	movs	r2, #2
 800e110:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e114:	88fa      	ldrh	r2, [r7, #6]
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e11a:	88fa      	ldrh	r2, [r7, #6]
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e120:	88fb      	ldrh	r3, [r7, #6]
 800e122:	68ba      	ldr	r2, [r7, #8]
 800e124:	2100      	movs	r1, #0
 800e126:	68f8      	ldr	r0, [r7, #12]
 800e128:	f000 fbde 	bl	800e8e8 <USBD_LL_Transmit>

  return USBD_OK;
 800e12c:	2300      	movs	r3, #0
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3710      	adds	r7, #16
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}

0800e136 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800e136:	b580      	push	{r7, lr}
 800e138:	b084      	sub	sp, #16
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	60f8      	str	r0, [r7, #12]
 800e13e:	60b9      	str	r1, [r7, #8]
 800e140:	4613      	mov	r3, r2
 800e142:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e144:	88fb      	ldrh	r3, [r7, #6]
 800e146:	68ba      	ldr	r2, [r7, #8]
 800e148:	2100      	movs	r1, #0
 800e14a:	68f8      	ldr	r0, [r7, #12]
 800e14c:	f000 fbcc 	bl	800e8e8 <USBD_LL_Transmit>

  return USBD_OK;
 800e150:	2300      	movs	r3, #0
}
 800e152:	4618      	mov	r0, r3
 800e154:	3710      	adds	r7, #16
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}

0800e15a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800e15a:	b580      	push	{r7, lr}
 800e15c:	b084      	sub	sp, #16
 800e15e:	af00      	add	r7, sp, #0
 800e160:	60f8      	str	r0, [r7, #12]
 800e162:	60b9      	str	r1, [r7, #8]
 800e164:	4613      	mov	r3, r2
 800e166:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	2203      	movs	r2, #3
 800e16c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e170:	88fa      	ldrh	r2, [r7, #6]
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800e178:	88fa      	ldrh	r2, [r7, #6]
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e180:	88fb      	ldrh	r3, [r7, #6]
 800e182:	68ba      	ldr	r2, [r7, #8]
 800e184:	2100      	movs	r1, #0
 800e186:	68f8      	ldr	r0, [r7, #12]
 800e188:	f000 fbd1 	bl	800e92e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e18c:	2300      	movs	r3, #0
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3710      	adds	r7, #16
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}

0800e196 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800e196:	b580      	push	{r7, lr}
 800e198:	b084      	sub	sp, #16
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	60f8      	str	r0, [r7, #12]
 800e19e:	60b9      	str	r1, [r7, #8]
 800e1a0:	4613      	mov	r3, r2
 800e1a2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e1a4:	88fb      	ldrh	r3, [r7, #6]
 800e1a6:	68ba      	ldr	r2, [r7, #8]
 800e1a8:	2100      	movs	r1, #0
 800e1aa:	68f8      	ldr	r0, [r7, #12]
 800e1ac:	f000 fbbf 	bl	800e92e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e1b0:	2300      	movs	r3, #0
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3710      	adds	r7, #16
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}

0800e1ba <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e1ba:	b580      	push	{r7, lr}
 800e1bc:	b082      	sub	sp, #8
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2204      	movs	r2, #4
 800e1c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	2100      	movs	r1, #0
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f000 fb89 	bl	800e8e8 <USBD_LL_Transmit>

  return USBD_OK;
 800e1d6:	2300      	movs	r3, #0
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3708      	adds	r7, #8
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}

0800e1e0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2205      	movs	r2, #5
 800e1ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	2100      	movs	r1, #0
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f000 fb99 	bl	800e92e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e1fc:	2300      	movs	r3, #0
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3708      	adds	r7, #8
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
	...

0800e208 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e20c:	2200      	movs	r2, #0
 800e20e:	4912      	ldr	r1, [pc, #72]	; (800e258 <MX_USB_DEVICE_Init+0x50>)
 800e210:	4812      	ldr	r0, [pc, #72]	; (800e25c <MX_USB_DEVICE_Init+0x54>)
 800e212:	f7fe ff2f 	bl	800d074 <USBD_Init>
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d001      	beq.n	800e220 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e21c:	f7f3 face 	bl	80017bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 800e220:	490f      	ldr	r1, [pc, #60]	; (800e260 <MX_USB_DEVICE_Init+0x58>)
 800e222:	480e      	ldr	r0, [pc, #56]	; (800e25c <MX_USB_DEVICE_Init+0x54>)
 800e224:	f7fe ff51 	bl	800d0ca <USBD_RegisterClass>
 800e228:	4603      	mov	r3, r0
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d001      	beq.n	800e232 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e22e:	f7f3 fac5 	bl	80017bc <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 800e232:	490c      	ldr	r1, [pc, #48]	; (800e264 <MX_USB_DEVICE_Init+0x5c>)
 800e234:	4809      	ldr	r0, [pc, #36]	; (800e25c <MX_USB_DEVICE_Init+0x54>)
 800e236:	f7fe fbb5 	bl	800c9a4 <USBD_DFU_RegisterMedia>
 800e23a:	4603      	mov	r3, r0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d001      	beq.n	800e244 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e240:	f7f3 fabc 	bl	80017bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e244:	4805      	ldr	r0, [pc, #20]	; (800e25c <MX_USB_DEVICE_Init+0x54>)
 800e246:	f7fe ff5a 	bl	800d0fe <USBD_Start>
 800e24a:	4603      	mov	r3, r0
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d001      	beq.n	800e254 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e250:	f7f3 fab4 	bl	80017bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e254:	bf00      	nop
 800e256:	bd80      	pop	{r7, pc}
 800e258:	20000078 	.word	0x20000078
 800e25c:	20000b50 	.word	0x20000b50
 800e260:	20000014 	.word	0x20000014
 800e264:	200000c8 	.word	0x200000c8

0800e268 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e268:	b480      	push	{r7}
 800e26a:	b083      	sub	sp, #12
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	4603      	mov	r3, r0
 800e270:	6039      	str	r1, [r7, #0]
 800e272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	2212      	movs	r2, #18
 800e278:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e27a:	4b03      	ldr	r3, [pc, #12]	; (800e288 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	370c      	adds	r7, #12
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr
 800e288:	20000094 	.word	0x20000094

0800e28c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b083      	sub	sp, #12
 800e290:	af00      	add	r7, sp, #0
 800e292:	4603      	mov	r3, r0
 800e294:	6039      	str	r1, [r7, #0]
 800e296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	2204      	movs	r2, #4
 800e29c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e29e:	4b03      	ldr	r3, [pc, #12]	; (800e2ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	370c      	adds	r7, #12
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr
 800e2ac:	200000a8 	.word	0x200000a8

0800e2b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b082      	sub	sp, #8
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	6039      	str	r1, [r7, #0]
 800e2ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e2bc:	79fb      	ldrb	r3, [r7, #7]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d105      	bne.n	800e2ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e2c2:	683a      	ldr	r2, [r7, #0]
 800e2c4:	4907      	ldr	r1, [pc, #28]	; (800e2e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800e2c6:	4808      	ldr	r0, [pc, #32]	; (800e2e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800e2c8:	f7ff febf 	bl	800e04a <USBD_GetString>
 800e2cc:	e004      	b.n	800e2d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e2ce:	683a      	ldr	r2, [r7, #0]
 800e2d0:	4904      	ldr	r1, [pc, #16]	; (800e2e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800e2d2:	4805      	ldr	r0, [pc, #20]	; (800e2e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800e2d4:	f7ff feb9 	bl	800e04a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e2d8:	4b02      	ldr	r3, [pc, #8]	; (800e2e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3708      	adds	r7, #8
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	20000e14 	.word	0x20000e14
 800e2e8:	08011898 	.word	0x08011898

0800e2ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b082      	sub	sp, #8
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	6039      	str	r1, [r7, #0]
 800e2f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e2f8:	683a      	ldr	r2, [r7, #0]
 800e2fa:	4904      	ldr	r1, [pc, #16]	; (800e30c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e2fc:	4804      	ldr	r0, [pc, #16]	; (800e310 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e2fe:	f7ff fea4 	bl	800e04a <USBD_GetString>
  return USBD_StrDesc;
 800e302:	4b02      	ldr	r3, [pc, #8]	; (800e30c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e304:	4618      	mov	r0, r3
 800e306:	3708      	adds	r7, #8
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	20000e14 	.word	0x20000e14
 800e310:	080118b8 	.word	0x080118b8

0800e314 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b082      	sub	sp, #8
 800e318:	af00      	add	r7, sp, #0
 800e31a:	4603      	mov	r3, r0
 800e31c:	6039      	str	r1, [r7, #0]
 800e31e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	221a      	movs	r2, #26
 800e324:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e326:	f000 f843 	bl	800e3b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e32a:	4b02      	ldr	r3, [pc, #8]	; (800e334 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3708      	adds	r7, #8
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}
 800e334:	200000ac 	.word	0x200000ac

0800e338 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b082      	sub	sp, #8
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	4603      	mov	r3, r0
 800e340:	6039      	str	r1, [r7, #0]
 800e342:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e344:	79fb      	ldrb	r3, [r7, #7]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d105      	bne.n	800e356 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e34a:	683a      	ldr	r2, [r7, #0]
 800e34c:	4907      	ldr	r1, [pc, #28]	; (800e36c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e34e:	4808      	ldr	r0, [pc, #32]	; (800e370 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e350:	f7ff fe7b 	bl	800e04a <USBD_GetString>
 800e354:	e004      	b.n	800e360 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e356:	683a      	ldr	r2, [r7, #0]
 800e358:	4904      	ldr	r1, [pc, #16]	; (800e36c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e35a:	4805      	ldr	r0, [pc, #20]	; (800e370 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e35c:	f7ff fe75 	bl	800e04a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e360:	4b02      	ldr	r3, [pc, #8]	; (800e36c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e362:	4618      	mov	r0, r3
 800e364:	3708      	adds	r7, #8
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
 800e36a:	bf00      	nop
 800e36c:	20000e14 	.word	0x20000e14
 800e370:	080118cc 	.word	0x080118cc

0800e374 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
 800e37a:	4603      	mov	r3, r0
 800e37c:	6039      	str	r1, [r7, #0]
 800e37e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e380:	79fb      	ldrb	r3, [r7, #7]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d105      	bne.n	800e392 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e386:	683a      	ldr	r2, [r7, #0]
 800e388:	4907      	ldr	r1, [pc, #28]	; (800e3a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e38a:	4808      	ldr	r0, [pc, #32]	; (800e3ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e38c:	f7ff fe5d 	bl	800e04a <USBD_GetString>
 800e390:	e004      	b.n	800e39c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e392:	683a      	ldr	r2, [r7, #0]
 800e394:	4904      	ldr	r1, [pc, #16]	; (800e3a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e396:	4805      	ldr	r0, [pc, #20]	; (800e3ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e398:	f7ff fe57 	bl	800e04a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e39c:	4b02      	ldr	r3, [pc, #8]	; (800e3a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	3708      	adds	r7, #8
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}
 800e3a6:	bf00      	nop
 800e3a8:	20000e14 	.word	0x20000e14
 800e3ac:	080118d8 	.word	0x080118d8

0800e3b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b084      	sub	sp, #16
 800e3b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e3b6:	4b0f      	ldr	r3, [pc, #60]	; (800e3f4 <Get_SerialNum+0x44>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e3bc:	4b0e      	ldr	r3, [pc, #56]	; (800e3f8 <Get_SerialNum+0x48>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e3c2:	4b0e      	ldr	r3, [pc, #56]	; (800e3fc <Get_SerialNum+0x4c>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e3c8:	68fa      	ldr	r2, [r7, #12]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	4413      	add	r3, r2
 800e3ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d009      	beq.n	800e3ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e3d6:	2208      	movs	r2, #8
 800e3d8:	4909      	ldr	r1, [pc, #36]	; (800e400 <Get_SerialNum+0x50>)
 800e3da:	68f8      	ldr	r0, [r7, #12]
 800e3dc:	f000 f814 	bl	800e408 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e3e0:	2204      	movs	r2, #4
 800e3e2:	4908      	ldr	r1, [pc, #32]	; (800e404 <Get_SerialNum+0x54>)
 800e3e4:	68b8      	ldr	r0, [r7, #8]
 800e3e6:	f000 f80f 	bl	800e408 <IntToUnicode>
  }
}
 800e3ea:	bf00      	nop
 800e3ec:	3710      	adds	r7, #16
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
 800e3f2:	bf00      	nop
 800e3f4:	1ffff7ac 	.word	0x1ffff7ac
 800e3f8:	1ffff7b0 	.word	0x1ffff7b0
 800e3fc:	1ffff7b4 	.word	0x1ffff7b4
 800e400:	200000ae 	.word	0x200000ae
 800e404:	200000be 	.word	0x200000be

0800e408 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e408:	b480      	push	{r7}
 800e40a:	b087      	sub	sp, #28
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	60f8      	str	r0, [r7, #12]
 800e410:	60b9      	str	r1, [r7, #8]
 800e412:	4613      	mov	r3, r2
 800e414:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e416:	2300      	movs	r3, #0
 800e418:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e41a:	2300      	movs	r3, #0
 800e41c:	75fb      	strb	r3, [r7, #23]
 800e41e:	e027      	b.n	800e470 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	0f1b      	lsrs	r3, r3, #28
 800e424:	2b09      	cmp	r3, #9
 800e426:	d80b      	bhi.n	800e440 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	0f1b      	lsrs	r3, r3, #28
 800e42c:	b2da      	uxtb	r2, r3
 800e42e:	7dfb      	ldrb	r3, [r7, #23]
 800e430:	005b      	lsls	r3, r3, #1
 800e432:	4619      	mov	r1, r3
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	440b      	add	r3, r1
 800e438:	3230      	adds	r2, #48	; 0x30
 800e43a:	b2d2      	uxtb	r2, r2
 800e43c:	701a      	strb	r2, [r3, #0]
 800e43e:	e00a      	b.n	800e456 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	0f1b      	lsrs	r3, r3, #28
 800e444:	b2da      	uxtb	r2, r3
 800e446:	7dfb      	ldrb	r3, [r7, #23]
 800e448:	005b      	lsls	r3, r3, #1
 800e44a:	4619      	mov	r1, r3
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	440b      	add	r3, r1
 800e450:	3237      	adds	r2, #55	; 0x37
 800e452:	b2d2      	uxtb	r2, r2
 800e454:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	011b      	lsls	r3, r3, #4
 800e45a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e45c:	7dfb      	ldrb	r3, [r7, #23]
 800e45e:	005b      	lsls	r3, r3, #1
 800e460:	3301      	adds	r3, #1
 800e462:	68ba      	ldr	r2, [r7, #8]
 800e464:	4413      	add	r3, r2
 800e466:	2200      	movs	r2, #0
 800e468:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e46a:	7dfb      	ldrb	r3, [r7, #23]
 800e46c:	3301      	adds	r3, #1
 800e46e:	75fb      	strb	r3, [r7, #23]
 800e470:	7dfa      	ldrb	r2, [r7, #23]
 800e472:	79fb      	ldrb	r3, [r7, #7]
 800e474:	429a      	cmp	r2, r3
 800e476:	d3d3      	bcc.n	800e420 <IntToUnicode+0x18>
  }
}
 800e478:	bf00      	nop
 800e47a:	bf00      	nop
 800e47c:	371c      	adds	r7, #28
 800e47e:	46bd      	mov	sp, r7
 800e480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e484:	4770      	bx	lr

0800e486 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 800e486:	b480      	push	{r7}
 800e488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800e48a:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr

0800e496 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 800e496:	b480      	push	{r7}
 800e498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800e49a:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a4:	4770      	bx	lr

0800e4a6 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 800e4a6:	b480      	push	{r7}
 800e4a8:	b083      	sub	sp, #12
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 800e4ae:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	370c      	adds	r7, #12
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr

0800e4bc <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b085      	sub	sp, #20
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800e4c8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3714      	adds	r7, #20
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d4:	4770      	bx	lr

0800e4d6 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800e4d6:	b480      	push	{r7}
 800e4d8:	b085      	sub	sp, #20
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	60f8      	str	r0, [r7, #12]
 800e4de:	60b9      	str	r1, [r7, #8]
 800e4e0:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 800e4e2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3714      	adds	r7, #20
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ee:	4770      	bx	lr

0800e4f0 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b085      	sub	sp, #20
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	60f8      	str	r0, [r7, #12]
 800e4f8:	460b      	mov	r3, r1
 800e4fa:	607a      	str	r2, [r7, #4]
 800e4fc:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800e4fe:	7afb      	ldrb	r3, [r7, #11]
 800e500:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800e502:	bf00      	nop
  }
  return (USBD_OK);
 800e504:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e506:	4618      	mov	r0, r3
 800e508:	3714      	adds	r7, #20
 800e50a:	46bd      	mov	sp, r7
 800e50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e510:	4770      	bx	lr
	...

0800e514 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b084      	sub	sp, #16
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4a0d      	ldr	r2, [pc, #52]	; (800e558 <HAL_PCD_MspInit+0x44>)
 800e522:	4293      	cmp	r3, r2
 800e524:	d113      	bne.n	800e54e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e526:	4b0d      	ldr	r3, [pc, #52]	; (800e55c <HAL_PCD_MspInit+0x48>)
 800e528:	69db      	ldr	r3, [r3, #28]
 800e52a:	4a0c      	ldr	r2, [pc, #48]	; (800e55c <HAL_PCD_MspInit+0x48>)
 800e52c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e530:	61d3      	str	r3, [r2, #28]
 800e532:	4b0a      	ldr	r3, [pc, #40]	; (800e55c <HAL_PCD_MspInit+0x48>)
 800e534:	69db      	ldr	r3, [r3, #28]
 800e536:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e53a:	60fb      	str	r3, [r7, #12]
 800e53c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800e53e:	2200      	movs	r2, #0
 800e540:	2100      	movs	r1, #0
 800e542:	2014      	movs	r0, #20
 800e544:	f7f5 fc37 	bl	8003db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800e548:	2014      	movs	r0, #20
 800e54a:	f7f5 fc50 	bl	8003dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e54e:	bf00      	nop
 800e550:	3710      	adds	r7, #16
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
 800e556:	bf00      	nop
 800e558:	40005c00 	.word	0x40005c00
 800e55c:	40021000 	.word	0x40021000

0800e560 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b082      	sub	sp, #8
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800e574:	4619      	mov	r1, r3
 800e576:	4610      	mov	r0, r2
 800e578:	f7fe fe20 	bl	800d1bc <USBD_LL_SetupStage>
}
 800e57c:	bf00      	nop
 800e57e:	3708      	adds	r7, #8
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b082      	sub	sp, #8
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	460b      	mov	r3, r1
 800e58e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800e596:	78fa      	ldrb	r2, [r7, #3]
 800e598:	6879      	ldr	r1, [r7, #4]
 800e59a:	4613      	mov	r3, r2
 800e59c:	009b      	lsls	r3, r3, #2
 800e59e:	4413      	add	r3, r2
 800e5a0:	00db      	lsls	r3, r3, #3
 800e5a2:	440b      	add	r3, r1
 800e5a4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800e5a8:	681a      	ldr	r2, [r3, #0]
 800e5aa:	78fb      	ldrb	r3, [r7, #3]
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	f7fe fe52 	bl	800d256 <USBD_LL_DataOutStage>
}
 800e5b2:	bf00      	nop
 800e5b4:	3708      	adds	r7, #8
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}

0800e5ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5ba:	b580      	push	{r7, lr}
 800e5bc:	b082      	sub	sp, #8
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	6078      	str	r0, [r7, #4]
 800e5c2:	460b      	mov	r3, r1
 800e5c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800e5cc:	78fa      	ldrb	r2, [r7, #3]
 800e5ce:	6879      	ldr	r1, [r7, #4]
 800e5d0:	4613      	mov	r3, r2
 800e5d2:	009b      	lsls	r3, r3, #2
 800e5d4:	4413      	add	r3, r2
 800e5d6:	00db      	lsls	r3, r3, #3
 800e5d8:	440b      	add	r3, r1
 800e5da:	333c      	adds	r3, #60	; 0x3c
 800e5dc:	681a      	ldr	r2, [r3, #0]
 800e5de:	78fb      	ldrb	r3, [r7, #3]
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	f7fe fea9 	bl	800d338 <USBD_LL_DataInStage>
}
 800e5e6:	bf00      	nop
 800e5e8:	3708      	adds	r7, #8
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}

0800e5ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5ee:	b580      	push	{r7, lr}
 800e5f0:	b082      	sub	sp, #8
 800e5f2:	af00      	add	r7, sp, #0
 800e5f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f7fe ffbc 	bl	800d57a <USBD_LL_SOF>
}
 800e602:	bf00      	nop
 800e604:	3708      	adds	r7, #8
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}

0800e60a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b084      	sub	sp, #16
 800e60e:	af00      	add	r7, sp, #0
 800e610:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e612:	2301      	movs	r3, #1
 800e614:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	689b      	ldr	r3, [r3, #8]
 800e61a:	2b02      	cmp	r3, #2
 800e61c:	d001      	beq.n	800e622 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e61e:	f7f3 f8cd 	bl	80017bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e628:	7bfa      	ldrb	r2, [r7, #15]
 800e62a:	4611      	mov	r1, r2
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7fe ff69 	bl	800d504 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e638:	4618      	mov	r0, r3
 800e63a:	f7fe ff22 	bl	800d482 <USBD_LL_Reset>
}
 800e63e:	bf00      	nop
 800e640:	3710      	adds	r7, #16
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}
	...

0800e648 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e656:	4618      	mov	r0, r3
 800e658:	f7fe ff64 	bl	800d524 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	699b      	ldr	r3, [r3, #24]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d005      	beq.n	800e670 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e664:	4b04      	ldr	r3, [pc, #16]	; (800e678 <HAL_PCD_SuspendCallback+0x30>)
 800e666:	691b      	ldr	r3, [r3, #16]
 800e668:	4a03      	ldr	r2, [pc, #12]	; (800e678 <HAL_PCD_SuspendCallback+0x30>)
 800e66a:	f043 0306 	orr.w	r3, r3, #6
 800e66e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e670:	bf00      	nop
 800e672:	3708      	adds	r7, #8
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}
 800e678:	e000ed00 	.word	0xe000ed00

0800e67c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7fe ff5f 	bl	800d54e <USBD_LL_Resume>
}
 800e690:	bf00      	nop
 800e692:	3708      	adds	r7, #8
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b082      	sub	sp, #8
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800e6a0:	4a1c      	ldr	r2, [pc, #112]	; (800e714 <USBD_LL_Init+0x7c>)
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	4a1a      	ldr	r2, [pc, #104]	; (800e714 <USBD_LL_Init+0x7c>)
 800e6ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800e6b0:	4b18      	ldr	r3, [pc, #96]	; (800e714 <USBD_LL_Init+0x7c>)
 800e6b2:	4a19      	ldr	r2, [pc, #100]	; (800e718 <USBD_LL_Init+0x80>)
 800e6b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e6b6:	4b17      	ldr	r3, [pc, #92]	; (800e714 <USBD_LL_Init+0x7c>)
 800e6b8:	2208      	movs	r2, #8
 800e6ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e6bc:	4b15      	ldr	r3, [pc, #84]	; (800e714 <USBD_LL_Init+0x7c>)
 800e6be:	2202      	movs	r2, #2
 800e6c0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e6c2:	4b14      	ldr	r3, [pc, #80]	; (800e714 <USBD_LL_Init+0x7c>)
 800e6c4:	2202      	movs	r2, #2
 800e6c6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e6c8:	4b12      	ldr	r3, [pc, #72]	; (800e714 <USBD_LL_Init+0x7c>)
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e6ce:	4b11      	ldr	r3, [pc, #68]	; (800e714 <USBD_LL_Init+0x7c>)
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e6d4:	4b0f      	ldr	r3, [pc, #60]	; (800e714 <USBD_LL_Init+0x7c>)
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e6da:	480e      	ldr	r0, [pc, #56]	; (800e714 <USBD_LL_Init+0x7c>)
 800e6dc:	f7f6 fb94 	bl	8004e08 <HAL_PCD_Init>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d001      	beq.n	800e6ea <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 800e6e6:	f7f3 f869 	bl	80017bc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e6f0:	2318      	movs	r3, #24
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	2100      	movs	r1, #0
 800e6f6:	f7f7 ffcd 	bl	8006694 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e700:	2358      	movs	r3, #88	; 0x58
 800e702:	2200      	movs	r2, #0
 800e704:	2180      	movs	r1, #128	; 0x80
 800e706:	f7f7 ffc5 	bl	8006694 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 800e70a:	2300      	movs	r3, #0
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3708      	adds	r7, #8
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}
 800e714:	20001014 	.word	0x20001014
 800e718:	40005c00 	.word	0x40005c00

0800e71c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b084      	sub	sp, #16
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e724:	2300      	movs	r3, #0
 800e726:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e728:	2300      	movs	r3, #0
 800e72a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e732:	4618      	mov	r0, r3
 800e734:	f7f6 fc3a 	bl	8004fac <HAL_PCD_Start>
 800e738:	4603      	mov	r3, r0
 800e73a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e73c:	7bfb      	ldrb	r3, [r7, #15]
 800e73e:	4618      	mov	r0, r3
 800e740:	f000 f93c 	bl	800e9bc <USBD_Get_USB_Status>
 800e744:	4603      	mov	r3, r0
 800e746:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e748:	7bbb      	ldrb	r3, [r7, #14]
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3710      	adds	r7, #16
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}

0800e752 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800e752:	b580      	push	{r7, lr}
 800e754:	b084      	sub	sp, #16
 800e756:	af00      	add	r7, sp, #0
 800e758:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e75a:	2300      	movs	r3, #0
 800e75c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e75e:	2300      	movs	r3, #0
 800e760:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e768:	4618      	mov	r0, r3
 800e76a:	f7f6 fc45 	bl	8004ff8 <HAL_PCD_Stop>
 800e76e:	4603      	mov	r3, r0
 800e770:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e772:	7bfb      	ldrb	r3, [r7, #15]
 800e774:	4618      	mov	r0, r3
 800e776:	f000 f921 	bl	800e9bc <USBD_Get_USB_Status>
 800e77a:	4603      	mov	r3, r0
 800e77c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e77e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e780:	4618      	mov	r0, r3
 800e782:	3710      	adds	r7, #16
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b084      	sub	sp, #16
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	4608      	mov	r0, r1
 800e792:	4611      	mov	r1, r2
 800e794:	461a      	mov	r2, r3
 800e796:	4603      	mov	r3, r0
 800e798:	70fb      	strb	r3, [r7, #3]
 800e79a:	460b      	mov	r3, r1
 800e79c:	70bb      	strb	r3, [r7, #2]
 800e79e:	4613      	mov	r3, r2
 800e7a0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e7b0:	78bb      	ldrb	r3, [r7, #2]
 800e7b2:	883a      	ldrh	r2, [r7, #0]
 800e7b4:	78f9      	ldrb	r1, [r7, #3]
 800e7b6:	f7f6 fd3e 	bl	8005236 <HAL_PCD_EP_Open>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7be:	7bfb      	ldrb	r3, [r7, #15]
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f000 f8fb 	bl	800e9bc <USBD_Get_USB_Status>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3710      	adds	r7, #16
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b084      	sub	sp, #16
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	460b      	mov	r3, r1
 800e7de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e7ee:	78fa      	ldrb	r2, [r7, #3]
 800e7f0:	4611      	mov	r1, r2
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7f6 fde4 	bl	80053c0 <HAL_PCD_EP_SetStall>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7fc:	7bfb      	ldrb	r3, [r7, #15]
 800e7fe:	4618      	mov	r0, r3
 800e800:	f000 f8dc 	bl	800e9bc <USBD_Get_USB_Status>
 800e804:	4603      	mov	r3, r0
 800e806:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e808:	7bbb      	ldrb	r3, [r7, #14]
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3710      	adds	r7, #16
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}

0800e812 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e812:	b580      	push	{r7, lr}
 800e814:	b084      	sub	sp, #16
 800e816:	af00      	add	r7, sp, #0
 800e818:	6078      	str	r0, [r7, #4]
 800e81a:	460b      	mov	r3, r1
 800e81c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e81e:	2300      	movs	r3, #0
 800e820:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e822:	2300      	movs	r3, #0
 800e824:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e82c:	78fa      	ldrb	r2, [r7, #3]
 800e82e:	4611      	mov	r1, r2
 800e830:	4618      	mov	r0, r3
 800e832:	f7f6 fe17 	bl	8005464 <HAL_PCD_EP_ClrStall>
 800e836:	4603      	mov	r3, r0
 800e838:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e83a:	7bfb      	ldrb	r3, [r7, #15]
 800e83c:	4618      	mov	r0, r3
 800e83e:	f000 f8bd 	bl	800e9bc <USBD_Get_USB_Status>
 800e842:	4603      	mov	r3, r0
 800e844:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e846:	7bbb      	ldrb	r3, [r7, #14]
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3710      	adds	r7, #16
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e850:	b480      	push	{r7}
 800e852:	b085      	sub	sp, #20
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
 800e858:	460b      	mov	r3, r1
 800e85a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e862:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e864:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	da0c      	bge.n	800e886 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e86c:	78fb      	ldrb	r3, [r7, #3]
 800e86e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e872:	68f9      	ldr	r1, [r7, #12]
 800e874:	1c5a      	adds	r2, r3, #1
 800e876:	4613      	mov	r3, r2
 800e878:	009b      	lsls	r3, r3, #2
 800e87a:	4413      	add	r3, r2
 800e87c:	00db      	lsls	r3, r3, #3
 800e87e:	440b      	add	r3, r1
 800e880:	3302      	adds	r3, #2
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	e00b      	b.n	800e89e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e886:	78fb      	ldrb	r3, [r7, #3]
 800e888:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e88c:	68f9      	ldr	r1, [r7, #12]
 800e88e:	4613      	mov	r3, r2
 800e890:	009b      	lsls	r3, r3, #2
 800e892:	4413      	add	r3, r2
 800e894:	00db      	lsls	r3, r3, #3
 800e896:	440b      	add	r3, r1
 800e898:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800e89c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3714      	adds	r7, #20
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a8:	4770      	bx	lr

0800e8aa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e8aa:	b580      	push	{r7, lr}
 800e8ac:	b084      	sub	sp, #16
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	6078      	str	r0, [r7, #4]
 800e8b2:	460b      	mov	r3, r1
 800e8b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e8c4:	78fa      	ldrb	r2, [r7, #3]
 800e8c6:	4611      	mov	r1, r2
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7f6 fc8f 	bl	80051ec <HAL_PCD_SetAddress>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8d2:	7bfb      	ldrb	r3, [r7, #15]
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f000 f871 	bl	800e9bc <USBD_Get_USB_Status>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e8de:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3710      	adds	r7, #16
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b086      	sub	sp, #24
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	60f8      	str	r0, [r7, #12]
 800e8f0:	607a      	str	r2, [r7, #4]
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	72fb      	strb	r3, [r7, #11]
 800e8f8:	4613      	mov	r3, r2
 800e8fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e900:	2300      	movs	r3, #0
 800e902:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e90a:	893b      	ldrh	r3, [r7, #8]
 800e90c:	7af9      	ldrb	r1, [r7, #11]
 800e90e:	687a      	ldr	r2, [r7, #4]
 800e910:	f7f6 fd1f 	bl	8005352 <HAL_PCD_EP_Transmit>
 800e914:	4603      	mov	r3, r0
 800e916:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e918:	7dfb      	ldrb	r3, [r7, #23]
 800e91a:	4618      	mov	r0, r3
 800e91c:	f000 f84e 	bl	800e9bc <USBD_Get_USB_Status>
 800e920:	4603      	mov	r3, r0
 800e922:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e924:	7dbb      	ldrb	r3, [r7, #22]
}
 800e926:	4618      	mov	r0, r3
 800e928:	3718      	adds	r7, #24
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}

0800e92e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e92e:	b580      	push	{r7, lr}
 800e930:	b086      	sub	sp, #24
 800e932:	af00      	add	r7, sp, #0
 800e934:	60f8      	str	r0, [r7, #12]
 800e936:	607a      	str	r2, [r7, #4]
 800e938:	461a      	mov	r2, r3
 800e93a:	460b      	mov	r3, r1
 800e93c:	72fb      	strb	r3, [r7, #11]
 800e93e:	4613      	mov	r3, r2
 800e940:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e942:	2300      	movs	r3, #0
 800e944:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e946:	2300      	movs	r3, #0
 800e948:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e950:	893b      	ldrh	r3, [r7, #8]
 800e952:	7af9      	ldrb	r1, [r7, #11]
 800e954:	687a      	ldr	r2, [r7, #4]
 800e956:	f7f6 fccb 	bl	80052f0 <HAL_PCD_EP_Receive>
 800e95a:	4603      	mov	r3, r0
 800e95c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e95e:	7dfb      	ldrb	r3, [r7, #23]
 800e960:	4618      	mov	r0, r3
 800e962:	f000 f82b 	bl	800e9bc <USBD_Get_USB_Status>
 800e966:	4603      	mov	r3, r0
 800e968:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e96a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3718      	adds	r7, #24
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e97c:	4b03      	ldr	r3, [pc, #12]	; (800e98c <USBD_static_malloc+0x18>)
}
 800e97e:	4618      	mov	r0, r3
 800e980:	370c      	adds	r7, #12
 800e982:	46bd      	mov	sp, r7
 800e984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e988:	4770      	bx	lr
 800e98a:	bf00      	nop
 800e98c:	20001300 	.word	0x20001300

0800e990 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e990:	b480      	push	{r7}
 800e992:	b083      	sub	sp, #12
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]

}
 800e998:	bf00      	nop
 800e99a:	370c      	adds	r7, #12
 800e99c:	46bd      	mov	sp, r7
 800e99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a2:	4770      	bx	lr

0800e9a4 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b083      	sub	sp, #12
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	460b      	mov	r3, r1
 800e9ae:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800e9b0:	bf00      	nop
 800e9b2:	370c      	adds	r7, #12
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr

0800e9bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b085      	sub	sp, #20
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e9ca:	79fb      	ldrb	r3, [r7, #7]
 800e9cc:	2b03      	cmp	r3, #3
 800e9ce:	d817      	bhi.n	800ea00 <USBD_Get_USB_Status+0x44>
 800e9d0:	a201      	add	r2, pc, #4	; (adr r2, 800e9d8 <USBD_Get_USB_Status+0x1c>)
 800e9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d6:	bf00      	nop
 800e9d8:	0800e9e9 	.word	0x0800e9e9
 800e9dc:	0800e9ef 	.word	0x0800e9ef
 800e9e0:	0800e9f5 	.word	0x0800e9f5
 800e9e4:	0800e9fb 	.word	0x0800e9fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	73fb      	strb	r3, [r7, #15]
    break;
 800e9ec:	e00b      	b.n	800ea06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e9ee:	2302      	movs	r3, #2
 800e9f0:	73fb      	strb	r3, [r7, #15]
    break;
 800e9f2:	e008      	b.n	800ea06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	73fb      	strb	r3, [r7, #15]
    break;
 800e9f8:	e005      	b.n	800ea06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e9fa:	2302      	movs	r3, #2
 800e9fc:	73fb      	strb	r3, [r7, #15]
    break;
 800e9fe:	e002      	b.n	800ea06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ea00:	2302      	movs	r3, #2
 800ea02:	73fb      	strb	r3, [r7, #15]
    break;
 800ea04:	bf00      	nop
  }
  return usb_status;
 800ea06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3714      	adds	r7, #20
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr

0800ea14 <__errno>:
 800ea14:	4b01      	ldr	r3, [pc, #4]	; (800ea1c <__errno+0x8>)
 800ea16:	6818      	ldr	r0, [r3, #0]
 800ea18:	4770      	bx	lr
 800ea1a:	bf00      	nop
 800ea1c:	200000e4 	.word	0x200000e4

0800ea20 <__libc_init_array>:
 800ea20:	b570      	push	{r4, r5, r6, lr}
 800ea22:	4d0d      	ldr	r5, [pc, #52]	; (800ea58 <__libc_init_array+0x38>)
 800ea24:	4c0d      	ldr	r4, [pc, #52]	; (800ea5c <__libc_init_array+0x3c>)
 800ea26:	1b64      	subs	r4, r4, r5
 800ea28:	10a4      	asrs	r4, r4, #2
 800ea2a:	2600      	movs	r6, #0
 800ea2c:	42a6      	cmp	r6, r4
 800ea2e:	d109      	bne.n	800ea44 <__libc_init_array+0x24>
 800ea30:	4d0b      	ldr	r5, [pc, #44]	; (800ea60 <__libc_init_array+0x40>)
 800ea32:	4c0c      	ldr	r4, [pc, #48]	; (800ea64 <__libc_init_array+0x44>)
 800ea34:	f002 ff0c 	bl	8011850 <_init>
 800ea38:	1b64      	subs	r4, r4, r5
 800ea3a:	10a4      	asrs	r4, r4, #2
 800ea3c:	2600      	movs	r6, #0
 800ea3e:	42a6      	cmp	r6, r4
 800ea40:	d105      	bne.n	800ea4e <__libc_init_array+0x2e>
 800ea42:	bd70      	pop	{r4, r5, r6, pc}
 800ea44:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea48:	4798      	blx	r3
 800ea4a:	3601      	adds	r6, #1
 800ea4c:	e7ee      	b.n	800ea2c <__libc_init_array+0xc>
 800ea4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea52:	4798      	blx	r3
 800ea54:	3601      	adds	r6, #1
 800ea56:	e7f2      	b.n	800ea3e <__libc_init_array+0x1e>
 800ea58:	080124c4 	.word	0x080124c4
 800ea5c:	080124c4 	.word	0x080124c4
 800ea60:	080124c4 	.word	0x080124c4
 800ea64:	080124c8 	.word	0x080124c8

0800ea68 <malloc>:
 800ea68:	4b02      	ldr	r3, [pc, #8]	; (800ea74 <malloc+0xc>)
 800ea6a:	4601      	mov	r1, r0
 800ea6c:	6818      	ldr	r0, [r3, #0]
 800ea6e:	f000 b87f 	b.w	800eb70 <_malloc_r>
 800ea72:	bf00      	nop
 800ea74:	200000e4 	.word	0x200000e4

0800ea78 <free>:
 800ea78:	4b02      	ldr	r3, [pc, #8]	; (800ea84 <free+0xc>)
 800ea7a:	4601      	mov	r1, r0
 800ea7c:	6818      	ldr	r0, [r3, #0]
 800ea7e:	f000 b80b 	b.w	800ea98 <_free_r>
 800ea82:	bf00      	nop
 800ea84:	200000e4 	.word	0x200000e4

0800ea88 <memset>:
 800ea88:	4402      	add	r2, r0
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	4293      	cmp	r3, r2
 800ea8e:	d100      	bne.n	800ea92 <memset+0xa>
 800ea90:	4770      	bx	lr
 800ea92:	f803 1b01 	strb.w	r1, [r3], #1
 800ea96:	e7f9      	b.n	800ea8c <memset+0x4>

0800ea98 <_free_r>:
 800ea98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea9a:	2900      	cmp	r1, #0
 800ea9c:	d044      	beq.n	800eb28 <_free_r+0x90>
 800ea9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eaa2:	9001      	str	r0, [sp, #4]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	f1a1 0404 	sub.w	r4, r1, #4
 800eaaa:	bfb8      	it	lt
 800eaac:	18e4      	addlt	r4, r4, r3
 800eaae:	f001 fbfb 	bl	80102a8 <__malloc_lock>
 800eab2:	4a1e      	ldr	r2, [pc, #120]	; (800eb2c <_free_r+0x94>)
 800eab4:	9801      	ldr	r0, [sp, #4]
 800eab6:	6813      	ldr	r3, [r2, #0]
 800eab8:	b933      	cbnz	r3, 800eac8 <_free_r+0x30>
 800eaba:	6063      	str	r3, [r4, #4]
 800eabc:	6014      	str	r4, [r2, #0]
 800eabe:	b003      	add	sp, #12
 800eac0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eac4:	f001 bbf6 	b.w	80102b4 <__malloc_unlock>
 800eac8:	42a3      	cmp	r3, r4
 800eaca:	d908      	bls.n	800eade <_free_r+0x46>
 800eacc:	6825      	ldr	r5, [r4, #0]
 800eace:	1961      	adds	r1, r4, r5
 800ead0:	428b      	cmp	r3, r1
 800ead2:	bf01      	itttt	eq
 800ead4:	6819      	ldreq	r1, [r3, #0]
 800ead6:	685b      	ldreq	r3, [r3, #4]
 800ead8:	1949      	addeq	r1, r1, r5
 800eada:	6021      	streq	r1, [r4, #0]
 800eadc:	e7ed      	b.n	800eaba <_free_r+0x22>
 800eade:	461a      	mov	r2, r3
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	b10b      	cbz	r3, 800eae8 <_free_r+0x50>
 800eae4:	42a3      	cmp	r3, r4
 800eae6:	d9fa      	bls.n	800eade <_free_r+0x46>
 800eae8:	6811      	ldr	r1, [r2, #0]
 800eaea:	1855      	adds	r5, r2, r1
 800eaec:	42a5      	cmp	r5, r4
 800eaee:	d10b      	bne.n	800eb08 <_free_r+0x70>
 800eaf0:	6824      	ldr	r4, [r4, #0]
 800eaf2:	4421      	add	r1, r4
 800eaf4:	1854      	adds	r4, r2, r1
 800eaf6:	42a3      	cmp	r3, r4
 800eaf8:	6011      	str	r1, [r2, #0]
 800eafa:	d1e0      	bne.n	800eabe <_free_r+0x26>
 800eafc:	681c      	ldr	r4, [r3, #0]
 800eafe:	685b      	ldr	r3, [r3, #4]
 800eb00:	6053      	str	r3, [r2, #4]
 800eb02:	4421      	add	r1, r4
 800eb04:	6011      	str	r1, [r2, #0]
 800eb06:	e7da      	b.n	800eabe <_free_r+0x26>
 800eb08:	d902      	bls.n	800eb10 <_free_r+0x78>
 800eb0a:	230c      	movs	r3, #12
 800eb0c:	6003      	str	r3, [r0, #0]
 800eb0e:	e7d6      	b.n	800eabe <_free_r+0x26>
 800eb10:	6825      	ldr	r5, [r4, #0]
 800eb12:	1961      	adds	r1, r4, r5
 800eb14:	428b      	cmp	r3, r1
 800eb16:	bf04      	itt	eq
 800eb18:	6819      	ldreq	r1, [r3, #0]
 800eb1a:	685b      	ldreq	r3, [r3, #4]
 800eb1c:	6063      	str	r3, [r4, #4]
 800eb1e:	bf04      	itt	eq
 800eb20:	1949      	addeq	r1, r1, r5
 800eb22:	6021      	streq	r1, [r4, #0]
 800eb24:	6054      	str	r4, [r2, #4]
 800eb26:	e7ca      	b.n	800eabe <_free_r+0x26>
 800eb28:	b003      	add	sp, #12
 800eb2a:	bd30      	pop	{r4, r5, pc}
 800eb2c:	20001720 	.word	0x20001720

0800eb30 <sbrk_aligned>:
 800eb30:	b570      	push	{r4, r5, r6, lr}
 800eb32:	4e0e      	ldr	r6, [pc, #56]	; (800eb6c <sbrk_aligned+0x3c>)
 800eb34:	460c      	mov	r4, r1
 800eb36:	6831      	ldr	r1, [r6, #0]
 800eb38:	4605      	mov	r5, r0
 800eb3a:	b911      	cbnz	r1, 800eb42 <sbrk_aligned+0x12>
 800eb3c:	f000 fcf6 	bl	800f52c <_sbrk_r>
 800eb40:	6030      	str	r0, [r6, #0]
 800eb42:	4621      	mov	r1, r4
 800eb44:	4628      	mov	r0, r5
 800eb46:	f000 fcf1 	bl	800f52c <_sbrk_r>
 800eb4a:	1c43      	adds	r3, r0, #1
 800eb4c:	d00a      	beq.n	800eb64 <sbrk_aligned+0x34>
 800eb4e:	1cc4      	adds	r4, r0, #3
 800eb50:	f024 0403 	bic.w	r4, r4, #3
 800eb54:	42a0      	cmp	r0, r4
 800eb56:	d007      	beq.n	800eb68 <sbrk_aligned+0x38>
 800eb58:	1a21      	subs	r1, r4, r0
 800eb5a:	4628      	mov	r0, r5
 800eb5c:	f000 fce6 	bl	800f52c <_sbrk_r>
 800eb60:	3001      	adds	r0, #1
 800eb62:	d101      	bne.n	800eb68 <sbrk_aligned+0x38>
 800eb64:	f04f 34ff 	mov.w	r4, #4294967295
 800eb68:	4620      	mov	r0, r4
 800eb6a:	bd70      	pop	{r4, r5, r6, pc}
 800eb6c:	20001724 	.word	0x20001724

0800eb70 <_malloc_r>:
 800eb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb74:	1ccd      	adds	r5, r1, #3
 800eb76:	f025 0503 	bic.w	r5, r5, #3
 800eb7a:	3508      	adds	r5, #8
 800eb7c:	2d0c      	cmp	r5, #12
 800eb7e:	bf38      	it	cc
 800eb80:	250c      	movcc	r5, #12
 800eb82:	2d00      	cmp	r5, #0
 800eb84:	4607      	mov	r7, r0
 800eb86:	db01      	blt.n	800eb8c <_malloc_r+0x1c>
 800eb88:	42a9      	cmp	r1, r5
 800eb8a:	d905      	bls.n	800eb98 <_malloc_r+0x28>
 800eb8c:	230c      	movs	r3, #12
 800eb8e:	603b      	str	r3, [r7, #0]
 800eb90:	2600      	movs	r6, #0
 800eb92:	4630      	mov	r0, r6
 800eb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb98:	4e2e      	ldr	r6, [pc, #184]	; (800ec54 <_malloc_r+0xe4>)
 800eb9a:	f001 fb85 	bl	80102a8 <__malloc_lock>
 800eb9e:	6833      	ldr	r3, [r6, #0]
 800eba0:	461c      	mov	r4, r3
 800eba2:	bb34      	cbnz	r4, 800ebf2 <_malloc_r+0x82>
 800eba4:	4629      	mov	r1, r5
 800eba6:	4638      	mov	r0, r7
 800eba8:	f7ff ffc2 	bl	800eb30 <sbrk_aligned>
 800ebac:	1c43      	adds	r3, r0, #1
 800ebae:	4604      	mov	r4, r0
 800ebb0:	d14d      	bne.n	800ec4e <_malloc_r+0xde>
 800ebb2:	6834      	ldr	r4, [r6, #0]
 800ebb4:	4626      	mov	r6, r4
 800ebb6:	2e00      	cmp	r6, #0
 800ebb8:	d140      	bne.n	800ec3c <_malloc_r+0xcc>
 800ebba:	6823      	ldr	r3, [r4, #0]
 800ebbc:	4631      	mov	r1, r6
 800ebbe:	4638      	mov	r0, r7
 800ebc0:	eb04 0803 	add.w	r8, r4, r3
 800ebc4:	f000 fcb2 	bl	800f52c <_sbrk_r>
 800ebc8:	4580      	cmp	r8, r0
 800ebca:	d13a      	bne.n	800ec42 <_malloc_r+0xd2>
 800ebcc:	6821      	ldr	r1, [r4, #0]
 800ebce:	3503      	adds	r5, #3
 800ebd0:	1a6d      	subs	r5, r5, r1
 800ebd2:	f025 0503 	bic.w	r5, r5, #3
 800ebd6:	3508      	adds	r5, #8
 800ebd8:	2d0c      	cmp	r5, #12
 800ebda:	bf38      	it	cc
 800ebdc:	250c      	movcc	r5, #12
 800ebde:	4629      	mov	r1, r5
 800ebe0:	4638      	mov	r0, r7
 800ebe2:	f7ff ffa5 	bl	800eb30 <sbrk_aligned>
 800ebe6:	3001      	adds	r0, #1
 800ebe8:	d02b      	beq.n	800ec42 <_malloc_r+0xd2>
 800ebea:	6823      	ldr	r3, [r4, #0]
 800ebec:	442b      	add	r3, r5
 800ebee:	6023      	str	r3, [r4, #0]
 800ebf0:	e00e      	b.n	800ec10 <_malloc_r+0xa0>
 800ebf2:	6822      	ldr	r2, [r4, #0]
 800ebf4:	1b52      	subs	r2, r2, r5
 800ebf6:	d41e      	bmi.n	800ec36 <_malloc_r+0xc6>
 800ebf8:	2a0b      	cmp	r2, #11
 800ebfa:	d916      	bls.n	800ec2a <_malloc_r+0xba>
 800ebfc:	1961      	adds	r1, r4, r5
 800ebfe:	42a3      	cmp	r3, r4
 800ec00:	6025      	str	r5, [r4, #0]
 800ec02:	bf18      	it	ne
 800ec04:	6059      	strne	r1, [r3, #4]
 800ec06:	6863      	ldr	r3, [r4, #4]
 800ec08:	bf08      	it	eq
 800ec0a:	6031      	streq	r1, [r6, #0]
 800ec0c:	5162      	str	r2, [r4, r5]
 800ec0e:	604b      	str	r3, [r1, #4]
 800ec10:	4638      	mov	r0, r7
 800ec12:	f104 060b 	add.w	r6, r4, #11
 800ec16:	f001 fb4d 	bl	80102b4 <__malloc_unlock>
 800ec1a:	f026 0607 	bic.w	r6, r6, #7
 800ec1e:	1d23      	adds	r3, r4, #4
 800ec20:	1af2      	subs	r2, r6, r3
 800ec22:	d0b6      	beq.n	800eb92 <_malloc_r+0x22>
 800ec24:	1b9b      	subs	r3, r3, r6
 800ec26:	50a3      	str	r3, [r4, r2]
 800ec28:	e7b3      	b.n	800eb92 <_malloc_r+0x22>
 800ec2a:	6862      	ldr	r2, [r4, #4]
 800ec2c:	42a3      	cmp	r3, r4
 800ec2e:	bf0c      	ite	eq
 800ec30:	6032      	streq	r2, [r6, #0]
 800ec32:	605a      	strne	r2, [r3, #4]
 800ec34:	e7ec      	b.n	800ec10 <_malloc_r+0xa0>
 800ec36:	4623      	mov	r3, r4
 800ec38:	6864      	ldr	r4, [r4, #4]
 800ec3a:	e7b2      	b.n	800eba2 <_malloc_r+0x32>
 800ec3c:	4634      	mov	r4, r6
 800ec3e:	6876      	ldr	r6, [r6, #4]
 800ec40:	e7b9      	b.n	800ebb6 <_malloc_r+0x46>
 800ec42:	230c      	movs	r3, #12
 800ec44:	603b      	str	r3, [r7, #0]
 800ec46:	4638      	mov	r0, r7
 800ec48:	f001 fb34 	bl	80102b4 <__malloc_unlock>
 800ec4c:	e7a1      	b.n	800eb92 <_malloc_r+0x22>
 800ec4e:	6025      	str	r5, [r4, #0]
 800ec50:	e7de      	b.n	800ec10 <_malloc_r+0xa0>
 800ec52:	bf00      	nop
 800ec54:	20001720 	.word	0x20001720

0800ec58 <__cvt>:
 800ec58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec5c:	ec55 4b10 	vmov	r4, r5, d0
 800ec60:	2d00      	cmp	r5, #0
 800ec62:	460e      	mov	r6, r1
 800ec64:	4619      	mov	r1, r3
 800ec66:	462b      	mov	r3, r5
 800ec68:	bfbb      	ittet	lt
 800ec6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ec6e:	461d      	movlt	r5, r3
 800ec70:	2300      	movge	r3, #0
 800ec72:	232d      	movlt	r3, #45	; 0x2d
 800ec74:	700b      	strb	r3, [r1, #0]
 800ec76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ec7c:	4691      	mov	r9, r2
 800ec7e:	f023 0820 	bic.w	r8, r3, #32
 800ec82:	bfbc      	itt	lt
 800ec84:	4622      	movlt	r2, r4
 800ec86:	4614      	movlt	r4, r2
 800ec88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ec8c:	d005      	beq.n	800ec9a <__cvt+0x42>
 800ec8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ec92:	d100      	bne.n	800ec96 <__cvt+0x3e>
 800ec94:	3601      	adds	r6, #1
 800ec96:	2102      	movs	r1, #2
 800ec98:	e000      	b.n	800ec9c <__cvt+0x44>
 800ec9a:	2103      	movs	r1, #3
 800ec9c:	ab03      	add	r3, sp, #12
 800ec9e:	9301      	str	r3, [sp, #4]
 800eca0:	ab02      	add	r3, sp, #8
 800eca2:	9300      	str	r3, [sp, #0]
 800eca4:	ec45 4b10 	vmov	d0, r4, r5
 800eca8:	4653      	mov	r3, sl
 800ecaa:	4632      	mov	r2, r6
 800ecac:	f000 fcfc 	bl	800f6a8 <_dtoa_r>
 800ecb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ecb4:	4607      	mov	r7, r0
 800ecb6:	d102      	bne.n	800ecbe <__cvt+0x66>
 800ecb8:	f019 0f01 	tst.w	r9, #1
 800ecbc:	d022      	beq.n	800ed04 <__cvt+0xac>
 800ecbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ecc2:	eb07 0906 	add.w	r9, r7, r6
 800ecc6:	d110      	bne.n	800ecea <__cvt+0x92>
 800ecc8:	783b      	ldrb	r3, [r7, #0]
 800ecca:	2b30      	cmp	r3, #48	; 0x30
 800eccc:	d10a      	bne.n	800ece4 <__cvt+0x8c>
 800ecce:	2200      	movs	r2, #0
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	4629      	mov	r1, r5
 800ecd6:	f7f1 feff 	bl	8000ad8 <__aeabi_dcmpeq>
 800ecda:	b918      	cbnz	r0, 800ece4 <__cvt+0x8c>
 800ecdc:	f1c6 0601 	rsb	r6, r6, #1
 800ece0:	f8ca 6000 	str.w	r6, [sl]
 800ece4:	f8da 3000 	ldr.w	r3, [sl]
 800ece8:	4499      	add	r9, r3
 800ecea:	2200      	movs	r2, #0
 800ecec:	2300      	movs	r3, #0
 800ecee:	4620      	mov	r0, r4
 800ecf0:	4629      	mov	r1, r5
 800ecf2:	f7f1 fef1 	bl	8000ad8 <__aeabi_dcmpeq>
 800ecf6:	b108      	cbz	r0, 800ecfc <__cvt+0xa4>
 800ecf8:	f8cd 900c 	str.w	r9, [sp, #12]
 800ecfc:	2230      	movs	r2, #48	; 0x30
 800ecfe:	9b03      	ldr	r3, [sp, #12]
 800ed00:	454b      	cmp	r3, r9
 800ed02:	d307      	bcc.n	800ed14 <__cvt+0xbc>
 800ed04:	9b03      	ldr	r3, [sp, #12]
 800ed06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed08:	1bdb      	subs	r3, r3, r7
 800ed0a:	4638      	mov	r0, r7
 800ed0c:	6013      	str	r3, [r2, #0]
 800ed0e:	b004      	add	sp, #16
 800ed10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed14:	1c59      	adds	r1, r3, #1
 800ed16:	9103      	str	r1, [sp, #12]
 800ed18:	701a      	strb	r2, [r3, #0]
 800ed1a:	e7f0      	b.n	800ecfe <__cvt+0xa6>

0800ed1c <__exponent>:
 800ed1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2900      	cmp	r1, #0
 800ed22:	bfb8      	it	lt
 800ed24:	4249      	neglt	r1, r1
 800ed26:	f803 2b02 	strb.w	r2, [r3], #2
 800ed2a:	bfb4      	ite	lt
 800ed2c:	222d      	movlt	r2, #45	; 0x2d
 800ed2e:	222b      	movge	r2, #43	; 0x2b
 800ed30:	2909      	cmp	r1, #9
 800ed32:	7042      	strb	r2, [r0, #1]
 800ed34:	dd2a      	ble.n	800ed8c <__exponent+0x70>
 800ed36:	f10d 0407 	add.w	r4, sp, #7
 800ed3a:	46a4      	mov	ip, r4
 800ed3c:	270a      	movs	r7, #10
 800ed3e:	46a6      	mov	lr, r4
 800ed40:	460a      	mov	r2, r1
 800ed42:	fb91 f6f7 	sdiv	r6, r1, r7
 800ed46:	fb07 1516 	mls	r5, r7, r6, r1
 800ed4a:	3530      	adds	r5, #48	; 0x30
 800ed4c:	2a63      	cmp	r2, #99	; 0x63
 800ed4e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ed52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ed56:	4631      	mov	r1, r6
 800ed58:	dcf1      	bgt.n	800ed3e <__exponent+0x22>
 800ed5a:	3130      	adds	r1, #48	; 0x30
 800ed5c:	f1ae 0502 	sub.w	r5, lr, #2
 800ed60:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ed64:	1c44      	adds	r4, r0, #1
 800ed66:	4629      	mov	r1, r5
 800ed68:	4561      	cmp	r1, ip
 800ed6a:	d30a      	bcc.n	800ed82 <__exponent+0x66>
 800ed6c:	f10d 0209 	add.w	r2, sp, #9
 800ed70:	eba2 020e 	sub.w	r2, r2, lr
 800ed74:	4565      	cmp	r5, ip
 800ed76:	bf88      	it	hi
 800ed78:	2200      	movhi	r2, #0
 800ed7a:	4413      	add	r3, r2
 800ed7c:	1a18      	subs	r0, r3, r0
 800ed7e:	b003      	add	sp, #12
 800ed80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed86:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ed8a:	e7ed      	b.n	800ed68 <__exponent+0x4c>
 800ed8c:	2330      	movs	r3, #48	; 0x30
 800ed8e:	3130      	adds	r1, #48	; 0x30
 800ed90:	7083      	strb	r3, [r0, #2]
 800ed92:	70c1      	strb	r1, [r0, #3]
 800ed94:	1d03      	adds	r3, r0, #4
 800ed96:	e7f1      	b.n	800ed7c <__exponent+0x60>

0800ed98 <_printf_float>:
 800ed98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed9c:	ed2d 8b02 	vpush	{d8}
 800eda0:	b08d      	sub	sp, #52	; 0x34
 800eda2:	460c      	mov	r4, r1
 800eda4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800eda8:	4616      	mov	r6, r2
 800edaa:	461f      	mov	r7, r3
 800edac:	4605      	mov	r5, r0
 800edae:	f001 fa69 	bl	8010284 <_localeconv_r>
 800edb2:	f8d0 a000 	ldr.w	sl, [r0]
 800edb6:	4650      	mov	r0, sl
 800edb8:	f7f1 fa12 	bl	80001e0 <strlen>
 800edbc:	2300      	movs	r3, #0
 800edbe:	930a      	str	r3, [sp, #40]	; 0x28
 800edc0:	6823      	ldr	r3, [r4, #0]
 800edc2:	9305      	str	r3, [sp, #20]
 800edc4:	f8d8 3000 	ldr.w	r3, [r8]
 800edc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800edcc:	3307      	adds	r3, #7
 800edce:	f023 0307 	bic.w	r3, r3, #7
 800edd2:	f103 0208 	add.w	r2, r3, #8
 800edd6:	f8c8 2000 	str.w	r2, [r8]
 800edda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edde:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ede2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ede6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800edea:	9307      	str	r3, [sp, #28]
 800edec:	f8cd 8018 	str.w	r8, [sp, #24]
 800edf0:	ee08 0a10 	vmov	s16, r0
 800edf4:	4b9f      	ldr	r3, [pc, #636]	; (800f074 <_printf_float+0x2dc>)
 800edf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800edfa:	f04f 32ff 	mov.w	r2, #4294967295
 800edfe:	f7f1 fe9d 	bl	8000b3c <__aeabi_dcmpun>
 800ee02:	bb88      	cbnz	r0, 800ee68 <_printf_float+0xd0>
 800ee04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee08:	4b9a      	ldr	r3, [pc, #616]	; (800f074 <_printf_float+0x2dc>)
 800ee0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ee0e:	f7f1 fe77 	bl	8000b00 <__aeabi_dcmple>
 800ee12:	bb48      	cbnz	r0, 800ee68 <_printf_float+0xd0>
 800ee14:	2200      	movs	r2, #0
 800ee16:	2300      	movs	r3, #0
 800ee18:	4640      	mov	r0, r8
 800ee1a:	4649      	mov	r1, r9
 800ee1c:	f7f1 fe66 	bl	8000aec <__aeabi_dcmplt>
 800ee20:	b110      	cbz	r0, 800ee28 <_printf_float+0x90>
 800ee22:	232d      	movs	r3, #45	; 0x2d
 800ee24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee28:	4b93      	ldr	r3, [pc, #588]	; (800f078 <_printf_float+0x2e0>)
 800ee2a:	4894      	ldr	r0, [pc, #592]	; (800f07c <_printf_float+0x2e4>)
 800ee2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ee30:	bf94      	ite	ls
 800ee32:	4698      	movls	r8, r3
 800ee34:	4680      	movhi	r8, r0
 800ee36:	2303      	movs	r3, #3
 800ee38:	6123      	str	r3, [r4, #16]
 800ee3a:	9b05      	ldr	r3, [sp, #20]
 800ee3c:	f023 0204 	bic.w	r2, r3, #4
 800ee40:	6022      	str	r2, [r4, #0]
 800ee42:	f04f 0900 	mov.w	r9, #0
 800ee46:	9700      	str	r7, [sp, #0]
 800ee48:	4633      	mov	r3, r6
 800ee4a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ee4c:	4621      	mov	r1, r4
 800ee4e:	4628      	mov	r0, r5
 800ee50:	f000 f9d8 	bl	800f204 <_printf_common>
 800ee54:	3001      	adds	r0, #1
 800ee56:	f040 8090 	bne.w	800ef7a <_printf_float+0x1e2>
 800ee5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ee5e:	b00d      	add	sp, #52	; 0x34
 800ee60:	ecbd 8b02 	vpop	{d8}
 800ee64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee68:	4642      	mov	r2, r8
 800ee6a:	464b      	mov	r3, r9
 800ee6c:	4640      	mov	r0, r8
 800ee6e:	4649      	mov	r1, r9
 800ee70:	f7f1 fe64 	bl	8000b3c <__aeabi_dcmpun>
 800ee74:	b140      	cbz	r0, 800ee88 <_printf_float+0xf0>
 800ee76:	464b      	mov	r3, r9
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	bfbc      	itt	lt
 800ee7c:	232d      	movlt	r3, #45	; 0x2d
 800ee7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ee82:	487f      	ldr	r0, [pc, #508]	; (800f080 <_printf_float+0x2e8>)
 800ee84:	4b7f      	ldr	r3, [pc, #508]	; (800f084 <_printf_float+0x2ec>)
 800ee86:	e7d1      	b.n	800ee2c <_printf_float+0x94>
 800ee88:	6863      	ldr	r3, [r4, #4]
 800ee8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ee8e:	9206      	str	r2, [sp, #24]
 800ee90:	1c5a      	adds	r2, r3, #1
 800ee92:	d13f      	bne.n	800ef14 <_printf_float+0x17c>
 800ee94:	2306      	movs	r3, #6
 800ee96:	6063      	str	r3, [r4, #4]
 800ee98:	9b05      	ldr	r3, [sp, #20]
 800ee9a:	6861      	ldr	r1, [r4, #4]
 800ee9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800eea0:	2300      	movs	r3, #0
 800eea2:	9303      	str	r3, [sp, #12]
 800eea4:	ab0a      	add	r3, sp, #40	; 0x28
 800eea6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800eeaa:	ab09      	add	r3, sp, #36	; 0x24
 800eeac:	ec49 8b10 	vmov	d0, r8, r9
 800eeb0:	9300      	str	r3, [sp, #0]
 800eeb2:	6022      	str	r2, [r4, #0]
 800eeb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eeb8:	4628      	mov	r0, r5
 800eeba:	f7ff fecd 	bl	800ec58 <__cvt>
 800eebe:	9b06      	ldr	r3, [sp, #24]
 800eec0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eec2:	2b47      	cmp	r3, #71	; 0x47
 800eec4:	4680      	mov	r8, r0
 800eec6:	d108      	bne.n	800eeda <_printf_float+0x142>
 800eec8:	1cc8      	adds	r0, r1, #3
 800eeca:	db02      	blt.n	800eed2 <_printf_float+0x13a>
 800eecc:	6863      	ldr	r3, [r4, #4]
 800eece:	4299      	cmp	r1, r3
 800eed0:	dd41      	ble.n	800ef56 <_printf_float+0x1be>
 800eed2:	f1ab 0b02 	sub.w	fp, fp, #2
 800eed6:	fa5f fb8b 	uxtb.w	fp, fp
 800eeda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eede:	d820      	bhi.n	800ef22 <_printf_float+0x18a>
 800eee0:	3901      	subs	r1, #1
 800eee2:	465a      	mov	r2, fp
 800eee4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eee8:	9109      	str	r1, [sp, #36]	; 0x24
 800eeea:	f7ff ff17 	bl	800ed1c <__exponent>
 800eeee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eef0:	1813      	adds	r3, r2, r0
 800eef2:	2a01      	cmp	r2, #1
 800eef4:	4681      	mov	r9, r0
 800eef6:	6123      	str	r3, [r4, #16]
 800eef8:	dc02      	bgt.n	800ef00 <_printf_float+0x168>
 800eefa:	6822      	ldr	r2, [r4, #0]
 800eefc:	07d2      	lsls	r2, r2, #31
 800eefe:	d501      	bpl.n	800ef04 <_printf_float+0x16c>
 800ef00:	3301      	adds	r3, #1
 800ef02:	6123      	str	r3, [r4, #16]
 800ef04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d09c      	beq.n	800ee46 <_printf_float+0xae>
 800ef0c:	232d      	movs	r3, #45	; 0x2d
 800ef0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef12:	e798      	b.n	800ee46 <_printf_float+0xae>
 800ef14:	9a06      	ldr	r2, [sp, #24]
 800ef16:	2a47      	cmp	r2, #71	; 0x47
 800ef18:	d1be      	bne.n	800ee98 <_printf_float+0x100>
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d1bc      	bne.n	800ee98 <_printf_float+0x100>
 800ef1e:	2301      	movs	r3, #1
 800ef20:	e7b9      	b.n	800ee96 <_printf_float+0xfe>
 800ef22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ef26:	d118      	bne.n	800ef5a <_printf_float+0x1c2>
 800ef28:	2900      	cmp	r1, #0
 800ef2a:	6863      	ldr	r3, [r4, #4]
 800ef2c:	dd0b      	ble.n	800ef46 <_printf_float+0x1ae>
 800ef2e:	6121      	str	r1, [r4, #16]
 800ef30:	b913      	cbnz	r3, 800ef38 <_printf_float+0x1a0>
 800ef32:	6822      	ldr	r2, [r4, #0]
 800ef34:	07d0      	lsls	r0, r2, #31
 800ef36:	d502      	bpl.n	800ef3e <_printf_float+0x1a6>
 800ef38:	3301      	adds	r3, #1
 800ef3a:	440b      	add	r3, r1
 800ef3c:	6123      	str	r3, [r4, #16]
 800ef3e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ef40:	f04f 0900 	mov.w	r9, #0
 800ef44:	e7de      	b.n	800ef04 <_printf_float+0x16c>
 800ef46:	b913      	cbnz	r3, 800ef4e <_printf_float+0x1b6>
 800ef48:	6822      	ldr	r2, [r4, #0]
 800ef4a:	07d2      	lsls	r2, r2, #31
 800ef4c:	d501      	bpl.n	800ef52 <_printf_float+0x1ba>
 800ef4e:	3302      	adds	r3, #2
 800ef50:	e7f4      	b.n	800ef3c <_printf_float+0x1a4>
 800ef52:	2301      	movs	r3, #1
 800ef54:	e7f2      	b.n	800ef3c <_printf_float+0x1a4>
 800ef56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ef5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef5c:	4299      	cmp	r1, r3
 800ef5e:	db05      	blt.n	800ef6c <_printf_float+0x1d4>
 800ef60:	6823      	ldr	r3, [r4, #0]
 800ef62:	6121      	str	r1, [r4, #16]
 800ef64:	07d8      	lsls	r0, r3, #31
 800ef66:	d5ea      	bpl.n	800ef3e <_printf_float+0x1a6>
 800ef68:	1c4b      	adds	r3, r1, #1
 800ef6a:	e7e7      	b.n	800ef3c <_printf_float+0x1a4>
 800ef6c:	2900      	cmp	r1, #0
 800ef6e:	bfd4      	ite	le
 800ef70:	f1c1 0202 	rsble	r2, r1, #2
 800ef74:	2201      	movgt	r2, #1
 800ef76:	4413      	add	r3, r2
 800ef78:	e7e0      	b.n	800ef3c <_printf_float+0x1a4>
 800ef7a:	6823      	ldr	r3, [r4, #0]
 800ef7c:	055a      	lsls	r2, r3, #21
 800ef7e:	d407      	bmi.n	800ef90 <_printf_float+0x1f8>
 800ef80:	6923      	ldr	r3, [r4, #16]
 800ef82:	4642      	mov	r2, r8
 800ef84:	4631      	mov	r1, r6
 800ef86:	4628      	mov	r0, r5
 800ef88:	47b8      	blx	r7
 800ef8a:	3001      	adds	r0, #1
 800ef8c:	d12c      	bne.n	800efe8 <_printf_float+0x250>
 800ef8e:	e764      	b.n	800ee5a <_printf_float+0xc2>
 800ef90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ef94:	f240 80e0 	bls.w	800f158 <_printf_float+0x3c0>
 800ef98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	2300      	movs	r3, #0
 800efa0:	f7f1 fd9a 	bl	8000ad8 <__aeabi_dcmpeq>
 800efa4:	2800      	cmp	r0, #0
 800efa6:	d034      	beq.n	800f012 <_printf_float+0x27a>
 800efa8:	4a37      	ldr	r2, [pc, #220]	; (800f088 <_printf_float+0x2f0>)
 800efaa:	2301      	movs	r3, #1
 800efac:	4631      	mov	r1, r6
 800efae:	4628      	mov	r0, r5
 800efb0:	47b8      	blx	r7
 800efb2:	3001      	adds	r0, #1
 800efb4:	f43f af51 	beq.w	800ee5a <_printf_float+0xc2>
 800efb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800efbc:	429a      	cmp	r2, r3
 800efbe:	db02      	blt.n	800efc6 <_printf_float+0x22e>
 800efc0:	6823      	ldr	r3, [r4, #0]
 800efc2:	07d8      	lsls	r0, r3, #31
 800efc4:	d510      	bpl.n	800efe8 <_printf_float+0x250>
 800efc6:	ee18 3a10 	vmov	r3, s16
 800efca:	4652      	mov	r2, sl
 800efcc:	4631      	mov	r1, r6
 800efce:	4628      	mov	r0, r5
 800efd0:	47b8      	blx	r7
 800efd2:	3001      	adds	r0, #1
 800efd4:	f43f af41 	beq.w	800ee5a <_printf_float+0xc2>
 800efd8:	f04f 0800 	mov.w	r8, #0
 800efdc:	f104 091a 	add.w	r9, r4, #26
 800efe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efe2:	3b01      	subs	r3, #1
 800efe4:	4543      	cmp	r3, r8
 800efe6:	dc09      	bgt.n	800effc <_printf_float+0x264>
 800efe8:	6823      	ldr	r3, [r4, #0]
 800efea:	079b      	lsls	r3, r3, #30
 800efec:	f100 8105 	bmi.w	800f1fa <_printf_float+0x462>
 800eff0:	68e0      	ldr	r0, [r4, #12]
 800eff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eff4:	4298      	cmp	r0, r3
 800eff6:	bfb8      	it	lt
 800eff8:	4618      	movlt	r0, r3
 800effa:	e730      	b.n	800ee5e <_printf_float+0xc6>
 800effc:	2301      	movs	r3, #1
 800effe:	464a      	mov	r2, r9
 800f000:	4631      	mov	r1, r6
 800f002:	4628      	mov	r0, r5
 800f004:	47b8      	blx	r7
 800f006:	3001      	adds	r0, #1
 800f008:	f43f af27 	beq.w	800ee5a <_printf_float+0xc2>
 800f00c:	f108 0801 	add.w	r8, r8, #1
 800f010:	e7e6      	b.n	800efe0 <_printf_float+0x248>
 800f012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f014:	2b00      	cmp	r3, #0
 800f016:	dc39      	bgt.n	800f08c <_printf_float+0x2f4>
 800f018:	4a1b      	ldr	r2, [pc, #108]	; (800f088 <_printf_float+0x2f0>)
 800f01a:	2301      	movs	r3, #1
 800f01c:	4631      	mov	r1, r6
 800f01e:	4628      	mov	r0, r5
 800f020:	47b8      	blx	r7
 800f022:	3001      	adds	r0, #1
 800f024:	f43f af19 	beq.w	800ee5a <_printf_float+0xc2>
 800f028:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f02c:	4313      	orrs	r3, r2
 800f02e:	d102      	bne.n	800f036 <_printf_float+0x29e>
 800f030:	6823      	ldr	r3, [r4, #0]
 800f032:	07d9      	lsls	r1, r3, #31
 800f034:	d5d8      	bpl.n	800efe8 <_printf_float+0x250>
 800f036:	ee18 3a10 	vmov	r3, s16
 800f03a:	4652      	mov	r2, sl
 800f03c:	4631      	mov	r1, r6
 800f03e:	4628      	mov	r0, r5
 800f040:	47b8      	blx	r7
 800f042:	3001      	adds	r0, #1
 800f044:	f43f af09 	beq.w	800ee5a <_printf_float+0xc2>
 800f048:	f04f 0900 	mov.w	r9, #0
 800f04c:	f104 0a1a 	add.w	sl, r4, #26
 800f050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f052:	425b      	negs	r3, r3
 800f054:	454b      	cmp	r3, r9
 800f056:	dc01      	bgt.n	800f05c <_printf_float+0x2c4>
 800f058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f05a:	e792      	b.n	800ef82 <_printf_float+0x1ea>
 800f05c:	2301      	movs	r3, #1
 800f05e:	4652      	mov	r2, sl
 800f060:	4631      	mov	r1, r6
 800f062:	4628      	mov	r0, r5
 800f064:	47b8      	blx	r7
 800f066:	3001      	adds	r0, #1
 800f068:	f43f aef7 	beq.w	800ee5a <_printf_float+0xc2>
 800f06c:	f109 0901 	add.w	r9, r9, #1
 800f070:	e7ee      	b.n	800f050 <_printf_float+0x2b8>
 800f072:	bf00      	nop
 800f074:	7fefffff 	.word	0x7fefffff
 800f078:	080120f0 	.word	0x080120f0
 800f07c:	080120f4 	.word	0x080120f4
 800f080:	080120fc 	.word	0x080120fc
 800f084:	080120f8 	.word	0x080120f8
 800f088:	08012100 	.word	0x08012100
 800f08c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f08e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f090:	429a      	cmp	r2, r3
 800f092:	bfa8      	it	ge
 800f094:	461a      	movge	r2, r3
 800f096:	2a00      	cmp	r2, #0
 800f098:	4691      	mov	r9, r2
 800f09a:	dc37      	bgt.n	800f10c <_printf_float+0x374>
 800f09c:	f04f 0b00 	mov.w	fp, #0
 800f0a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f0a4:	f104 021a 	add.w	r2, r4, #26
 800f0a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f0aa:	9305      	str	r3, [sp, #20]
 800f0ac:	eba3 0309 	sub.w	r3, r3, r9
 800f0b0:	455b      	cmp	r3, fp
 800f0b2:	dc33      	bgt.n	800f11c <_printf_float+0x384>
 800f0b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	db3b      	blt.n	800f134 <_printf_float+0x39c>
 800f0bc:	6823      	ldr	r3, [r4, #0]
 800f0be:	07da      	lsls	r2, r3, #31
 800f0c0:	d438      	bmi.n	800f134 <_printf_float+0x39c>
 800f0c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0c4:	9a05      	ldr	r2, [sp, #20]
 800f0c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f0c8:	1a9a      	subs	r2, r3, r2
 800f0ca:	eba3 0901 	sub.w	r9, r3, r1
 800f0ce:	4591      	cmp	r9, r2
 800f0d0:	bfa8      	it	ge
 800f0d2:	4691      	movge	r9, r2
 800f0d4:	f1b9 0f00 	cmp.w	r9, #0
 800f0d8:	dc35      	bgt.n	800f146 <_printf_float+0x3ae>
 800f0da:	f04f 0800 	mov.w	r8, #0
 800f0de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f0e2:	f104 0a1a 	add.w	sl, r4, #26
 800f0e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f0ea:	1a9b      	subs	r3, r3, r2
 800f0ec:	eba3 0309 	sub.w	r3, r3, r9
 800f0f0:	4543      	cmp	r3, r8
 800f0f2:	f77f af79 	ble.w	800efe8 <_printf_float+0x250>
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	4652      	mov	r2, sl
 800f0fa:	4631      	mov	r1, r6
 800f0fc:	4628      	mov	r0, r5
 800f0fe:	47b8      	blx	r7
 800f100:	3001      	adds	r0, #1
 800f102:	f43f aeaa 	beq.w	800ee5a <_printf_float+0xc2>
 800f106:	f108 0801 	add.w	r8, r8, #1
 800f10a:	e7ec      	b.n	800f0e6 <_printf_float+0x34e>
 800f10c:	4613      	mov	r3, r2
 800f10e:	4631      	mov	r1, r6
 800f110:	4642      	mov	r2, r8
 800f112:	4628      	mov	r0, r5
 800f114:	47b8      	blx	r7
 800f116:	3001      	adds	r0, #1
 800f118:	d1c0      	bne.n	800f09c <_printf_float+0x304>
 800f11a:	e69e      	b.n	800ee5a <_printf_float+0xc2>
 800f11c:	2301      	movs	r3, #1
 800f11e:	4631      	mov	r1, r6
 800f120:	4628      	mov	r0, r5
 800f122:	9205      	str	r2, [sp, #20]
 800f124:	47b8      	blx	r7
 800f126:	3001      	adds	r0, #1
 800f128:	f43f ae97 	beq.w	800ee5a <_printf_float+0xc2>
 800f12c:	9a05      	ldr	r2, [sp, #20]
 800f12e:	f10b 0b01 	add.w	fp, fp, #1
 800f132:	e7b9      	b.n	800f0a8 <_printf_float+0x310>
 800f134:	ee18 3a10 	vmov	r3, s16
 800f138:	4652      	mov	r2, sl
 800f13a:	4631      	mov	r1, r6
 800f13c:	4628      	mov	r0, r5
 800f13e:	47b8      	blx	r7
 800f140:	3001      	adds	r0, #1
 800f142:	d1be      	bne.n	800f0c2 <_printf_float+0x32a>
 800f144:	e689      	b.n	800ee5a <_printf_float+0xc2>
 800f146:	9a05      	ldr	r2, [sp, #20]
 800f148:	464b      	mov	r3, r9
 800f14a:	4442      	add	r2, r8
 800f14c:	4631      	mov	r1, r6
 800f14e:	4628      	mov	r0, r5
 800f150:	47b8      	blx	r7
 800f152:	3001      	adds	r0, #1
 800f154:	d1c1      	bne.n	800f0da <_printf_float+0x342>
 800f156:	e680      	b.n	800ee5a <_printf_float+0xc2>
 800f158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f15a:	2a01      	cmp	r2, #1
 800f15c:	dc01      	bgt.n	800f162 <_printf_float+0x3ca>
 800f15e:	07db      	lsls	r3, r3, #31
 800f160:	d538      	bpl.n	800f1d4 <_printf_float+0x43c>
 800f162:	2301      	movs	r3, #1
 800f164:	4642      	mov	r2, r8
 800f166:	4631      	mov	r1, r6
 800f168:	4628      	mov	r0, r5
 800f16a:	47b8      	blx	r7
 800f16c:	3001      	adds	r0, #1
 800f16e:	f43f ae74 	beq.w	800ee5a <_printf_float+0xc2>
 800f172:	ee18 3a10 	vmov	r3, s16
 800f176:	4652      	mov	r2, sl
 800f178:	4631      	mov	r1, r6
 800f17a:	4628      	mov	r0, r5
 800f17c:	47b8      	blx	r7
 800f17e:	3001      	adds	r0, #1
 800f180:	f43f ae6b 	beq.w	800ee5a <_printf_float+0xc2>
 800f184:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f188:	2200      	movs	r2, #0
 800f18a:	2300      	movs	r3, #0
 800f18c:	f7f1 fca4 	bl	8000ad8 <__aeabi_dcmpeq>
 800f190:	b9d8      	cbnz	r0, 800f1ca <_printf_float+0x432>
 800f192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f194:	f108 0201 	add.w	r2, r8, #1
 800f198:	3b01      	subs	r3, #1
 800f19a:	4631      	mov	r1, r6
 800f19c:	4628      	mov	r0, r5
 800f19e:	47b8      	blx	r7
 800f1a0:	3001      	adds	r0, #1
 800f1a2:	d10e      	bne.n	800f1c2 <_printf_float+0x42a>
 800f1a4:	e659      	b.n	800ee5a <_printf_float+0xc2>
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	4652      	mov	r2, sl
 800f1aa:	4631      	mov	r1, r6
 800f1ac:	4628      	mov	r0, r5
 800f1ae:	47b8      	blx	r7
 800f1b0:	3001      	adds	r0, #1
 800f1b2:	f43f ae52 	beq.w	800ee5a <_printf_float+0xc2>
 800f1b6:	f108 0801 	add.w	r8, r8, #1
 800f1ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1bc:	3b01      	subs	r3, #1
 800f1be:	4543      	cmp	r3, r8
 800f1c0:	dcf1      	bgt.n	800f1a6 <_printf_float+0x40e>
 800f1c2:	464b      	mov	r3, r9
 800f1c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f1c8:	e6dc      	b.n	800ef84 <_printf_float+0x1ec>
 800f1ca:	f04f 0800 	mov.w	r8, #0
 800f1ce:	f104 0a1a 	add.w	sl, r4, #26
 800f1d2:	e7f2      	b.n	800f1ba <_printf_float+0x422>
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	4642      	mov	r2, r8
 800f1d8:	e7df      	b.n	800f19a <_printf_float+0x402>
 800f1da:	2301      	movs	r3, #1
 800f1dc:	464a      	mov	r2, r9
 800f1de:	4631      	mov	r1, r6
 800f1e0:	4628      	mov	r0, r5
 800f1e2:	47b8      	blx	r7
 800f1e4:	3001      	adds	r0, #1
 800f1e6:	f43f ae38 	beq.w	800ee5a <_printf_float+0xc2>
 800f1ea:	f108 0801 	add.w	r8, r8, #1
 800f1ee:	68e3      	ldr	r3, [r4, #12]
 800f1f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f1f2:	1a5b      	subs	r3, r3, r1
 800f1f4:	4543      	cmp	r3, r8
 800f1f6:	dcf0      	bgt.n	800f1da <_printf_float+0x442>
 800f1f8:	e6fa      	b.n	800eff0 <_printf_float+0x258>
 800f1fa:	f04f 0800 	mov.w	r8, #0
 800f1fe:	f104 0919 	add.w	r9, r4, #25
 800f202:	e7f4      	b.n	800f1ee <_printf_float+0x456>

0800f204 <_printf_common>:
 800f204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f208:	4616      	mov	r6, r2
 800f20a:	4699      	mov	r9, r3
 800f20c:	688a      	ldr	r2, [r1, #8]
 800f20e:	690b      	ldr	r3, [r1, #16]
 800f210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f214:	4293      	cmp	r3, r2
 800f216:	bfb8      	it	lt
 800f218:	4613      	movlt	r3, r2
 800f21a:	6033      	str	r3, [r6, #0]
 800f21c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f220:	4607      	mov	r7, r0
 800f222:	460c      	mov	r4, r1
 800f224:	b10a      	cbz	r2, 800f22a <_printf_common+0x26>
 800f226:	3301      	adds	r3, #1
 800f228:	6033      	str	r3, [r6, #0]
 800f22a:	6823      	ldr	r3, [r4, #0]
 800f22c:	0699      	lsls	r1, r3, #26
 800f22e:	bf42      	ittt	mi
 800f230:	6833      	ldrmi	r3, [r6, #0]
 800f232:	3302      	addmi	r3, #2
 800f234:	6033      	strmi	r3, [r6, #0]
 800f236:	6825      	ldr	r5, [r4, #0]
 800f238:	f015 0506 	ands.w	r5, r5, #6
 800f23c:	d106      	bne.n	800f24c <_printf_common+0x48>
 800f23e:	f104 0a19 	add.w	sl, r4, #25
 800f242:	68e3      	ldr	r3, [r4, #12]
 800f244:	6832      	ldr	r2, [r6, #0]
 800f246:	1a9b      	subs	r3, r3, r2
 800f248:	42ab      	cmp	r3, r5
 800f24a:	dc26      	bgt.n	800f29a <_printf_common+0x96>
 800f24c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f250:	1e13      	subs	r3, r2, #0
 800f252:	6822      	ldr	r2, [r4, #0]
 800f254:	bf18      	it	ne
 800f256:	2301      	movne	r3, #1
 800f258:	0692      	lsls	r2, r2, #26
 800f25a:	d42b      	bmi.n	800f2b4 <_printf_common+0xb0>
 800f25c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f260:	4649      	mov	r1, r9
 800f262:	4638      	mov	r0, r7
 800f264:	47c0      	blx	r8
 800f266:	3001      	adds	r0, #1
 800f268:	d01e      	beq.n	800f2a8 <_printf_common+0xa4>
 800f26a:	6823      	ldr	r3, [r4, #0]
 800f26c:	68e5      	ldr	r5, [r4, #12]
 800f26e:	6832      	ldr	r2, [r6, #0]
 800f270:	f003 0306 	and.w	r3, r3, #6
 800f274:	2b04      	cmp	r3, #4
 800f276:	bf08      	it	eq
 800f278:	1aad      	subeq	r5, r5, r2
 800f27a:	68a3      	ldr	r3, [r4, #8]
 800f27c:	6922      	ldr	r2, [r4, #16]
 800f27e:	bf0c      	ite	eq
 800f280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f284:	2500      	movne	r5, #0
 800f286:	4293      	cmp	r3, r2
 800f288:	bfc4      	itt	gt
 800f28a:	1a9b      	subgt	r3, r3, r2
 800f28c:	18ed      	addgt	r5, r5, r3
 800f28e:	2600      	movs	r6, #0
 800f290:	341a      	adds	r4, #26
 800f292:	42b5      	cmp	r5, r6
 800f294:	d11a      	bne.n	800f2cc <_printf_common+0xc8>
 800f296:	2000      	movs	r0, #0
 800f298:	e008      	b.n	800f2ac <_printf_common+0xa8>
 800f29a:	2301      	movs	r3, #1
 800f29c:	4652      	mov	r2, sl
 800f29e:	4649      	mov	r1, r9
 800f2a0:	4638      	mov	r0, r7
 800f2a2:	47c0      	blx	r8
 800f2a4:	3001      	adds	r0, #1
 800f2a6:	d103      	bne.n	800f2b0 <_printf_common+0xac>
 800f2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2b0:	3501      	adds	r5, #1
 800f2b2:	e7c6      	b.n	800f242 <_printf_common+0x3e>
 800f2b4:	18e1      	adds	r1, r4, r3
 800f2b6:	1c5a      	adds	r2, r3, #1
 800f2b8:	2030      	movs	r0, #48	; 0x30
 800f2ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f2be:	4422      	add	r2, r4
 800f2c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f2c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f2c8:	3302      	adds	r3, #2
 800f2ca:	e7c7      	b.n	800f25c <_printf_common+0x58>
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	4622      	mov	r2, r4
 800f2d0:	4649      	mov	r1, r9
 800f2d2:	4638      	mov	r0, r7
 800f2d4:	47c0      	blx	r8
 800f2d6:	3001      	adds	r0, #1
 800f2d8:	d0e6      	beq.n	800f2a8 <_printf_common+0xa4>
 800f2da:	3601      	adds	r6, #1
 800f2dc:	e7d9      	b.n	800f292 <_printf_common+0x8e>
	...

0800f2e0 <_printf_i>:
 800f2e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f2e4:	7e0f      	ldrb	r7, [r1, #24]
 800f2e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f2e8:	2f78      	cmp	r7, #120	; 0x78
 800f2ea:	4691      	mov	r9, r2
 800f2ec:	4680      	mov	r8, r0
 800f2ee:	460c      	mov	r4, r1
 800f2f0:	469a      	mov	sl, r3
 800f2f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f2f6:	d807      	bhi.n	800f308 <_printf_i+0x28>
 800f2f8:	2f62      	cmp	r7, #98	; 0x62
 800f2fa:	d80a      	bhi.n	800f312 <_printf_i+0x32>
 800f2fc:	2f00      	cmp	r7, #0
 800f2fe:	f000 80d8 	beq.w	800f4b2 <_printf_i+0x1d2>
 800f302:	2f58      	cmp	r7, #88	; 0x58
 800f304:	f000 80a3 	beq.w	800f44e <_printf_i+0x16e>
 800f308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f30c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f310:	e03a      	b.n	800f388 <_printf_i+0xa8>
 800f312:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f316:	2b15      	cmp	r3, #21
 800f318:	d8f6      	bhi.n	800f308 <_printf_i+0x28>
 800f31a:	a101      	add	r1, pc, #4	; (adr r1, 800f320 <_printf_i+0x40>)
 800f31c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f320:	0800f379 	.word	0x0800f379
 800f324:	0800f38d 	.word	0x0800f38d
 800f328:	0800f309 	.word	0x0800f309
 800f32c:	0800f309 	.word	0x0800f309
 800f330:	0800f309 	.word	0x0800f309
 800f334:	0800f309 	.word	0x0800f309
 800f338:	0800f38d 	.word	0x0800f38d
 800f33c:	0800f309 	.word	0x0800f309
 800f340:	0800f309 	.word	0x0800f309
 800f344:	0800f309 	.word	0x0800f309
 800f348:	0800f309 	.word	0x0800f309
 800f34c:	0800f499 	.word	0x0800f499
 800f350:	0800f3bd 	.word	0x0800f3bd
 800f354:	0800f47b 	.word	0x0800f47b
 800f358:	0800f309 	.word	0x0800f309
 800f35c:	0800f309 	.word	0x0800f309
 800f360:	0800f4bb 	.word	0x0800f4bb
 800f364:	0800f309 	.word	0x0800f309
 800f368:	0800f3bd 	.word	0x0800f3bd
 800f36c:	0800f309 	.word	0x0800f309
 800f370:	0800f309 	.word	0x0800f309
 800f374:	0800f483 	.word	0x0800f483
 800f378:	682b      	ldr	r3, [r5, #0]
 800f37a:	1d1a      	adds	r2, r3, #4
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	602a      	str	r2, [r5, #0]
 800f380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f388:	2301      	movs	r3, #1
 800f38a:	e0a3      	b.n	800f4d4 <_printf_i+0x1f4>
 800f38c:	6820      	ldr	r0, [r4, #0]
 800f38e:	6829      	ldr	r1, [r5, #0]
 800f390:	0606      	lsls	r6, r0, #24
 800f392:	f101 0304 	add.w	r3, r1, #4
 800f396:	d50a      	bpl.n	800f3ae <_printf_i+0xce>
 800f398:	680e      	ldr	r6, [r1, #0]
 800f39a:	602b      	str	r3, [r5, #0]
 800f39c:	2e00      	cmp	r6, #0
 800f39e:	da03      	bge.n	800f3a8 <_printf_i+0xc8>
 800f3a0:	232d      	movs	r3, #45	; 0x2d
 800f3a2:	4276      	negs	r6, r6
 800f3a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f3a8:	485e      	ldr	r0, [pc, #376]	; (800f524 <_printf_i+0x244>)
 800f3aa:	230a      	movs	r3, #10
 800f3ac:	e019      	b.n	800f3e2 <_printf_i+0x102>
 800f3ae:	680e      	ldr	r6, [r1, #0]
 800f3b0:	602b      	str	r3, [r5, #0]
 800f3b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f3b6:	bf18      	it	ne
 800f3b8:	b236      	sxthne	r6, r6
 800f3ba:	e7ef      	b.n	800f39c <_printf_i+0xbc>
 800f3bc:	682b      	ldr	r3, [r5, #0]
 800f3be:	6820      	ldr	r0, [r4, #0]
 800f3c0:	1d19      	adds	r1, r3, #4
 800f3c2:	6029      	str	r1, [r5, #0]
 800f3c4:	0601      	lsls	r1, r0, #24
 800f3c6:	d501      	bpl.n	800f3cc <_printf_i+0xec>
 800f3c8:	681e      	ldr	r6, [r3, #0]
 800f3ca:	e002      	b.n	800f3d2 <_printf_i+0xf2>
 800f3cc:	0646      	lsls	r6, r0, #25
 800f3ce:	d5fb      	bpl.n	800f3c8 <_printf_i+0xe8>
 800f3d0:	881e      	ldrh	r6, [r3, #0]
 800f3d2:	4854      	ldr	r0, [pc, #336]	; (800f524 <_printf_i+0x244>)
 800f3d4:	2f6f      	cmp	r7, #111	; 0x6f
 800f3d6:	bf0c      	ite	eq
 800f3d8:	2308      	moveq	r3, #8
 800f3da:	230a      	movne	r3, #10
 800f3dc:	2100      	movs	r1, #0
 800f3de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f3e2:	6865      	ldr	r5, [r4, #4]
 800f3e4:	60a5      	str	r5, [r4, #8]
 800f3e6:	2d00      	cmp	r5, #0
 800f3e8:	bfa2      	ittt	ge
 800f3ea:	6821      	ldrge	r1, [r4, #0]
 800f3ec:	f021 0104 	bicge.w	r1, r1, #4
 800f3f0:	6021      	strge	r1, [r4, #0]
 800f3f2:	b90e      	cbnz	r6, 800f3f8 <_printf_i+0x118>
 800f3f4:	2d00      	cmp	r5, #0
 800f3f6:	d04d      	beq.n	800f494 <_printf_i+0x1b4>
 800f3f8:	4615      	mov	r5, r2
 800f3fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800f3fe:	fb03 6711 	mls	r7, r3, r1, r6
 800f402:	5dc7      	ldrb	r7, [r0, r7]
 800f404:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f408:	4637      	mov	r7, r6
 800f40a:	42bb      	cmp	r3, r7
 800f40c:	460e      	mov	r6, r1
 800f40e:	d9f4      	bls.n	800f3fa <_printf_i+0x11a>
 800f410:	2b08      	cmp	r3, #8
 800f412:	d10b      	bne.n	800f42c <_printf_i+0x14c>
 800f414:	6823      	ldr	r3, [r4, #0]
 800f416:	07de      	lsls	r6, r3, #31
 800f418:	d508      	bpl.n	800f42c <_printf_i+0x14c>
 800f41a:	6923      	ldr	r3, [r4, #16]
 800f41c:	6861      	ldr	r1, [r4, #4]
 800f41e:	4299      	cmp	r1, r3
 800f420:	bfde      	ittt	le
 800f422:	2330      	movle	r3, #48	; 0x30
 800f424:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f428:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f42c:	1b52      	subs	r2, r2, r5
 800f42e:	6122      	str	r2, [r4, #16]
 800f430:	f8cd a000 	str.w	sl, [sp]
 800f434:	464b      	mov	r3, r9
 800f436:	aa03      	add	r2, sp, #12
 800f438:	4621      	mov	r1, r4
 800f43a:	4640      	mov	r0, r8
 800f43c:	f7ff fee2 	bl	800f204 <_printf_common>
 800f440:	3001      	adds	r0, #1
 800f442:	d14c      	bne.n	800f4de <_printf_i+0x1fe>
 800f444:	f04f 30ff 	mov.w	r0, #4294967295
 800f448:	b004      	add	sp, #16
 800f44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f44e:	4835      	ldr	r0, [pc, #212]	; (800f524 <_printf_i+0x244>)
 800f450:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f454:	6829      	ldr	r1, [r5, #0]
 800f456:	6823      	ldr	r3, [r4, #0]
 800f458:	f851 6b04 	ldr.w	r6, [r1], #4
 800f45c:	6029      	str	r1, [r5, #0]
 800f45e:	061d      	lsls	r5, r3, #24
 800f460:	d514      	bpl.n	800f48c <_printf_i+0x1ac>
 800f462:	07df      	lsls	r7, r3, #31
 800f464:	bf44      	itt	mi
 800f466:	f043 0320 	orrmi.w	r3, r3, #32
 800f46a:	6023      	strmi	r3, [r4, #0]
 800f46c:	b91e      	cbnz	r6, 800f476 <_printf_i+0x196>
 800f46e:	6823      	ldr	r3, [r4, #0]
 800f470:	f023 0320 	bic.w	r3, r3, #32
 800f474:	6023      	str	r3, [r4, #0]
 800f476:	2310      	movs	r3, #16
 800f478:	e7b0      	b.n	800f3dc <_printf_i+0xfc>
 800f47a:	6823      	ldr	r3, [r4, #0]
 800f47c:	f043 0320 	orr.w	r3, r3, #32
 800f480:	6023      	str	r3, [r4, #0]
 800f482:	2378      	movs	r3, #120	; 0x78
 800f484:	4828      	ldr	r0, [pc, #160]	; (800f528 <_printf_i+0x248>)
 800f486:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f48a:	e7e3      	b.n	800f454 <_printf_i+0x174>
 800f48c:	0659      	lsls	r1, r3, #25
 800f48e:	bf48      	it	mi
 800f490:	b2b6      	uxthmi	r6, r6
 800f492:	e7e6      	b.n	800f462 <_printf_i+0x182>
 800f494:	4615      	mov	r5, r2
 800f496:	e7bb      	b.n	800f410 <_printf_i+0x130>
 800f498:	682b      	ldr	r3, [r5, #0]
 800f49a:	6826      	ldr	r6, [r4, #0]
 800f49c:	6961      	ldr	r1, [r4, #20]
 800f49e:	1d18      	adds	r0, r3, #4
 800f4a0:	6028      	str	r0, [r5, #0]
 800f4a2:	0635      	lsls	r5, r6, #24
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	d501      	bpl.n	800f4ac <_printf_i+0x1cc>
 800f4a8:	6019      	str	r1, [r3, #0]
 800f4aa:	e002      	b.n	800f4b2 <_printf_i+0x1d2>
 800f4ac:	0670      	lsls	r0, r6, #25
 800f4ae:	d5fb      	bpl.n	800f4a8 <_printf_i+0x1c8>
 800f4b0:	8019      	strh	r1, [r3, #0]
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	6123      	str	r3, [r4, #16]
 800f4b6:	4615      	mov	r5, r2
 800f4b8:	e7ba      	b.n	800f430 <_printf_i+0x150>
 800f4ba:	682b      	ldr	r3, [r5, #0]
 800f4bc:	1d1a      	adds	r2, r3, #4
 800f4be:	602a      	str	r2, [r5, #0]
 800f4c0:	681d      	ldr	r5, [r3, #0]
 800f4c2:	6862      	ldr	r2, [r4, #4]
 800f4c4:	2100      	movs	r1, #0
 800f4c6:	4628      	mov	r0, r5
 800f4c8:	f7f0 fe92 	bl	80001f0 <memchr>
 800f4cc:	b108      	cbz	r0, 800f4d2 <_printf_i+0x1f2>
 800f4ce:	1b40      	subs	r0, r0, r5
 800f4d0:	6060      	str	r0, [r4, #4]
 800f4d2:	6863      	ldr	r3, [r4, #4]
 800f4d4:	6123      	str	r3, [r4, #16]
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4dc:	e7a8      	b.n	800f430 <_printf_i+0x150>
 800f4de:	6923      	ldr	r3, [r4, #16]
 800f4e0:	462a      	mov	r2, r5
 800f4e2:	4649      	mov	r1, r9
 800f4e4:	4640      	mov	r0, r8
 800f4e6:	47d0      	blx	sl
 800f4e8:	3001      	adds	r0, #1
 800f4ea:	d0ab      	beq.n	800f444 <_printf_i+0x164>
 800f4ec:	6823      	ldr	r3, [r4, #0]
 800f4ee:	079b      	lsls	r3, r3, #30
 800f4f0:	d413      	bmi.n	800f51a <_printf_i+0x23a>
 800f4f2:	68e0      	ldr	r0, [r4, #12]
 800f4f4:	9b03      	ldr	r3, [sp, #12]
 800f4f6:	4298      	cmp	r0, r3
 800f4f8:	bfb8      	it	lt
 800f4fa:	4618      	movlt	r0, r3
 800f4fc:	e7a4      	b.n	800f448 <_printf_i+0x168>
 800f4fe:	2301      	movs	r3, #1
 800f500:	4632      	mov	r2, r6
 800f502:	4649      	mov	r1, r9
 800f504:	4640      	mov	r0, r8
 800f506:	47d0      	blx	sl
 800f508:	3001      	adds	r0, #1
 800f50a:	d09b      	beq.n	800f444 <_printf_i+0x164>
 800f50c:	3501      	adds	r5, #1
 800f50e:	68e3      	ldr	r3, [r4, #12]
 800f510:	9903      	ldr	r1, [sp, #12]
 800f512:	1a5b      	subs	r3, r3, r1
 800f514:	42ab      	cmp	r3, r5
 800f516:	dcf2      	bgt.n	800f4fe <_printf_i+0x21e>
 800f518:	e7eb      	b.n	800f4f2 <_printf_i+0x212>
 800f51a:	2500      	movs	r5, #0
 800f51c:	f104 0619 	add.w	r6, r4, #25
 800f520:	e7f5      	b.n	800f50e <_printf_i+0x22e>
 800f522:	bf00      	nop
 800f524:	08012102 	.word	0x08012102
 800f528:	08012113 	.word	0x08012113

0800f52c <_sbrk_r>:
 800f52c:	b538      	push	{r3, r4, r5, lr}
 800f52e:	4d06      	ldr	r5, [pc, #24]	; (800f548 <_sbrk_r+0x1c>)
 800f530:	2300      	movs	r3, #0
 800f532:	4604      	mov	r4, r0
 800f534:	4608      	mov	r0, r1
 800f536:	602b      	str	r3, [r5, #0]
 800f538:	f7f2 fd6e 	bl	8002018 <_sbrk>
 800f53c:	1c43      	adds	r3, r0, #1
 800f53e:	d102      	bne.n	800f546 <_sbrk_r+0x1a>
 800f540:	682b      	ldr	r3, [r5, #0]
 800f542:	b103      	cbz	r3, 800f546 <_sbrk_r+0x1a>
 800f544:	6023      	str	r3, [r4, #0]
 800f546:	bd38      	pop	{r3, r4, r5, pc}
 800f548:	20001728 	.word	0x20001728

0800f54c <siprintf>:
 800f54c:	b40e      	push	{r1, r2, r3}
 800f54e:	b500      	push	{lr}
 800f550:	b09c      	sub	sp, #112	; 0x70
 800f552:	ab1d      	add	r3, sp, #116	; 0x74
 800f554:	9002      	str	r0, [sp, #8]
 800f556:	9006      	str	r0, [sp, #24]
 800f558:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f55c:	4809      	ldr	r0, [pc, #36]	; (800f584 <siprintf+0x38>)
 800f55e:	9107      	str	r1, [sp, #28]
 800f560:	9104      	str	r1, [sp, #16]
 800f562:	4909      	ldr	r1, [pc, #36]	; (800f588 <siprintf+0x3c>)
 800f564:	f853 2b04 	ldr.w	r2, [r3], #4
 800f568:	9105      	str	r1, [sp, #20]
 800f56a:	6800      	ldr	r0, [r0, #0]
 800f56c:	9301      	str	r3, [sp, #4]
 800f56e:	a902      	add	r1, sp, #8
 800f570:	f001 fa9c 	bl	8010aac <_svfiprintf_r>
 800f574:	9b02      	ldr	r3, [sp, #8]
 800f576:	2200      	movs	r2, #0
 800f578:	701a      	strb	r2, [r3, #0]
 800f57a:	b01c      	add	sp, #112	; 0x70
 800f57c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f580:	b003      	add	sp, #12
 800f582:	4770      	bx	lr
 800f584:	200000e4 	.word	0x200000e4
 800f588:	ffff0208 	.word	0xffff0208

0800f58c <quorem>:
 800f58c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f590:	6903      	ldr	r3, [r0, #16]
 800f592:	690c      	ldr	r4, [r1, #16]
 800f594:	42a3      	cmp	r3, r4
 800f596:	4607      	mov	r7, r0
 800f598:	f2c0 8081 	blt.w	800f69e <quorem+0x112>
 800f59c:	3c01      	subs	r4, #1
 800f59e:	f101 0814 	add.w	r8, r1, #20
 800f5a2:	f100 0514 	add.w	r5, r0, #20
 800f5a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f5aa:	9301      	str	r3, [sp, #4]
 800f5ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f5b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f5bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f5c0:	fbb2 f6f3 	udiv	r6, r2, r3
 800f5c4:	d331      	bcc.n	800f62a <quorem+0x9e>
 800f5c6:	f04f 0e00 	mov.w	lr, #0
 800f5ca:	4640      	mov	r0, r8
 800f5cc:	46ac      	mov	ip, r5
 800f5ce:	46f2      	mov	sl, lr
 800f5d0:	f850 2b04 	ldr.w	r2, [r0], #4
 800f5d4:	b293      	uxth	r3, r2
 800f5d6:	fb06 e303 	mla	r3, r6, r3, lr
 800f5da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	ebaa 0303 	sub.w	r3, sl, r3
 800f5e4:	f8dc a000 	ldr.w	sl, [ip]
 800f5e8:	0c12      	lsrs	r2, r2, #16
 800f5ea:	fa13 f38a 	uxtah	r3, r3, sl
 800f5ee:	fb06 e202 	mla	r2, r6, r2, lr
 800f5f2:	9300      	str	r3, [sp, #0]
 800f5f4:	9b00      	ldr	r3, [sp, #0]
 800f5f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f5fa:	b292      	uxth	r2, r2
 800f5fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f600:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f604:	f8bd 3000 	ldrh.w	r3, [sp]
 800f608:	4581      	cmp	r9, r0
 800f60a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f60e:	f84c 3b04 	str.w	r3, [ip], #4
 800f612:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f616:	d2db      	bcs.n	800f5d0 <quorem+0x44>
 800f618:	f855 300b 	ldr.w	r3, [r5, fp]
 800f61c:	b92b      	cbnz	r3, 800f62a <quorem+0x9e>
 800f61e:	9b01      	ldr	r3, [sp, #4]
 800f620:	3b04      	subs	r3, #4
 800f622:	429d      	cmp	r5, r3
 800f624:	461a      	mov	r2, r3
 800f626:	d32e      	bcc.n	800f686 <quorem+0xfa>
 800f628:	613c      	str	r4, [r7, #16]
 800f62a:	4638      	mov	r0, r7
 800f62c:	f001 f8ca 	bl	80107c4 <__mcmp>
 800f630:	2800      	cmp	r0, #0
 800f632:	db24      	blt.n	800f67e <quorem+0xf2>
 800f634:	3601      	adds	r6, #1
 800f636:	4628      	mov	r0, r5
 800f638:	f04f 0c00 	mov.w	ip, #0
 800f63c:	f858 2b04 	ldr.w	r2, [r8], #4
 800f640:	f8d0 e000 	ldr.w	lr, [r0]
 800f644:	b293      	uxth	r3, r2
 800f646:	ebac 0303 	sub.w	r3, ip, r3
 800f64a:	0c12      	lsrs	r2, r2, #16
 800f64c:	fa13 f38e 	uxtah	r3, r3, lr
 800f650:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f654:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f658:	b29b      	uxth	r3, r3
 800f65a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f65e:	45c1      	cmp	r9, r8
 800f660:	f840 3b04 	str.w	r3, [r0], #4
 800f664:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f668:	d2e8      	bcs.n	800f63c <quorem+0xb0>
 800f66a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f66e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f672:	b922      	cbnz	r2, 800f67e <quorem+0xf2>
 800f674:	3b04      	subs	r3, #4
 800f676:	429d      	cmp	r5, r3
 800f678:	461a      	mov	r2, r3
 800f67a:	d30a      	bcc.n	800f692 <quorem+0x106>
 800f67c:	613c      	str	r4, [r7, #16]
 800f67e:	4630      	mov	r0, r6
 800f680:	b003      	add	sp, #12
 800f682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f686:	6812      	ldr	r2, [r2, #0]
 800f688:	3b04      	subs	r3, #4
 800f68a:	2a00      	cmp	r2, #0
 800f68c:	d1cc      	bne.n	800f628 <quorem+0x9c>
 800f68e:	3c01      	subs	r4, #1
 800f690:	e7c7      	b.n	800f622 <quorem+0x96>
 800f692:	6812      	ldr	r2, [r2, #0]
 800f694:	3b04      	subs	r3, #4
 800f696:	2a00      	cmp	r2, #0
 800f698:	d1f0      	bne.n	800f67c <quorem+0xf0>
 800f69a:	3c01      	subs	r4, #1
 800f69c:	e7eb      	b.n	800f676 <quorem+0xea>
 800f69e:	2000      	movs	r0, #0
 800f6a0:	e7ee      	b.n	800f680 <quorem+0xf4>
 800f6a2:	0000      	movs	r0, r0
 800f6a4:	0000      	movs	r0, r0
	...

0800f6a8 <_dtoa_r>:
 800f6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ac:	ed2d 8b04 	vpush	{d8-d9}
 800f6b0:	ec57 6b10 	vmov	r6, r7, d0
 800f6b4:	b093      	sub	sp, #76	; 0x4c
 800f6b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f6b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f6bc:	9106      	str	r1, [sp, #24]
 800f6be:	ee10 aa10 	vmov	sl, s0
 800f6c2:	4604      	mov	r4, r0
 800f6c4:	9209      	str	r2, [sp, #36]	; 0x24
 800f6c6:	930c      	str	r3, [sp, #48]	; 0x30
 800f6c8:	46bb      	mov	fp, r7
 800f6ca:	b975      	cbnz	r5, 800f6ea <_dtoa_r+0x42>
 800f6cc:	2010      	movs	r0, #16
 800f6ce:	f7ff f9cb 	bl	800ea68 <malloc>
 800f6d2:	4602      	mov	r2, r0
 800f6d4:	6260      	str	r0, [r4, #36]	; 0x24
 800f6d6:	b920      	cbnz	r0, 800f6e2 <_dtoa_r+0x3a>
 800f6d8:	4ba7      	ldr	r3, [pc, #668]	; (800f978 <_dtoa_r+0x2d0>)
 800f6da:	21ea      	movs	r1, #234	; 0xea
 800f6dc:	48a7      	ldr	r0, [pc, #668]	; (800f97c <_dtoa_r+0x2d4>)
 800f6de:	f001 fae5 	bl	8010cac <__assert_func>
 800f6e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f6e6:	6005      	str	r5, [r0, #0]
 800f6e8:	60c5      	str	r5, [r0, #12]
 800f6ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6ec:	6819      	ldr	r1, [r3, #0]
 800f6ee:	b151      	cbz	r1, 800f706 <_dtoa_r+0x5e>
 800f6f0:	685a      	ldr	r2, [r3, #4]
 800f6f2:	604a      	str	r2, [r1, #4]
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	4093      	lsls	r3, r2
 800f6f8:	608b      	str	r3, [r1, #8]
 800f6fa:	4620      	mov	r0, r4
 800f6fc:	f000 fe20 	bl	8010340 <_Bfree>
 800f700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f702:	2200      	movs	r2, #0
 800f704:	601a      	str	r2, [r3, #0]
 800f706:	1e3b      	subs	r3, r7, #0
 800f708:	bfaa      	itet	ge
 800f70a:	2300      	movge	r3, #0
 800f70c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f710:	f8c8 3000 	strge.w	r3, [r8]
 800f714:	4b9a      	ldr	r3, [pc, #616]	; (800f980 <_dtoa_r+0x2d8>)
 800f716:	bfbc      	itt	lt
 800f718:	2201      	movlt	r2, #1
 800f71a:	f8c8 2000 	strlt.w	r2, [r8]
 800f71e:	ea33 030b 	bics.w	r3, r3, fp
 800f722:	d11b      	bne.n	800f75c <_dtoa_r+0xb4>
 800f724:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f726:	f242 730f 	movw	r3, #9999	; 0x270f
 800f72a:	6013      	str	r3, [r2, #0]
 800f72c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f730:	4333      	orrs	r3, r6
 800f732:	f000 8592 	beq.w	801025a <_dtoa_r+0xbb2>
 800f736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f738:	b963      	cbnz	r3, 800f754 <_dtoa_r+0xac>
 800f73a:	4b92      	ldr	r3, [pc, #584]	; (800f984 <_dtoa_r+0x2dc>)
 800f73c:	e022      	b.n	800f784 <_dtoa_r+0xdc>
 800f73e:	4b92      	ldr	r3, [pc, #584]	; (800f988 <_dtoa_r+0x2e0>)
 800f740:	9301      	str	r3, [sp, #4]
 800f742:	3308      	adds	r3, #8
 800f744:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f746:	6013      	str	r3, [r2, #0]
 800f748:	9801      	ldr	r0, [sp, #4]
 800f74a:	b013      	add	sp, #76	; 0x4c
 800f74c:	ecbd 8b04 	vpop	{d8-d9}
 800f750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f754:	4b8b      	ldr	r3, [pc, #556]	; (800f984 <_dtoa_r+0x2dc>)
 800f756:	9301      	str	r3, [sp, #4]
 800f758:	3303      	adds	r3, #3
 800f75a:	e7f3      	b.n	800f744 <_dtoa_r+0x9c>
 800f75c:	2200      	movs	r2, #0
 800f75e:	2300      	movs	r3, #0
 800f760:	4650      	mov	r0, sl
 800f762:	4659      	mov	r1, fp
 800f764:	f7f1 f9b8 	bl	8000ad8 <__aeabi_dcmpeq>
 800f768:	ec4b ab19 	vmov	d9, sl, fp
 800f76c:	4680      	mov	r8, r0
 800f76e:	b158      	cbz	r0, 800f788 <_dtoa_r+0xe0>
 800f770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f772:	2301      	movs	r3, #1
 800f774:	6013      	str	r3, [r2, #0]
 800f776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f778:	2b00      	cmp	r3, #0
 800f77a:	f000 856b 	beq.w	8010254 <_dtoa_r+0xbac>
 800f77e:	4883      	ldr	r0, [pc, #524]	; (800f98c <_dtoa_r+0x2e4>)
 800f780:	6018      	str	r0, [r3, #0]
 800f782:	1e43      	subs	r3, r0, #1
 800f784:	9301      	str	r3, [sp, #4]
 800f786:	e7df      	b.n	800f748 <_dtoa_r+0xa0>
 800f788:	ec4b ab10 	vmov	d0, sl, fp
 800f78c:	aa10      	add	r2, sp, #64	; 0x40
 800f78e:	a911      	add	r1, sp, #68	; 0x44
 800f790:	4620      	mov	r0, r4
 800f792:	f001 f8bd 	bl	8010910 <__d2b>
 800f796:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f79a:	ee08 0a10 	vmov	s16, r0
 800f79e:	2d00      	cmp	r5, #0
 800f7a0:	f000 8084 	beq.w	800f8ac <_dtoa_r+0x204>
 800f7a4:	ee19 3a90 	vmov	r3, s19
 800f7a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f7ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f7b0:	4656      	mov	r6, sl
 800f7b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f7b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f7ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f7be:	4b74      	ldr	r3, [pc, #464]	; (800f990 <_dtoa_r+0x2e8>)
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	4630      	mov	r0, r6
 800f7c4:	4639      	mov	r1, r7
 800f7c6:	f7f0 fd67 	bl	8000298 <__aeabi_dsub>
 800f7ca:	a365      	add	r3, pc, #404	; (adr r3, 800f960 <_dtoa_r+0x2b8>)
 800f7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d0:	f7f0 ff1a 	bl	8000608 <__aeabi_dmul>
 800f7d4:	a364      	add	r3, pc, #400	; (adr r3, 800f968 <_dtoa_r+0x2c0>)
 800f7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7da:	f7f0 fd5f 	bl	800029c <__adddf3>
 800f7de:	4606      	mov	r6, r0
 800f7e0:	4628      	mov	r0, r5
 800f7e2:	460f      	mov	r7, r1
 800f7e4:	f7f0 fea6 	bl	8000534 <__aeabi_i2d>
 800f7e8:	a361      	add	r3, pc, #388	; (adr r3, 800f970 <_dtoa_r+0x2c8>)
 800f7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ee:	f7f0 ff0b 	bl	8000608 <__aeabi_dmul>
 800f7f2:	4602      	mov	r2, r0
 800f7f4:	460b      	mov	r3, r1
 800f7f6:	4630      	mov	r0, r6
 800f7f8:	4639      	mov	r1, r7
 800f7fa:	f7f0 fd4f 	bl	800029c <__adddf3>
 800f7fe:	4606      	mov	r6, r0
 800f800:	460f      	mov	r7, r1
 800f802:	f7f1 f9b1 	bl	8000b68 <__aeabi_d2iz>
 800f806:	2200      	movs	r2, #0
 800f808:	9000      	str	r0, [sp, #0]
 800f80a:	2300      	movs	r3, #0
 800f80c:	4630      	mov	r0, r6
 800f80e:	4639      	mov	r1, r7
 800f810:	f7f1 f96c 	bl	8000aec <__aeabi_dcmplt>
 800f814:	b150      	cbz	r0, 800f82c <_dtoa_r+0x184>
 800f816:	9800      	ldr	r0, [sp, #0]
 800f818:	f7f0 fe8c 	bl	8000534 <__aeabi_i2d>
 800f81c:	4632      	mov	r2, r6
 800f81e:	463b      	mov	r3, r7
 800f820:	f7f1 f95a 	bl	8000ad8 <__aeabi_dcmpeq>
 800f824:	b910      	cbnz	r0, 800f82c <_dtoa_r+0x184>
 800f826:	9b00      	ldr	r3, [sp, #0]
 800f828:	3b01      	subs	r3, #1
 800f82a:	9300      	str	r3, [sp, #0]
 800f82c:	9b00      	ldr	r3, [sp, #0]
 800f82e:	2b16      	cmp	r3, #22
 800f830:	d85a      	bhi.n	800f8e8 <_dtoa_r+0x240>
 800f832:	9a00      	ldr	r2, [sp, #0]
 800f834:	4b57      	ldr	r3, [pc, #348]	; (800f994 <_dtoa_r+0x2ec>)
 800f836:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f83e:	ec51 0b19 	vmov	r0, r1, d9
 800f842:	f7f1 f953 	bl	8000aec <__aeabi_dcmplt>
 800f846:	2800      	cmp	r0, #0
 800f848:	d050      	beq.n	800f8ec <_dtoa_r+0x244>
 800f84a:	9b00      	ldr	r3, [sp, #0]
 800f84c:	3b01      	subs	r3, #1
 800f84e:	9300      	str	r3, [sp, #0]
 800f850:	2300      	movs	r3, #0
 800f852:	930b      	str	r3, [sp, #44]	; 0x2c
 800f854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f856:	1b5d      	subs	r5, r3, r5
 800f858:	1e6b      	subs	r3, r5, #1
 800f85a:	9305      	str	r3, [sp, #20]
 800f85c:	bf45      	ittet	mi
 800f85e:	f1c5 0301 	rsbmi	r3, r5, #1
 800f862:	9304      	strmi	r3, [sp, #16]
 800f864:	2300      	movpl	r3, #0
 800f866:	2300      	movmi	r3, #0
 800f868:	bf4c      	ite	mi
 800f86a:	9305      	strmi	r3, [sp, #20]
 800f86c:	9304      	strpl	r3, [sp, #16]
 800f86e:	9b00      	ldr	r3, [sp, #0]
 800f870:	2b00      	cmp	r3, #0
 800f872:	db3d      	blt.n	800f8f0 <_dtoa_r+0x248>
 800f874:	9b05      	ldr	r3, [sp, #20]
 800f876:	9a00      	ldr	r2, [sp, #0]
 800f878:	920a      	str	r2, [sp, #40]	; 0x28
 800f87a:	4413      	add	r3, r2
 800f87c:	9305      	str	r3, [sp, #20]
 800f87e:	2300      	movs	r3, #0
 800f880:	9307      	str	r3, [sp, #28]
 800f882:	9b06      	ldr	r3, [sp, #24]
 800f884:	2b09      	cmp	r3, #9
 800f886:	f200 8089 	bhi.w	800f99c <_dtoa_r+0x2f4>
 800f88a:	2b05      	cmp	r3, #5
 800f88c:	bfc4      	itt	gt
 800f88e:	3b04      	subgt	r3, #4
 800f890:	9306      	strgt	r3, [sp, #24]
 800f892:	9b06      	ldr	r3, [sp, #24]
 800f894:	f1a3 0302 	sub.w	r3, r3, #2
 800f898:	bfcc      	ite	gt
 800f89a:	2500      	movgt	r5, #0
 800f89c:	2501      	movle	r5, #1
 800f89e:	2b03      	cmp	r3, #3
 800f8a0:	f200 8087 	bhi.w	800f9b2 <_dtoa_r+0x30a>
 800f8a4:	e8df f003 	tbb	[pc, r3]
 800f8a8:	59383a2d 	.word	0x59383a2d
 800f8ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f8b0:	441d      	add	r5, r3
 800f8b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f8b6:	2b20      	cmp	r3, #32
 800f8b8:	bfc1      	itttt	gt
 800f8ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f8be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f8c2:	fa0b f303 	lslgt.w	r3, fp, r3
 800f8c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f8ca:	bfda      	itte	le
 800f8cc:	f1c3 0320 	rsble	r3, r3, #32
 800f8d0:	fa06 f003 	lslle.w	r0, r6, r3
 800f8d4:	4318      	orrgt	r0, r3
 800f8d6:	f7f0 fe1d 	bl	8000514 <__aeabi_ui2d>
 800f8da:	2301      	movs	r3, #1
 800f8dc:	4606      	mov	r6, r0
 800f8de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f8e2:	3d01      	subs	r5, #1
 800f8e4:	930e      	str	r3, [sp, #56]	; 0x38
 800f8e6:	e76a      	b.n	800f7be <_dtoa_r+0x116>
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	e7b2      	b.n	800f852 <_dtoa_r+0x1aa>
 800f8ec:	900b      	str	r0, [sp, #44]	; 0x2c
 800f8ee:	e7b1      	b.n	800f854 <_dtoa_r+0x1ac>
 800f8f0:	9b04      	ldr	r3, [sp, #16]
 800f8f2:	9a00      	ldr	r2, [sp, #0]
 800f8f4:	1a9b      	subs	r3, r3, r2
 800f8f6:	9304      	str	r3, [sp, #16]
 800f8f8:	4253      	negs	r3, r2
 800f8fa:	9307      	str	r3, [sp, #28]
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	930a      	str	r3, [sp, #40]	; 0x28
 800f900:	e7bf      	b.n	800f882 <_dtoa_r+0x1da>
 800f902:	2300      	movs	r3, #0
 800f904:	9308      	str	r3, [sp, #32]
 800f906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f908:	2b00      	cmp	r3, #0
 800f90a:	dc55      	bgt.n	800f9b8 <_dtoa_r+0x310>
 800f90c:	2301      	movs	r3, #1
 800f90e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f912:	461a      	mov	r2, r3
 800f914:	9209      	str	r2, [sp, #36]	; 0x24
 800f916:	e00c      	b.n	800f932 <_dtoa_r+0x28a>
 800f918:	2301      	movs	r3, #1
 800f91a:	e7f3      	b.n	800f904 <_dtoa_r+0x25c>
 800f91c:	2300      	movs	r3, #0
 800f91e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f920:	9308      	str	r3, [sp, #32]
 800f922:	9b00      	ldr	r3, [sp, #0]
 800f924:	4413      	add	r3, r2
 800f926:	9302      	str	r3, [sp, #8]
 800f928:	3301      	adds	r3, #1
 800f92a:	2b01      	cmp	r3, #1
 800f92c:	9303      	str	r3, [sp, #12]
 800f92e:	bfb8      	it	lt
 800f930:	2301      	movlt	r3, #1
 800f932:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f934:	2200      	movs	r2, #0
 800f936:	6042      	str	r2, [r0, #4]
 800f938:	2204      	movs	r2, #4
 800f93a:	f102 0614 	add.w	r6, r2, #20
 800f93e:	429e      	cmp	r6, r3
 800f940:	6841      	ldr	r1, [r0, #4]
 800f942:	d93d      	bls.n	800f9c0 <_dtoa_r+0x318>
 800f944:	4620      	mov	r0, r4
 800f946:	f000 fcbb 	bl	80102c0 <_Balloc>
 800f94a:	9001      	str	r0, [sp, #4]
 800f94c:	2800      	cmp	r0, #0
 800f94e:	d13b      	bne.n	800f9c8 <_dtoa_r+0x320>
 800f950:	4b11      	ldr	r3, [pc, #68]	; (800f998 <_dtoa_r+0x2f0>)
 800f952:	4602      	mov	r2, r0
 800f954:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f958:	e6c0      	b.n	800f6dc <_dtoa_r+0x34>
 800f95a:	2301      	movs	r3, #1
 800f95c:	e7df      	b.n	800f91e <_dtoa_r+0x276>
 800f95e:	bf00      	nop
 800f960:	636f4361 	.word	0x636f4361
 800f964:	3fd287a7 	.word	0x3fd287a7
 800f968:	8b60c8b3 	.word	0x8b60c8b3
 800f96c:	3fc68a28 	.word	0x3fc68a28
 800f970:	509f79fb 	.word	0x509f79fb
 800f974:	3fd34413 	.word	0x3fd34413
 800f978:	08012131 	.word	0x08012131
 800f97c:	08012148 	.word	0x08012148
 800f980:	7ff00000 	.word	0x7ff00000
 800f984:	0801212d 	.word	0x0801212d
 800f988:	08012124 	.word	0x08012124
 800f98c:	08012101 	.word	0x08012101
 800f990:	3ff80000 	.word	0x3ff80000
 800f994:	08012238 	.word	0x08012238
 800f998:	080121a3 	.word	0x080121a3
 800f99c:	2501      	movs	r5, #1
 800f99e:	2300      	movs	r3, #0
 800f9a0:	9306      	str	r3, [sp, #24]
 800f9a2:	9508      	str	r5, [sp, #32]
 800f9a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f9a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	2312      	movs	r3, #18
 800f9b0:	e7b0      	b.n	800f914 <_dtoa_r+0x26c>
 800f9b2:	2301      	movs	r3, #1
 800f9b4:	9308      	str	r3, [sp, #32]
 800f9b6:	e7f5      	b.n	800f9a4 <_dtoa_r+0x2fc>
 800f9b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f9be:	e7b8      	b.n	800f932 <_dtoa_r+0x28a>
 800f9c0:	3101      	adds	r1, #1
 800f9c2:	6041      	str	r1, [r0, #4]
 800f9c4:	0052      	lsls	r2, r2, #1
 800f9c6:	e7b8      	b.n	800f93a <_dtoa_r+0x292>
 800f9c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f9ca:	9a01      	ldr	r2, [sp, #4]
 800f9cc:	601a      	str	r2, [r3, #0]
 800f9ce:	9b03      	ldr	r3, [sp, #12]
 800f9d0:	2b0e      	cmp	r3, #14
 800f9d2:	f200 809d 	bhi.w	800fb10 <_dtoa_r+0x468>
 800f9d6:	2d00      	cmp	r5, #0
 800f9d8:	f000 809a 	beq.w	800fb10 <_dtoa_r+0x468>
 800f9dc:	9b00      	ldr	r3, [sp, #0]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	dd32      	ble.n	800fa48 <_dtoa_r+0x3a0>
 800f9e2:	4ab7      	ldr	r2, [pc, #732]	; (800fcc0 <_dtoa_r+0x618>)
 800f9e4:	f003 030f 	and.w	r3, r3, #15
 800f9e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f9ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f9f0:	9b00      	ldr	r3, [sp, #0]
 800f9f2:	05d8      	lsls	r0, r3, #23
 800f9f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f9f8:	d516      	bpl.n	800fa28 <_dtoa_r+0x380>
 800f9fa:	4bb2      	ldr	r3, [pc, #712]	; (800fcc4 <_dtoa_r+0x61c>)
 800f9fc:	ec51 0b19 	vmov	r0, r1, d9
 800fa00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fa04:	f7f0 ff2a 	bl	800085c <__aeabi_ddiv>
 800fa08:	f007 070f 	and.w	r7, r7, #15
 800fa0c:	4682      	mov	sl, r0
 800fa0e:	468b      	mov	fp, r1
 800fa10:	2503      	movs	r5, #3
 800fa12:	4eac      	ldr	r6, [pc, #688]	; (800fcc4 <_dtoa_r+0x61c>)
 800fa14:	b957      	cbnz	r7, 800fa2c <_dtoa_r+0x384>
 800fa16:	4642      	mov	r2, r8
 800fa18:	464b      	mov	r3, r9
 800fa1a:	4650      	mov	r0, sl
 800fa1c:	4659      	mov	r1, fp
 800fa1e:	f7f0 ff1d 	bl	800085c <__aeabi_ddiv>
 800fa22:	4682      	mov	sl, r0
 800fa24:	468b      	mov	fp, r1
 800fa26:	e028      	b.n	800fa7a <_dtoa_r+0x3d2>
 800fa28:	2502      	movs	r5, #2
 800fa2a:	e7f2      	b.n	800fa12 <_dtoa_r+0x36a>
 800fa2c:	07f9      	lsls	r1, r7, #31
 800fa2e:	d508      	bpl.n	800fa42 <_dtoa_r+0x39a>
 800fa30:	4640      	mov	r0, r8
 800fa32:	4649      	mov	r1, r9
 800fa34:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fa38:	f7f0 fde6 	bl	8000608 <__aeabi_dmul>
 800fa3c:	3501      	adds	r5, #1
 800fa3e:	4680      	mov	r8, r0
 800fa40:	4689      	mov	r9, r1
 800fa42:	107f      	asrs	r7, r7, #1
 800fa44:	3608      	adds	r6, #8
 800fa46:	e7e5      	b.n	800fa14 <_dtoa_r+0x36c>
 800fa48:	f000 809b 	beq.w	800fb82 <_dtoa_r+0x4da>
 800fa4c:	9b00      	ldr	r3, [sp, #0]
 800fa4e:	4f9d      	ldr	r7, [pc, #628]	; (800fcc4 <_dtoa_r+0x61c>)
 800fa50:	425e      	negs	r6, r3
 800fa52:	4b9b      	ldr	r3, [pc, #620]	; (800fcc0 <_dtoa_r+0x618>)
 800fa54:	f006 020f 	and.w	r2, r6, #15
 800fa58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa60:	ec51 0b19 	vmov	r0, r1, d9
 800fa64:	f7f0 fdd0 	bl	8000608 <__aeabi_dmul>
 800fa68:	1136      	asrs	r6, r6, #4
 800fa6a:	4682      	mov	sl, r0
 800fa6c:	468b      	mov	fp, r1
 800fa6e:	2300      	movs	r3, #0
 800fa70:	2502      	movs	r5, #2
 800fa72:	2e00      	cmp	r6, #0
 800fa74:	d17a      	bne.n	800fb6c <_dtoa_r+0x4c4>
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d1d3      	bne.n	800fa22 <_dtoa_r+0x37a>
 800fa7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	f000 8082 	beq.w	800fb86 <_dtoa_r+0x4de>
 800fa82:	4b91      	ldr	r3, [pc, #580]	; (800fcc8 <_dtoa_r+0x620>)
 800fa84:	2200      	movs	r2, #0
 800fa86:	4650      	mov	r0, sl
 800fa88:	4659      	mov	r1, fp
 800fa8a:	f7f1 f82f 	bl	8000aec <__aeabi_dcmplt>
 800fa8e:	2800      	cmp	r0, #0
 800fa90:	d079      	beq.n	800fb86 <_dtoa_r+0x4de>
 800fa92:	9b03      	ldr	r3, [sp, #12]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d076      	beq.n	800fb86 <_dtoa_r+0x4de>
 800fa98:	9b02      	ldr	r3, [sp, #8]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	dd36      	ble.n	800fb0c <_dtoa_r+0x464>
 800fa9e:	9b00      	ldr	r3, [sp, #0]
 800faa0:	4650      	mov	r0, sl
 800faa2:	4659      	mov	r1, fp
 800faa4:	1e5f      	subs	r7, r3, #1
 800faa6:	2200      	movs	r2, #0
 800faa8:	4b88      	ldr	r3, [pc, #544]	; (800fccc <_dtoa_r+0x624>)
 800faaa:	f7f0 fdad 	bl	8000608 <__aeabi_dmul>
 800faae:	9e02      	ldr	r6, [sp, #8]
 800fab0:	4682      	mov	sl, r0
 800fab2:	468b      	mov	fp, r1
 800fab4:	3501      	adds	r5, #1
 800fab6:	4628      	mov	r0, r5
 800fab8:	f7f0 fd3c 	bl	8000534 <__aeabi_i2d>
 800fabc:	4652      	mov	r2, sl
 800fabe:	465b      	mov	r3, fp
 800fac0:	f7f0 fda2 	bl	8000608 <__aeabi_dmul>
 800fac4:	4b82      	ldr	r3, [pc, #520]	; (800fcd0 <_dtoa_r+0x628>)
 800fac6:	2200      	movs	r2, #0
 800fac8:	f7f0 fbe8 	bl	800029c <__adddf3>
 800facc:	46d0      	mov	r8, sl
 800face:	46d9      	mov	r9, fp
 800fad0:	4682      	mov	sl, r0
 800fad2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800fad6:	2e00      	cmp	r6, #0
 800fad8:	d158      	bne.n	800fb8c <_dtoa_r+0x4e4>
 800fada:	4b7e      	ldr	r3, [pc, #504]	; (800fcd4 <_dtoa_r+0x62c>)
 800fadc:	2200      	movs	r2, #0
 800fade:	4640      	mov	r0, r8
 800fae0:	4649      	mov	r1, r9
 800fae2:	f7f0 fbd9 	bl	8000298 <__aeabi_dsub>
 800fae6:	4652      	mov	r2, sl
 800fae8:	465b      	mov	r3, fp
 800faea:	4680      	mov	r8, r0
 800faec:	4689      	mov	r9, r1
 800faee:	f7f1 f81b 	bl	8000b28 <__aeabi_dcmpgt>
 800faf2:	2800      	cmp	r0, #0
 800faf4:	f040 8295 	bne.w	8010022 <_dtoa_r+0x97a>
 800faf8:	4652      	mov	r2, sl
 800fafa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fafe:	4640      	mov	r0, r8
 800fb00:	4649      	mov	r1, r9
 800fb02:	f7f0 fff3 	bl	8000aec <__aeabi_dcmplt>
 800fb06:	2800      	cmp	r0, #0
 800fb08:	f040 8289 	bne.w	801001e <_dtoa_r+0x976>
 800fb0c:	ec5b ab19 	vmov	sl, fp, d9
 800fb10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	f2c0 8148 	blt.w	800fda8 <_dtoa_r+0x700>
 800fb18:	9a00      	ldr	r2, [sp, #0]
 800fb1a:	2a0e      	cmp	r2, #14
 800fb1c:	f300 8144 	bgt.w	800fda8 <_dtoa_r+0x700>
 800fb20:	4b67      	ldr	r3, [pc, #412]	; (800fcc0 <_dtoa_r+0x618>)
 800fb22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb26:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fb2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	f280 80d5 	bge.w	800fcdc <_dtoa_r+0x634>
 800fb32:	9b03      	ldr	r3, [sp, #12]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	f300 80d1 	bgt.w	800fcdc <_dtoa_r+0x634>
 800fb3a:	f040 826f 	bne.w	801001c <_dtoa_r+0x974>
 800fb3e:	4b65      	ldr	r3, [pc, #404]	; (800fcd4 <_dtoa_r+0x62c>)
 800fb40:	2200      	movs	r2, #0
 800fb42:	4640      	mov	r0, r8
 800fb44:	4649      	mov	r1, r9
 800fb46:	f7f0 fd5f 	bl	8000608 <__aeabi_dmul>
 800fb4a:	4652      	mov	r2, sl
 800fb4c:	465b      	mov	r3, fp
 800fb4e:	f7f0 ffe1 	bl	8000b14 <__aeabi_dcmpge>
 800fb52:	9e03      	ldr	r6, [sp, #12]
 800fb54:	4637      	mov	r7, r6
 800fb56:	2800      	cmp	r0, #0
 800fb58:	f040 8245 	bne.w	800ffe6 <_dtoa_r+0x93e>
 800fb5c:	9d01      	ldr	r5, [sp, #4]
 800fb5e:	2331      	movs	r3, #49	; 0x31
 800fb60:	f805 3b01 	strb.w	r3, [r5], #1
 800fb64:	9b00      	ldr	r3, [sp, #0]
 800fb66:	3301      	adds	r3, #1
 800fb68:	9300      	str	r3, [sp, #0]
 800fb6a:	e240      	b.n	800ffee <_dtoa_r+0x946>
 800fb6c:	07f2      	lsls	r2, r6, #31
 800fb6e:	d505      	bpl.n	800fb7c <_dtoa_r+0x4d4>
 800fb70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb74:	f7f0 fd48 	bl	8000608 <__aeabi_dmul>
 800fb78:	3501      	adds	r5, #1
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	1076      	asrs	r6, r6, #1
 800fb7e:	3708      	adds	r7, #8
 800fb80:	e777      	b.n	800fa72 <_dtoa_r+0x3ca>
 800fb82:	2502      	movs	r5, #2
 800fb84:	e779      	b.n	800fa7a <_dtoa_r+0x3d2>
 800fb86:	9f00      	ldr	r7, [sp, #0]
 800fb88:	9e03      	ldr	r6, [sp, #12]
 800fb8a:	e794      	b.n	800fab6 <_dtoa_r+0x40e>
 800fb8c:	9901      	ldr	r1, [sp, #4]
 800fb8e:	4b4c      	ldr	r3, [pc, #304]	; (800fcc0 <_dtoa_r+0x618>)
 800fb90:	4431      	add	r1, r6
 800fb92:	910d      	str	r1, [sp, #52]	; 0x34
 800fb94:	9908      	ldr	r1, [sp, #32]
 800fb96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fb9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fb9e:	2900      	cmp	r1, #0
 800fba0:	d043      	beq.n	800fc2a <_dtoa_r+0x582>
 800fba2:	494d      	ldr	r1, [pc, #308]	; (800fcd8 <_dtoa_r+0x630>)
 800fba4:	2000      	movs	r0, #0
 800fba6:	f7f0 fe59 	bl	800085c <__aeabi_ddiv>
 800fbaa:	4652      	mov	r2, sl
 800fbac:	465b      	mov	r3, fp
 800fbae:	f7f0 fb73 	bl	8000298 <__aeabi_dsub>
 800fbb2:	9d01      	ldr	r5, [sp, #4]
 800fbb4:	4682      	mov	sl, r0
 800fbb6:	468b      	mov	fp, r1
 800fbb8:	4649      	mov	r1, r9
 800fbba:	4640      	mov	r0, r8
 800fbbc:	f7f0 ffd4 	bl	8000b68 <__aeabi_d2iz>
 800fbc0:	4606      	mov	r6, r0
 800fbc2:	f7f0 fcb7 	bl	8000534 <__aeabi_i2d>
 800fbc6:	4602      	mov	r2, r0
 800fbc8:	460b      	mov	r3, r1
 800fbca:	4640      	mov	r0, r8
 800fbcc:	4649      	mov	r1, r9
 800fbce:	f7f0 fb63 	bl	8000298 <__aeabi_dsub>
 800fbd2:	3630      	adds	r6, #48	; 0x30
 800fbd4:	f805 6b01 	strb.w	r6, [r5], #1
 800fbd8:	4652      	mov	r2, sl
 800fbda:	465b      	mov	r3, fp
 800fbdc:	4680      	mov	r8, r0
 800fbde:	4689      	mov	r9, r1
 800fbe0:	f7f0 ff84 	bl	8000aec <__aeabi_dcmplt>
 800fbe4:	2800      	cmp	r0, #0
 800fbe6:	d163      	bne.n	800fcb0 <_dtoa_r+0x608>
 800fbe8:	4642      	mov	r2, r8
 800fbea:	464b      	mov	r3, r9
 800fbec:	4936      	ldr	r1, [pc, #216]	; (800fcc8 <_dtoa_r+0x620>)
 800fbee:	2000      	movs	r0, #0
 800fbf0:	f7f0 fb52 	bl	8000298 <__aeabi_dsub>
 800fbf4:	4652      	mov	r2, sl
 800fbf6:	465b      	mov	r3, fp
 800fbf8:	f7f0 ff78 	bl	8000aec <__aeabi_dcmplt>
 800fbfc:	2800      	cmp	r0, #0
 800fbfe:	f040 80b5 	bne.w	800fd6c <_dtoa_r+0x6c4>
 800fc02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc04:	429d      	cmp	r5, r3
 800fc06:	d081      	beq.n	800fb0c <_dtoa_r+0x464>
 800fc08:	4b30      	ldr	r3, [pc, #192]	; (800fccc <_dtoa_r+0x624>)
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	4650      	mov	r0, sl
 800fc0e:	4659      	mov	r1, fp
 800fc10:	f7f0 fcfa 	bl	8000608 <__aeabi_dmul>
 800fc14:	4b2d      	ldr	r3, [pc, #180]	; (800fccc <_dtoa_r+0x624>)
 800fc16:	4682      	mov	sl, r0
 800fc18:	468b      	mov	fp, r1
 800fc1a:	4640      	mov	r0, r8
 800fc1c:	4649      	mov	r1, r9
 800fc1e:	2200      	movs	r2, #0
 800fc20:	f7f0 fcf2 	bl	8000608 <__aeabi_dmul>
 800fc24:	4680      	mov	r8, r0
 800fc26:	4689      	mov	r9, r1
 800fc28:	e7c6      	b.n	800fbb8 <_dtoa_r+0x510>
 800fc2a:	4650      	mov	r0, sl
 800fc2c:	4659      	mov	r1, fp
 800fc2e:	f7f0 fceb 	bl	8000608 <__aeabi_dmul>
 800fc32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc34:	9d01      	ldr	r5, [sp, #4]
 800fc36:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc38:	4682      	mov	sl, r0
 800fc3a:	468b      	mov	fp, r1
 800fc3c:	4649      	mov	r1, r9
 800fc3e:	4640      	mov	r0, r8
 800fc40:	f7f0 ff92 	bl	8000b68 <__aeabi_d2iz>
 800fc44:	4606      	mov	r6, r0
 800fc46:	f7f0 fc75 	bl	8000534 <__aeabi_i2d>
 800fc4a:	3630      	adds	r6, #48	; 0x30
 800fc4c:	4602      	mov	r2, r0
 800fc4e:	460b      	mov	r3, r1
 800fc50:	4640      	mov	r0, r8
 800fc52:	4649      	mov	r1, r9
 800fc54:	f7f0 fb20 	bl	8000298 <__aeabi_dsub>
 800fc58:	f805 6b01 	strb.w	r6, [r5], #1
 800fc5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc5e:	429d      	cmp	r5, r3
 800fc60:	4680      	mov	r8, r0
 800fc62:	4689      	mov	r9, r1
 800fc64:	f04f 0200 	mov.w	r2, #0
 800fc68:	d124      	bne.n	800fcb4 <_dtoa_r+0x60c>
 800fc6a:	4b1b      	ldr	r3, [pc, #108]	; (800fcd8 <_dtoa_r+0x630>)
 800fc6c:	4650      	mov	r0, sl
 800fc6e:	4659      	mov	r1, fp
 800fc70:	f7f0 fb14 	bl	800029c <__adddf3>
 800fc74:	4602      	mov	r2, r0
 800fc76:	460b      	mov	r3, r1
 800fc78:	4640      	mov	r0, r8
 800fc7a:	4649      	mov	r1, r9
 800fc7c:	f7f0 ff54 	bl	8000b28 <__aeabi_dcmpgt>
 800fc80:	2800      	cmp	r0, #0
 800fc82:	d173      	bne.n	800fd6c <_dtoa_r+0x6c4>
 800fc84:	4652      	mov	r2, sl
 800fc86:	465b      	mov	r3, fp
 800fc88:	4913      	ldr	r1, [pc, #76]	; (800fcd8 <_dtoa_r+0x630>)
 800fc8a:	2000      	movs	r0, #0
 800fc8c:	f7f0 fb04 	bl	8000298 <__aeabi_dsub>
 800fc90:	4602      	mov	r2, r0
 800fc92:	460b      	mov	r3, r1
 800fc94:	4640      	mov	r0, r8
 800fc96:	4649      	mov	r1, r9
 800fc98:	f7f0 ff28 	bl	8000aec <__aeabi_dcmplt>
 800fc9c:	2800      	cmp	r0, #0
 800fc9e:	f43f af35 	beq.w	800fb0c <_dtoa_r+0x464>
 800fca2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fca4:	1e6b      	subs	r3, r5, #1
 800fca6:	930f      	str	r3, [sp, #60]	; 0x3c
 800fca8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fcac:	2b30      	cmp	r3, #48	; 0x30
 800fcae:	d0f8      	beq.n	800fca2 <_dtoa_r+0x5fa>
 800fcb0:	9700      	str	r7, [sp, #0]
 800fcb2:	e049      	b.n	800fd48 <_dtoa_r+0x6a0>
 800fcb4:	4b05      	ldr	r3, [pc, #20]	; (800fccc <_dtoa_r+0x624>)
 800fcb6:	f7f0 fca7 	bl	8000608 <__aeabi_dmul>
 800fcba:	4680      	mov	r8, r0
 800fcbc:	4689      	mov	r9, r1
 800fcbe:	e7bd      	b.n	800fc3c <_dtoa_r+0x594>
 800fcc0:	08012238 	.word	0x08012238
 800fcc4:	08012210 	.word	0x08012210
 800fcc8:	3ff00000 	.word	0x3ff00000
 800fccc:	40240000 	.word	0x40240000
 800fcd0:	401c0000 	.word	0x401c0000
 800fcd4:	40140000 	.word	0x40140000
 800fcd8:	3fe00000 	.word	0x3fe00000
 800fcdc:	9d01      	ldr	r5, [sp, #4]
 800fcde:	4656      	mov	r6, sl
 800fce0:	465f      	mov	r7, fp
 800fce2:	4642      	mov	r2, r8
 800fce4:	464b      	mov	r3, r9
 800fce6:	4630      	mov	r0, r6
 800fce8:	4639      	mov	r1, r7
 800fcea:	f7f0 fdb7 	bl	800085c <__aeabi_ddiv>
 800fcee:	f7f0 ff3b 	bl	8000b68 <__aeabi_d2iz>
 800fcf2:	4682      	mov	sl, r0
 800fcf4:	f7f0 fc1e 	bl	8000534 <__aeabi_i2d>
 800fcf8:	4642      	mov	r2, r8
 800fcfa:	464b      	mov	r3, r9
 800fcfc:	f7f0 fc84 	bl	8000608 <__aeabi_dmul>
 800fd00:	4602      	mov	r2, r0
 800fd02:	460b      	mov	r3, r1
 800fd04:	4630      	mov	r0, r6
 800fd06:	4639      	mov	r1, r7
 800fd08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800fd0c:	f7f0 fac4 	bl	8000298 <__aeabi_dsub>
 800fd10:	f805 6b01 	strb.w	r6, [r5], #1
 800fd14:	9e01      	ldr	r6, [sp, #4]
 800fd16:	9f03      	ldr	r7, [sp, #12]
 800fd18:	1bae      	subs	r6, r5, r6
 800fd1a:	42b7      	cmp	r7, r6
 800fd1c:	4602      	mov	r2, r0
 800fd1e:	460b      	mov	r3, r1
 800fd20:	d135      	bne.n	800fd8e <_dtoa_r+0x6e6>
 800fd22:	f7f0 fabb 	bl	800029c <__adddf3>
 800fd26:	4642      	mov	r2, r8
 800fd28:	464b      	mov	r3, r9
 800fd2a:	4606      	mov	r6, r0
 800fd2c:	460f      	mov	r7, r1
 800fd2e:	f7f0 fefb 	bl	8000b28 <__aeabi_dcmpgt>
 800fd32:	b9d0      	cbnz	r0, 800fd6a <_dtoa_r+0x6c2>
 800fd34:	4642      	mov	r2, r8
 800fd36:	464b      	mov	r3, r9
 800fd38:	4630      	mov	r0, r6
 800fd3a:	4639      	mov	r1, r7
 800fd3c:	f7f0 fecc 	bl	8000ad8 <__aeabi_dcmpeq>
 800fd40:	b110      	cbz	r0, 800fd48 <_dtoa_r+0x6a0>
 800fd42:	f01a 0f01 	tst.w	sl, #1
 800fd46:	d110      	bne.n	800fd6a <_dtoa_r+0x6c2>
 800fd48:	4620      	mov	r0, r4
 800fd4a:	ee18 1a10 	vmov	r1, s16
 800fd4e:	f000 faf7 	bl	8010340 <_Bfree>
 800fd52:	2300      	movs	r3, #0
 800fd54:	9800      	ldr	r0, [sp, #0]
 800fd56:	702b      	strb	r3, [r5, #0]
 800fd58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd5a:	3001      	adds	r0, #1
 800fd5c:	6018      	str	r0, [r3, #0]
 800fd5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	f43f acf1 	beq.w	800f748 <_dtoa_r+0xa0>
 800fd66:	601d      	str	r5, [r3, #0]
 800fd68:	e4ee      	b.n	800f748 <_dtoa_r+0xa0>
 800fd6a:	9f00      	ldr	r7, [sp, #0]
 800fd6c:	462b      	mov	r3, r5
 800fd6e:	461d      	mov	r5, r3
 800fd70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd74:	2a39      	cmp	r2, #57	; 0x39
 800fd76:	d106      	bne.n	800fd86 <_dtoa_r+0x6de>
 800fd78:	9a01      	ldr	r2, [sp, #4]
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	d1f7      	bne.n	800fd6e <_dtoa_r+0x6c6>
 800fd7e:	9901      	ldr	r1, [sp, #4]
 800fd80:	2230      	movs	r2, #48	; 0x30
 800fd82:	3701      	adds	r7, #1
 800fd84:	700a      	strb	r2, [r1, #0]
 800fd86:	781a      	ldrb	r2, [r3, #0]
 800fd88:	3201      	adds	r2, #1
 800fd8a:	701a      	strb	r2, [r3, #0]
 800fd8c:	e790      	b.n	800fcb0 <_dtoa_r+0x608>
 800fd8e:	4ba6      	ldr	r3, [pc, #664]	; (8010028 <_dtoa_r+0x980>)
 800fd90:	2200      	movs	r2, #0
 800fd92:	f7f0 fc39 	bl	8000608 <__aeabi_dmul>
 800fd96:	2200      	movs	r2, #0
 800fd98:	2300      	movs	r3, #0
 800fd9a:	4606      	mov	r6, r0
 800fd9c:	460f      	mov	r7, r1
 800fd9e:	f7f0 fe9b 	bl	8000ad8 <__aeabi_dcmpeq>
 800fda2:	2800      	cmp	r0, #0
 800fda4:	d09d      	beq.n	800fce2 <_dtoa_r+0x63a>
 800fda6:	e7cf      	b.n	800fd48 <_dtoa_r+0x6a0>
 800fda8:	9a08      	ldr	r2, [sp, #32]
 800fdaa:	2a00      	cmp	r2, #0
 800fdac:	f000 80d7 	beq.w	800ff5e <_dtoa_r+0x8b6>
 800fdb0:	9a06      	ldr	r2, [sp, #24]
 800fdb2:	2a01      	cmp	r2, #1
 800fdb4:	f300 80ba 	bgt.w	800ff2c <_dtoa_r+0x884>
 800fdb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fdba:	2a00      	cmp	r2, #0
 800fdbc:	f000 80b2 	beq.w	800ff24 <_dtoa_r+0x87c>
 800fdc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fdc4:	9e07      	ldr	r6, [sp, #28]
 800fdc6:	9d04      	ldr	r5, [sp, #16]
 800fdc8:	9a04      	ldr	r2, [sp, #16]
 800fdca:	441a      	add	r2, r3
 800fdcc:	9204      	str	r2, [sp, #16]
 800fdce:	9a05      	ldr	r2, [sp, #20]
 800fdd0:	2101      	movs	r1, #1
 800fdd2:	441a      	add	r2, r3
 800fdd4:	4620      	mov	r0, r4
 800fdd6:	9205      	str	r2, [sp, #20]
 800fdd8:	f000 fb6a 	bl	80104b0 <__i2b>
 800fddc:	4607      	mov	r7, r0
 800fdde:	2d00      	cmp	r5, #0
 800fde0:	dd0c      	ble.n	800fdfc <_dtoa_r+0x754>
 800fde2:	9b05      	ldr	r3, [sp, #20]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	dd09      	ble.n	800fdfc <_dtoa_r+0x754>
 800fde8:	42ab      	cmp	r3, r5
 800fdea:	9a04      	ldr	r2, [sp, #16]
 800fdec:	bfa8      	it	ge
 800fdee:	462b      	movge	r3, r5
 800fdf0:	1ad2      	subs	r2, r2, r3
 800fdf2:	9204      	str	r2, [sp, #16]
 800fdf4:	9a05      	ldr	r2, [sp, #20]
 800fdf6:	1aed      	subs	r5, r5, r3
 800fdf8:	1ad3      	subs	r3, r2, r3
 800fdfa:	9305      	str	r3, [sp, #20]
 800fdfc:	9b07      	ldr	r3, [sp, #28]
 800fdfe:	b31b      	cbz	r3, 800fe48 <_dtoa_r+0x7a0>
 800fe00:	9b08      	ldr	r3, [sp, #32]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	f000 80af 	beq.w	800ff66 <_dtoa_r+0x8be>
 800fe08:	2e00      	cmp	r6, #0
 800fe0a:	dd13      	ble.n	800fe34 <_dtoa_r+0x78c>
 800fe0c:	4639      	mov	r1, r7
 800fe0e:	4632      	mov	r2, r6
 800fe10:	4620      	mov	r0, r4
 800fe12:	f000 fc0d 	bl	8010630 <__pow5mult>
 800fe16:	ee18 2a10 	vmov	r2, s16
 800fe1a:	4601      	mov	r1, r0
 800fe1c:	4607      	mov	r7, r0
 800fe1e:	4620      	mov	r0, r4
 800fe20:	f000 fb5c 	bl	80104dc <__multiply>
 800fe24:	ee18 1a10 	vmov	r1, s16
 800fe28:	4680      	mov	r8, r0
 800fe2a:	4620      	mov	r0, r4
 800fe2c:	f000 fa88 	bl	8010340 <_Bfree>
 800fe30:	ee08 8a10 	vmov	s16, r8
 800fe34:	9b07      	ldr	r3, [sp, #28]
 800fe36:	1b9a      	subs	r2, r3, r6
 800fe38:	d006      	beq.n	800fe48 <_dtoa_r+0x7a0>
 800fe3a:	ee18 1a10 	vmov	r1, s16
 800fe3e:	4620      	mov	r0, r4
 800fe40:	f000 fbf6 	bl	8010630 <__pow5mult>
 800fe44:	ee08 0a10 	vmov	s16, r0
 800fe48:	2101      	movs	r1, #1
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	f000 fb30 	bl	80104b0 <__i2b>
 800fe50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	4606      	mov	r6, r0
 800fe56:	f340 8088 	ble.w	800ff6a <_dtoa_r+0x8c2>
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	4601      	mov	r1, r0
 800fe5e:	4620      	mov	r0, r4
 800fe60:	f000 fbe6 	bl	8010630 <__pow5mult>
 800fe64:	9b06      	ldr	r3, [sp, #24]
 800fe66:	2b01      	cmp	r3, #1
 800fe68:	4606      	mov	r6, r0
 800fe6a:	f340 8081 	ble.w	800ff70 <_dtoa_r+0x8c8>
 800fe6e:	f04f 0800 	mov.w	r8, #0
 800fe72:	6933      	ldr	r3, [r6, #16]
 800fe74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fe78:	6918      	ldr	r0, [r3, #16]
 800fe7a:	f000 fac9 	bl	8010410 <__hi0bits>
 800fe7e:	f1c0 0020 	rsb	r0, r0, #32
 800fe82:	9b05      	ldr	r3, [sp, #20]
 800fe84:	4418      	add	r0, r3
 800fe86:	f010 001f 	ands.w	r0, r0, #31
 800fe8a:	f000 8092 	beq.w	800ffb2 <_dtoa_r+0x90a>
 800fe8e:	f1c0 0320 	rsb	r3, r0, #32
 800fe92:	2b04      	cmp	r3, #4
 800fe94:	f340 808a 	ble.w	800ffac <_dtoa_r+0x904>
 800fe98:	f1c0 001c 	rsb	r0, r0, #28
 800fe9c:	9b04      	ldr	r3, [sp, #16]
 800fe9e:	4403      	add	r3, r0
 800fea0:	9304      	str	r3, [sp, #16]
 800fea2:	9b05      	ldr	r3, [sp, #20]
 800fea4:	4403      	add	r3, r0
 800fea6:	4405      	add	r5, r0
 800fea8:	9305      	str	r3, [sp, #20]
 800feaa:	9b04      	ldr	r3, [sp, #16]
 800feac:	2b00      	cmp	r3, #0
 800feae:	dd07      	ble.n	800fec0 <_dtoa_r+0x818>
 800feb0:	ee18 1a10 	vmov	r1, s16
 800feb4:	461a      	mov	r2, r3
 800feb6:	4620      	mov	r0, r4
 800feb8:	f000 fc14 	bl	80106e4 <__lshift>
 800febc:	ee08 0a10 	vmov	s16, r0
 800fec0:	9b05      	ldr	r3, [sp, #20]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	dd05      	ble.n	800fed2 <_dtoa_r+0x82a>
 800fec6:	4631      	mov	r1, r6
 800fec8:	461a      	mov	r2, r3
 800feca:	4620      	mov	r0, r4
 800fecc:	f000 fc0a 	bl	80106e4 <__lshift>
 800fed0:	4606      	mov	r6, r0
 800fed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d06e      	beq.n	800ffb6 <_dtoa_r+0x90e>
 800fed8:	ee18 0a10 	vmov	r0, s16
 800fedc:	4631      	mov	r1, r6
 800fede:	f000 fc71 	bl	80107c4 <__mcmp>
 800fee2:	2800      	cmp	r0, #0
 800fee4:	da67      	bge.n	800ffb6 <_dtoa_r+0x90e>
 800fee6:	9b00      	ldr	r3, [sp, #0]
 800fee8:	3b01      	subs	r3, #1
 800feea:	ee18 1a10 	vmov	r1, s16
 800feee:	9300      	str	r3, [sp, #0]
 800fef0:	220a      	movs	r2, #10
 800fef2:	2300      	movs	r3, #0
 800fef4:	4620      	mov	r0, r4
 800fef6:	f000 fa45 	bl	8010384 <__multadd>
 800fefa:	9b08      	ldr	r3, [sp, #32]
 800fefc:	ee08 0a10 	vmov	s16, r0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	f000 81b1 	beq.w	8010268 <_dtoa_r+0xbc0>
 800ff06:	2300      	movs	r3, #0
 800ff08:	4639      	mov	r1, r7
 800ff0a:	220a      	movs	r2, #10
 800ff0c:	4620      	mov	r0, r4
 800ff0e:	f000 fa39 	bl	8010384 <__multadd>
 800ff12:	9b02      	ldr	r3, [sp, #8]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	4607      	mov	r7, r0
 800ff18:	f300 808e 	bgt.w	8010038 <_dtoa_r+0x990>
 800ff1c:	9b06      	ldr	r3, [sp, #24]
 800ff1e:	2b02      	cmp	r3, #2
 800ff20:	dc51      	bgt.n	800ffc6 <_dtoa_r+0x91e>
 800ff22:	e089      	b.n	8010038 <_dtoa_r+0x990>
 800ff24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ff26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ff2a:	e74b      	b.n	800fdc4 <_dtoa_r+0x71c>
 800ff2c:	9b03      	ldr	r3, [sp, #12]
 800ff2e:	1e5e      	subs	r6, r3, #1
 800ff30:	9b07      	ldr	r3, [sp, #28]
 800ff32:	42b3      	cmp	r3, r6
 800ff34:	bfbf      	itttt	lt
 800ff36:	9b07      	ldrlt	r3, [sp, #28]
 800ff38:	9607      	strlt	r6, [sp, #28]
 800ff3a:	1af2      	sublt	r2, r6, r3
 800ff3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ff3e:	bfb6      	itet	lt
 800ff40:	189b      	addlt	r3, r3, r2
 800ff42:	1b9e      	subge	r6, r3, r6
 800ff44:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ff46:	9b03      	ldr	r3, [sp, #12]
 800ff48:	bfb8      	it	lt
 800ff4a:	2600      	movlt	r6, #0
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	bfb7      	itett	lt
 800ff50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ff54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ff58:	1a9d      	sublt	r5, r3, r2
 800ff5a:	2300      	movlt	r3, #0
 800ff5c:	e734      	b.n	800fdc8 <_dtoa_r+0x720>
 800ff5e:	9e07      	ldr	r6, [sp, #28]
 800ff60:	9d04      	ldr	r5, [sp, #16]
 800ff62:	9f08      	ldr	r7, [sp, #32]
 800ff64:	e73b      	b.n	800fdde <_dtoa_r+0x736>
 800ff66:	9a07      	ldr	r2, [sp, #28]
 800ff68:	e767      	b.n	800fe3a <_dtoa_r+0x792>
 800ff6a:	9b06      	ldr	r3, [sp, #24]
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	dc18      	bgt.n	800ffa2 <_dtoa_r+0x8fa>
 800ff70:	f1ba 0f00 	cmp.w	sl, #0
 800ff74:	d115      	bne.n	800ffa2 <_dtoa_r+0x8fa>
 800ff76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ff7a:	b993      	cbnz	r3, 800ffa2 <_dtoa_r+0x8fa>
 800ff7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ff80:	0d1b      	lsrs	r3, r3, #20
 800ff82:	051b      	lsls	r3, r3, #20
 800ff84:	b183      	cbz	r3, 800ffa8 <_dtoa_r+0x900>
 800ff86:	9b04      	ldr	r3, [sp, #16]
 800ff88:	3301      	adds	r3, #1
 800ff8a:	9304      	str	r3, [sp, #16]
 800ff8c:	9b05      	ldr	r3, [sp, #20]
 800ff8e:	3301      	adds	r3, #1
 800ff90:	9305      	str	r3, [sp, #20]
 800ff92:	f04f 0801 	mov.w	r8, #1
 800ff96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	f47f af6a 	bne.w	800fe72 <_dtoa_r+0x7ca>
 800ff9e:	2001      	movs	r0, #1
 800ffa0:	e76f      	b.n	800fe82 <_dtoa_r+0x7da>
 800ffa2:	f04f 0800 	mov.w	r8, #0
 800ffa6:	e7f6      	b.n	800ff96 <_dtoa_r+0x8ee>
 800ffa8:	4698      	mov	r8, r3
 800ffaa:	e7f4      	b.n	800ff96 <_dtoa_r+0x8ee>
 800ffac:	f43f af7d 	beq.w	800feaa <_dtoa_r+0x802>
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	301c      	adds	r0, #28
 800ffb4:	e772      	b.n	800fe9c <_dtoa_r+0x7f4>
 800ffb6:	9b03      	ldr	r3, [sp, #12]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	dc37      	bgt.n	801002c <_dtoa_r+0x984>
 800ffbc:	9b06      	ldr	r3, [sp, #24]
 800ffbe:	2b02      	cmp	r3, #2
 800ffc0:	dd34      	ble.n	801002c <_dtoa_r+0x984>
 800ffc2:	9b03      	ldr	r3, [sp, #12]
 800ffc4:	9302      	str	r3, [sp, #8]
 800ffc6:	9b02      	ldr	r3, [sp, #8]
 800ffc8:	b96b      	cbnz	r3, 800ffe6 <_dtoa_r+0x93e>
 800ffca:	4631      	mov	r1, r6
 800ffcc:	2205      	movs	r2, #5
 800ffce:	4620      	mov	r0, r4
 800ffd0:	f000 f9d8 	bl	8010384 <__multadd>
 800ffd4:	4601      	mov	r1, r0
 800ffd6:	4606      	mov	r6, r0
 800ffd8:	ee18 0a10 	vmov	r0, s16
 800ffdc:	f000 fbf2 	bl	80107c4 <__mcmp>
 800ffe0:	2800      	cmp	r0, #0
 800ffe2:	f73f adbb 	bgt.w	800fb5c <_dtoa_r+0x4b4>
 800ffe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffe8:	9d01      	ldr	r5, [sp, #4]
 800ffea:	43db      	mvns	r3, r3
 800ffec:	9300      	str	r3, [sp, #0]
 800ffee:	f04f 0800 	mov.w	r8, #0
 800fff2:	4631      	mov	r1, r6
 800fff4:	4620      	mov	r0, r4
 800fff6:	f000 f9a3 	bl	8010340 <_Bfree>
 800fffa:	2f00      	cmp	r7, #0
 800fffc:	f43f aea4 	beq.w	800fd48 <_dtoa_r+0x6a0>
 8010000:	f1b8 0f00 	cmp.w	r8, #0
 8010004:	d005      	beq.n	8010012 <_dtoa_r+0x96a>
 8010006:	45b8      	cmp	r8, r7
 8010008:	d003      	beq.n	8010012 <_dtoa_r+0x96a>
 801000a:	4641      	mov	r1, r8
 801000c:	4620      	mov	r0, r4
 801000e:	f000 f997 	bl	8010340 <_Bfree>
 8010012:	4639      	mov	r1, r7
 8010014:	4620      	mov	r0, r4
 8010016:	f000 f993 	bl	8010340 <_Bfree>
 801001a:	e695      	b.n	800fd48 <_dtoa_r+0x6a0>
 801001c:	2600      	movs	r6, #0
 801001e:	4637      	mov	r7, r6
 8010020:	e7e1      	b.n	800ffe6 <_dtoa_r+0x93e>
 8010022:	9700      	str	r7, [sp, #0]
 8010024:	4637      	mov	r7, r6
 8010026:	e599      	b.n	800fb5c <_dtoa_r+0x4b4>
 8010028:	40240000 	.word	0x40240000
 801002c:	9b08      	ldr	r3, [sp, #32]
 801002e:	2b00      	cmp	r3, #0
 8010030:	f000 80ca 	beq.w	80101c8 <_dtoa_r+0xb20>
 8010034:	9b03      	ldr	r3, [sp, #12]
 8010036:	9302      	str	r3, [sp, #8]
 8010038:	2d00      	cmp	r5, #0
 801003a:	dd05      	ble.n	8010048 <_dtoa_r+0x9a0>
 801003c:	4639      	mov	r1, r7
 801003e:	462a      	mov	r2, r5
 8010040:	4620      	mov	r0, r4
 8010042:	f000 fb4f 	bl	80106e4 <__lshift>
 8010046:	4607      	mov	r7, r0
 8010048:	f1b8 0f00 	cmp.w	r8, #0
 801004c:	d05b      	beq.n	8010106 <_dtoa_r+0xa5e>
 801004e:	6879      	ldr	r1, [r7, #4]
 8010050:	4620      	mov	r0, r4
 8010052:	f000 f935 	bl	80102c0 <_Balloc>
 8010056:	4605      	mov	r5, r0
 8010058:	b928      	cbnz	r0, 8010066 <_dtoa_r+0x9be>
 801005a:	4b87      	ldr	r3, [pc, #540]	; (8010278 <_dtoa_r+0xbd0>)
 801005c:	4602      	mov	r2, r0
 801005e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010062:	f7ff bb3b 	b.w	800f6dc <_dtoa_r+0x34>
 8010066:	693a      	ldr	r2, [r7, #16]
 8010068:	3202      	adds	r2, #2
 801006a:	0092      	lsls	r2, r2, #2
 801006c:	f107 010c 	add.w	r1, r7, #12
 8010070:	300c      	adds	r0, #12
 8010072:	f000 f90b 	bl	801028c <memcpy>
 8010076:	2201      	movs	r2, #1
 8010078:	4629      	mov	r1, r5
 801007a:	4620      	mov	r0, r4
 801007c:	f000 fb32 	bl	80106e4 <__lshift>
 8010080:	9b01      	ldr	r3, [sp, #4]
 8010082:	f103 0901 	add.w	r9, r3, #1
 8010086:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801008a:	4413      	add	r3, r2
 801008c:	9305      	str	r3, [sp, #20]
 801008e:	f00a 0301 	and.w	r3, sl, #1
 8010092:	46b8      	mov	r8, r7
 8010094:	9304      	str	r3, [sp, #16]
 8010096:	4607      	mov	r7, r0
 8010098:	4631      	mov	r1, r6
 801009a:	ee18 0a10 	vmov	r0, s16
 801009e:	f7ff fa75 	bl	800f58c <quorem>
 80100a2:	4641      	mov	r1, r8
 80100a4:	9002      	str	r0, [sp, #8]
 80100a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80100aa:	ee18 0a10 	vmov	r0, s16
 80100ae:	f000 fb89 	bl	80107c4 <__mcmp>
 80100b2:	463a      	mov	r2, r7
 80100b4:	9003      	str	r0, [sp, #12]
 80100b6:	4631      	mov	r1, r6
 80100b8:	4620      	mov	r0, r4
 80100ba:	f000 fb9f 	bl	80107fc <__mdiff>
 80100be:	68c2      	ldr	r2, [r0, #12]
 80100c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80100c4:	4605      	mov	r5, r0
 80100c6:	bb02      	cbnz	r2, 801010a <_dtoa_r+0xa62>
 80100c8:	4601      	mov	r1, r0
 80100ca:	ee18 0a10 	vmov	r0, s16
 80100ce:	f000 fb79 	bl	80107c4 <__mcmp>
 80100d2:	4602      	mov	r2, r0
 80100d4:	4629      	mov	r1, r5
 80100d6:	4620      	mov	r0, r4
 80100d8:	9207      	str	r2, [sp, #28]
 80100da:	f000 f931 	bl	8010340 <_Bfree>
 80100de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80100e2:	ea43 0102 	orr.w	r1, r3, r2
 80100e6:	9b04      	ldr	r3, [sp, #16]
 80100e8:	430b      	orrs	r3, r1
 80100ea:	464d      	mov	r5, r9
 80100ec:	d10f      	bne.n	801010e <_dtoa_r+0xa66>
 80100ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80100f2:	d02a      	beq.n	801014a <_dtoa_r+0xaa2>
 80100f4:	9b03      	ldr	r3, [sp, #12]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	dd02      	ble.n	8010100 <_dtoa_r+0xa58>
 80100fa:	9b02      	ldr	r3, [sp, #8]
 80100fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010100:	f88b a000 	strb.w	sl, [fp]
 8010104:	e775      	b.n	800fff2 <_dtoa_r+0x94a>
 8010106:	4638      	mov	r0, r7
 8010108:	e7ba      	b.n	8010080 <_dtoa_r+0x9d8>
 801010a:	2201      	movs	r2, #1
 801010c:	e7e2      	b.n	80100d4 <_dtoa_r+0xa2c>
 801010e:	9b03      	ldr	r3, [sp, #12]
 8010110:	2b00      	cmp	r3, #0
 8010112:	db04      	blt.n	801011e <_dtoa_r+0xa76>
 8010114:	9906      	ldr	r1, [sp, #24]
 8010116:	430b      	orrs	r3, r1
 8010118:	9904      	ldr	r1, [sp, #16]
 801011a:	430b      	orrs	r3, r1
 801011c:	d122      	bne.n	8010164 <_dtoa_r+0xabc>
 801011e:	2a00      	cmp	r2, #0
 8010120:	ddee      	ble.n	8010100 <_dtoa_r+0xa58>
 8010122:	ee18 1a10 	vmov	r1, s16
 8010126:	2201      	movs	r2, #1
 8010128:	4620      	mov	r0, r4
 801012a:	f000 fadb 	bl	80106e4 <__lshift>
 801012e:	4631      	mov	r1, r6
 8010130:	ee08 0a10 	vmov	s16, r0
 8010134:	f000 fb46 	bl	80107c4 <__mcmp>
 8010138:	2800      	cmp	r0, #0
 801013a:	dc03      	bgt.n	8010144 <_dtoa_r+0xa9c>
 801013c:	d1e0      	bne.n	8010100 <_dtoa_r+0xa58>
 801013e:	f01a 0f01 	tst.w	sl, #1
 8010142:	d0dd      	beq.n	8010100 <_dtoa_r+0xa58>
 8010144:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010148:	d1d7      	bne.n	80100fa <_dtoa_r+0xa52>
 801014a:	2339      	movs	r3, #57	; 0x39
 801014c:	f88b 3000 	strb.w	r3, [fp]
 8010150:	462b      	mov	r3, r5
 8010152:	461d      	mov	r5, r3
 8010154:	3b01      	subs	r3, #1
 8010156:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801015a:	2a39      	cmp	r2, #57	; 0x39
 801015c:	d071      	beq.n	8010242 <_dtoa_r+0xb9a>
 801015e:	3201      	adds	r2, #1
 8010160:	701a      	strb	r2, [r3, #0]
 8010162:	e746      	b.n	800fff2 <_dtoa_r+0x94a>
 8010164:	2a00      	cmp	r2, #0
 8010166:	dd07      	ble.n	8010178 <_dtoa_r+0xad0>
 8010168:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801016c:	d0ed      	beq.n	801014a <_dtoa_r+0xaa2>
 801016e:	f10a 0301 	add.w	r3, sl, #1
 8010172:	f88b 3000 	strb.w	r3, [fp]
 8010176:	e73c      	b.n	800fff2 <_dtoa_r+0x94a>
 8010178:	9b05      	ldr	r3, [sp, #20]
 801017a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801017e:	4599      	cmp	r9, r3
 8010180:	d047      	beq.n	8010212 <_dtoa_r+0xb6a>
 8010182:	ee18 1a10 	vmov	r1, s16
 8010186:	2300      	movs	r3, #0
 8010188:	220a      	movs	r2, #10
 801018a:	4620      	mov	r0, r4
 801018c:	f000 f8fa 	bl	8010384 <__multadd>
 8010190:	45b8      	cmp	r8, r7
 8010192:	ee08 0a10 	vmov	s16, r0
 8010196:	f04f 0300 	mov.w	r3, #0
 801019a:	f04f 020a 	mov.w	r2, #10
 801019e:	4641      	mov	r1, r8
 80101a0:	4620      	mov	r0, r4
 80101a2:	d106      	bne.n	80101b2 <_dtoa_r+0xb0a>
 80101a4:	f000 f8ee 	bl	8010384 <__multadd>
 80101a8:	4680      	mov	r8, r0
 80101aa:	4607      	mov	r7, r0
 80101ac:	f109 0901 	add.w	r9, r9, #1
 80101b0:	e772      	b.n	8010098 <_dtoa_r+0x9f0>
 80101b2:	f000 f8e7 	bl	8010384 <__multadd>
 80101b6:	4639      	mov	r1, r7
 80101b8:	4680      	mov	r8, r0
 80101ba:	2300      	movs	r3, #0
 80101bc:	220a      	movs	r2, #10
 80101be:	4620      	mov	r0, r4
 80101c0:	f000 f8e0 	bl	8010384 <__multadd>
 80101c4:	4607      	mov	r7, r0
 80101c6:	e7f1      	b.n	80101ac <_dtoa_r+0xb04>
 80101c8:	9b03      	ldr	r3, [sp, #12]
 80101ca:	9302      	str	r3, [sp, #8]
 80101cc:	9d01      	ldr	r5, [sp, #4]
 80101ce:	ee18 0a10 	vmov	r0, s16
 80101d2:	4631      	mov	r1, r6
 80101d4:	f7ff f9da 	bl	800f58c <quorem>
 80101d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80101dc:	9b01      	ldr	r3, [sp, #4]
 80101de:	f805 ab01 	strb.w	sl, [r5], #1
 80101e2:	1aea      	subs	r2, r5, r3
 80101e4:	9b02      	ldr	r3, [sp, #8]
 80101e6:	4293      	cmp	r3, r2
 80101e8:	dd09      	ble.n	80101fe <_dtoa_r+0xb56>
 80101ea:	ee18 1a10 	vmov	r1, s16
 80101ee:	2300      	movs	r3, #0
 80101f0:	220a      	movs	r2, #10
 80101f2:	4620      	mov	r0, r4
 80101f4:	f000 f8c6 	bl	8010384 <__multadd>
 80101f8:	ee08 0a10 	vmov	s16, r0
 80101fc:	e7e7      	b.n	80101ce <_dtoa_r+0xb26>
 80101fe:	9b02      	ldr	r3, [sp, #8]
 8010200:	2b00      	cmp	r3, #0
 8010202:	bfc8      	it	gt
 8010204:	461d      	movgt	r5, r3
 8010206:	9b01      	ldr	r3, [sp, #4]
 8010208:	bfd8      	it	le
 801020a:	2501      	movle	r5, #1
 801020c:	441d      	add	r5, r3
 801020e:	f04f 0800 	mov.w	r8, #0
 8010212:	ee18 1a10 	vmov	r1, s16
 8010216:	2201      	movs	r2, #1
 8010218:	4620      	mov	r0, r4
 801021a:	f000 fa63 	bl	80106e4 <__lshift>
 801021e:	4631      	mov	r1, r6
 8010220:	ee08 0a10 	vmov	s16, r0
 8010224:	f000 face 	bl	80107c4 <__mcmp>
 8010228:	2800      	cmp	r0, #0
 801022a:	dc91      	bgt.n	8010150 <_dtoa_r+0xaa8>
 801022c:	d102      	bne.n	8010234 <_dtoa_r+0xb8c>
 801022e:	f01a 0f01 	tst.w	sl, #1
 8010232:	d18d      	bne.n	8010150 <_dtoa_r+0xaa8>
 8010234:	462b      	mov	r3, r5
 8010236:	461d      	mov	r5, r3
 8010238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801023c:	2a30      	cmp	r2, #48	; 0x30
 801023e:	d0fa      	beq.n	8010236 <_dtoa_r+0xb8e>
 8010240:	e6d7      	b.n	800fff2 <_dtoa_r+0x94a>
 8010242:	9a01      	ldr	r2, [sp, #4]
 8010244:	429a      	cmp	r2, r3
 8010246:	d184      	bne.n	8010152 <_dtoa_r+0xaaa>
 8010248:	9b00      	ldr	r3, [sp, #0]
 801024a:	3301      	adds	r3, #1
 801024c:	9300      	str	r3, [sp, #0]
 801024e:	2331      	movs	r3, #49	; 0x31
 8010250:	7013      	strb	r3, [r2, #0]
 8010252:	e6ce      	b.n	800fff2 <_dtoa_r+0x94a>
 8010254:	4b09      	ldr	r3, [pc, #36]	; (801027c <_dtoa_r+0xbd4>)
 8010256:	f7ff ba95 	b.w	800f784 <_dtoa_r+0xdc>
 801025a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801025c:	2b00      	cmp	r3, #0
 801025e:	f47f aa6e 	bne.w	800f73e <_dtoa_r+0x96>
 8010262:	4b07      	ldr	r3, [pc, #28]	; (8010280 <_dtoa_r+0xbd8>)
 8010264:	f7ff ba8e 	b.w	800f784 <_dtoa_r+0xdc>
 8010268:	9b02      	ldr	r3, [sp, #8]
 801026a:	2b00      	cmp	r3, #0
 801026c:	dcae      	bgt.n	80101cc <_dtoa_r+0xb24>
 801026e:	9b06      	ldr	r3, [sp, #24]
 8010270:	2b02      	cmp	r3, #2
 8010272:	f73f aea8 	bgt.w	800ffc6 <_dtoa_r+0x91e>
 8010276:	e7a9      	b.n	80101cc <_dtoa_r+0xb24>
 8010278:	080121a3 	.word	0x080121a3
 801027c:	08012100 	.word	0x08012100
 8010280:	08012124 	.word	0x08012124

08010284 <_localeconv_r>:
 8010284:	4800      	ldr	r0, [pc, #0]	; (8010288 <_localeconv_r+0x4>)
 8010286:	4770      	bx	lr
 8010288:	20000238 	.word	0x20000238

0801028c <memcpy>:
 801028c:	440a      	add	r2, r1
 801028e:	4291      	cmp	r1, r2
 8010290:	f100 33ff 	add.w	r3, r0, #4294967295
 8010294:	d100      	bne.n	8010298 <memcpy+0xc>
 8010296:	4770      	bx	lr
 8010298:	b510      	push	{r4, lr}
 801029a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801029e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80102a2:	4291      	cmp	r1, r2
 80102a4:	d1f9      	bne.n	801029a <memcpy+0xe>
 80102a6:	bd10      	pop	{r4, pc}

080102a8 <__malloc_lock>:
 80102a8:	4801      	ldr	r0, [pc, #4]	; (80102b0 <__malloc_lock+0x8>)
 80102aa:	f000 bd30 	b.w	8010d0e <__retarget_lock_acquire_recursive>
 80102ae:	bf00      	nop
 80102b0:	2000172c 	.word	0x2000172c

080102b4 <__malloc_unlock>:
 80102b4:	4801      	ldr	r0, [pc, #4]	; (80102bc <__malloc_unlock+0x8>)
 80102b6:	f000 bd2b 	b.w	8010d10 <__retarget_lock_release_recursive>
 80102ba:	bf00      	nop
 80102bc:	2000172c 	.word	0x2000172c

080102c0 <_Balloc>:
 80102c0:	b570      	push	{r4, r5, r6, lr}
 80102c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80102c4:	4604      	mov	r4, r0
 80102c6:	460d      	mov	r5, r1
 80102c8:	b976      	cbnz	r6, 80102e8 <_Balloc+0x28>
 80102ca:	2010      	movs	r0, #16
 80102cc:	f7fe fbcc 	bl	800ea68 <malloc>
 80102d0:	4602      	mov	r2, r0
 80102d2:	6260      	str	r0, [r4, #36]	; 0x24
 80102d4:	b920      	cbnz	r0, 80102e0 <_Balloc+0x20>
 80102d6:	4b18      	ldr	r3, [pc, #96]	; (8010338 <_Balloc+0x78>)
 80102d8:	4818      	ldr	r0, [pc, #96]	; (801033c <_Balloc+0x7c>)
 80102da:	2166      	movs	r1, #102	; 0x66
 80102dc:	f000 fce6 	bl	8010cac <__assert_func>
 80102e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80102e4:	6006      	str	r6, [r0, #0]
 80102e6:	60c6      	str	r6, [r0, #12]
 80102e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80102ea:	68f3      	ldr	r3, [r6, #12]
 80102ec:	b183      	cbz	r3, 8010310 <_Balloc+0x50>
 80102ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80102f0:	68db      	ldr	r3, [r3, #12]
 80102f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80102f6:	b9b8      	cbnz	r0, 8010328 <_Balloc+0x68>
 80102f8:	2101      	movs	r1, #1
 80102fa:	fa01 f605 	lsl.w	r6, r1, r5
 80102fe:	1d72      	adds	r2, r6, #5
 8010300:	0092      	lsls	r2, r2, #2
 8010302:	4620      	mov	r0, r4
 8010304:	f000 fb60 	bl	80109c8 <_calloc_r>
 8010308:	b160      	cbz	r0, 8010324 <_Balloc+0x64>
 801030a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801030e:	e00e      	b.n	801032e <_Balloc+0x6e>
 8010310:	2221      	movs	r2, #33	; 0x21
 8010312:	2104      	movs	r1, #4
 8010314:	4620      	mov	r0, r4
 8010316:	f000 fb57 	bl	80109c8 <_calloc_r>
 801031a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801031c:	60f0      	str	r0, [r6, #12]
 801031e:	68db      	ldr	r3, [r3, #12]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d1e4      	bne.n	80102ee <_Balloc+0x2e>
 8010324:	2000      	movs	r0, #0
 8010326:	bd70      	pop	{r4, r5, r6, pc}
 8010328:	6802      	ldr	r2, [r0, #0]
 801032a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801032e:	2300      	movs	r3, #0
 8010330:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010334:	e7f7      	b.n	8010326 <_Balloc+0x66>
 8010336:	bf00      	nop
 8010338:	08012131 	.word	0x08012131
 801033c:	080121b4 	.word	0x080121b4

08010340 <_Bfree>:
 8010340:	b570      	push	{r4, r5, r6, lr}
 8010342:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010344:	4605      	mov	r5, r0
 8010346:	460c      	mov	r4, r1
 8010348:	b976      	cbnz	r6, 8010368 <_Bfree+0x28>
 801034a:	2010      	movs	r0, #16
 801034c:	f7fe fb8c 	bl	800ea68 <malloc>
 8010350:	4602      	mov	r2, r0
 8010352:	6268      	str	r0, [r5, #36]	; 0x24
 8010354:	b920      	cbnz	r0, 8010360 <_Bfree+0x20>
 8010356:	4b09      	ldr	r3, [pc, #36]	; (801037c <_Bfree+0x3c>)
 8010358:	4809      	ldr	r0, [pc, #36]	; (8010380 <_Bfree+0x40>)
 801035a:	218a      	movs	r1, #138	; 0x8a
 801035c:	f000 fca6 	bl	8010cac <__assert_func>
 8010360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010364:	6006      	str	r6, [r0, #0]
 8010366:	60c6      	str	r6, [r0, #12]
 8010368:	b13c      	cbz	r4, 801037a <_Bfree+0x3a>
 801036a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801036c:	6862      	ldr	r2, [r4, #4]
 801036e:	68db      	ldr	r3, [r3, #12]
 8010370:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010374:	6021      	str	r1, [r4, #0]
 8010376:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801037a:	bd70      	pop	{r4, r5, r6, pc}
 801037c:	08012131 	.word	0x08012131
 8010380:	080121b4 	.word	0x080121b4

08010384 <__multadd>:
 8010384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010388:	690d      	ldr	r5, [r1, #16]
 801038a:	4607      	mov	r7, r0
 801038c:	460c      	mov	r4, r1
 801038e:	461e      	mov	r6, r3
 8010390:	f101 0c14 	add.w	ip, r1, #20
 8010394:	2000      	movs	r0, #0
 8010396:	f8dc 3000 	ldr.w	r3, [ip]
 801039a:	b299      	uxth	r1, r3
 801039c:	fb02 6101 	mla	r1, r2, r1, r6
 80103a0:	0c1e      	lsrs	r6, r3, #16
 80103a2:	0c0b      	lsrs	r3, r1, #16
 80103a4:	fb02 3306 	mla	r3, r2, r6, r3
 80103a8:	b289      	uxth	r1, r1
 80103aa:	3001      	adds	r0, #1
 80103ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80103b0:	4285      	cmp	r5, r0
 80103b2:	f84c 1b04 	str.w	r1, [ip], #4
 80103b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80103ba:	dcec      	bgt.n	8010396 <__multadd+0x12>
 80103bc:	b30e      	cbz	r6, 8010402 <__multadd+0x7e>
 80103be:	68a3      	ldr	r3, [r4, #8]
 80103c0:	42ab      	cmp	r3, r5
 80103c2:	dc19      	bgt.n	80103f8 <__multadd+0x74>
 80103c4:	6861      	ldr	r1, [r4, #4]
 80103c6:	4638      	mov	r0, r7
 80103c8:	3101      	adds	r1, #1
 80103ca:	f7ff ff79 	bl	80102c0 <_Balloc>
 80103ce:	4680      	mov	r8, r0
 80103d0:	b928      	cbnz	r0, 80103de <__multadd+0x5a>
 80103d2:	4602      	mov	r2, r0
 80103d4:	4b0c      	ldr	r3, [pc, #48]	; (8010408 <__multadd+0x84>)
 80103d6:	480d      	ldr	r0, [pc, #52]	; (801040c <__multadd+0x88>)
 80103d8:	21b5      	movs	r1, #181	; 0xb5
 80103da:	f000 fc67 	bl	8010cac <__assert_func>
 80103de:	6922      	ldr	r2, [r4, #16]
 80103e0:	3202      	adds	r2, #2
 80103e2:	f104 010c 	add.w	r1, r4, #12
 80103e6:	0092      	lsls	r2, r2, #2
 80103e8:	300c      	adds	r0, #12
 80103ea:	f7ff ff4f 	bl	801028c <memcpy>
 80103ee:	4621      	mov	r1, r4
 80103f0:	4638      	mov	r0, r7
 80103f2:	f7ff ffa5 	bl	8010340 <_Bfree>
 80103f6:	4644      	mov	r4, r8
 80103f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80103fc:	3501      	adds	r5, #1
 80103fe:	615e      	str	r6, [r3, #20]
 8010400:	6125      	str	r5, [r4, #16]
 8010402:	4620      	mov	r0, r4
 8010404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010408:	080121a3 	.word	0x080121a3
 801040c:	080121b4 	.word	0x080121b4

08010410 <__hi0bits>:
 8010410:	0c03      	lsrs	r3, r0, #16
 8010412:	041b      	lsls	r3, r3, #16
 8010414:	b9d3      	cbnz	r3, 801044c <__hi0bits+0x3c>
 8010416:	0400      	lsls	r0, r0, #16
 8010418:	2310      	movs	r3, #16
 801041a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801041e:	bf04      	itt	eq
 8010420:	0200      	lsleq	r0, r0, #8
 8010422:	3308      	addeq	r3, #8
 8010424:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010428:	bf04      	itt	eq
 801042a:	0100      	lsleq	r0, r0, #4
 801042c:	3304      	addeq	r3, #4
 801042e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010432:	bf04      	itt	eq
 8010434:	0080      	lsleq	r0, r0, #2
 8010436:	3302      	addeq	r3, #2
 8010438:	2800      	cmp	r0, #0
 801043a:	db05      	blt.n	8010448 <__hi0bits+0x38>
 801043c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010440:	f103 0301 	add.w	r3, r3, #1
 8010444:	bf08      	it	eq
 8010446:	2320      	moveq	r3, #32
 8010448:	4618      	mov	r0, r3
 801044a:	4770      	bx	lr
 801044c:	2300      	movs	r3, #0
 801044e:	e7e4      	b.n	801041a <__hi0bits+0xa>

08010450 <__lo0bits>:
 8010450:	6803      	ldr	r3, [r0, #0]
 8010452:	f013 0207 	ands.w	r2, r3, #7
 8010456:	4601      	mov	r1, r0
 8010458:	d00b      	beq.n	8010472 <__lo0bits+0x22>
 801045a:	07da      	lsls	r2, r3, #31
 801045c:	d423      	bmi.n	80104a6 <__lo0bits+0x56>
 801045e:	0798      	lsls	r0, r3, #30
 8010460:	bf49      	itett	mi
 8010462:	085b      	lsrmi	r3, r3, #1
 8010464:	089b      	lsrpl	r3, r3, #2
 8010466:	2001      	movmi	r0, #1
 8010468:	600b      	strmi	r3, [r1, #0]
 801046a:	bf5c      	itt	pl
 801046c:	600b      	strpl	r3, [r1, #0]
 801046e:	2002      	movpl	r0, #2
 8010470:	4770      	bx	lr
 8010472:	b298      	uxth	r0, r3
 8010474:	b9a8      	cbnz	r0, 80104a2 <__lo0bits+0x52>
 8010476:	0c1b      	lsrs	r3, r3, #16
 8010478:	2010      	movs	r0, #16
 801047a:	b2da      	uxtb	r2, r3
 801047c:	b90a      	cbnz	r2, 8010482 <__lo0bits+0x32>
 801047e:	3008      	adds	r0, #8
 8010480:	0a1b      	lsrs	r3, r3, #8
 8010482:	071a      	lsls	r2, r3, #28
 8010484:	bf04      	itt	eq
 8010486:	091b      	lsreq	r3, r3, #4
 8010488:	3004      	addeq	r0, #4
 801048a:	079a      	lsls	r2, r3, #30
 801048c:	bf04      	itt	eq
 801048e:	089b      	lsreq	r3, r3, #2
 8010490:	3002      	addeq	r0, #2
 8010492:	07da      	lsls	r2, r3, #31
 8010494:	d403      	bmi.n	801049e <__lo0bits+0x4e>
 8010496:	085b      	lsrs	r3, r3, #1
 8010498:	f100 0001 	add.w	r0, r0, #1
 801049c:	d005      	beq.n	80104aa <__lo0bits+0x5a>
 801049e:	600b      	str	r3, [r1, #0]
 80104a0:	4770      	bx	lr
 80104a2:	4610      	mov	r0, r2
 80104a4:	e7e9      	b.n	801047a <__lo0bits+0x2a>
 80104a6:	2000      	movs	r0, #0
 80104a8:	4770      	bx	lr
 80104aa:	2020      	movs	r0, #32
 80104ac:	4770      	bx	lr
	...

080104b0 <__i2b>:
 80104b0:	b510      	push	{r4, lr}
 80104b2:	460c      	mov	r4, r1
 80104b4:	2101      	movs	r1, #1
 80104b6:	f7ff ff03 	bl	80102c0 <_Balloc>
 80104ba:	4602      	mov	r2, r0
 80104bc:	b928      	cbnz	r0, 80104ca <__i2b+0x1a>
 80104be:	4b05      	ldr	r3, [pc, #20]	; (80104d4 <__i2b+0x24>)
 80104c0:	4805      	ldr	r0, [pc, #20]	; (80104d8 <__i2b+0x28>)
 80104c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80104c6:	f000 fbf1 	bl	8010cac <__assert_func>
 80104ca:	2301      	movs	r3, #1
 80104cc:	6144      	str	r4, [r0, #20]
 80104ce:	6103      	str	r3, [r0, #16]
 80104d0:	bd10      	pop	{r4, pc}
 80104d2:	bf00      	nop
 80104d4:	080121a3 	.word	0x080121a3
 80104d8:	080121b4 	.word	0x080121b4

080104dc <__multiply>:
 80104dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104e0:	4691      	mov	r9, r2
 80104e2:	690a      	ldr	r2, [r1, #16]
 80104e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80104e8:	429a      	cmp	r2, r3
 80104ea:	bfb8      	it	lt
 80104ec:	460b      	movlt	r3, r1
 80104ee:	460c      	mov	r4, r1
 80104f0:	bfbc      	itt	lt
 80104f2:	464c      	movlt	r4, r9
 80104f4:	4699      	movlt	r9, r3
 80104f6:	6927      	ldr	r7, [r4, #16]
 80104f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80104fc:	68a3      	ldr	r3, [r4, #8]
 80104fe:	6861      	ldr	r1, [r4, #4]
 8010500:	eb07 060a 	add.w	r6, r7, sl
 8010504:	42b3      	cmp	r3, r6
 8010506:	b085      	sub	sp, #20
 8010508:	bfb8      	it	lt
 801050a:	3101      	addlt	r1, #1
 801050c:	f7ff fed8 	bl	80102c0 <_Balloc>
 8010510:	b930      	cbnz	r0, 8010520 <__multiply+0x44>
 8010512:	4602      	mov	r2, r0
 8010514:	4b44      	ldr	r3, [pc, #272]	; (8010628 <__multiply+0x14c>)
 8010516:	4845      	ldr	r0, [pc, #276]	; (801062c <__multiply+0x150>)
 8010518:	f240 115d 	movw	r1, #349	; 0x15d
 801051c:	f000 fbc6 	bl	8010cac <__assert_func>
 8010520:	f100 0514 	add.w	r5, r0, #20
 8010524:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010528:	462b      	mov	r3, r5
 801052a:	2200      	movs	r2, #0
 801052c:	4543      	cmp	r3, r8
 801052e:	d321      	bcc.n	8010574 <__multiply+0x98>
 8010530:	f104 0314 	add.w	r3, r4, #20
 8010534:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010538:	f109 0314 	add.w	r3, r9, #20
 801053c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010540:	9202      	str	r2, [sp, #8]
 8010542:	1b3a      	subs	r2, r7, r4
 8010544:	3a15      	subs	r2, #21
 8010546:	f022 0203 	bic.w	r2, r2, #3
 801054a:	3204      	adds	r2, #4
 801054c:	f104 0115 	add.w	r1, r4, #21
 8010550:	428f      	cmp	r7, r1
 8010552:	bf38      	it	cc
 8010554:	2204      	movcc	r2, #4
 8010556:	9201      	str	r2, [sp, #4]
 8010558:	9a02      	ldr	r2, [sp, #8]
 801055a:	9303      	str	r3, [sp, #12]
 801055c:	429a      	cmp	r2, r3
 801055e:	d80c      	bhi.n	801057a <__multiply+0x9e>
 8010560:	2e00      	cmp	r6, #0
 8010562:	dd03      	ble.n	801056c <__multiply+0x90>
 8010564:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010568:	2b00      	cmp	r3, #0
 801056a:	d05a      	beq.n	8010622 <__multiply+0x146>
 801056c:	6106      	str	r6, [r0, #16]
 801056e:	b005      	add	sp, #20
 8010570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010574:	f843 2b04 	str.w	r2, [r3], #4
 8010578:	e7d8      	b.n	801052c <__multiply+0x50>
 801057a:	f8b3 a000 	ldrh.w	sl, [r3]
 801057e:	f1ba 0f00 	cmp.w	sl, #0
 8010582:	d024      	beq.n	80105ce <__multiply+0xf2>
 8010584:	f104 0e14 	add.w	lr, r4, #20
 8010588:	46a9      	mov	r9, r5
 801058a:	f04f 0c00 	mov.w	ip, #0
 801058e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010592:	f8d9 1000 	ldr.w	r1, [r9]
 8010596:	fa1f fb82 	uxth.w	fp, r2
 801059a:	b289      	uxth	r1, r1
 801059c:	fb0a 110b 	mla	r1, sl, fp, r1
 80105a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80105a4:	f8d9 2000 	ldr.w	r2, [r9]
 80105a8:	4461      	add	r1, ip
 80105aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80105ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80105b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80105b6:	b289      	uxth	r1, r1
 80105b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80105bc:	4577      	cmp	r7, lr
 80105be:	f849 1b04 	str.w	r1, [r9], #4
 80105c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80105c6:	d8e2      	bhi.n	801058e <__multiply+0xb2>
 80105c8:	9a01      	ldr	r2, [sp, #4]
 80105ca:	f845 c002 	str.w	ip, [r5, r2]
 80105ce:	9a03      	ldr	r2, [sp, #12]
 80105d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80105d4:	3304      	adds	r3, #4
 80105d6:	f1b9 0f00 	cmp.w	r9, #0
 80105da:	d020      	beq.n	801061e <__multiply+0x142>
 80105dc:	6829      	ldr	r1, [r5, #0]
 80105de:	f104 0c14 	add.w	ip, r4, #20
 80105e2:	46ae      	mov	lr, r5
 80105e4:	f04f 0a00 	mov.w	sl, #0
 80105e8:	f8bc b000 	ldrh.w	fp, [ip]
 80105ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80105f0:	fb09 220b 	mla	r2, r9, fp, r2
 80105f4:	4492      	add	sl, r2
 80105f6:	b289      	uxth	r1, r1
 80105f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80105fc:	f84e 1b04 	str.w	r1, [lr], #4
 8010600:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010604:	f8be 1000 	ldrh.w	r1, [lr]
 8010608:	0c12      	lsrs	r2, r2, #16
 801060a:	fb09 1102 	mla	r1, r9, r2, r1
 801060e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010612:	4567      	cmp	r7, ip
 8010614:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010618:	d8e6      	bhi.n	80105e8 <__multiply+0x10c>
 801061a:	9a01      	ldr	r2, [sp, #4]
 801061c:	50a9      	str	r1, [r5, r2]
 801061e:	3504      	adds	r5, #4
 8010620:	e79a      	b.n	8010558 <__multiply+0x7c>
 8010622:	3e01      	subs	r6, #1
 8010624:	e79c      	b.n	8010560 <__multiply+0x84>
 8010626:	bf00      	nop
 8010628:	080121a3 	.word	0x080121a3
 801062c:	080121b4 	.word	0x080121b4

08010630 <__pow5mult>:
 8010630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010634:	4615      	mov	r5, r2
 8010636:	f012 0203 	ands.w	r2, r2, #3
 801063a:	4606      	mov	r6, r0
 801063c:	460f      	mov	r7, r1
 801063e:	d007      	beq.n	8010650 <__pow5mult+0x20>
 8010640:	4c25      	ldr	r4, [pc, #148]	; (80106d8 <__pow5mult+0xa8>)
 8010642:	3a01      	subs	r2, #1
 8010644:	2300      	movs	r3, #0
 8010646:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801064a:	f7ff fe9b 	bl	8010384 <__multadd>
 801064e:	4607      	mov	r7, r0
 8010650:	10ad      	asrs	r5, r5, #2
 8010652:	d03d      	beq.n	80106d0 <__pow5mult+0xa0>
 8010654:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010656:	b97c      	cbnz	r4, 8010678 <__pow5mult+0x48>
 8010658:	2010      	movs	r0, #16
 801065a:	f7fe fa05 	bl	800ea68 <malloc>
 801065e:	4602      	mov	r2, r0
 8010660:	6270      	str	r0, [r6, #36]	; 0x24
 8010662:	b928      	cbnz	r0, 8010670 <__pow5mult+0x40>
 8010664:	4b1d      	ldr	r3, [pc, #116]	; (80106dc <__pow5mult+0xac>)
 8010666:	481e      	ldr	r0, [pc, #120]	; (80106e0 <__pow5mult+0xb0>)
 8010668:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801066c:	f000 fb1e 	bl	8010cac <__assert_func>
 8010670:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010674:	6004      	str	r4, [r0, #0]
 8010676:	60c4      	str	r4, [r0, #12]
 8010678:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801067c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010680:	b94c      	cbnz	r4, 8010696 <__pow5mult+0x66>
 8010682:	f240 2171 	movw	r1, #625	; 0x271
 8010686:	4630      	mov	r0, r6
 8010688:	f7ff ff12 	bl	80104b0 <__i2b>
 801068c:	2300      	movs	r3, #0
 801068e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010692:	4604      	mov	r4, r0
 8010694:	6003      	str	r3, [r0, #0]
 8010696:	f04f 0900 	mov.w	r9, #0
 801069a:	07eb      	lsls	r3, r5, #31
 801069c:	d50a      	bpl.n	80106b4 <__pow5mult+0x84>
 801069e:	4639      	mov	r1, r7
 80106a0:	4622      	mov	r2, r4
 80106a2:	4630      	mov	r0, r6
 80106a4:	f7ff ff1a 	bl	80104dc <__multiply>
 80106a8:	4639      	mov	r1, r7
 80106aa:	4680      	mov	r8, r0
 80106ac:	4630      	mov	r0, r6
 80106ae:	f7ff fe47 	bl	8010340 <_Bfree>
 80106b2:	4647      	mov	r7, r8
 80106b4:	106d      	asrs	r5, r5, #1
 80106b6:	d00b      	beq.n	80106d0 <__pow5mult+0xa0>
 80106b8:	6820      	ldr	r0, [r4, #0]
 80106ba:	b938      	cbnz	r0, 80106cc <__pow5mult+0x9c>
 80106bc:	4622      	mov	r2, r4
 80106be:	4621      	mov	r1, r4
 80106c0:	4630      	mov	r0, r6
 80106c2:	f7ff ff0b 	bl	80104dc <__multiply>
 80106c6:	6020      	str	r0, [r4, #0]
 80106c8:	f8c0 9000 	str.w	r9, [r0]
 80106cc:	4604      	mov	r4, r0
 80106ce:	e7e4      	b.n	801069a <__pow5mult+0x6a>
 80106d0:	4638      	mov	r0, r7
 80106d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106d6:	bf00      	nop
 80106d8:	08012300 	.word	0x08012300
 80106dc:	08012131 	.word	0x08012131
 80106e0:	080121b4 	.word	0x080121b4

080106e4 <__lshift>:
 80106e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106e8:	460c      	mov	r4, r1
 80106ea:	6849      	ldr	r1, [r1, #4]
 80106ec:	6923      	ldr	r3, [r4, #16]
 80106ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80106f2:	68a3      	ldr	r3, [r4, #8]
 80106f4:	4607      	mov	r7, r0
 80106f6:	4691      	mov	r9, r2
 80106f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80106fc:	f108 0601 	add.w	r6, r8, #1
 8010700:	42b3      	cmp	r3, r6
 8010702:	db0b      	blt.n	801071c <__lshift+0x38>
 8010704:	4638      	mov	r0, r7
 8010706:	f7ff fddb 	bl	80102c0 <_Balloc>
 801070a:	4605      	mov	r5, r0
 801070c:	b948      	cbnz	r0, 8010722 <__lshift+0x3e>
 801070e:	4602      	mov	r2, r0
 8010710:	4b2a      	ldr	r3, [pc, #168]	; (80107bc <__lshift+0xd8>)
 8010712:	482b      	ldr	r0, [pc, #172]	; (80107c0 <__lshift+0xdc>)
 8010714:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010718:	f000 fac8 	bl	8010cac <__assert_func>
 801071c:	3101      	adds	r1, #1
 801071e:	005b      	lsls	r3, r3, #1
 8010720:	e7ee      	b.n	8010700 <__lshift+0x1c>
 8010722:	2300      	movs	r3, #0
 8010724:	f100 0114 	add.w	r1, r0, #20
 8010728:	f100 0210 	add.w	r2, r0, #16
 801072c:	4618      	mov	r0, r3
 801072e:	4553      	cmp	r3, sl
 8010730:	db37      	blt.n	80107a2 <__lshift+0xbe>
 8010732:	6920      	ldr	r0, [r4, #16]
 8010734:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010738:	f104 0314 	add.w	r3, r4, #20
 801073c:	f019 091f 	ands.w	r9, r9, #31
 8010740:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010744:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010748:	d02f      	beq.n	80107aa <__lshift+0xc6>
 801074a:	f1c9 0e20 	rsb	lr, r9, #32
 801074e:	468a      	mov	sl, r1
 8010750:	f04f 0c00 	mov.w	ip, #0
 8010754:	681a      	ldr	r2, [r3, #0]
 8010756:	fa02 f209 	lsl.w	r2, r2, r9
 801075a:	ea42 020c 	orr.w	r2, r2, ip
 801075e:	f84a 2b04 	str.w	r2, [sl], #4
 8010762:	f853 2b04 	ldr.w	r2, [r3], #4
 8010766:	4298      	cmp	r0, r3
 8010768:	fa22 fc0e 	lsr.w	ip, r2, lr
 801076c:	d8f2      	bhi.n	8010754 <__lshift+0x70>
 801076e:	1b03      	subs	r3, r0, r4
 8010770:	3b15      	subs	r3, #21
 8010772:	f023 0303 	bic.w	r3, r3, #3
 8010776:	3304      	adds	r3, #4
 8010778:	f104 0215 	add.w	r2, r4, #21
 801077c:	4290      	cmp	r0, r2
 801077e:	bf38      	it	cc
 8010780:	2304      	movcc	r3, #4
 8010782:	f841 c003 	str.w	ip, [r1, r3]
 8010786:	f1bc 0f00 	cmp.w	ip, #0
 801078a:	d001      	beq.n	8010790 <__lshift+0xac>
 801078c:	f108 0602 	add.w	r6, r8, #2
 8010790:	3e01      	subs	r6, #1
 8010792:	4638      	mov	r0, r7
 8010794:	612e      	str	r6, [r5, #16]
 8010796:	4621      	mov	r1, r4
 8010798:	f7ff fdd2 	bl	8010340 <_Bfree>
 801079c:	4628      	mov	r0, r5
 801079e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80107a6:	3301      	adds	r3, #1
 80107a8:	e7c1      	b.n	801072e <__lshift+0x4a>
 80107aa:	3904      	subs	r1, #4
 80107ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80107b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80107b4:	4298      	cmp	r0, r3
 80107b6:	d8f9      	bhi.n	80107ac <__lshift+0xc8>
 80107b8:	e7ea      	b.n	8010790 <__lshift+0xac>
 80107ba:	bf00      	nop
 80107bc:	080121a3 	.word	0x080121a3
 80107c0:	080121b4 	.word	0x080121b4

080107c4 <__mcmp>:
 80107c4:	b530      	push	{r4, r5, lr}
 80107c6:	6902      	ldr	r2, [r0, #16]
 80107c8:	690c      	ldr	r4, [r1, #16]
 80107ca:	1b12      	subs	r2, r2, r4
 80107cc:	d10e      	bne.n	80107ec <__mcmp+0x28>
 80107ce:	f100 0314 	add.w	r3, r0, #20
 80107d2:	3114      	adds	r1, #20
 80107d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80107d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80107dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80107e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80107e4:	42a5      	cmp	r5, r4
 80107e6:	d003      	beq.n	80107f0 <__mcmp+0x2c>
 80107e8:	d305      	bcc.n	80107f6 <__mcmp+0x32>
 80107ea:	2201      	movs	r2, #1
 80107ec:	4610      	mov	r0, r2
 80107ee:	bd30      	pop	{r4, r5, pc}
 80107f0:	4283      	cmp	r3, r0
 80107f2:	d3f3      	bcc.n	80107dc <__mcmp+0x18>
 80107f4:	e7fa      	b.n	80107ec <__mcmp+0x28>
 80107f6:	f04f 32ff 	mov.w	r2, #4294967295
 80107fa:	e7f7      	b.n	80107ec <__mcmp+0x28>

080107fc <__mdiff>:
 80107fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010800:	460c      	mov	r4, r1
 8010802:	4606      	mov	r6, r0
 8010804:	4611      	mov	r1, r2
 8010806:	4620      	mov	r0, r4
 8010808:	4690      	mov	r8, r2
 801080a:	f7ff ffdb 	bl	80107c4 <__mcmp>
 801080e:	1e05      	subs	r5, r0, #0
 8010810:	d110      	bne.n	8010834 <__mdiff+0x38>
 8010812:	4629      	mov	r1, r5
 8010814:	4630      	mov	r0, r6
 8010816:	f7ff fd53 	bl	80102c0 <_Balloc>
 801081a:	b930      	cbnz	r0, 801082a <__mdiff+0x2e>
 801081c:	4b3a      	ldr	r3, [pc, #232]	; (8010908 <__mdiff+0x10c>)
 801081e:	4602      	mov	r2, r0
 8010820:	f240 2132 	movw	r1, #562	; 0x232
 8010824:	4839      	ldr	r0, [pc, #228]	; (801090c <__mdiff+0x110>)
 8010826:	f000 fa41 	bl	8010cac <__assert_func>
 801082a:	2301      	movs	r3, #1
 801082c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010834:	bfa4      	itt	ge
 8010836:	4643      	movge	r3, r8
 8010838:	46a0      	movge	r8, r4
 801083a:	4630      	mov	r0, r6
 801083c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010840:	bfa6      	itte	ge
 8010842:	461c      	movge	r4, r3
 8010844:	2500      	movge	r5, #0
 8010846:	2501      	movlt	r5, #1
 8010848:	f7ff fd3a 	bl	80102c0 <_Balloc>
 801084c:	b920      	cbnz	r0, 8010858 <__mdiff+0x5c>
 801084e:	4b2e      	ldr	r3, [pc, #184]	; (8010908 <__mdiff+0x10c>)
 8010850:	4602      	mov	r2, r0
 8010852:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010856:	e7e5      	b.n	8010824 <__mdiff+0x28>
 8010858:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801085c:	6926      	ldr	r6, [r4, #16]
 801085e:	60c5      	str	r5, [r0, #12]
 8010860:	f104 0914 	add.w	r9, r4, #20
 8010864:	f108 0514 	add.w	r5, r8, #20
 8010868:	f100 0e14 	add.w	lr, r0, #20
 801086c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010870:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010874:	f108 0210 	add.w	r2, r8, #16
 8010878:	46f2      	mov	sl, lr
 801087a:	2100      	movs	r1, #0
 801087c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010880:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010884:	fa1f f883 	uxth.w	r8, r3
 8010888:	fa11 f18b 	uxtah	r1, r1, fp
 801088c:	0c1b      	lsrs	r3, r3, #16
 801088e:	eba1 0808 	sub.w	r8, r1, r8
 8010892:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010896:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801089a:	fa1f f888 	uxth.w	r8, r8
 801089e:	1419      	asrs	r1, r3, #16
 80108a0:	454e      	cmp	r6, r9
 80108a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80108a6:	f84a 3b04 	str.w	r3, [sl], #4
 80108aa:	d8e7      	bhi.n	801087c <__mdiff+0x80>
 80108ac:	1b33      	subs	r3, r6, r4
 80108ae:	3b15      	subs	r3, #21
 80108b0:	f023 0303 	bic.w	r3, r3, #3
 80108b4:	3304      	adds	r3, #4
 80108b6:	3415      	adds	r4, #21
 80108b8:	42a6      	cmp	r6, r4
 80108ba:	bf38      	it	cc
 80108bc:	2304      	movcc	r3, #4
 80108be:	441d      	add	r5, r3
 80108c0:	4473      	add	r3, lr
 80108c2:	469e      	mov	lr, r3
 80108c4:	462e      	mov	r6, r5
 80108c6:	4566      	cmp	r6, ip
 80108c8:	d30e      	bcc.n	80108e8 <__mdiff+0xec>
 80108ca:	f10c 0203 	add.w	r2, ip, #3
 80108ce:	1b52      	subs	r2, r2, r5
 80108d0:	f022 0203 	bic.w	r2, r2, #3
 80108d4:	3d03      	subs	r5, #3
 80108d6:	45ac      	cmp	ip, r5
 80108d8:	bf38      	it	cc
 80108da:	2200      	movcc	r2, #0
 80108dc:	441a      	add	r2, r3
 80108de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80108e2:	b17b      	cbz	r3, 8010904 <__mdiff+0x108>
 80108e4:	6107      	str	r7, [r0, #16]
 80108e6:	e7a3      	b.n	8010830 <__mdiff+0x34>
 80108e8:	f856 8b04 	ldr.w	r8, [r6], #4
 80108ec:	fa11 f288 	uxtah	r2, r1, r8
 80108f0:	1414      	asrs	r4, r2, #16
 80108f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80108f6:	b292      	uxth	r2, r2
 80108f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80108fc:	f84e 2b04 	str.w	r2, [lr], #4
 8010900:	1421      	asrs	r1, r4, #16
 8010902:	e7e0      	b.n	80108c6 <__mdiff+0xca>
 8010904:	3f01      	subs	r7, #1
 8010906:	e7ea      	b.n	80108de <__mdiff+0xe2>
 8010908:	080121a3 	.word	0x080121a3
 801090c:	080121b4 	.word	0x080121b4

08010910 <__d2b>:
 8010910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010914:	4689      	mov	r9, r1
 8010916:	2101      	movs	r1, #1
 8010918:	ec57 6b10 	vmov	r6, r7, d0
 801091c:	4690      	mov	r8, r2
 801091e:	f7ff fccf 	bl	80102c0 <_Balloc>
 8010922:	4604      	mov	r4, r0
 8010924:	b930      	cbnz	r0, 8010934 <__d2b+0x24>
 8010926:	4602      	mov	r2, r0
 8010928:	4b25      	ldr	r3, [pc, #148]	; (80109c0 <__d2b+0xb0>)
 801092a:	4826      	ldr	r0, [pc, #152]	; (80109c4 <__d2b+0xb4>)
 801092c:	f240 310a 	movw	r1, #778	; 0x30a
 8010930:	f000 f9bc 	bl	8010cac <__assert_func>
 8010934:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010938:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801093c:	bb35      	cbnz	r5, 801098c <__d2b+0x7c>
 801093e:	2e00      	cmp	r6, #0
 8010940:	9301      	str	r3, [sp, #4]
 8010942:	d028      	beq.n	8010996 <__d2b+0x86>
 8010944:	4668      	mov	r0, sp
 8010946:	9600      	str	r6, [sp, #0]
 8010948:	f7ff fd82 	bl	8010450 <__lo0bits>
 801094c:	9900      	ldr	r1, [sp, #0]
 801094e:	b300      	cbz	r0, 8010992 <__d2b+0x82>
 8010950:	9a01      	ldr	r2, [sp, #4]
 8010952:	f1c0 0320 	rsb	r3, r0, #32
 8010956:	fa02 f303 	lsl.w	r3, r2, r3
 801095a:	430b      	orrs	r3, r1
 801095c:	40c2      	lsrs	r2, r0
 801095e:	6163      	str	r3, [r4, #20]
 8010960:	9201      	str	r2, [sp, #4]
 8010962:	9b01      	ldr	r3, [sp, #4]
 8010964:	61a3      	str	r3, [r4, #24]
 8010966:	2b00      	cmp	r3, #0
 8010968:	bf14      	ite	ne
 801096a:	2202      	movne	r2, #2
 801096c:	2201      	moveq	r2, #1
 801096e:	6122      	str	r2, [r4, #16]
 8010970:	b1d5      	cbz	r5, 80109a8 <__d2b+0x98>
 8010972:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010976:	4405      	add	r5, r0
 8010978:	f8c9 5000 	str.w	r5, [r9]
 801097c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010980:	f8c8 0000 	str.w	r0, [r8]
 8010984:	4620      	mov	r0, r4
 8010986:	b003      	add	sp, #12
 8010988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801098c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010990:	e7d5      	b.n	801093e <__d2b+0x2e>
 8010992:	6161      	str	r1, [r4, #20]
 8010994:	e7e5      	b.n	8010962 <__d2b+0x52>
 8010996:	a801      	add	r0, sp, #4
 8010998:	f7ff fd5a 	bl	8010450 <__lo0bits>
 801099c:	9b01      	ldr	r3, [sp, #4]
 801099e:	6163      	str	r3, [r4, #20]
 80109a0:	2201      	movs	r2, #1
 80109a2:	6122      	str	r2, [r4, #16]
 80109a4:	3020      	adds	r0, #32
 80109a6:	e7e3      	b.n	8010970 <__d2b+0x60>
 80109a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80109ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80109b0:	f8c9 0000 	str.w	r0, [r9]
 80109b4:	6918      	ldr	r0, [r3, #16]
 80109b6:	f7ff fd2b 	bl	8010410 <__hi0bits>
 80109ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80109be:	e7df      	b.n	8010980 <__d2b+0x70>
 80109c0:	080121a3 	.word	0x080121a3
 80109c4:	080121b4 	.word	0x080121b4

080109c8 <_calloc_r>:
 80109c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80109ca:	fba1 2402 	umull	r2, r4, r1, r2
 80109ce:	b94c      	cbnz	r4, 80109e4 <_calloc_r+0x1c>
 80109d0:	4611      	mov	r1, r2
 80109d2:	9201      	str	r2, [sp, #4]
 80109d4:	f7fe f8cc 	bl	800eb70 <_malloc_r>
 80109d8:	9a01      	ldr	r2, [sp, #4]
 80109da:	4605      	mov	r5, r0
 80109dc:	b930      	cbnz	r0, 80109ec <_calloc_r+0x24>
 80109de:	4628      	mov	r0, r5
 80109e0:	b003      	add	sp, #12
 80109e2:	bd30      	pop	{r4, r5, pc}
 80109e4:	220c      	movs	r2, #12
 80109e6:	6002      	str	r2, [r0, #0]
 80109e8:	2500      	movs	r5, #0
 80109ea:	e7f8      	b.n	80109de <_calloc_r+0x16>
 80109ec:	4621      	mov	r1, r4
 80109ee:	f7fe f84b 	bl	800ea88 <memset>
 80109f2:	e7f4      	b.n	80109de <_calloc_r+0x16>

080109f4 <__ssputs_r>:
 80109f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109f8:	688e      	ldr	r6, [r1, #8]
 80109fa:	429e      	cmp	r6, r3
 80109fc:	4682      	mov	sl, r0
 80109fe:	460c      	mov	r4, r1
 8010a00:	4690      	mov	r8, r2
 8010a02:	461f      	mov	r7, r3
 8010a04:	d838      	bhi.n	8010a78 <__ssputs_r+0x84>
 8010a06:	898a      	ldrh	r2, [r1, #12]
 8010a08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010a0c:	d032      	beq.n	8010a74 <__ssputs_r+0x80>
 8010a0e:	6825      	ldr	r5, [r4, #0]
 8010a10:	6909      	ldr	r1, [r1, #16]
 8010a12:	eba5 0901 	sub.w	r9, r5, r1
 8010a16:	6965      	ldr	r5, [r4, #20]
 8010a18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a20:	3301      	adds	r3, #1
 8010a22:	444b      	add	r3, r9
 8010a24:	106d      	asrs	r5, r5, #1
 8010a26:	429d      	cmp	r5, r3
 8010a28:	bf38      	it	cc
 8010a2a:	461d      	movcc	r5, r3
 8010a2c:	0553      	lsls	r3, r2, #21
 8010a2e:	d531      	bpl.n	8010a94 <__ssputs_r+0xa0>
 8010a30:	4629      	mov	r1, r5
 8010a32:	f7fe f89d 	bl	800eb70 <_malloc_r>
 8010a36:	4606      	mov	r6, r0
 8010a38:	b950      	cbnz	r0, 8010a50 <__ssputs_r+0x5c>
 8010a3a:	230c      	movs	r3, #12
 8010a3c:	f8ca 3000 	str.w	r3, [sl]
 8010a40:	89a3      	ldrh	r3, [r4, #12]
 8010a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a46:	81a3      	strh	r3, [r4, #12]
 8010a48:	f04f 30ff 	mov.w	r0, #4294967295
 8010a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a50:	6921      	ldr	r1, [r4, #16]
 8010a52:	464a      	mov	r2, r9
 8010a54:	f7ff fc1a 	bl	801028c <memcpy>
 8010a58:	89a3      	ldrh	r3, [r4, #12]
 8010a5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a62:	81a3      	strh	r3, [r4, #12]
 8010a64:	6126      	str	r6, [r4, #16]
 8010a66:	6165      	str	r5, [r4, #20]
 8010a68:	444e      	add	r6, r9
 8010a6a:	eba5 0509 	sub.w	r5, r5, r9
 8010a6e:	6026      	str	r6, [r4, #0]
 8010a70:	60a5      	str	r5, [r4, #8]
 8010a72:	463e      	mov	r6, r7
 8010a74:	42be      	cmp	r6, r7
 8010a76:	d900      	bls.n	8010a7a <__ssputs_r+0x86>
 8010a78:	463e      	mov	r6, r7
 8010a7a:	6820      	ldr	r0, [r4, #0]
 8010a7c:	4632      	mov	r2, r6
 8010a7e:	4641      	mov	r1, r8
 8010a80:	f000 f959 	bl	8010d36 <memmove>
 8010a84:	68a3      	ldr	r3, [r4, #8]
 8010a86:	1b9b      	subs	r3, r3, r6
 8010a88:	60a3      	str	r3, [r4, #8]
 8010a8a:	6823      	ldr	r3, [r4, #0]
 8010a8c:	4433      	add	r3, r6
 8010a8e:	6023      	str	r3, [r4, #0]
 8010a90:	2000      	movs	r0, #0
 8010a92:	e7db      	b.n	8010a4c <__ssputs_r+0x58>
 8010a94:	462a      	mov	r2, r5
 8010a96:	f000 f968 	bl	8010d6a <_realloc_r>
 8010a9a:	4606      	mov	r6, r0
 8010a9c:	2800      	cmp	r0, #0
 8010a9e:	d1e1      	bne.n	8010a64 <__ssputs_r+0x70>
 8010aa0:	6921      	ldr	r1, [r4, #16]
 8010aa2:	4650      	mov	r0, sl
 8010aa4:	f7fd fff8 	bl	800ea98 <_free_r>
 8010aa8:	e7c7      	b.n	8010a3a <__ssputs_r+0x46>
	...

08010aac <_svfiprintf_r>:
 8010aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ab0:	4698      	mov	r8, r3
 8010ab2:	898b      	ldrh	r3, [r1, #12]
 8010ab4:	061b      	lsls	r3, r3, #24
 8010ab6:	b09d      	sub	sp, #116	; 0x74
 8010ab8:	4607      	mov	r7, r0
 8010aba:	460d      	mov	r5, r1
 8010abc:	4614      	mov	r4, r2
 8010abe:	d50e      	bpl.n	8010ade <_svfiprintf_r+0x32>
 8010ac0:	690b      	ldr	r3, [r1, #16]
 8010ac2:	b963      	cbnz	r3, 8010ade <_svfiprintf_r+0x32>
 8010ac4:	2140      	movs	r1, #64	; 0x40
 8010ac6:	f7fe f853 	bl	800eb70 <_malloc_r>
 8010aca:	6028      	str	r0, [r5, #0]
 8010acc:	6128      	str	r0, [r5, #16]
 8010ace:	b920      	cbnz	r0, 8010ada <_svfiprintf_r+0x2e>
 8010ad0:	230c      	movs	r3, #12
 8010ad2:	603b      	str	r3, [r7, #0]
 8010ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ad8:	e0d1      	b.n	8010c7e <_svfiprintf_r+0x1d2>
 8010ada:	2340      	movs	r3, #64	; 0x40
 8010adc:	616b      	str	r3, [r5, #20]
 8010ade:	2300      	movs	r3, #0
 8010ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8010ae2:	2320      	movs	r3, #32
 8010ae4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010ae8:	f8cd 800c 	str.w	r8, [sp, #12]
 8010aec:	2330      	movs	r3, #48	; 0x30
 8010aee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010c98 <_svfiprintf_r+0x1ec>
 8010af2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010af6:	f04f 0901 	mov.w	r9, #1
 8010afa:	4623      	mov	r3, r4
 8010afc:	469a      	mov	sl, r3
 8010afe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b02:	b10a      	cbz	r2, 8010b08 <_svfiprintf_r+0x5c>
 8010b04:	2a25      	cmp	r2, #37	; 0x25
 8010b06:	d1f9      	bne.n	8010afc <_svfiprintf_r+0x50>
 8010b08:	ebba 0b04 	subs.w	fp, sl, r4
 8010b0c:	d00b      	beq.n	8010b26 <_svfiprintf_r+0x7a>
 8010b0e:	465b      	mov	r3, fp
 8010b10:	4622      	mov	r2, r4
 8010b12:	4629      	mov	r1, r5
 8010b14:	4638      	mov	r0, r7
 8010b16:	f7ff ff6d 	bl	80109f4 <__ssputs_r>
 8010b1a:	3001      	adds	r0, #1
 8010b1c:	f000 80aa 	beq.w	8010c74 <_svfiprintf_r+0x1c8>
 8010b20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b22:	445a      	add	r2, fp
 8010b24:	9209      	str	r2, [sp, #36]	; 0x24
 8010b26:	f89a 3000 	ldrb.w	r3, [sl]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	f000 80a2 	beq.w	8010c74 <_svfiprintf_r+0x1c8>
 8010b30:	2300      	movs	r3, #0
 8010b32:	f04f 32ff 	mov.w	r2, #4294967295
 8010b36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b3a:	f10a 0a01 	add.w	sl, sl, #1
 8010b3e:	9304      	str	r3, [sp, #16]
 8010b40:	9307      	str	r3, [sp, #28]
 8010b42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b46:	931a      	str	r3, [sp, #104]	; 0x68
 8010b48:	4654      	mov	r4, sl
 8010b4a:	2205      	movs	r2, #5
 8010b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b50:	4851      	ldr	r0, [pc, #324]	; (8010c98 <_svfiprintf_r+0x1ec>)
 8010b52:	f7ef fb4d 	bl	80001f0 <memchr>
 8010b56:	9a04      	ldr	r2, [sp, #16]
 8010b58:	b9d8      	cbnz	r0, 8010b92 <_svfiprintf_r+0xe6>
 8010b5a:	06d0      	lsls	r0, r2, #27
 8010b5c:	bf44      	itt	mi
 8010b5e:	2320      	movmi	r3, #32
 8010b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b64:	0711      	lsls	r1, r2, #28
 8010b66:	bf44      	itt	mi
 8010b68:	232b      	movmi	r3, #43	; 0x2b
 8010b6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8010b72:	2b2a      	cmp	r3, #42	; 0x2a
 8010b74:	d015      	beq.n	8010ba2 <_svfiprintf_r+0xf6>
 8010b76:	9a07      	ldr	r2, [sp, #28]
 8010b78:	4654      	mov	r4, sl
 8010b7a:	2000      	movs	r0, #0
 8010b7c:	f04f 0c0a 	mov.w	ip, #10
 8010b80:	4621      	mov	r1, r4
 8010b82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b86:	3b30      	subs	r3, #48	; 0x30
 8010b88:	2b09      	cmp	r3, #9
 8010b8a:	d94e      	bls.n	8010c2a <_svfiprintf_r+0x17e>
 8010b8c:	b1b0      	cbz	r0, 8010bbc <_svfiprintf_r+0x110>
 8010b8e:	9207      	str	r2, [sp, #28]
 8010b90:	e014      	b.n	8010bbc <_svfiprintf_r+0x110>
 8010b92:	eba0 0308 	sub.w	r3, r0, r8
 8010b96:	fa09 f303 	lsl.w	r3, r9, r3
 8010b9a:	4313      	orrs	r3, r2
 8010b9c:	9304      	str	r3, [sp, #16]
 8010b9e:	46a2      	mov	sl, r4
 8010ba0:	e7d2      	b.n	8010b48 <_svfiprintf_r+0x9c>
 8010ba2:	9b03      	ldr	r3, [sp, #12]
 8010ba4:	1d19      	adds	r1, r3, #4
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	9103      	str	r1, [sp, #12]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	bfbb      	ittet	lt
 8010bae:	425b      	neglt	r3, r3
 8010bb0:	f042 0202 	orrlt.w	r2, r2, #2
 8010bb4:	9307      	strge	r3, [sp, #28]
 8010bb6:	9307      	strlt	r3, [sp, #28]
 8010bb8:	bfb8      	it	lt
 8010bba:	9204      	strlt	r2, [sp, #16]
 8010bbc:	7823      	ldrb	r3, [r4, #0]
 8010bbe:	2b2e      	cmp	r3, #46	; 0x2e
 8010bc0:	d10c      	bne.n	8010bdc <_svfiprintf_r+0x130>
 8010bc2:	7863      	ldrb	r3, [r4, #1]
 8010bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8010bc6:	d135      	bne.n	8010c34 <_svfiprintf_r+0x188>
 8010bc8:	9b03      	ldr	r3, [sp, #12]
 8010bca:	1d1a      	adds	r2, r3, #4
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	9203      	str	r2, [sp, #12]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	bfb8      	it	lt
 8010bd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8010bd8:	3402      	adds	r4, #2
 8010bda:	9305      	str	r3, [sp, #20]
 8010bdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010ca8 <_svfiprintf_r+0x1fc>
 8010be0:	7821      	ldrb	r1, [r4, #0]
 8010be2:	2203      	movs	r2, #3
 8010be4:	4650      	mov	r0, sl
 8010be6:	f7ef fb03 	bl	80001f0 <memchr>
 8010bea:	b140      	cbz	r0, 8010bfe <_svfiprintf_r+0x152>
 8010bec:	2340      	movs	r3, #64	; 0x40
 8010bee:	eba0 000a 	sub.w	r0, r0, sl
 8010bf2:	fa03 f000 	lsl.w	r0, r3, r0
 8010bf6:	9b04      	ldr	r3, [sp, #16]
 8010bf8:	4303      	orrs	r3, r0
 8010bfa:	3401      	adds	r4, #1
 8010bfc:	9304      	str	r3, [sp, #16]
 8010bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c02:	4826      	ldr	r0, [pc, #152]	; (8010c9c <_svfiprintf_r+0x1f0>)
 8010c04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c08:	2206      	movs	r2, #6
 8010c0a:	f7ef faf1 	bl	80001f0 <memchr>
 8010c0e:	2800      	cmp	r0, #0
 8010c10:	d038      	beq.n	8010c84 <_svfiprintf_r+0x1d8>
 8010c12:	4b23      	ldr	r3, [pc, #140]	; (8010ca0 <_svfiprintf_r+0x1f4>)
 8010c14:	bb1b      	cbnz	r3, 8010c5e <_svfiprintf_r+0x1b2>
 8010c16:	9b03      	ldr	r3, [sp, #12]
 8010c18:	3307      	adds	r3, #7
 8010c1a:	f023 0307 	bic.w	r3, r3, #7
 8010c1e:	3308      	adds	r3, #8
 8010c20:	9303      	str	r3, [sp, #12]
 8010c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c24:	4433      	add	r3, r6
 8010c26:	9309      	str	r3, [sp, #36]	; 0x24
 8010c28:	e767      	b.n	8010afa <_svfiprintf_r+0x4e>
 8010c2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c2e:	460c      	mov	r4, r1
 8010c30:	2001      	movs	r0, #1
 8010c32:	e7a5      	b.n	8010b80 <_svfiprintf_r+0xd4>
 8010c34:	2300      	movs	r3, #0
 8010c36:	3401      	adds	r4, #1
 8010c38:	9305      	str	r3, [sp, #20]
 8010c3a:	4619      	mov	r1, r3
 8010c3c:	f04f 0c0a 	mov.w	ip, #10
 8010c40:	4620      	mov	r0, r4
 8010c42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c46:	3a30      	subs	r2, #48	; 0x30
 8010c48:	2a09      	cmp	r2, #9
 8010c4a:	d903      	bls.n	8010c54 <_svfiprintf_r+0x1a8>
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d0c5      	beq.n	8010bdc <_svfiprintf_r+0x130>
 8010c50:	9105      	str	r1, [sp, #20]
 8010c52:	e7c3      	b.n	8010bdc <_svfiprintf_r+0x130>
 8010c54:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c58:	4604      	mov	r4, r0
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	e7f0      	b.n	8010c40 <_svfiprintf_r+0x194>
 8010c5e:	ab03      	add	r3, sp, #12
 8010c60:	9300      	str	r3, [sp, #0]
 8010c62:	462a      	mov	r2, r5
 8010c64:	4b0f      	ldr	r3, [pc, #60]	; (8010ca4 <_svfiprintf_r+0x1f8>)
 8010c66:	a904      	add	r1, sp, #16
 8010c68:	4638      	mov	r0, r7
 8010c6a:	f7fe f895 	bl	800ed98 <_printf_float>
 8010c6e:	1c42      	adds	r2, r0, #1
 8010c70:	4606      	mov	r6, r0
 8010c72:	d1d6      	bne.n	8010c22 <_svfiprintf_r+0x176>
 8010c74:	89ab      	ldrh	r3, [r5, #12]
 8010c76:	065b      	lsls	r3, r3, #25
 8010c78:	f53f af2c 	bmi.w	8010ad4 <_svfiprintf_r+0x28>
 8010c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c7e:	b01d      	add	sp, #116	; 0x74
 8010c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c84:	ab03      	add	r3, sp, #12
 8010c86:	9300      	str	r3, [sp, #0]
 8010c88:	462a      	mov	r2, r5
 8010c8a:	4b06      	ldr	r3, [pc, #24]	; (8010ca4 <_svfiprintf_r+0x1f8>)
 8010c8c:	a904      	add	r1, sp, #16
 8010c8e:	4638      	mov	r0, r7
 8010c90:	f7fe fb26 	bl	800f2e0 <_printf_i>
 8010c94:	e7eb      	b.n	8010c6e <_svfiprintf_r+0x1c2>
 8010c96:	bf00      	nop
 8010c98:	0801230c 	.word	0x0801230c
 8010c9c:	08012316 	.word	0x08012316
 8010ca0:	0800ed99 	.word	0x0800ed99
 8010ca4:	080109f5 	.word	0x080109f5
 8010ca8:	08012312 	.word	0x08012312

08010cac <__assert_func>:
 8010cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010cae:	4614      	mov	r4, r2
 8010cb0:	461a      	mov	r2, r3
 8010cb2:	4b09      	ldr	r3, [pc, #36]	; (8010cd8 <__assert_func+0x2c>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	4605      	mov	r5, r0
 8010cb8:	68d8      	ldr	r0, [r3, #12]
 8010cba:	b14c      	cbz	r4, 8010cd0 <__assert_func+0x24>
 8010cbc:	4b07      	ldr	r3, [pc, #28]	; (8010cdc <__assert_func+0x30>)
 8010cbe:	9100      	str	r1, [sp, #0]
 8010cc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010cc4:	4906      	ldr	r1, [pc, #24]	; (8010ce0 <__assert_func+0x34>)
 8010cc6:	462b      	mov	r3, r5
 8010cc8:	f000 f80e 	bl	8010ce8 <fiprintf>
 8010ccc:	f000 faa4 	bl	8011218 <abort>
 8010cd0:	4b04      	ldr	r3, [pc, #16]	; (8010ce4 <__assert_func+0x38>)
 8010cd2:	461c      	mov	r4, r3
 8010cd4:	e7f3      	b.n	8010cbe <__assert_func+0x12>
 8010cd6:	bf00      	nop
 8010cd8:	200000e4 	.word	0x200000e4
 8010cdc:	0801231d 	.word	0x0801231d
 8010ce0:	0801232a 	.word	0x0801232a
 8010ce4:	08012358 	.word	0x08012358

08010ce8 <fiprintf>:
 8010ce8:	b40e      	push	{r1, r2, r3}
 8010cea:	b503      	push	{r0, r1, lr}
 8010cec:	4601      	mov	r1, r0
 8010cee:	ab03      	add	r3, sp, #12
 8010cf0:	4805      	ldr	r0, [pc, #20]	; (8010d08 <fiprintf+0x20>)
 8010cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cf6:	6800      	ldr	r0, [r0, #0]
 8010cf8:	9301      	str	r3, [sp, #4]
 8010cfa:	f000 f88f 	bl	8010e1c <_vfiprintf_r>
 8010cfe:	b002      	add	sp, #8
 8010d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d04:	b003      	add	sp, #12
 8010d06:	4770      	bx	lr
 8010d08:	200000e4 	.word	0x200000e4

08010d0c <__retarget_lock_init_recursive>:
 8010d0c:	4770      	bx	lr

08010d0e <__retarget_lock_acquire_recursive>:
 8010d0e:	4770      	bx	lr

08010d10 <__retarget_lock_release_recursive>:
 8010d10:	4770      	bx	lr

08010d12 <__ascii_mbtowc>:
 8010d12:	b082      	sub	sp, #8
 8010d14:	b901      	cbnz	r1, 8010d18 <__ascii_mbtowc+0x6>
 8010d16:	a901      	add	r1, sp, #4
 8010d18:	b142      	cbz	r2, 8010d2c <__ascii_mbtowc+0x1a>
 8010d1a:	b14b      	cbz	r3, 8010d30 <__ascii_mbtowc+0x1e>
 8010d1c:	7813      	ldrb	r3, [r2, #0]
 8010d1e:	600b      	str	r3, [r1, #0]
 8010d20:	7812      	ldrb	r2, [r2, #0]
 8010d22:	1e10      	subs	r0, r2, #0
 8010d24:	bf18      	it	ne
 8010d26:	2001      	movne	r0, #1
 8010d28:	b002      	add	sp, #8
 8010d2a:	4770      	bx	lr
 8010d2c:	4610      	mov	r0, r2
 8010d2e:	e7fb      	b.n	8010d28 <__ascii_mbtowc+0x16>
 8010d30:	f06f 0001 	mvn.w	r0, #1
 8010d34:	e7f8      	b.n	8010d28 <__ascii_mbtowc+0x16>

08010d36 <memmove>:
 8010d36:	4288      	cmp	r0, r1
 8010d38:	b510      	push	{r4, lr}
 8010d3a:	eb01 0402 	add.w	r4, r1, r2
 8010d3e:	d902      	bls.n	8010d46 <memmove+0x10>
 8010d40:	4284      	cmp	r4, r0
 8010d42:	4623      	mov	r3, r4
 8010d44:	d807      	bhi.n	8010d56 <memmove+0x20>
 8010d46:	1e43      	subs	r3, r0, #1
 8010d48:	42a1      	cmp	r1, r4
 8010d4a:	d008      	beq.n	8010d5e <memmove+0x28>
 8010d4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d50:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d54:	e7f8      	b.n	8010d48 <memmove+0x12>
 8010d56:	4402      	add	r2, r0
 8010d58:	4601      	mov	r1, r0
 8010d5a:	428a      	cmp	r2, r1
 8010d5c:	d100      	bne.n	8010d60 <memmove+0x2a>
 8010d5e:	bd10      	pop	{r4, pc}
 8010d60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d64:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d68:	e7f7      	b.n	8010d5a <memmove+0x24>

08010d6a <_realloc_r>:
 8010d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d6e:	4680      	mov	r8, r0
 8010d70:	4614      	mov	r4, r2
 8010d72:	460e      	mov	r6, r1
 8010d74:	b921      	cbnz	r1, 8010d80 <_realloc_r+0x16>
 8010d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d7a:	4611      	mov	r1, r2
 8010d7c:	f7fd bef8 	b.w	800eb70 <_malloc_r>
 8010d80:	b92a      	cbnz	r2, 8010d8e <_realloc_r+0x24>
 8010d82:	f7fd fe89 	bl	800ea98 <_free_r>
 8010d86:	4625      	mov	r5, r4
 8010d88:	4628      	mov	r0, r5
 8010d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d8e:	f000 fc67 	bl	8011660 <_malloc_usable_size_r>
 8010d92:	4284      	cmp	r4, r0
 8010d94:	4607      	mov	r7, r0
 8010d96:	d802      	bhi.n	8010d9e <_realloc_r+0x34>
 8010d98:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010d9c:	d812      	bhi.n	8010dc4 <_realloc_r+0x5a>
 8010d9e:	4621      	mov	r1, r4
 8010da0:	4640      	mov	r0, r8
 8010da2:	f7fd fee5 	bl	800eb70 <_malloc_r>
 8010da6:	4605      	mov	r5, r0
 8010da8:	2800      	cmp	r0, #0
 8010daa:	d0ed      	beq.n	8010d88 <_realloc_r+0x1e>
 8010dac:	42bc      	cmp	r4, r7
 8010dae:	4622      	mov	r2, r4
 8010db0:	4631      	mov	r1, r6
 8010db2:	bf28      	it	cs
 8010db4:	463a      	movcs	r2, r7
 8010db6:	f7ff fa69 	bl	801028c <memcpy>
 8010dba:	4631      	mov	r1, r6
 8010dbc:	4640      	mov	r0, r8
 8010dbe:	f7fd fe6b 	bl	800ea98 <_free_r>
 8010dc2:	e7e1      	b.n	8010d88 <_realloc_r+0x1e>
 8010dc4:	4635      	mov	r5, r6
 8010dc6:	e7df      	b.n	8010d88 <_realloc_r+0x1e>

08010dc8 <__sfputc_r>:
 8010dc8:	6893      	ldr	r3, [r2, #8]
 8010dca:	3b01      	subs	r3, #1
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	b410      	push	{r4}
 8010dd0:	6093      	str	r3, [r2, #8]
 8010dd2:	da08      	bge.n	8010de6 <__sfputc_r+0x1e>
 8010dd4:	6994      	ldr	r4, [r2, #24]
 8010dd6:	42a3      	cmp	r3, r4
 8010dd8:	db01      	blt.n	8010dde <__sfputc_r+0x16>
 8010dda:	290a      	cmp	r1, #10
 8010ddc:	d103      	bne.n	8010de6 <__sfputc_r+0x1e>
 8010dde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010de2:	f000 b94b 	b.w	801107c <__swbuf_r>
 8010de6:	6813      	ldr	r3, [r2, #0]
 8010de8:	1c58      	adds	r0, r3, #1
 8010dea:	6010      	str	r0, [r2, #0]
 8010dec:	7019      	strb	r1, [r3, #0]
 8010dee:	4608      	mov	r0, r1
 8010df0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010df4:	4770      	bx	lr

08010df6 <__sfputs_r>:
 8010df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010df8:	4606      	mov	r6, r0
 8010dfa:	460f      	mov	r7, r1
 8010dfc:	4614      	mov	r4, r2
 8010dfe:	18d5      	adds	r5, r2, r3
 8010e00:	42ac      	cmp	r4, r5
 8010e02:	d101      	bne.n	8010e08 <__sfputs_r+0x12>
 8010e04:	2000      	movs	r0, #0
 8010e06:	e007      	b.n	8010e18 <__sfputs_r+0x22>
 8010e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e0c:	463a      	mov	r2, r7
 8010e0e:	4630      	mov	r0, r6
 8010e10:	f7ff ffda 	bl	8010dc8 <__sfputc_r>
 8010e14:	1c43      	adds	r3, r0, #1
 8010e16:	d1f3      	bne.n	8010e00 <__sfputs_r+0xa>
 8010e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010e1c <_vfiprintf_r>:
 8010e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e20:	460d      	mov	r5, r1
 8010e22:	b09d      	sub	sp, #116	; 0x74
 8010e24:	4614      	mov	r4, r2
 8010e26:	4698      	mov	r8, r3
 8010e28:	4606      	mov	r6, r0
 8010e2a:	b118      	cbz	r0, 8010e34 <_vfiprintf_r+0x18>
 8010e2c:	6983      	ldr	r3, [r0, #24]
 8010e2e:	b90b      	cbnz	r3, 8010e34 <_vfiprintf_r+0x18>
 8010e30:	f000 fb14 	bl	801145c <__sinit>
 8010e34:	4b89      	ldr	r3, [pc, #548]	; (801105c <_vfiprintf_r+0x240>)
 8010e36:	429d      	cmp	r5, r3
 8010e38:	d11b      	bne.n	8010e72 <_vfiprintf_r+0x56>
 8010e3a:	6875      	ldr	r5, [r6, #4]
 8010e3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e3e:	07d9      	lsls	r1, r3, #31
 8010e40:	d405      	bmi.n	8010e4e <_vfiprintf_r+0x32>
 8010e42:	89ab      	ldrh	r3, [r5, #12]
 8010e44:	059a      	lsls	r2, r3, #22
 8010e46:	d402      	bmi.n	8010e4e <_vfiprintf_r+0x32>
 8010e48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e4a:	f7ff ff60 	bl	8010d0e <__retarget_lock_acquire_recursive>
 8010e4e:	89ab      	ldrh	r3, [r5, #12]
 8010e50:	071b      	lsls	r3, r3, #28
 8010e52:	d501      	bpl.n	8010e58 <_vfiprintf_r+0x3c>
 8010e54:	692b      	ldr	r3, [r5, #16]
 8010e56:	b9eb      	cbnz	r3, 8010e94 <_vfiprintf_r+0x78>
 8010e58:	4629      	mov	r1, r5
 8010e5a:	4630      	mov	r0, r6
 8010e5c:	f000 f96e 	bl	801113c <__swsetup_r>
 8010e60:	b1c0      	cbz	r0, 8010e94 <_vfiprintf_r+0x78>
 8010e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e64:	07dc      	lsls	r4, r3, #31
 8010e66:	d50e      	bpl.n	8010e86 <_vfiprintf_r+0x6a>
 8010e68:	f04f 30ff 	mov.w	r0, #4294967295
 8010e6c:	b01d      	add	sp, #116	; 0x74
 8010e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e72:	4b7b      	ldr	r3, [pc, #492]	; (8011060 <_vfiprintf_r+0x244>)
 8010e74:	429d      	cmp	r5, r3
 8010e76:	d101      	bne.n	8010e7c <_vfiprintf_r+0x60>
 8010e78:	68b5      	ldr	r5, [r6, #8]
 8010e7a:	e7df      	b.n	8010e3c <_vfiprintf_r+0x20>
 8010e7c:	4b79      	ldr	r3, [pc, #484]	; (8011064 <_vfiprintf_r+0x248>)
 8010e7e:	429d      	cmp	r5, r3
 8010e80:	bf08      	it	eq
 8010e82:	68f5      	ldreq	r5, [r6, #12]
 8010e84:	e7da      	b.n	8010e3c <_vfiprintf_r+0x20>
 8010e86:	89ab      	ldrh	r3, [r5, #12]
 8010e88:	0598      	lsls	r0, r3, #22
 8010e8a:	d4ed      	bmi.n	8010e68 <_vfiprintf_r+0x4c>
 8010e8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e8e:	f7ff ff3f 	bl	8010d10 <__retarget_lock_release_recursive>
 8010e92:	e7e9      	b.n	8010e68 <_vfiprintf_r+0x4c>
 8010e94:	2300      	movs	r3, #0
 8010e96:	9309      	str	r3, [sp, #36]	; 0x24
 8010e98:	2320      	movs	r3, #32
 8010e9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ea2:	2330      	movs	r3, #48	; 0x30
 8010ea4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011068 <_vfiprintf_r+0x24c>
 8010ea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010eac:	f04f 0901 	mov.w	r9, #1
 8010eb0:	4623      	mov	r3, r4
 8010eb2:	469a      	mov	sl, r3
 8010eb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010eb8:	b10a      	cbz	r2, 8010ebe <_vfiprintf_r+0xa2>
 8010eba:	2a25      	cmp	r2, #37	; 0x25
 8010ebc:	d1f9      	bne.n	8010eb2 <_vfiprintf_r+0x96>
 8010ebe:	ebba 0b04 	subs.w	fp, sl, r4
 8010ec2:	d00b      	beq.n	8010edc <_vfiprintf_r+0xc0>
 8010ec4:	465b      	mov	r3, fp
 8010ec6:	4622      	mov	r2, r4
 8010ec8:	4629      	mov	r1, r5
 8010eca:	4630      	mov	r0, r6
 8010ecc:	f7ff ff93 	bl	8010df6 <__sfputs_r>
 8010ed0:	3001      	adds	r0, #1
 8010ed2:	f000 80aa 	beq.w	801102a <_vfiprintf_r+0x20e>
 8010ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ed8:	445a      	add	r2, fp
 8010eda:	9209      	str	r2, [sp, #36]	; 0x24
 8010edc:	f89a 3000 	ldrb.w	r3, [sl]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	f000 80a2 	beq.w	801102a <_vfiprintf_r+0x20e>
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8010eec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ef0:	f10a 0a01 	add.w	sl, sl, #1
 8010ef4:	9304      	str	r3, [sp, #16]
 8010ef6:	9307      	str	r3, [sp, #28]
 8010ef8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010efc:	931a      	str	r3, [sp, #104]	; 0x68
 8010efe:	4654      	mov	r4, sl
 8010f00:	2205      	movs	r2, #5
 8010f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f06:	4858      	ldr	r0, [pc, #352]	; (8011068 <_vfiprintf_r+0x24c>)
 8010f08:	f7ef f972 	bl	80001f0 <memchr>
 8010f0c:	9a04      	ldr	r2, [sp, #16]
 8010f0e:	b9d8      	cbnz	r0, 8010f48 <_vfiprintf_r+0x12c>
 8010f10:	06d1      	lsls	r1, r2, #27
 8010f12:	bf44      	itt	mi
 8010f14:	2320      	movmi	r3, #32
 8010f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f1a:	0713      	lsls	r3, r2, #28
 8010f1c:	bf44      	itt	mi
 8010f1e:	232b      	movmi	r3, #43	; 0x2b
 8010f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f24:	f89a 3000 	ldrb.w	r3, [sl]
 8010f28:	2b2a      	cmp	r3, #42	; 0x2a
 8010f2a:	d015      	beq.n	8010f58 <_vfiprintf_r+0x13c>
 8010f2c:	9a07      	ldr	r2, [sp, #28]
 8010f2e:	4654      	mov	r4, sl
 8010f30:	2000      	movs	r0, #0
 8010f32:	f04f 0c0a 	mov.w	ip, #10
 8010f36:	4621      	mov	r1, r4
 8010f38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f3c:	3b30      	subs	r3, #48	; 0x30
 8010f3e:	2b09      	cmp	r3, #9
 8010f40:	d94e      	bls.n	8010fe0 <_vfiprintf_r+0x1c4>
 8010f42:	b1b0      	cbz	r0, 8010f72 <_vfiprintf_r+0x156>
 8010f44:	9207      	str	r2, [sp, #28]
 8010f46:	e014      	b.n	8010f72 <_vfiprintf_r+0x156>
 8010f48:	eba0 0308 	sub.w	r3, r0, r8
 8010f4c:	fa09 f303 	lsl.w	r3, r9, r3
 8010f50:	4313      	orrs	r3, r2
 8010f52:	9304      	str	r3, [sp, #16]
 8010f54:	46a2      	mov	sl, r4
 8010f56:	e7d2      	b.n	8010efe <_vfiprintf_r+0xe2>
 8010f58:	9b03      	ldr	r3, [sp, #12]
 8010f5a:	1d19      	adds	r1, r3, #4
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	9103      	str	r1, [sp, #12]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	bfbb      	ittet	lt
 8010f64:	425b      	neglt	r3, r3
 8010f66:	f042 0202 	orrlt.w	r2, r2, #2
 8010f6a:	9307      	strge	r3, [sp, #28]
 8010f6c:	9307      	strlt	r3, [sp, #28]
 8010f6e:	bfb8      	it	lt
 8010f70:	9204      	strlt	r2, [sp, #16]
 8010f72:	7823      	ldrb	r3, [r4, #0]
 8010f74:	2b2e      	cmp	r3, #46	; 0x2e
 8010f76:	d10c      	bne.n	8010f92 <_vfiprintf_r+0x176>
 8010f78:	7863      	ldrb	r3, [r4, #1]
 8010f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8010f7c:	d135      	bne.n	8010fea <_vfiprintf_r+0x1ce>
 8010f7e:	9b03      	ldr	r3, [sp, #12]
 8010f80:	1d1a      	adds	r2, r3, #4
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	9203      	str	r2, [sp, #12]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	bfb8      	it	lt
 8010f8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8010f8e:	3402      	adds	r4, #2
 8010f90:	9305      	str	r3, [sp, #20]
 8010f92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011078 <_vfiprintf_r+0x25c>
 8010f96:	7821      	ldrb	r1, [r4, #0]
 8010f98:	2203      	movs	r2, #3
 8010f9a:	4650      	mov	r0, sl
 8010f9c:	f7ef f928 	bl	80001f0 <memchr>
 8010fa0:	b140      	cbz	r0, 8010fb4 <_vfiprintf_r+0x198>
 8010fa2:	2340      	movs	r3, #64	; 0x40
 8010fa4:	eba0 000a 	sub.w	r0, r0, sl
 8010fa8:	fa03 f000 	lsl.w	r0, r3, r0
 8010fac:	9b04      	ldr	r3, [sp, #16]
 8010fae:	4303      	orrs	r3, r0
 8010fb0:	3401      	adds	r4, #1
 8010fb2:	9304      	str	r3, [sp, #16]
 8010fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fb8:	482c      	ldr	r0, [pc, #176]	; (801106c <_vfiprintf_r+0x250>)
 8010fba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010fbe:	2206      	movs	r2, #6
 8010fc0:	f7ef f916 	bl	80001f0 <memchr>
 8010fc4:	2800      	cmp	r0, #0
 8010fc6:	d03f      	beq.n	8011048 <_vfiprintf_r+0x22c>
 8010fc8:	4b29      	ldr	r3, [pc, #164]	; (8011070 <_vfiprintf_r+0x254>)
 8010fca:	bb1b      	cbnz	r3, 8011014 <_vfiprintf_r+0x1f8>
 8010fcc:	9b03      	ldr	r3, [sp, #12]
 8010fce:	3307      	adds	r3, #7
 8010fd0:	f023 0307 	bic.w	r3, r3, #7
 8010fd4:	3308      	adds	r3, #8
 8010fd6:	9303      	str	r3, [sp, #12]
 8010fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fda:	443b      	add	r3, r7
 8010fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8010fde:	e767      	b.n	8010eb0 <_vfiprintf_r+0x94>
 8010fe0:	fb0c 3202 	mla	r2, ip, r2, r3
 8010fe4:	460c      	mov	r4, r1
 8010fe6:	2001      	movs	r0, #1
 8010fe8:	e7a5      	b.n	8010f36 <_vfiprintf_r+0x11a>
 8010fea:	2300      	movs	r3, #0
 8010fec:	3401      	adds	r4, #1
 8010fee:	9305      	str	r3, [sp, #20]
 8010ff0:	4619      	mov	r1, r3
 8010ff2:	f04f 0c0a 	mov.w	ip, #10
 8010ff6:	4620      	mov	r0, r4
 8010ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ffc:	3a30      	subs	r2, #48	; 0x30
 8010ffe:	2a09      	cmp	r2, #9
 8011000:	d903      	bls.n	801100a <_vfiprintf_r+0x1ee>
 8011002:	2b00      	cmp	r3, #0
 8011004:	d0c5      	beq.n	8010f92 <_vfiprintf_r+0x176>
 8011006:	9105      	str	r1, [sp, #20]
 8011008:	e7c3      	b.n	8010f92 <_vfiprintf_r+0x176>
 801100a:	fb0c 2101 	mla	r1, ip, r1, r2
 801100e:	4604      	mov	r4, r0
 8011010:	2301      	movs	r3, #1
 8011012:	e7f0      	b.n	8010ff6 <_vfiprintf_r+0x1da>
 8011014:	ab03      	add	r3, sp, #12
 8011016:	9300      	str	r3, [sp, #0]
 8011018:	462a      	mov	r2, r5
 801101a:	4b16      	ldr	r3, [pc, #88]	; (8011074 <_vfiprintf_r+0x258>)
 801101c:	a904      	add	r1, sp, #16
 801101e:	4630      	mov	r0, r6
 8011020:	f7fd feba 	bl	800ed98 <_printf_float>
 8011024:	4607      	mov	r7, r0
 8011026:	1c78      	adds	r0, r7, #1
 8011028:	d1d6      	bne.n	8010fd8 <_vfiprintf_r+0x1bc>
 801102a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801102c:	07d9      	lsls	r1, r3, #31
 801102e:	d405      	bmi.n	801103c <_vfiprintf_r+0x220>
 8011030:	89ab      	ldrh	r3, [r5, #12]
 8011032:	059a      	lsls	r2, r3, #22
 8011034:	d402      	bmi.n	801103c <_vfiprintf_r+0x220>
 8011036:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011038:	f7ff fe6a 	bl	8010d10 <__retarget_lock_release_recursive>
 801103c:	89ab      	ldrh	r3, [r5, #12]
 801103e:	065b      	lsls	r3, r3, #25
 8011040:	f53f af12 	bmi.w	8010e68 <_vfiprintf_r+0x4c>
 8011044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011046:	e711      	b.n	8010e6c <_vfiprintf_r+0x50>
 8011048:	ab03      	add	r3, sp, #12
 801104a:	9300      	str	r3, [sp, #0]
 801104c:	462a      	mov	r2, r5
 801104e:	4b09      	ldr	r3, [pc, #36]	; (8011074 <_vfiprintf_r+0x258>)
 8011050:	a904      	add	r1, sp, #16
 8011052:	4630      	mov	r0, r6
 8011054:	f7fe f944 	bl	800f2e0 <_printf_i>
 8011058:	e7e4      	b.n	8011024 <_vfiprintf_r+0x208>
 801105a:	bf00      	nop
 801105c:	08012484 	.word	0x08012484
 8011060:	080124a4 	.word	0x080124a4
 8011064:	08012464 	.word	0x08012464
 8011068:	0801230c 	.word	0x0801230c
 801106c:	08012316 	.word	0x08012316
 8011070:	0800ed99 	.word	0x0800ed99
 8011074:	08010df7 	.word	0x08010df7
 8011078:	08012312 	.word	0x08012312

0801107c <__swbuf_r>:
 801107c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801107e:	460e      	mov	r6, r1
 8011080:	4614      	mov	r4, r2
 8011082:	4605      	mov	r5, r0
 8011084:	b118      	cbz	r0, 801108e <__swbuf_r+0x12>
 8011086:	6983      	ldr	r3, [r0, #24]
 8011088:	b90b      	cbnz	r3, 801108e <__swbuf_r+0x12>
 801108a:	f000 f9e7 	bl	801145c <__sinit>
 801108e:	4b21      	ldr	r3, [pc, #132]	; (8011114 <__swbuf_r+0x98>)
 8011090:	429c      	cmp	r4, r3
 8011092:	d12b      	bne.n	80110ec <__swbuf_r+0x70>
 8011094:	686c      	ldr	r4, [r5, #4]
 8011096:	69a3      	ldr	r3, [r4, #24]
 8011098:	60a3      	str	r3, [r4, #8]
 801109a:	89a3      	ldrh	r3, [r4, #12]
 801109c:	071a      	lsls	r2, r3, #28
 801109e:	d52f      	bpl.n	8011100 <__swbuf_r+0x84>
 80110a0:	6923      	ldr	r3, [r4, #16]
 80110a2:	b36b      	cbz	r3, 8011100 <__swbuf_r+0x84>
 80110a4:	6923      	ldr	r3, [r4, #16]
 80110a6:	6820      	ldr	r0, [r4, #0]
 80110a8:	1ac0      	subs	r0, r0, r3
 80110aa:	6963      	ldr	r3, [r4, #20]
 80110ac:	b2f6      	uxtb	r6, r6
 80110ae:	4283      	cmp	r3, r0
 80110b0:	4637      	mov	r7, r6
 80110b2:	dc04      	bgt.n	80110be <__swbuf_r+0x42>
 80110b4:	4621      	mov	r1, r4
 80110b6:	4628      	mov	r0, r5
 80110b8:	f000 f93c 	bl	8011334 <_fflush_r>
 80110bc:	bb30      	cbnz	r0, 801110c <__swbuf_r+0x90>
 80110be:	68a3      	ldr	r3, [r4, #8]
 80110c0:	3b01      	subs	r3, #1
 80110c2:	60a3      	str	r3, [r4, #8]
 80110c4:	6823      	ldr	r3, [r4, #0]
 80110c6:	1c5a      	adds	r2, r3, #1
 80110c8:	6022      	str	r2, [r4, #0]
 80110ca:	701e      	strb	r6, [r3, #0]
 80110cc:	6963      	ldr	r3, [r4, #20]
 80110ce:	3001      	adds	r0, #1
 80110d0:	4283      	cmp	r3, r0
 80110d2:	d004      	beq.n	80110de <__swbuf_r+0x62>
 80110d4:	89a3      	ldrh	r3, [r4, #12]
 80110d6:	07db      	lsls	r3, r3, #31
 80110d8:	d506      	bpl.n	80110e8 <__swbuf_r+0x6c>
 80110da:	2e0a      	cmp	r6, #10
 80110dc:	d104      	bne.n	80110e8 <__swbuf_r+0x6c>
 80110de:	4621      	mov	r1, r4
 80110e0:	4628      	mov	r0, r5
 80110e2:	f000 f927 	bl	8011334 <_fflush_r>
 80110e6:	b988      	cbnz	r0, 801110c <__swbuf_r+0x90>
 80110e8:	4638      	mov	r0, r7
 80110ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110ec:	4b0a      	ldr	r3, [pc, #40]	; (8011118 <__swbuf_r+0x9c>)
 80110ee:	429c      	cmp	r4, r3
 80110f0:	d101      	bne.n	80110f6 <__swbuf_r+0x7a>
 80110f2:	68ac      	ldr	r4, [r5, #8]
 80110f4:	e7cf      	b.n	8011096 <__swbuf_r+0x1a>
 80110f6:	4b09      	ldr	r3, [pc, #36]	; (801111c <__swbuf_r+0xa0>)
 80110f8:	429c      	cmp	r4, r3
 80110fa:	bf08      	it	eq
 80110fc:	68ec      	ldreq	r4, [r5, #12]
 80110fe:	e7ca      	b.n	8011096 <__swbuf_r+0x1a>
 8011100:	4621      	mov	r1, r4
 8011102:	4628      	mov	r0, r5
 8011104:	f000 f81a 	bl	801113c <__swsetup_r>
 8011108:	2800      	cmp	r0, #0
 801110a:	d0cb      	beq.n	80110a4 <__swbuf_r+0x28>
 801110c:	f04f 37ff 	mov.w	r7, #4294967295
 8011110:	e7ea      	b.n	80110e8 <__swbuf_r+0x6c>
 8011112:	bf00      	nop
 8011114:	08012484 	.word	0x08012484
 8011118:	080124a4 	.word	0x080124a4
 801111c:	08012464 	.word	0x08012464

08011120 <__ascii_wctomb>:
 8011120:	b149      	cbz	r1, 8011136 <__ascii_wctomb+0x16>
 8011122:	2aff      	cmp	r2, #255	; 0xff
 8011124:	bf85      	ittet	hi
 8011126:	238a      	movhi	r3, #138	; 0x8a
 8011128:	6003      	strhi	r3, [r0, #0]
 801112a:	700a      	strbls	r2, [r1, #0]
 801112c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011130:	bf98      	it	ls
 8011132:	2001      	movls	r0, #1
 8011134:	4770      	bx	lr
 8011136:	4608      	mov	r0, r1
 8011138:	4770      	bx	lr
	...

0801113c <__swsetup_r>:
 801113c:	4b32      	ldr	r3, [pc, #200]	; (8011208 <__swsetup_r+0xcc>)
 801113e:	b570      	push	{r4, r5, r6, lr}
 8011140:	681d      	ldr	r5, [r3, #0]
 8011142:	4606      	mov	r6, r0
 8011144:	460c      	mov	r4, r1
 8011146:	b125      	cbz	r5, 8011152 <__swsetup_r+0x16>
 8011148:	69ab      	ldr	r3, [r5, #24]
 801114a:	b913      	cbnz	r3, 8011152 <__swsetup_r+0x16>
 801114c:	4628      	mov	r0, r5
 801114e:	f000 f985 	bl	801145c <__sinit>
 8011152:	4b2e      	ldr	r3, [pc, #184]	; (801120c <__swsetup_r+0xd0>)
 8011154:	429c      	cmp	r4, r3
 8011156:	d10f      	bne.n	8011178 <__swsetup_r+0x3c>
 8011158:	686c      	ldr	r4, [r5, #4]
 801115a:	89a3      	ldrh	r3, [r4, #12]
 801115c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011160:	0719      	lsls	r1, r3, #28
 8011162:	d42c      	bmi.n	80111be <__swsetup_r+0x82>
 8011164:	06dd      	lsls	r5, r3, #27
 8011166:	d411      	bmi.n	801118c <__swsetup_r+0x50>
 8011168:	2309      	movs	r3, #9
 801116a:	6033      	str	r3, [r6, #0]
 801116c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011170:	81a3      	strh	r3, [r4, #12]
 8011172:	f04f 30ff 	mov.w	r0, #4294967295
 8011176:	e03e      	b.n	80111f6 <__swsetup_r+0xba>
 8011178:	4b25      	ldr	r3, [pc, #148]	; (8011210 <__swsetup_r+0xd4>)
 801117a:	429c      	cmp	r4, r3
 801117c:	d101      	bne.n	8011182 <__swsetup_r+0x46>
 801117e:	68ac      	ldr	r4, [r5, #8]
 8011180:	e7eb      	b.n	801115a <__swsetup_r+0x1e>
 8011182:	4b24      	ldr	r3, [pc, #144]	; (8011214 <__swsetup_r+0xd8>)
 8011184:	429c      	cmp	r4, r3
 8011186:	bf08      	it	eq
 8011188:	68ec      	ldreq	r4, [r5, #12]
 801118a:	e7e6      	b.n	801115a <__swsetup_r+0x1e>
 801118c:	0758      	lsls	r0, r3, #29
 801118e:	d512      	bpl.n	80111b6 <__swsetup_r+0x7a>
 8011190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011192:	b141      	cbz	r1, 80111a6 <__swsetup_r+0x6a>
 8011194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011198:	4299      	cmp	r1, r3
 801119a:	d002      	beq.n	80111a2 <__swsetup_r+0x66>
 801119c:	4630      	mov	r0, r6
 801119e:	f7fd fc7b 	bl	800ea98 <_free_r>
 80111a2:	2300      	movs	r3, #0
 80111a4:	6363      	str	r3, [r4, #52]	; 0x34
 80111a6:	89a3      	ldrh	r3, [r4, #12]
 80111a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80111ac:	81a3      	strh	r3, [r4, #12]
 80111ae:	2300      	movs	r3, #0
 80111b0:	6063      	str	r3, [r4, #4]
 80111b2:	6923      	ldr	r3, [r4, #16]
 80111b4:	6023      	str	r3, [r4, #0]
 80111b6:	89a3      	ldrh	r3, [r4, #12]
 80111b8:	f043 0308 	orr.w	r3, r3, #8
 80111bc:	81a3      	strh	r3, [r4, #12]
 80111be:	6923      	ldr	r3, [r4, #16]
 80111c0:	b94b      	cbnz	r3, 80111d6 <__swsetup_r+0x9a>
 80111c2:	89a3      	ldrh	r3, [r4, #12]
 80111c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80111c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80111cc:	d003      	beq.n	80111d6 <__swsetup_r+0x9a>
 80111ce:	4621      	mov	r1, r4
 80111d0:	4630      	mov	r0, r6
 80111d2:	f000 fa05 	bl	80115e0 <__smakebuf_r>
 80111d6:	89a0      	ldrh	r0, [r4, #12]
 80111d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80111dc:	f010 0301 	ands.w	r3, r0, #1
 80111e0:	d00a      	beq.n	80111f8 <__swsetup_r+0xbc>
 80111e2:	2300      	movs	r3, #0
 80111e4:	60a3      	str	r3, [r4, #8]
 80111e6:	6963      	ldr	r3, [r4, #20]
 80111e8:	425b      	negs	r3, r3
 80111ea:	61a3      	str	r3, [r4, #24]
 80111ec:	6923      	ldr	r3, [r4, #16]
 80111ee:	b943      	cbnz	r3, 8011202 <__swsetup_r+0xc6>
 80111f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80111f4:	d1ba      	bne.n	801116c <__swsetup_r+0x30>
 80111f6:	bd70      	pop	{r4, r5, r6, pc}
 80111f8:	0781      	lsls	r1, r0, #30
 80111fa:	bf58      	it	pl
 80111fc:	6963      	ldrpl	r3, [r4, #20]
 80111fe:	60a3      	str	r3, [r4, #8]
 8011200:	e7f4      	b.n	80111ec <__swsetup_r+0xb0>
 8011202:	2000      	movs	r0, #0
 8011204:	e7f7      	b.n	80111f6 <__swsetup_r+0xba>
 8011206:	bf00      	nop
 8011208:	200000e4 	.word	0x200000e4
 801120c:	08012484 	.word	0x08012484
 8011210:	080124a4 	.word	0x080124a4
 8011214:	08012464 	.word	0x08012464

08011218 <abort>:
 8011218:	b508      	push	{r3, lr}
 801121a:	2006      	movs	r0, #6
 801121c:	f000 fa50 	bl	80116c0 <raise>
 8011220:	2001      	movs	r0, #1
 8011222:	f7f0 fe81 	bl	8001f28 <_exit>
	...

08011228 <__sflush_r>:
 8011228:	898a      	ldrh	r2, [r1, #12]
 801122a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801122e:	4605      	mov	r5, r0
 8011230:	0710      	lsls	r0, r2, #28
 8011232:	460c      	mov	r4, r1
 8011234:	d458      	bmi.n	80112e8 <__sflush_r+0xc0>
 8011236:	684b      	ldr	r3, [r1, #4]
 8011238:	2b00      	cmp	r3, #0
 801123a:	dc05      	bgt.n	8011248 <__sflush_r+0x20>
 801123c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801123e:	2b00      	cmp	r3, #0
 8011240:	dc02      	bgt.n	8011248 <__sflush_r+0x20>
 8011242:	2000      	movs	r0, #0
 8011244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011248:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801124a:	2e00      	cmp	r6, #0
 801124c:	d0f9      	beq.n	8011242 <__sflush_r+0x1a>
 801124e:	2300      	movs	r3, #0
 8011250:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011254:	682f      	ldr	r7, [r5, #0]
 8011256:	602b      	str	r3, [r5, #0]
 8011258:	d032      	beq.n	80112c0 <__sflush_r+0x98>
 801125a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801125c:	89a3      	ldrh	r3, [r4, #12]
 801125e:	075a      	lsls	r2, r3, #29
 8011260:	d505      	bpl.n	801126e <__sflush_r+0x46>
 8011262:	6863      	ldr	r3, [r4, #4]
 8011264:	1ac0      	subs	r0, r0, r3
 8011266:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011268:	b10b      	cbz	r3, 801126e <__sflush_r+0x46>
 801126a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801126c:	1ac0      	subs	r0, r0, r3
 801126e:	2300      	movs	r3, #0
 8011270:	4602      	mov	r2, r0
 8011272:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011274:	6a21      	ldr	r1, [r4, #32]
 8011276:	4628      	mov	r0, r5
 8011278:	47b0      	blx	r6
 801127a:	1c43      	adds	r3, r0, #1
 801127c:	89a3      	ldrh	r3, [r4, #12]
 801127e:	d106      	bne.n	801128e <__sflush_r+0x66>
 8011280:	6829      	ldr	r1, [r5, #0]
 8011282:	291d      	cmp	r1, #29
 8011284:	d82c      	bhi.n	80112e0 <__sflush_r+0xb8>
 8011286:	4a2a      	ldr	r2, [pc, #168]	; (8011330 <__sflush_r+0x108>)
 8011288:	40ca      	lsrs	r2, r1
 801128a:	07d6      	lsls	r6, r2, #31
 801128c:	d528      	bpl.n	80112e0 <__sflush_r+0xb8>
 801128e:	2200      	movs	r2, #0
 8011290:	6062      	str	r2, [r4, #4]
 8011292:	04d9      	lsls	r1, r3, #19
 8011294:	6922      	ldr	r2, [r4, #16]
 8011296:	6022      	str	r2, [r4, #0]
 8011298:	d504      	bpl.n	80112a4 <__sflush_r+0x7c>
 801129a:	1c42      	adds	r2, r0, #1
 801129c:	d101      	bne.n	80112a2 <__sflush_r+0x7a>
 801129e:	682b      	ldr	r3, [r5, #0]
 80112a0:	b903      	cbnz	r3, 80112a4 <__sflush_r+0x7c>
 80112a2:	6560      	str	r0, [r4, #84]	; 0x54
 80112a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80112a6:	602f      	str	r7, [r5, #0]
 80112a8:	2900      	cmp	r1, #0
 80112aa:	d0ca      	beq.n	8011242 <__sflush_r+0x1a>
 80112ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80112b0:	4299      	cmp	r1, r3
 80112b2:	d002      	beq.n	80112ba <__sflush_r+0x92>
 80112b4:	4628      	mov	r0, r5
 80112b6:	f7fd fbef 	bl	800ea98 <_free_r>
 80112ba:	2000      	movs	r0, #0
 80112bc:	6360      	str	r0, [r4, #52]	; 0x34
 80112be:	e7c1      	b.n	8011244 <__sflush_r+0x1c>
 80112c0:	6a21      	ldr	r1, [r4, #32]
 80112c2:	2301      	movs	r3, #1
 80112c4:	4628      	mov	r0, r5
 80112c6:	47b0      	blx	r6
 80112c8:	1c41      	adds	r1, r0, #1
 80112ca:	d1c7      	bne.n	801125c <__sflush_r+0x34>
 80112cc:	682b      	ldr	r3, [r5, #0]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d0c4      	beq.n	801125c <__sflush_r+0x34>
 80112d2:	2b1d      	cmp	r3, #29
 80112d4:	d001      	beq.n	80112da <__sflush_r+0xb2>
 80112d6:	2b16      	cmp	r3, #22
 80112d8:	d101      	bne.n	80112de <__sflush_r+0xb6>
 80112da:	602f      	str	r7, [r5, #0]
 80112dc:	e7b1      	b.n	8011242 <__sflush_r+0x1a>
 80112de:	89a3      	ldrh	r3, [r4, #12]
 80112e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112e4:	81a3      	strh	r3, [r4, #12]
 80112e6:	e7ad      	b.n	8011244 <__sflush_r+0x1c>
 80112e8:	690f      	ldr	r7, [r1, #16]
 80112ea:	2f00      	cmp	r7, #0
 80112ec:	d0a9      	beq.n	8011242 <__sflush_r+0x1a>
 80112ee:	0793      	lsls	r3, r2, #30
 80112f0:	680e      	ldr	r6, [r1, #0]
 80112f2:	bf08      	it	eq
 80112f4:	694b      	ldreq	r3, [r1, #20]
 80112f6:	600f      	str	r7, [r1, #0]
 80112f8:	bf18      	it	ne
 80112fa:	2300      	movne	r3, #0
 80112fc:	eba6 0807 	sub.w	r8, r6, r7
 8011300:	608b      	str	r3, [r1, #8]
 8011302:	f1b8 0f00 	cmp.w	r8, #0
 8011306:	dd9c      	ble.n	8011242 <__sflush_r+0x1a>
 8011308:	6a21      	ldr	r1, [r4, #32]
 801130a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801130c:	4643      	mov	r3, r8
 801130e:	463a      	mov	r2, r7
 8011310:	4628      	mov	r0, r5
 8011312:	47b0      	blx	r6
 8011314:	2800      	cmp	r0, #0
 8011316:	dc06      	bgt.n	8011326 <__sflush_r+0xfe>
 8011318:	89a3      	ldrh	r3, [r4, #12]
 801131a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801131e:	81a3      	strh	r3, [r4, #12]
 8011320:	f04f 30ff 	mov.w	r0, #4294967295
 8011324:	e78e      	b.n	8011244 <__sflush_r+0x1c>
 8011326:	4407      	add	r7, r0
 8011328:	eba8 0800 	sub.w	r8, r8, r0
 801132c:	e7e9      	b.n	8011302 <__sflush_r+0xda>
 801132e:	bf00      	nop
 8011330:	20400001 	.word	0x20400001

08011334 <_fflush_r>:
 8011334:	b538      	push	{r3, r4, r5, lr}
 8011336:	690b      	ldr	r3, [r1, #16]
 8011338:	4605      	mov	r5, r0
 801133a:	460c      	mov	r4, r1
 801133c:	b913      	cbnz	r3, 8011344 <_fflush_r+0x10>
 801133e:	2500      	movs	r5, #0
 8011340:	4628      	mov	r0, r5
 8011342:	bd38      	pop	{r3, r4, r5, pc}
 8011344:	b118      	cbz	r0, 801134e <_fflush_r+0x1a>
 8011346:	6983      	ldr	r3, [r0, #24]
 8011348:	b90b      	cbnz	r3, 801134e <_fflush_r+0x1a>
 801134a:	f000 f887 	bl	801145c <__sinit>
 801134e:	4b14      	ldr	r3, [pc, #80]	; (80113a0 <_fflush_r+0x6c>)
 8011350:	429c      	cmp	r4, r3
 8011352:	d11b      	bne.n	801138c <_fflush_r+0x58>
 8011354:	686c      	ldr	r4, [r5, #4]
 8011356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d0ef      	beq.n	801133e <_fflush_r+0xa>
 801135e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011360:	07d0      	lsls	r0, r2, #31
 8011362:	d404      	bmi.n	801136e <_fflush_r+0x3a>
 8011364:	0599      	lsls	r1, r3, #22
 8011366:	d402      	bmi.n	801136e <_fflush_r+0x3a>
 8011368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801136a:	f7ff fcd0 	bl	8010d0e <__retarget_lock_acquire_recursive>
 801136e:	4628      	mov	r0, r5
 8011370:	4621      	mov	r1, r4
 8011372:	f7ff ff59 	bl	8011228 <__sflush_r>
 8011376:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011378:	07da      	lsls	r2, r3, #31
 801137a:	4605      	mov	r5, r0
 801137c:	d4e0      	bmi.n	8011340 <_fflush_r+0xc>
 801137e:	89a3      	ldrh	r3, [r4, #12]
 8011380:	059b      	lsls	r3, r3, #22
 8011382:	d4dd      	bmi.n	8011340 <_fflush_r+0xc>
 8011384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011386:	f7ff fcc3 	bl	8010d10 <__retarget_lock_release_recursive>
 801138a:	e7d9      	b.n	8011340 <_fflush_r+0xc>
 801138c:	4b05      	ldr	r3, [pc, #20]	; (80113a4 <_fflush_r+0x70>)
 801138e:	429c      	cmp	r4, r3
 8011390:	d101      	bne.n	8011396 <_fflush_r+0x62>
 8011392:	68ac      	ldr	r4, [r5, #8]
 8011394:	e7df      	b.n	8011356 <_fflush_r+0x22>
 8011396:	4b04      	ldr	r3, [pc, #16]	; (80113a8 <_fflush_r+0x74>)
 8011398:	429c      	cmp	r4, r3
 801139a:	bf08      	it	eq
 801139c:	68ec      	ldreq	r4, [r5, #12]
 801139e:	e7da      	b.n	8011356 <_fflush_r+0x22>
 80113a0:	08012484 	.word	0x08012484
 80113a4:	080124a4 	.word	0x080124a4
 80113a8:	08012464 	.word	0x08012464

080113ac <std>:
 80113ac:	2300      	movs	r3, #0
 80113ae:	b510      	push	{r4, lr}
 80113b0:	4604      	mov	r4, r0
 80113b2:	e9c0 3300 	strd	r3, r3, [r0]
 80113b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80113ba:	6083      	str	r3, [r0, #8]
 80113bc:	8181      	strh	r1, [r0, #12]
 80113be:	6643      	str	r3, [r0, #100]	; 0x64
 80113c0:	81c2      	strh	r2, [r0, #14]
 80113c2:	6183      	str	r3, [r0, #24]
 80113c4:	4619      	mov	r1, r3
 80113c6:	2208      	movs	r2, #8
 80113c8:	305c      	adds	r0, #92	; 0x5c
 80113ca:	f7fd fb5d 	bl	800ea88 <memset>
 80113ce:	4b05      	ldr	r3, [pc, #20]	; (80113e4 <std+0x38>)
 80113d0:	6263      	str	r3, [r4, #36]	; 0x24
 80113d2:	4b05      	ldr	r3, [pc, #20]	; (80113e8 <std+0x3c>)
 80113d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80113d6:	4b05      	ldr	r3, [pc, #20]	; (80113ec <std+0x40>)
 80113d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80113da:	4b05      	ldr	r3, [pc, #20]	; (80113f0 <std+0x44>)
 80113dc:	6224      	str	r4, [r4, #32]
 80113de:	6323      	str	r3, [r4, #48]	; 0x30
 80113e0:	bd10      	pop	{r4, pc}
 80113e2:	bf00      	nop
 80113e4:	080116f9 	.word	0x080116f9
 80113e8:	0801171b 	.word	0x0801171b
 80113ec:	08011753 	.word	0x08011753
 80113f0:	08011777 	.word	0x08011777

080113f4 <_cleanup_r>:
 80113f4:	4901      	ldr	r1, [pc, #4]	; (80113fc <_cleanup_r+0x8>)
 80113f6:	f000 b8af 	b.w	8011558 <_fwalk_reent>
 80113fa:	bf00      	nop
 80113fc:	08011335 	.word	0x08011335

08011400 <__sfmoreglue>:
 8011400:	b570      	push	{r4, r5, r6, lr}
 8011402:	2268      	movs	r2, #104	; 0x68
 8011404:	1e4d      	subs	r5, r1, #1
 8011406:	4355      	muls	r5, r2
 8011408:	460e      	mov	r6, r1
 801140a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801140e:	f7fd fbaf 	bl	800eb70 <_malloc_r>
 8011412:	4604      	mov	r4, r0
 8011414:	b140      	cbz	r0, 8011428 <__sfmoreglue+0x28>
 8011416:	2100      	movs	r1, #0
 8011418:	e9c0 1600 	strd	r1, r6, [r0]
 801141c:	300c      	adds	r0, #12
 801141e:	60a0      	str	r0, [r4, #8]
 8011420:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011424:	f7fd fb30 	bl	800ea88 <memset>
 8011428:	4620      	mov	r0, r4
 801142a:	bd70      	pop	{r4, r5, r6, pc}

0801142c <__sfp_lock_acquire>:
 801142c:	4801      	ldr	r0, [pc, #4]	; (8011434 <__sfp_lock_acquire+0x8>)
 801142e:	f7ff bc6e 	b.w	8010d0e <__retarget_lock_acquire_recursive>
 8011432:	bf00      	nop
 8011434:	2000172d 	.word	0x2000172d

08011438 <__sfp_lock_release>:
 8011438:	4801      	ldr	r0, [pc, #4]	; (8011440 <__sfp_lock_release+0x8>)
 801143a:	f7ff bc69 	b.w	8010d10 <__retarget_lock_release_recursive>
 801143e:	bf00      	nop
 8011440:	2000172d 	.word	0x2000172d

08011444 <__sinit_lock_acquire>:
 8011444:	4801      	ldr	r0, [pc, #4]	; (801144c <__sinit_lock_acquire+0x8>)
 8011446:	f7ff bc62 	b.w	8010d0e <__retarget_lock_acquire_recursive>
 801144a:	bf00      	nop
 801144c:	2000172e 	.word	0x2000172e

08011450 <__sinit_lock_release>:
 8011450:	4801      	ldr	r0, [pc, #4]	; (8011458 <__sinit_lock_release+0x8>)
 8011452:	f7ff bc5d 	b.w	8010d10 <__retarget_lock_release_recursive>
 8011456:	bf00      	nop
 8011458:	2000172e 	.word	0x2000172e

0801145c <__sinit>:
 801145c:	b510      	push	{r4, lr}
 801145e:	4604      	mov	r4, r0
 8011460:	f7ff fff0 	bl	8011444 <__sinit_lock_acquire>
 8011464:	69a3      	ldr	r3, [r4, #24]
 8011466:	b11b      	cbz	r3, 8011470 <__sinit+0x14>
 8011468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801146c:	f7ff bff0 	b.w	8011450 <__sinit_lock_release>
 8011470:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011474:	6523      	str	r3, [r4, #80]	; 0x50
 8011476:	4b13      	ldr	r3, [pc, #76]	; (80114c4 <__sinit+0x68>)
 8011478:	4a13      	ldr	r2, [pc, #76]	; (80114c8 <__sinit+0x6c>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	62a2      	str	r2, [r4, #40]	; 0x28
 801147e:	42a3      	cmp	r3, r4
 8011480:	bf04      	itt	eq
 8011482:	2301      	moveq	r3, #1
 8011484:	61a3      	streq	r3, [r4, #24]
 8011486:	4620      	mov	r0, r4
 8011488:	f000 f820 	bl	80114cc <__sfp>
 801148c:	6060      	str	r0, [r4, #4]
 801148e:	4620      	mov	r0, r4
 8011490:	f000 f81c 	bl	80114cc <__sfp>
 8011494:	60a0      	str	r0, [r4, #8]
 8011496:	4620      	mov	r0, r4
 8011498:	f000 f818 	bl	80114cc <__sfp>
 801149c:	2200      	movs	r2, #0
 801149e:	60e0      	str	r0, [r4, #12]
 80114a0:	2104      	movs	r1, #4
 80114a2:	6860      	ldr	r0, [r4, #4]
 80114a4:	f7ff ff82 	bl	80113ac <std>
 80114a8:	68a0      	ldr	r0, [r4, #8]
 80114aa:	2201      	movs	r2, #1
 80114ac:	2109      	movs	r1, #9
 80114ae:	f7ff ff7d 	bl	80113ac <std>
 80114b2:	68e0      	ldr	r0, [r4, #12]
 80114b4:	2202      	movs	r2, #2
 80114b6:	2112      	movs	r1, #18
 80114b8:	f7ff ff78 	bl	80113ac <std>
 80114bc:	2301      	movs	r3, #1
 80114be:	61a3      	str	r3, [r4, #24]
 80114c0:	e7d2      	b.n	8011468 <__sinit+0xc>
 80114c2:	bf00      	nop
 80114c4:	080120ec 	.word	0x080120ec
 80114c8:	080113f5 	.word	0x080113f5

080114cc <__sfp>:
 80114cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114ce:	4607      	mov	r7, r0
 80114d0:	f7ff ffac 	bl	801142c <__sfp_lock_acquire>
 80114d4:	4b1e      	ldr	r3, [pc, #120]	; (8011550 <__sfp+0x84>)
 80114d6:	681e      	ldr	r6, [r3, #0]
 80114d8:	69b3      	ldr	r3, [r6, #24]
 80114da:	b913      	cbnz	r3, 80114e2 <__sfp+0x16>
 80114dc:	4630      	mov	r0, r6
 80114de:	f7ff ffbd 	bl	801145c <__sinit>
 80114e2:	3648      	adds	r6, #72	; 0x48
 80114e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80114e8:	3b01      	subs	r3, #1
 80114ea:	d503      	bpl.n	80114f4 <__sfp+0x28>
 80114ec:	6833      	ldr	r3, [r6, #0]
 80114ee:	b30b      	cbz	r3, 8011534 <__sfp+0x68>
 80114f0:	6836      	ldr	r6, [r6, #0]
 80114f2:	e7f7      	b.n	80114e4 <__sfp+0x18>
 80114f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80114f8:	b9d5      	cbnz	r5, 8011530 <__sfp+0x64>
 80114fa:	4b16      	ldr	r3, [pc, #88]	; (8011554 <__sfp+0x88>)
 80114fc:	60e3      	str	r3, [r4, #12]
 80114fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011502:	6665      	str	r5, [r4, #100]	; 0x64
 8011504:	f7ff fc02 	bl	8010d0c <__retarget_lock_init_recursive>
 8011508:	f7ff ff96 	bl	8011438 <__sfp_lock_release>
 801150c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011510:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011514:	6025      	str	r5, [r4, #0]
 8011516:	61a5      	str	r5, [r4, #24]
 8011518:	2208      	movs	r2, #8
 801151a:	4629      	mov	r1, r5
 801151c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011520:	f7fd fab2 	bl	800ea88 <memset>
 8011524:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011528:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801152c:	4620      	mov	r0, r4
 801152e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011530:	3468      	adds	r4, #104	; 0x68
 8011532:	e7d9      	b.n	80114e8 <__sfp+0x1c>
 8011534:	2104      	movs	r1, #4
 8011536:	4638      	mov	r0, r7
 8011538:	f7ff ff62 	bl	8011400 <__sfmoreglue>
 801153c:	4604      	mov	r4, r0
 801153e:	6030      	str	r0, [r6, #0]
 8011540:	2800      	cmp	r0, #0
 8011542:	d1d5      	bne.n	80114f0 <__sfp+0x24>
 8011544:	f7ff ff78 	bl	8011438 <__sfp_lock_release>
 8011548:	230c      	movs	r3, #12
 801154a:	603b      	str	r3, [r7, #0]
 801154c:	e7ee      	b.n	801152c <__sfp+0x60>
 801154e:	bf00      	nop
 8011550:	080120ec 	.word	0x080120ec
 8011554:	ffff0001 	.word	0xffff0001

08011558 <_fwalk_reent>:
 8011558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801155c:	4606      	mov	r6, r0
 801155e:	4688      	mov	r8, r1
 8011560:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011564:	2700      	movs	r7, #0
 8011566:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801156a:	f1b9 0901 	subs.w	r9, r9, #1
 801156e:	d505      	bpl.n	801157c <_fwalk_reent+0x24>
 8011570:	6824      	ldr	r4, [r4, #0]
 8011572:	2c00      	cmp	r4, #0
 8011574:	d1f7      	bne.n	8011566 <_fwalk_reent+0xe>
 8011576:	4638      	mov	r0, r7
 8011578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801157c:	89ab      	ldrh	r3, [r5, #12]
 801157e:	2b01      	cmp	r3, #1
 8011580:	d907      	bls.n	8011592 <_fwalk_reent+0x3a>
 8011582:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011586:	3301      	adds	r3, #1
 8011588:	d003      	beq.n	8011592 <_fwalk_reent+0x3a>
 801158a:	4629      	mov	r1, r5
 801158c:	4630      	mov	r0, r6
 801158e:	47c0      	blx	r8
 8011590:	4307      	orrs	r7, r0
 8011592:	3568      	adds	r5, #104	; 0x68
 8011594:	e7e9      	b.n	801156a <_fwalk_reent+0x12>

08011596 <__swhatbuf_r>:
 8011596:	b570      	push	{r4, r5, r6, lr}
 8011598:	460e      	mov	r6, r1
 801159a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801159e:	2900      	cmp	r1, #0
 80115a0:	b096      	sub	sp, #88	; 0x58
 80115a2:	4614      	mov	r4, r2
 80115a4:	461d      	mov	r5, r3
 80115a6:	da08      	bge.n	80115ba <__swhatbuf_r+0x24>
 80115a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80115ac:	2200      	movs	r2, #0
 80115ae:	602a      	str	r2, [r5, #0]
 80115b0:	061a      	lsls	r2, r3, #24
 80115b2:	d410      	bmi.n	80115d6 <__swhatbuf_r+0x40>
 80115b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115b8:	e00e      	b.n	80115d8 <__swhatbuf_r+0x42>
 80115ba:	466a      	mov	r2, sp
 80115bc:	f000 f902 	bl	80117c4 <_fstat_r>
 80115c0:	2800      	cmp	r0, #0
 80115c2:	dbf1      	blt.n	80115a8 <__swhatbuf_r+0x12>
 80115c4:	9a01      	ldr	r2, [sp, #4]
 80115c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80115ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80115ce:	425a      	negs	r2, r3
 80115d0:	415a      	adcs	r2, r3
 80115d2:	602a      	str	r2, [r5, #0]
 80115d4:	e7ee      	b.n	80115b4 <__swhatbuf_r+0x1e>
 80115d6:	2340      	movs	r3, #64	; 0x40
 80115d8:	2000      	movs	r0, #0
 80115da:	6023      	str	r3, [r4, #0]
 80115dc:	b016      	add	sp, #88	; 0x58
 80115de:	bd70      	pop	{r4, r5, r6, pc}

080115e0 <__smakebuf_r>:
 80115e0:	898b      	ldrh	r3, [r1, #12]
 80115e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80115e4:	079d      	lsls	r5, r3, #30
 80115e6:	4606      	mov	r6, r0
 80115e8:	460c      	mov	r4, r1
 80115ea:	d507      	bpl.n	80115fc <__smakebuf_r+0x1c>
 80115ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80115f0:	6023      	str	r3, [r4, #0]
 80115f2:	6123      	str	r3, [r4, #16]
 80115f4:	2301      	movs	r3, #1
 80115f6:	6163      	str	r3, [r4, #20]
 80115f8:	b002      	add	sp, #8
 80115fa:	bd70      	pop	{r4, r5, r6, pc}
 80115fc:	ab01      	add	r3, sp, #4
 80115fe:	466a      	mov	r2, sp
 8011600:	f7ff ffc9 	bl	8011596 <__swhatbuf_r>
 8011604:	9900      	ldr	r1, [sp, #0]
 8011606:	4605      	mov	r5, r0
 8011608:	4630      	mov	r0, r6
 801160a:	f7fd fab1 	bl	800eb70 <_malloc_r>
 801160e:	b948      	cbnz	r0, 8011624 <__smakebuf_r+0x44>
 8011610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011614:	059a      	lsls	r2, r3, #22
 8011616:	d4ef      	bmi.n	80115f8 <__smakebuf_r+0x18>
 8011618:	f023 0303 	bic.w	r3, r3, #3
 801161c:	f043 0302 	orr.w	r3, r3, #2
 8011620:	81a3      	strh	r3, [r4, #12]
 8011622:	e7e3      	b.n	80115ec <__smakebuf_r+0xc>
 8011624:	4b0d      	ldr	r3, [pc, #52]	; (801165c <__smakebuf_r+0x7c>)
 8011626:	62b3      	str	r3, [r6, #40]	; 0x28
 8011628:	89a3      	ldrh	r3, [r4, #12]
 801162a:	6020      	str	r0, [r4, #0]
 801162c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011630:	81a3      	strh	r3, [r4, #12]
 8011632:	9b00      	ldr	r3, [sp, #0]
 8011634:	6163      	str	r3, [r4, #20]
 8011636:	9b01      	ldr	r3, [sp, #4]
 8011638:	6120      	str	r0, [r4, #16]
 801163a:	b15b      	cbz	r3, 8011654 <__smakebuf_r+0x74>
 801163c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011640:	4630      	mov	r0, r6
 8011642:	f000 f8d1 	bl	80117e8 <_isatty_r>
 8011646:	b128      	cbz	r0, 8011654 <__smakebuf_r+0x74>
 8011648:	89a3      	ldrh	r3, [r4, #12]
 801164a:	f023 0303 	bic.w	r3, r3, #3
 801164e:	f043 0301 	orr.w	r3, r3, #1
 8011652:	81a3      	strh	r3, [r4, #12]
 8011654:	89a0      	ldrh	r0, [r4, #12]
 8011656:	4305      	orrs	r5, r0
 8011658:	81a5      	strh	r5, [r4, #12]
 801165a:	e7cd      	b.n	80115f8 <__smakebuf_r+0x18>
 801165c:	080113f5 	.word	0x080113f5

08011660 <_malloc_usable_size_r>:
 8011660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011664:	1f18      	subs	r0, r3, #4
 8011666:	2b00      	cmp	r3, #0
 8011668:	bfbc      	itt	lt
 801166a:	580b      	ldrlt	r3, [r1, r0]
 801166c:	18c0      	addlt	r0, r0, r3
 801166e:	4770      	bx	lr

08011670 <_raise_r>:
 8011670:	291f      	cmp	r1, #31
 8011672:	b538      	push	{r3, r4, r5, lr}
 8011674:	4604      	mov	r4, r0
 8011676:	460d      	mov	r5, r1
 8011678:	d904      	bls.n	8011684 <_raise_r+0x14>
 801167a:	2316      	movs	r3, #22
 801167c:	6003      	str	r3, [r0, #0]
 801167e:	f04f 30ff 	mov.w	r0, #4294967295
 8011682:	bd38      	pop	{r3, r4, r5, pc}
 8011684:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011686:	b112      	cbz	r2, 801168e <_raise_r+0x1e>
 8011688:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801168c:	b94b      	cbnz	r3, 80116a2 <_raise_r+0x32>
 801168e:	4620      	mov	r0, r4
 8011690:	f000 f830 	bl	80116f4 <_getpid_r>
 8011694:	462a      	mov	r2, r5
 8011696:	4601      	mov	r1, r0
 8011698:	4620      	mov	r0, r4
 801169a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801169e:	f000 b817 	b.w	80116d0 <_kill_r>
 80116a2:	2b01      	cmp	r3, #1
 80116a4:	d00a      	beq.n	80116bc <_raise_r+0x4c>
 80116a6:	1c59      	adds	r1, r3, #1
 80116a8:	d103      	bne.n	80116b2 <_raise_r+0x42>
 80116aa:	2316      	movs	r3, #22
 80116ac:	6003      	str	r3, [r0, #0]
 80116ae:	2001      	movs	r0, #1
 80116b0:	e7e7      	b.n	8011682 <_raise_r+0x12>
 80116b2:	2400      	movs	r4, #0
 80116b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80116b8:	4628      	mov	r0, r5
 80116ba:	4798      	blx	r3
 80116bc:	2000      	movs	r0, #0
 80116be:	e7e0      	b.n	8011682 <_raise_r+0x12>

080116c0 <raise>:
 80116c0:	4b02      	ldr	r3, [pc, #8]	; (80116cc <raise+0xc>)
 80116c2:	4601      	mov	r1, r0
 80116c4:	6818      	ldr	r0, [r3, #0]
 80116c6:	f7ff bfd3 	b.w	8011670 <_raise_r>
 80116ca:	bf00      	nop
 80116cc:	200000e4 	.word	0x200000e4

080116d0 <_kill_r>:
 80116d0:	b538      	push	{r3, r4, r5, lr}
 80116d2:	4d07      	ldr	r5, [pc, #28]	; (80116f0 <_kill_r+0x20>)
 80116d4:	2300      	movs	r3, #0
 80116d6:	4604      	mov	r4, r0
 80116d8:	4608      	mov	r0, r1
 80116da:	4611      	mov	r1, r2
 80116dc:	602b      	str	r3, [r5, #0]
 80116de:	f7f0 fc13 	bl	8001f08 <_kill>
 80116e2:	1c43      	adds	r3, r0, #1
 80116e4:	d102      	bne.n	80116ec <_kill_r+0x1c>
 80116e6:	682b      	ldr	r3, [r5, #0]
 80116e8:	b103      	cbz	r3, 80116ec <_kill_r+0x1c>
 80116ea:	6023      	str	r3, [r4, #0]
 80116ec:	bd38      	pop	{r3, r4, r5, pc}
 80116ee:	bf00      	nop
 80116f0:	20001728 	.word	0x20001728

080116f4 <_getpid_r>:
 80116f4:	f7f0 bc00 	b.w	8001ef8 <_getpid>

080116f8 <__sread>:
 80116f8:	b510      	push	{r4, lr}
 80116fa:	460c      	mov	r4, r1
 80116fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011700:	f000 f894 	bl	801182c <_read_r>
 8011704:	2800      	cmp	r0, #0
 8011706:	bfab      	itete	ge
 8011708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801170a:	89a3      	ldrhlt	r3, [r4, #12]
 801170c:	181b      	addge	r3, r3, r0
 801170e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011712:	bfac      	ite	ge
 8011714:	6563      	strge	r3, [r4, #84]	; 0x54
 8011716:	81a3      	strhlt	r3, [r4, #12]
 8011718:	bd10      	pop	{r4, pc}

0801171a <__swrite>:
 801171a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801171e:	461f      	mov	r7, r3
 8011720:	898b      	ldrh	r3, [r1, #12]
 8011722:	05db      	lsls	r3, r3, #23
 8011724:	4605      	mov	r5, r0
 8011726:	460c      	mov	r4, r1
 8011728:	4616      	mov	r6, r2
 801172a:	d505      	bpl.n	8011738 <__swrite+0x1e>
 801172c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011730:	2302      	movs	r3, #2
 8011732:	2200      	movs	r2, #0
 8011734:	f000 f868 	bl	8011808 <_lseek_r>
 8011738:	89a3      	ldrh	r3, [r4, #12]
 801173a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801173e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011742:	81a3      	strh	r3, [r4, #12]
 8011744:	4632      	mov	r2, r6
 8011746:	463b      	mov	r3, r7
 8011748:	4628      	mov	r0, r5
 801174a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801174e:	f000 b817 	b.w	8011780 <_write_r>

08011752 <__sseek>:
 8011752:	b510      	push	{r4, lr}
 8011754:	460c      	mov	r4, r1
 8011756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801175a:	f000 f855 	bl	8011808 <_lseek_r>
 801175e:	1c43      	adds	r3, r0, #1
 8011760:	89a3      	ldrh	r3, [r4, #12]
 8011762:	bf15      	itete	ne
 8011764:	6560      	strne	r0, [r4, #84]	; 0x54
 8011766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801176a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801176e:	81a3      	strheq	r3, [r4, #12]
 8011770:	bf18      	it	ne
 8011772:	81a3      	strhne	r3, [r4, #12]
 8011774:	bd10      	pop	{r4, pc}

08011776 <__sclose>:
 8011776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801177a:	f000 b813 	b.w	80117a4 <_close_r>
	...

08011780 <_write_r>:
 8011780:	b538      	push	{r3, r4, r5, lr}
 8011782:	4d07      	ldr	r5, [pc, #28]	; (80117a0 <_write_r+0x20>)
 8011784:	4604      	mov	r4, r0
 8011786:	4608      	mov	r0, r1
 8011788:	4611      	mov	r1, r2
 801178a:	2200      	movs	r2, #0
 801178c:	602a      	str	r2, [r5, #0]
 801178e:	461a      	mov	r2, r3
 8011790:	f7f0 fbf1 	bl	8001f76 <_write>
 8011794:	1c43      	adds	r3, r0, #1
 8011796:	d102      	bne.n	801179e <_write_r+0x1e>
 8011798:	682b      	ldr	r3, [r5, #0]
 801179a:	b103      	cbz	r3, 801179e <_write_r+0x1e>
 801179c:	6023      	str	r3, [r4, #0]
 801179e:	bd38      	pop	{r3, r4, r5, pc}
 80117a0:	20001728 	.word	0x20001728

080117a4 <_close_r>:
 80117a4:	b538      	push	{r3, r4, r5, lr}
 80117a6:	4d06      	ldr	r5, [pc, #24]	; (80117c0 <_close_r+0x1c>)
 80117a8:	2300      	movs	r3, #0
 80117aa:	4604      	mov	r4, r0
 80117ac:	4608      	mov	r0, r1
 80117ae:	602b      	str	r3, [r5, #0]
 80117b0:	f7f0 fbfd 	bl	8001fae <_close>
 80117b4:	1c43      	adds	r3, r0, #1
 80117b6:	d102      	bne.n	80117be <_close_r+0x1a>
 80117b8:	682b      	ldr	r3, [r5, #0]
 80117ba:	b103      	cbz	r3, 80117be <_close_r+0x1a>
 80117bc:	6023      	str	r3, [r4, #0]
 80117be:	bd38      	pop	{r3, r4, r5, pc}
 80117c0:	20001728 	.word	0x20001728

080117c4 <_fstat_r>:
 80117c4:	b538      	push	{r3, r4, r5, lr}
 80117c6:	4d07      	ldr	r5, [pc, #28]	; (80117e4 <_fstat_r+0x20>)
 80117c8:	2300      	movs	r3, #0
 80117ca:	4604      	mov	r4, r0
 80117cc:	4608      	mov	r0, r1
 80117ce:	4611      	mov	r1, r2
 80117d0:	602b      	str	r3, [r5, #0]
 80117d2:	f7f0 fbf8 	bl	8001fc6 <_fstat>
 80117d6:	1c43      	adds	r3, r0, #1
 80117d8:	d102      	bne.n	80117e0 <_fstat_r+0x1c>
 80117da:	682b      	ldr	r3, [r5, #0]
 80117dc:	b103      	cbz	r3, 80117e0 <_fstat_r+0x1c>
 80117de:	6023      	str	r3, [r4, #0]
 80117e0:	bd38      	pop	{r3, r4, r5, pc}
 80117e2:	bf00      	nop
 80117e4:	20001728 	.word	0x20001728

080117e8 <_isatty_r>:
 80117e8:	b538      	push	{r3, r4, r5, lr}
 80117ea:	4d06      	ldr	r5, [pc, #24]	; (8011804 <_isatty_r+0x1c>)
 80117ec:	2300      	movs	r3, #0
 80117ee:	4604      	mov	r4, r0
 80117f0:	4608      	mov	r0, r1
 80117f2:	602b      	str	r3, [r5, #0]
 80117f4:	f7f0 fbf7 	bl	8001fe6 <_isatty>
 80117f8:	1c43      	adds	r3, r0, #1
 80117fa:	d102      	bne.n	8011802 <_isatty_r+0x1a>
 80117fc:	682b      	ldr	r3, [r5, #0]
 80117fe:	b103      	cbz	r3, 8011802 <_isatty_r+0x1a>
 8011800:	6023      	str	r3, [r4, #0]
 8011802:	bd38      	pop	{r3, r4, r5, pc}
 8011804:	20001728 	.word	0x20001728

08011808 <_lseek_r>:
 8011808:	b538      	push	{r3, r4, r5, lr}
 801180a:	4d07      	ldr	r5, [pc, #28]	; (8011828 <_lseek_r+0x20>)
 801180c:	4604      	mov	r4, r0
 801180e:	4608      	mov	r0, r1
 8011810:	4611      	mov	r1, r2
 8011812:	2200      	movs	r2, #0
 8011814:	602a      	str	r2, [r5, #0]
 8011816:	461a      	mov	r2, r3
 8011818:	f7f0 fbf0 	bl	8001ffc <_lseek>
 801181c:	1c43      	adds	r3, r0, #1
 801181e:	d102      	bne.n	8011826 <_lseek_r+0x1e>
 8011820:	682b      	ldr	r3, [r5, #0]
 8011822:	b103      	cbz	r3, 8011826 <_lseek_r+0x1e>
 8011824:	6023      	str	r3, [r4, #0]
 8011826:	bd38      	pop	{r3, r4, r5, pc}
 8011828:	20001728 	.word	0x20001728

0801182c <_read_r>:
 801182c:	b538      	push	{r3, r4, r5, lr}
 801182e:	4d07      	ldr	r5, [pc, #28]	; (801184c <_read_r+0x20>)
 8011830:	4604      	mov	r4, r0
 8011832:	4608      	mov	r0, r1
 8011834:	4611      	mov	r1, r2
 8011836:	2200      	movs	r2, #0
 8011838:	602a      	str	r2, [r5, #0]
 801183a:	461a      	mov	r2, r3
 801183c:	f7f0 fb7e 	bl	8001f3c <_read>
 8011840:	1c43      	adds	r3, r0, #1
 8011842:	d102      	bne.n	801184a <_read_r+0x1e>
 8011844:	682b      	ldr	r3, [r5, #0]
 8011846:	b103      	cbz	r3, 801184a <_read_r+0x1e>
 8011848:	6023      	str	r3, [r4, #0]
 801184a:	bd38      	pop	{r3, r4, r5, pc}
 801184c:	20001728 	.word	0x20001728

08011850 <_init>:
 8011850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011852:	bf00      	nop
 8011854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011856:	bc08      	pop	{r3}
 8011858:	469e      	mov	lr, r3
 801185a:	4770      	bx	lr

0801185c <_fini>:
 801185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801185e:	bf00      	nop
 8011860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011862:	bc08      	pop	{r3}
 8011864:	469e      	mov	lr, r3
 8011866:	4770      	bx	lr
