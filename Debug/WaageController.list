
WaageController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000118c  0800ada0  0800ada0  0001ada0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf2c  0800bf2c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800bf2c  0800bf2c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bf2c  0800bf2c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf2c  0800bf2c  0001bf2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf30  0800bf30  0001bf30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800bf34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000a98  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c7c  20000c7c  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c87d  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cf1  00000000  00000000  0003ca91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001690  00000000  00000000  00040788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014c0  00000000  00000000  00041e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002536b  00000000  00000000  000432d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000201ba  00000000  00000000  00068643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db55d  00000000  00000000  000887fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00163d5a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ffc  00000000  00000000  00163dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ad88 	.word	0x0800ad88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800ad88 	.word	0x0800ad88

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <pid_init>:
		uint32_t 	referencePoint;


};

PID_Controller * pid_init(void){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

	    PID_Controller* PID = malloc (sizeof( PID_Controller));
 8000c5e:	2024      	movs	r0, #36	; 0x24
 8000c60:	f007 f9a0 	bl	8007fa4 <malloc>
 8000c64:	4603      	mov	r3, r0
 8000c66:	607b      	str	r3, [r7, #4]
			if(PID == NULL) return NULL;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d101      	bne.n	8000c72 <pid_init+0x1a>
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e000      	b.n	8000c74 <pid_init+0x1c>
	return PID;
 8000c72:	687b      	ldr	r3, [r7, #4]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <PID_Set>:

void PID_Set(PID_Controller* PID, float kp,float ki,float kd,uint32_t referencePoint,float sampleTime ){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6178      	str	r0, [r7, #20]
 8000c84:	ed87 0a04 	vstr	s0, [r7, #16]
 8000c88:	edc7 0a03 	vstr	s1, [r7, #12]
 8000c8c:	ed87 1a02 	vstr	s2, [r7, #8]
 8000c90:	6079      	str	r1, [r7, #4]
 8000c92:	edc7 1a00 	vstr	s3, [r7]

		PID->timeSpace = sampleTime / 1000.0f;
 8000c96:	ed97 7a00 	vldr	s14, [r7]
 8000c9a:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000cf4 <PID_Set+0x78>
 8000c9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	edc3 7a00 	vstr	s15, [r3]
		PID->eOld = 0.0f;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	f04f 0200 	mov.w	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
		PID->referencePoint = referencePoint;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	621a      	str	r2, [r3, #32]
		PID->eSum +=  (__e(PID) / PID->timeSpace);
 8000cb6:	6978      	ldr	r0, [r7, #20]
 8000cb8:	f000 f81e 	bl	8000cf8 <__e>
 8000cbc:	eef0 6a40 	vmov.f32	s13, s0
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	edd3 7a00 	vldr	s15, [r3]
 8000cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	edd3 7a05 	vldr	s15, [r3, #20]
 8000cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	edc3 7a05 	vstr	s15, [r3, #20]
		PID->KD = kd;
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	68ba      	ldr	r2, [r7, #8]
 8000cde:	60da      	str	r2, [r3, #12]
		PID->KP =kp;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	605a      	str	r2, [r3, #4]
		PID->KI = ki;
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	68fa      	ldr	r2, [r7, #12]
 8000cea:	609a      	str	r2, [r3, #8]
}
 8000cec:	bf00      	nop
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	447a0000 	.word	0x447a0000

08000cf8 <__e>:


static float __e( PID_Controller* pid) {
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
    return (float)(pid->referencePoint - (pid->in));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6a1a      	ldr	r2, [r3, #32]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	ee07 3a90 	vmov	s15, r3
 8000d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8000d12:	eeb0 0a67 	vmov.f32	s0, s15
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <__Proportional>:


uint32_t __Proportional( PID_Controller* pid) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	ed2d 8b02 	vpush	{d8}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    return (pid->KP * __e(pid));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	ed93 8a01 	vldr	s16, [r3, #4]
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ffe0 	bl	8000cf8 <__e>
 8000d38:	eef0 7a40 	vmov.f32	s15, s0
 8000d3c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d44:	ee17 3a90 	vmov	r3, s15
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	ecbd 8b02 	vpop	{d8}
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <__Integral>:

float __Integral( PID_Controller* pid) {
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
    return pid->KI * pid->eSum;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d68:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <__Derivative>:

float __Derivative( PID_Controller* pid) {
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	ed2d 8b02 	vpush	{d8}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
    return pid->KD * (__e(pid) - pid->eOld) / pid->timeSpace;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	ed93 8a03 	vldr	s16, [r3, #12]
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ffb3 	bl	8000cf8 <__e>
 8000d92:	eeb0 7a40 	vmov.f32	s14, s0
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000da0:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	edd3 7a00 	vldr	s15, [r3]
 8000daa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000dae:	eef0 7a66 	vmov.f32	s15, s13
}
 8000db2:	eeb0 0a67 	vmov.f32	s0, s15
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	ecbd 8b02 	vpop	{d8}
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <pid_Compute>:

PID_State pid_Compute( PID_Controller* pid) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	ed2d 8b02 	vpush	{d8}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  if(pid != NULL){
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d058      	beq.n	8000e84 <pid_Compute+0xc4>

      uint32_t res = (uint32_t)(__Proportional(pid) + __Integral(pid) + __Derivative(pid));
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffa4 	bl	8000d20 <__Proportional>
 8000dd8:	ee07 0a90 	vmov	s15, r0
 8000ddc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ffb7 	bl	8000d54 <__Integral>
 8000de6:	eef0 7a40 	vmov.f32	s15, s0
 8000dea:	ee38 8a27 	vadd.f32	s16, s16, s15
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ffc3 	bl	8000d7a <__Derivative>
 8000df4:	eef0 7a40 	vmov.f32	s15, s0
 8000df8:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e00:	ee17 3a90 	vmov	r3, s15
 8000e04:	60fb      	str	r3, [r7, #12]
      if (res >= PWM_MAX_DUTYCYCLE) {
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2b8a      	cmp	r3, #138	; 0x8a
 8000e0a:	d915      	bls.n	8000e38 <pid_Compute+0x78>
          (pid->out) = PWM_MAX_DUTYCYCLE;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	228b      	movs	r2, #139	; 0x8b
 8000e10:	61da      	str	r2, [r3, #28]
          pid->eSum -= __e(pid) / pid->timeSpace;
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ff70 	bl	8000cf8 <__e>
 8000e18:	eef0 6a40 	vmov.f32	s13, s0
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	ed93 7a00 	vldr	s14, [r3]
 8000e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	ed93 7a05 	vldr	s14, [r3, #20]
 8000e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	edc3 7a05 	vstr	s15, [r3, #20]
 8000e36:	e025      	b.n	8000e84 <pid_Compute+0xc4>
      }
      else if (res <= PWM_MIN_DUTYCYCLE) {
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d115      	bne.n	8000e6a <pid_Compute+0xaa>
          (pid->out) = PWM_MIN_DUTYCYCLE;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	61da      	str	r2, [r3, #28]
          pid->eSum -= __e(pid) / pid->timeSpace;
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff57 	bl	8000cf8 <__e>
 8000e4a:	eef0 6a40 	vmov.f32	s13, s0
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	ed93 7a00 	vldr	s14, [r3]
 8000e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	ed93 7a05 	vldr	s14, [r3, #20]
 8000e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	edc3 7a05 	vstr	s15, [r3, #20]
 8000e68:	e00c      	b.n	8000e84 <pid_Compute+0xc4>
      }
      else {
          (pid->out) = res;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	61da      	str	r2, [r3, #28]
          pid->eOld = __e(pid);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff41 	bl	8000cf8 <__e>
 8000e76:	eef0 7a40 	vmov.f32	s15, s0
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	edc3 7a04 	vstr	s15, [r3, #16]

          return PID_SUCCESS;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e000      	b.n	8000e86 <pid_Compute+0xc6>
      }
  }

return PID_FAILD;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	ecbd 8b02 	vpop	{d8}
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <mallocFree>:


void mallocFree(PID_Controller * pid){
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]

  free(pid);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f007 f88a 	bl	8007fb4 <free>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <pidOut>:

uint32_t  pidOut(PID_Controller *pid){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

      if(pid!=NULL){
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <pidOut+0x14>
	  return pid->out;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	e000      	b.n	8000ebe <pidOut+0x16>
  }
  return NULL;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <pidIn>:

void pidIn(PID_Controller* pid, uint32_t in){
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	6039      	str	r1, [r7, #0]

  if(pid!=NULL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d002      	beq.n	8000ee0 <pidIn+0x16>
    pid->in = in;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	683a      	ldr	r2, [r7, #0]
 8000ede:	619a      	str	r2, [r3, #24]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <ADC_Map>:

uint32_t ADC_Map(uint32_t x)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if(x >= 0)
    return (x - ADC_MIN_ANALOG_IN) * (ADC_MAX_ANALOG_MAPED_OUT - ADC_MIN_ANALOG_MAPED_OUT) / (ADC_MAX_ANALOG_IN - ADC_MIN_ANALOG_IN) + ADC_MIN_ANALOG_MAPED_OUT;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	029a      	lsls	r2, r3, #10
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <ADC_Map+0x28>)
 8000efa:	fba3 1302 	umull	r1, r3, r3, r2
 8000efe:	1ad2      	subs	r2, r2, r3
 8000f00:	0852      	lsrs	r2, r2, #1
 8000f02:	4413      	add	r3, r2
 8000f04:	0adb      	lsrs	r3, r3, #11
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	00100101 	.word	0x00100101

08000f18 <weightMeasur>:



float weightMeasur(uint32_t x){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

  float voltageADC = (x*3.3)/4095;
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff faf7 	bl	8000514 <__aeabi_ui2d>
 8000f26:	a32c      	add	r3, pc, #176	; (adr r3, 8000fd8 <weightMeasur+0xc0>)
 8000f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2c:	f7ff fb6c 	bl	8000608 <__aeabi_dmul>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	a329      	add	r3, pc, #164	; (adr r3, 8000fe0 <weightMeasur+0xc8>)
 8000f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3e:	f7ff fc8d 	bl	800085c <__aeabi_ddiv>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4610      	mov	r0, r2
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f7ff fe35 	bl	8000bb8 <__aeabi_d2f>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	617b      	str	r3, [r7, #20]
  float shunt_Resistor = 0.05;
 8000f52:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <weightMeasur+0xb8>)
 8000f54:	613b      	str	r3, [r7, #16]
  float current = voltageADC/shunt_Resistor;
 8000f56:	edd7 6a05 	vldr	s13, [r7, #20]
 8000f5a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f62:	edc7 7a03 	vstr	s15, [r7, #12]
  float weight =((1.8*current)/9.81)*1000.0f;
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f7ff faf6 	bl	8000558 <__aeabi_f2d>
 8000f6c:	a314      	add	r3, pc, #80	; (adr r3, 8000fc0 <weightMeasur+0xa8>)
 8000f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f72:	f7ff fb49 	bl	8000608 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	a312      	add	r3, pc, #72	; (adr r3, 8000fc8 <weightMeasur+0xb0>)
 8000f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f84:	f7ff fc6a 	bl	800085c <__aeabi_ddiv>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <weightMeasur+0xbc>)
 8000f96:	f7ff fb37 	bl	8000608 <__aeabi_dmul>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f7ff fe09 	bl	8000bb8 <__aeabi_d2f>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	60bb      	str	r3, [r7, #8]


  return weight;
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	ee07 3a90 	vmov	s15, r3
  }
 8000fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	f3af 8000 	nop.w
 8000fc0:	cccccccd 	.word	0xcccccccd
 8000fc4:	3ffccccc 	.word	0x3ffccccc
 8000fc8:	51eb851f 	.word	0x51eb851f
 8000fcc:	40239eb8 	.word	0x40239eb8
 8000fd0:	3d4ccccd 	.word	0x3d4ccccd
 8000fd4:	408f4000 	.word	0x408f4000
 8000fd8:	66666666 	.word	0x66666666
 8000fdc:	400a6666 	.word	0x400a6666
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	40affe00 	.word	0x40affe00

08000fe8 <weightPrint>:

void weightPrint(uint32_t adc){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b09e      	sub	sp, #120	; 0x78
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	6078      	str	r0, [r7, #4]

  char weight[100];

  ssd1306_SetCursor(0,0);
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f000 fdf4 	bl	8001be0 <ssd1306_SetCursor>
  sprintf(weight, "s%.2f%s%% It weights ", weightMeasur(adc), " g");
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff8d 	bl	8000f18 <weightMeasur>
 8000ffe:	ee10 3a10 	vmov	r3, s0
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff faa8 	bl	8000558 <__aeabi_f2d>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	f107 000c 	add.w	r0, r7, #12
 8001010:	4908      	ldr	r1, [pc, #32]	; (8001034 <weightPrint+0x4c>)
 8001012:	9100      	str	r1, [sp, #0]
 8001014:	4908      	ldr	r1, [pc, #32]	; (8001038 <weightPrint+0x50>)
 8001016:	f007 fd37 	bl	8008a88 <siprintf>
  ssd1306_WriteString(weight, Font_11x18, White);
 800101a:	4a08      	ldr	r2, [pc, #32]	; (800103c <weightPrint+0x54>)
 800101c:	f107 000c 	add.w	r0, r7, #12
 8001020:	2301      	movs	r3, #1
 8001022:	ca06      	ldmia	r2, {r1, r2}
 8001024:	f000 fdb6 	bl	8001b94 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8001028:	f000 fca8 	bl	800197c <ssd1306_UpdateScreen>
}
 800102c:	bf00      	nop
 800102e:	3770      	adds	r7, #112	; 0x70
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	0800adb8 	.word	0x0800adb8
 8001038:	0800ada0 	.word	0x0800ada0
 800103c:	20000000 	.word	0x20000000

08001040 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
 8001060:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001062:	4b2e      	ldr	r3, [pc, #184]	; (800111c <MX_ADC1_Init+0xdc>)
 8001064:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001068:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800106a:	4b2c      	ldr	r3, [pc, #176]	; (800111c <MX_ADC1_Init+0xdc>)
 800106c:	2200      	movs	r2, #0
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b2a      	ldr	r3, [pc, #168]	; (800111c <MX_ADC1_Init+0xdc>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001076:	4b29      	ldr	r3, [pc, #164]	; (800111c <MX_ADC1_Init+0xdc>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800107c:	4b27      	ldr	r3, [pc, #156]	; (800111c <MX_ADC1_Init+0xdc>)
 800107e:	2201      	movs	r2, #1
 8001080:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001082:	4b26      	ldr	r3, [pc, #152]	; (800111c <MX_ADC1_Init+0xdc>)
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800108a:	4b24      	ldr	r3, [pc, #144]	; (800111c <MX_ADC1_Init+0xdc>)
 800108c:	2200      	movs	r2, #0
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001090:	4b22      	ldr	r3, [pc, #136]	; (800111c <MX_ADC1_Init+0xdc>)
 8001092:	2201      	movs	r2, #1
 8001094:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001096:	4b21      	ldr	r3, [pc, #132]	; (800111c <MX_ADC1_Init+0xdc>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <MX_ADC1_Init+0xdc>)
 800109e:	2201      	movs	r2, #1
 80010a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <MX_ADC1_Init+0xdc>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <MX_ADC1_Init+0xdc>)
 80010ac:	2204      	movs	r2, #4
 80010ae:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <MX_ADC1_Init+0xdc>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <MX_ADC1_Init+0xdc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010bc:	4817      	ldr	r0, [pc, #92]	; (800111c <MX_ADC1_Init+0xdc>)
 80010be:	f001 f9af 	bl	8002420 <HAL_ADC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80010c8:	f000 fb5e 	bl	8001788 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	4619      	mov	r1, r3
 80010d6:	4811      	ldr	r0, [pc, #68]	; (800111c <MX_ADC1_Init+0xdc>)
 80010d8:	f002 fb1e 	bl	8003718 <HAL_ADCEx_MultiModeConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010e2:	f000 fb51 	bl	8001788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ea:	2301      	movs	r3, #1
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	; (800111c <MX_ADC1_Init+0xdc>)
 8001104:	f002 f818 	bl	8003138 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800110e:	f000 fb3b 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	; 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000200 	.word	0x20000200

08001120 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
 8001140:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001142:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <MX_ADC3_Init+0xd8>)
 8001144:	4a2d      	ldr	r2, [pc, #180]	; (80011fc <MX_ADC3_Init+0xdc>)
 8001146:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001148:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <MX_ADC3_Init+0xd8>)
 800114a:	2200      	movs	r2, #0
 800114c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <MX_ADC3_Init+0xd8>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001154:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <MX_ADC3_Init+0xd8>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800115a:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <MX_ADC3_Init+0xd8>)
 800115c:	2201      	movs	r2, #1
 800115e:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001160:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <MX_ADC3_Init+0xd8>)
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001168:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <MX_ADC3_Init+0xd8>)
 800116a:	2200      	movs	r2, #0
 800116c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <MX_ADC3_Init+0xd8>)
 8001170:	2201      	movs	r2, #1
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001174:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <MX_ADC3_Init+0xd8>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800117a:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <MX_ADC3_Init+0xd8>)
 800117c:	2201      	movs	r2, #1
 800117e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_ADC3_Init+0xd8>)
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <MX_ADC3_Init+0xd8>)
 800118a:	2204      	movs	r2, #4
 800118c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_ADC3_Init+0xd8>)
 8001190:	2200      	movs	r2, #0
 8001192:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_ADC3_Init+0xd8>)
 8001196:	2200      	movs	r2, #0
 8001198:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800119a:	4817      	ldr	r0, [pc, #92]	; (80011f8 <MX_ADC3_Init+0xd8>)
 800119c:	f001 f940 	bl	8002420 <HAL_ADC_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 80011a6:	f000 faef 	bl	8001788 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4619      	mov	r1, r3
 80011b4:	4810      	ldr	r0, [pc, #64]	; (80011f8 <MX_ADC3_Init+0xd8>)
 80011b6:	f002 faaf 	bl	8003718 <HAL_ADCEx_MultiModeConfigChannel>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80011c0:	f000 fae2 	bl	8001788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011c4:	2301      	movs	r3, #1
 80011c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_ADC3_Init+0xd8>)
 80011e2:	f001 ffa9 	bl	8003138 <HAL_ADC_ConfigChannel>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80011ec:	f000 facc 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	; 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	2000026c 	.word	0x2000026c
 80011fc:	50000400 	.word	0x50000400

08001200 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08c      	sub	sp, #48	; 0x30
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001220:	d12d      	bne.n	800127e <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001222:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	4a30      	ldr	r2, [pc, #192]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 8001228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122c:	6153      	str	r3, [r2, #20]
 800122e:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	61bb      	str	r3, [r7, #24]
 8001238:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	4a2a      	ldr	r2, [pc, #168]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 8001240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001244:	6153      	str	r3, [r2, #20]
 8001246:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001252:	2301      	movs	r3, #1
 8001254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001256:	2303      	movs	r3, #3
 8001258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	4619      	mov	r1, r3
 8001264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001268:	f002 fd24 	bl	8003cb4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	2012      	movs	r0, #18
 8001272:	f002 fce8 	bl	8003c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001276:	2012      	movs	r0, #18
 8001278:	f002 fd01 	bl	8003c7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800127c:	e030      	b.n	80012e0 <HAL_ADC_MspInit+0xe0>
  else if(adcHandle->Instance==ADC3)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a1a      	ldr	r2, [pc, #104]	; (80012ec <HAL_ADC_MspInit+0xec>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d12b      	bne.n	80012e0 <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8001288:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	4a16      	ldr	r2, [pc, #88]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 800128e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001292:	6153      	str	r3, [r2, #20]
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	4a10      	ldr	r2, [pc, #64]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 80012a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012aa:	6153      	str	r3, [r2, #20]
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012b8:	2302      	movs	r3, #2
 80012ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012bc:	2303      	movs	r3, #3
 80012be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4619      	mov	r1, r3
 80012ca:	4809      	ldr	r0, [pc, #36]	; (80012f0 <HAL_ADC_MspInit+0xf0>)
 80012cc:	f002 fcf2 	bl	8003cb4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	202f      	movs	r0, #47	; 0x2f
 80012d6:	f002 fcb6 	bl	8003c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80012da:	202f      	movs	r0, #47	; 0x2f
 80012dc:	f002 fccf 	bl	8003c7e <HAL_NVIC_EnableIRQ>
}
 80012e0:	bf00      	nop
 80012e2:	3730      	adds	r7, #48	; 0x30
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40021000 	.word	0x40021000
 80012ec:	50000400 	.word	0x50000400
 80012f0:	48000400 	.word	0x48000400

080012f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130a:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <MX_GPIO_Init+0xc4>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	4a2a      	ldr	r2, [pc, #168]	; (80013b8 <MX_GPIO_Init+0xc4>)
 8001310:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001314:	6153      	str	r3, [r2, #20]
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <MX_GPIO_Init+0xc4>)
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001322:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <MX_GPIO_Init+0xc4>)
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	4a24      	ldr	r2, [pc, #144]	; (80013b8 <MX_GPIO_Init+0xc4>)
 8001328:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800132c:	6153      	str	r3, [r2, #20]
 800132e:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <MX_GPIO_Init+0xc4>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <MX_GPIO_Init+0xc4>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	4a1e      	ldr	r2, [pc, #120]	; (80013b8 <MX_GPIO_Init+0xc4>)
 8001340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001344:	6153      	str	r3, [r2, #20]
 8001346:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <MX_GPIO_Init+0xc4>)
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <MX_GPIO_Init+0xc4>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <MX_GPIO_Init+0xc4>)
 8001358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800135c:	6153      	str	r3, [r2, #20]
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <MX_GPIO_Init+0xc4>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2120      	movs	r1, #32
 800136e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001372:	f002 fe29 	bl	8003fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001376:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800137c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	480b      	ldr	r0, [pc, #44]	; (80013bc <MX_GPIO_Init+0xc8>)
 800138e:	f002 fc91 	bl	8003cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001392:	2320      	movs	r3, #32
 8001394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	2301      	movs	r3, #1
 8001398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ac:	f002 fc82 	bl	8003cb4 <HAL_GPIO_Init>

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40021000 	.word	0x40021000
 80013bc:	48000800 	.word	0x48000800

080013c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <MX_I2C1_Init+0x74>)
 80013c6:	4a1c      	ldr	r2, [pc, #112]	; (8001438 <MX_I2C1_Init+0x78>)
 80013c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300208;
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <MX_I2C1_Init+0x74>)
 80013cc:	4a1b      	ldr	r2, [pc, #108]	; (800143c <MX_I2C1_Init+0x7c>)
 80013ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <MX_I2C1_Init+0x74>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d6:	4b17      	ldr	r3, [pc, #92]	; (8001434 <MX_I2C1_Init+0x74>)
 80013d8:	2201      	movs	r2, #1
 80013da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <MX_I2C1_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_I2C1_Init+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <MX_I2C1_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_I2C1_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <MX_I2C1_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013fa:	480e      	ldr	r0, [pc, #56]	; (8001434 <MX_I2C1_Init+0x74>)
 80013fc:	f002 fdfc 	bl	8003ff8 <HAL_I2C_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001406:	f000 f9bf 	bl	8001788 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800140a:	2100      	movs	r1, #0
 800140c:	4809      	ldr	r0, [pc, #36]	; (8001434 <MX_I2C1_Init+0x74>)
 800140e:	f002 fe9c 	bl	800414a <HAL_I2CEx_ConfigAnalogFilter>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001418:	f000 f9b6 	bl	8001788 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800141c:	2100      	movs	r1, #0
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_I2C1_Init+0x74>)
 8001420:	f002 fede 	bl	80041e0 <HAL_I2CEx_ConfigDigitalFilter>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800142a:	f000 f9ad 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200002d8 	.word	0x200002d8
 8001438:	40005400 	.word	0x40005400
 800143c:	00300208 	.word	0x00300208

08001440 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a2a      	ldr	r2, [pc, #168]	; (8001508 <HAL_I2C_MspInit+0xc8>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d14d      	bne.n	80014fe <HAL_I2C_MspInit+0xbe>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	4b2a      	ldr	r3, [pc, #168]	; (800150c <HAL_I2C_MspInit+0xcc>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	4a29      	ldr	r2, [pc, #164]	; (800150c <HAL_I2C_MspInit+0xcc>)
 8001468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800146c:	6153      	str	r3, [r2, #20]
 800146e:	4b27      	ldr	r3, [pc, #156]	; (800150c <HAL_I2C_MspInit+0xcc>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	4b24      	ldr	r3, [pc, #144]	; (800150c <HAL_I2C_MspInit+0xcc>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	4a23      	ldr	r2, [pc, #140]	; (800150c <HAL_I2C_MspInit+0xcc>)
 8001480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001484:	6153      	str	r3, [r2, #20]
 8001486:	4b21      	ldr	r3, [pc, #132]	; (800150c <HAL_I2C_MspInit+0xcc>)
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001498:	2312      	movs	r3, #18
 800149a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014a4:	2304      	movs	r3, #4
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4619      	mov	r1, r3
 80014ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b2:	f002 fbff 	bl	8003cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ba:	2312      	movs	r3, #18
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014c6:	2304      	movs	r3, #4
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	480f      	ldr	r0, [pc, #60]	; (8001510 <HAL_I2C_MspInit+0xd0>)
 80014d2:	f002 fbef 	bl	8003cb4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <HAL_I2C_MspInit+0xcc>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	4a0c      	ldr	r2, [pc, #48]	; (800150c <HAL_I2C_MspInit+0xcc>)
 80014dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014e0:	61d3      	str	r3, [r2, #28]
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_I2C_MspInit+0xcc>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	201f      	movs	r0, #31
 80014f4:	f002 fba7 	bl	8003c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014f8:	201f      	movs	r0, #31
 80014fa:	f002 fbc0 	bl	8003c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014fe:	bf00      	nop
 8001500:	3728      	adds	r7, #40	; 0x28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40005400 	.word	0x40005400
 800150c:	40021000 	.word	0x40021000
 8001510:	48000400 	.word	0x48000400

08001514 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

	 	if(hadc ->Instance == ADC1){
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001524:	d10e      	bne.n	8001544 <HAL_ADC_ConvCpltCallback+0x30>
	 	    uint32_t _ADC  = HAL_ADC_GetValue(hadc);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f001 fae6 	bl	8002af8 <HAL_ADC_GetValue>
 800152c:	60b8      	str	r0, [r7, #8]
	 		pidIn(pid, ADC_Map(_ADC));
 800152e:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <HAL_ADC_ConvCpltCallback+0x50>)
 8001530:	681c      	ldr	r4, [r3, #0]
 8001532:	68b8      	ldr	r0, [r7, #8]
 8001534:	f7ff fcda 	bl	8000eec <ADC_Map>
 8001538:	4603      	mov	r3, r0
 800153a:	4619      	mov	r1, r3
 800153c:	4620      	mov	r0, r4
 800153e:	f7ff fcc4 	bl	8000eca <pidIn>
	 	else if(hadc ->Instance == ADC3){
	 		 uint32_t _ADC = HAL_ADC_GetValue(hadc);
	 		weightPrint(_ADC);
	 	}

	 }
 8001542:	e00b      	b.n	800155c <HAL_ADC_ConvCpltCallback+0x48>
	 	else if(hadc ->Instance == ADC3){
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <HAL_ADC_ConvCpltCallback+0x54>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d106      	bne.n	800155c <HAL_ADC_ConvCpltCallback+0x48>
	 		 uint32_t _ADC = HAL_ADC_GetValue(hadc);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f001 fad2 	bl	8002af8 <HAL_ADC_GetValue>
 8001554:	60f8      	str	r0, [r7, #12]
	 		weightPrint(_ADC);
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f7ff fd46 	bl	8000fe8 <weightPrint>
	 }
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	bd90      	pop	{r4, r7, pc}
 8001564:	2000032c 	.word	0x2000032c
 8001568:	50000400 	.word	0x50000400

0800156c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2){
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800157c:	d116      	bne.n	80015ac <HAL_TIM_PeriodElapsedCallback+0x40>
	 	   counter = __HAL_TIM_GET_COUNTER(&htim2);
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	4a0c      	ldr	r2, [pc, #48]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001586:	6013      	str	r3, [r2, #0]
	 	   pid_Compute(pid);
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x50>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fc17 	bl	8000dc0 <pid_Compute>
	 	   TIM4 ->CCR1 = (pidOut(pid));
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4c0a      	ldr	r4, [pc, #40]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fc85 	bl	8000ea8 <pidOut>
 800159e:	4603      	mov	r3, r0
 80015a0:	6363      	str	r3, [r4, #52]	; 0x34
	 	   mallocFree(pid);
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fc73 	bl	8000e92 <mallocFree>
	 	}
	 }
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd90      	pop	{r4, r7, pc}
 80015b4:	2000077c 	.word	0x2000077c
 80015b8:	20000330 	.word	0x20000330
 80015bc:	2000032c 	.word	0x2000032c
 80015c0:	40000800 	.word	0x40000800

080015c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  pid = pid_init();
 80015c8:	f7ff fb46 	bl	8000c58 <pid_init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4a2a      	ldr	r2, [pc, #168]	; (8001678 <main+0xb4>)
 80015d0:	6013      	str	r3, [r2, #0]
  PID_Set(pid, 10, 3,1.2,1200,1);
 80015d2:	4b29      	ldr	r3, [pc, #164]	; (8001678 <main+0xb4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80015da:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80015de:	ed9f 1a27 	vldr	s2, [pc, #156]	; 800167c <main+0xb8>
 80015e2:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80015e6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fb46 	bl	8000c7c <PID_Set>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f0:	f000 fe62 	bl	80022b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015f4:	f000 f856 	bl	80016a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f8:	f7ff fe7c 	bl	80012f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015fc:	f000 fd7a 	bl	80020f4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001600:	f000 fc54 	bl	8001eac <MX_TIM2_Init>
  MX_TIM4_Init();
 8001604:	f000 fca0 	bl	8001f48 <MX_TIM4_Init>
  MX_I2C1_Init();
 8001608:	f7ff feda 	bl	80013c0 <MX_I2C1_Init>
  MX_OPAMP2_Init();
 800160c:	f000 f8c2 	bl	8001794 <MX_OPAMP2_Init>
  MX_USB_PCD_Init();
 8001610:	f000 fde2 	bl	80021d8 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8001614:	f7ff fd14 	bl	8001040 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001618:	f7ff fd82 	bl	8001120 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
//  ssd1306_Init();
  HAL_TIM_Base_Start_IT(&htim2);
 800161c:	4818      	ldr	r0, [pc, #96]	; (8001680 <main+0xbc>)
 800161e:	f004 fcad 	bl	8005f7c <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 8001622:	4818      	ldr	r0, [pc, #96]	; (8001684 <main+0xc0>)
 8001624:	f001 f928 	bl	8002878 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc3);
 8001628:	4817      	ldr	r0, [pc, #92]	; (8001688 <main+0xc4>)
 800162a:	f001 f925 	bl	8002878 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800162e:	2100      	movs	r1, #0
 8001630:	4816      	ldr	r0, [pc, #88]	; (800168c <main+0xc8>)
 8001632:	f004 fd77 	bl	8006124 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  adcSt = HAL_ADC_GetState(&hadc1);
 8001636:	4813      	ldr	r0, [pc, #76]	; (8001684 <main+0xc0>)
 8001638:	f000 fee6 	bl	8002408 <HAL_ADC_GetState>
 800163c:	4603      	mov	r3, r0
 800163e:	4a14      	ldr	r2, [pc, #80]	; (8001690 <main+0xcc>)
 8001640:	6013      	str	r3, [r2, #0]
	  timSt = HAL_TIM_Base_GetState(&htim2);
 8001642:	480f      	ldr	r0, [pc, #60]	; (8001680 <main+0xbc>)
 8001644:	f005 f9f3 	bl	8006a2e <HAL_TIM_Base_GetState>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <main+0xd0>)
 800164e:	701a      	strb	r2, [r3, #0]
	  pwmSt = HAL_TIM_PWM_GetState(&htim4);
 8001650:	480e      	ldr	r0, [pc, #56]	; (800168c <main+0xc8>)
 8001652:	f005 f9fa 	bl	8006a4a <HAL_TIM_PWM_GetState>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <main+0xd4>)
 800165c:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)counter, sizeof(counter), HAL_MAX_DELAY);
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <main+0xd8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4619      	mov	r1, r3
 8001664:	f04f 33ff 	mov.w	r3, #4294967295
 8001668:	2204      	movs	r2, #4
 800166a:	480d      	ldr	r0, [pc, #52]	; (80016a0 <main+0xdc>)
 800166c:	f005 ffc0 	bl	80075f0 <HAL_UART_Transmit>
	  HAL_Delay(50);
 8001670:	2032      	movs	r0, #50	; 0x32
 8001672:	f000 fe87 	bl	8002384 <HAL_Delay>
	  adcSt = HAL_ADC_GetState(&hadc1);
 8001676:	e7de      	b.n	8001636 <main+0x72>
 8001678:	2000032c 	.word	0x2000032c
 800167c:	3f99999a 	.word	0x3f99999a
 8001680:	2000077c 	.word	0x2000077c
 8001684:	20000200 	.word	0x20000200
 8001688:	2000026c 	.word	0x2000026c
 800168c:	20000838 	.word	0x20000838
 8001690:	20000334 	.word	0x20000334
 8001694:	20000338 	.word	0x20000338
 8001698:	20000339 	.word	0x20000339
 800169c:	20000330 	.word	0x20000330
 80016a0:	200008f4 	.word	0x200008f4

080016a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b0a6      	sub	sp, #152	; 0x98
 80016a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016ae:	2228      	movs	r2, #40	; 0x28
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f006 fc86 	bl	8007fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2258      	movs	r2, #88	; 0x58
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f006 fc78 	bl	8007fc4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80016d4:	2303      	movs	r3, #3
 80016d6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016dc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016de:	2301      	movs	r3, #1
 80016e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e2:	2310      	movs	r3, #16
 80016e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e8:	2302      	movs	r3, #2
 80016ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001704:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001708:	4618      	mov	r0, r3
 800170a:	f002 ff2b 	bl	8004564 <HAL_RCC_OscConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001714:	f000 f838 	bl	8001788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001718:	230f      	movs	r3, #15
 800171a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171c:	2302      	movs	r3, #2
 800171e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001720:	2300      	movs	r3, #0
 8001722:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001728:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800172e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001732:	2102      	movs	r1, #2
 8001734:	4618      	mov	r0, r3
 8001736:	f003 ff69 	bl	800560c <HAL_RCC_ClockConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001740:	f000 f822 	bl	8001788 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <SystemClock_Config+0xe0>)
 8001746:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_ADC34|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800174c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8001752:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001756:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800175c:	2300      	movs	r3, #0
 800175e:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001760:	2300      	movs	r3, #0
 8001762:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001764:	2300      	movs	r3, #0
 8001766:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	4618      	mov	r0, r3
 800176c:	f004 f984 	bl	8005a78 <HAL_RCCEx_PeriphCLKConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001776:	f000 f807 	bl	8001788 <Error_Handler>
  }
}
 800177a:	bf00      	nop
 800177c:	3798      	adds	r7, #152	; 0x98
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	003201a2 	.word	0x003201a2

08001788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800178c:	b672      	cpsid	i
}
 800178e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001790:	e7fe      	b.n	8001790 <Error_Handler+0x8>
	...

08001794 <MX_OPAMP2_Init>:

OPAMP_HandleTypeDef hopamp2;

/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <MX_OPAMP2_Init+0x44>)
 800179a:	4a10      	ldr	r2, [pc, #64]	; (80017dc <MX_OPAMP2_Init+0x48>)
 800179c:	601a      	str	r2, [r3, #0]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_OPAMP2_Init+0x44>)
 80017a0:	2240      	movs	r2, #64	; 0x40
 80017a2:	605a      	str	r2, [r3, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_OPAMP2_Init+0x44>)
 80017a6:	220c      	movs	r2, #12
 80017a8:	60da      	str	r2, [r3, #12]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <MX_OPAMP2_Init+0x44>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_OPAMP2_Init+0x44>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16;
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <MX_OPAMP2_Init+0x44>)
 80017b8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80017bc:	621a      	str	r2, [r3, #32]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_OPAMP2_Init+0x44>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <MX_OPAMP2_Init+0x44>)
 80017c6:	f002 fd57 	bl	8004278 <HAL_OPAMP_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_OPAMP2_Init+0x40>
  {
    Error_Handler();
 80017d0:	f7ff ffda 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2000033c 	.word	0x2000033c
 80017dc:	4001003c 	.word	0x4001003c

080017e0 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0f      	ldr	r2, [pc, #60]	; (800183c <HAL_OPAMP_MspInit+0x5c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d118      	bne.n	8001834 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP2_MspInit 0 */

  /* USER CODE END OPAMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <HAL_OPAMP_MspInit+0x60>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <HAL_OPAMP_MspInit+0x60>)
 8001808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180c:	6153      	str	r3, [r2, #20]
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_OPAMP_MspInit+0x60>)
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP2 GPIO Configuration
    PA6     ------> OPAMP2_VOUT
    PA7     ------> OPAMP2_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800181a:	23c0      	movs	r3, #192	; 0xc0
 800181c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181e:	2303      	movs	r3, #3
 8001820:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	4619      	mov	r1, r3
 800182c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001830:	f002 fa40 	bl	8003cb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
}
 8001834:	bf00      	nop
 8001836:	3720      	adds	r7, #32
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	4001003c 	.word	0x4001003c
 8001840:	40021000 	.word	0x40021000

08001844 <WriteMem>:

static uint8_t SSD1306_Buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];
static SSD1306_t SSD1306;

void WriteMem(uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t Size)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	60ba      	str	r2, [r7, #8]
 800184c:	461a      	mov	r2, r3
 800184e:	4603      	mov	r3, r0
 8001850:	81fb      	strh	r3, [r7, #14]
 8001852:	460b      	mov	r3, r1
 8001854:	81bb      	strh	r3, [r7, #12]
 8001856:	4613      	mov	r3, r2
 8001858:	80fb      	strh	r3, [r7, #6]


	I2C1->CR2 |= (DevAddress<<1);				//Slave Adress for I2C Display
 800185a:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <WriteMem+0xac>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	89fa      	ldrh	r2, [r7, #14]
 8001860:	0052      	lsls	r2, r2, #1
 8001862:	4611      	mov	r1, r2
 8001864:	4a22      	ldr	r2, [pc, #136]	; (80018f0 <WriteMem+0xac>)
 8001866:	430b      	orrs	r3, r1
 8001868:	6053      	str	r3, [r2, #4]
	I2C1->CR2 &= ~(0xFF<<16);					//clear NBYTES
 800186a:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <WriteMem+0xac>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4a20      	ldr	r2, [pc, #128]	; (80018f0 <WriteMem+0xac>)
 8001870:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001874:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= ((Size+1)<<16);				//max 255 Bytes of Data
 8001876:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <WriteMem+0xac>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	88fa      	ldrh	r2, [r7, #6]
 800187c:	3201      	adds	r2, #1
 800187e:	0412      	lsls	r2, r2, #16
 8001880:	4611      	mov	r1, r2
 8001882:	4a1b      	ldr	r2, [pc, #108]	; (80018f0 <WriteMem+0xac>)
 8001884:	430b      	orrs	r3, r1
 8001886:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= I2C_CR2_AUTOEND;				//Stop condition automatically after transfer
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <WriteMem+0xac>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	4a18      	ldr	r2, [pc, #96]	; (80018f0 <WriteMem+0xac>)
 800188e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001892:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= I2C_CR2_START;					//Start
 8001894:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <WriteMem+0xac>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4a15      	ldr	r2, [pc, #84]	; (80018f0 <WriteMem+0xac>)
 800189a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800189e:	6053      	str	r3, [r2, #4]

	while((I2C1->ISR & I2C_ISR_TXIS)==0);
 80018a0:	bf00      	nop
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <WriteMem+0xac>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f9      	beq.n	80018a2 <WriteMem+0x5e>
	I2C1->TXDR = 0x40;
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <WriteMem+0xac>)
 80018b0:	2240      	movs	r2, #64	; 0x40
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28

	for ( int cnt = 0; cnt < Size; cnt++)
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	e00f      	b.n	80018da <WriteMem+0x96>
	{
		while((I2C1->ISR & I2C_ISR_TXIS)==0);
 80018ba:	bf00      	nop
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <WriteMem+0xac>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f9      	beq.n	80018bc <WriteMem+0x78>
		I2C1->TXDR = pData[cnt];
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	4413      	add	r3, r2
 80018ce:	781a      	ldrb	r2, [r3, #0]
 80018d0:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <WriteMem+0xac>)
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28
	for ( int cnt = 0; cnt < Size; cnt++)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	3301      	adds	r3, #1
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	429a      	cmp	r2, r3
 80018e0:	dbeb      	blt.n	80018ba <WriteMem+0x76>


	}

}
 80018e2:	bf00      	nop
 80018e4:	bf00      	nop
 80018e6:	371c      	adds	r7, #28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40005400 	.word	0x40005400

080018f4 <WriteCommand>:

void WriteCommand(uint16_t DevAddress, uint8_t command)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	460a      	mov	r2, r1
 80018fe:	80fb      	strh	r3, [r7, #6]
 8001900:	4613      	mov	r3, r2
 8001902:	717b      	strb	r3, [r7, #5]
	I2C1->CR2 |= (DevAddress<<1);			//Slave Adress for I2C Display
 8001904:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <WriteCommand+0x84>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	88fa      	ldrh	r2, [r7, #6]
 800190a:	0052      	lsls	r2, r2, #1
 800190c:	4611      	mov	r1, r2
 800190e:	4a1a      	ldr	r2, [pc, #104]	; (8001978 <WriteCommand+0x84>)
 8001910:	430b      	orrs	r3, r1
 8001912:	6053      	str	r3, [r2, #4]
	I2C1->CR2 &= ~(0xFF<<16);					//clear NBYTES
 8001914:	4b18      	ldr	r3, [pc, #96]	; (8001978 <WriteCommand+0x84>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	4a17      	ldr	r2, [pc, #92]	; (8001978 <WriteCommand+0x84>)
 800191a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800191e:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= (2<<16);						//max 255 Bytes of Data
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <WriteCommand+0x84>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <WriteCommand+0x84>)
 8001926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192a:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= I2C_CR2_AUTOEND;				//Stop condition automatically after transfer
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <WriteCommand+0x84>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	4a11      	ldr	r2, [pc, #68]	; (8001978 <WriteCommand+0x84>)
 8001932:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001936:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= I2C_CR2_START;					//Start
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <WriteCommand+0x84>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <WriteCommand+0x84>)
 800193e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001942:	6053      	str	r3, [r2, #4]

	while((I2C1->ISR & I2C_ISR_TXIS)==0);
 8001944:	bf00      	nop
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <WriteCommand+0x84>)
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f9      	beq.n	8001946 <WriteCommand+0x52>
	I2C1->TXDR = 0x00;
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <WriteCommand+0x84>)
 8001954:	2200      	movs	r2, #0
 8001956:	629a      	str	r2, [r3, #40]	; 0x28
	while((I2C1->ISR & I2C_ISR_TXIS)==0);
 8001958:	bf00      	nop
 800195a:	4b07      	ldr	r3, [pc, #28]	; (8001978 <WriteCommand+0x84>)
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f9      	beq.n	800195a <WriteCommand+0x66>
	I2C1->TXDR = command;
 8001966:	4a04      	ldr	r2, [pc, #16]	; (8001978 <WriteCommand+0x84>)
 8001968:	797b      	ldrb	r3, [r7, #5]
 800196a:	6293      	str	r3, [r2, #40]	; 0x28

}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	40005400 	.word	0x40005400

0800197c <ssd1306_UpdateScreen>:
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
	}
}

void ssd1306_UpdateScreen(void) 
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 8001982:	2300      	movs	r3, #0
 8001984:	71fb      	strb	r3, [r7, #7]
 8001986:	e01a      	b.n	80019be <ssd1306_UpdateScreen+0x42>
		WriteCommand(SSD1306_I2C_ADDR,0xB0 + i);
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	3b50      	subs	r3, #80	; 0x50
 800198c:	b2db      	uxtb	r3, r3
 800198e:	4619      	mov	r1, r3
 8001990:	203c      	movs	r0, #60	; 0x3c
 8001992:	f7ff ffaf 	bl	80018f4 <WriteCommand>
		WriteCommand(SSD1306_I2C_ADDR,0x00);
 8001996:	2100      	movs	r1, #0
 8001998:	203c      	movs	r0, #60	; 0x3c
 800199a:	f7ff ffab 	bl	80018f4 <WriteCommand>
		WriteCommand(SSD1306_I2C_ADDR,0x10);
 800199e:	2110      	movs	r1, #16
 80019a0:	203c      	movs	r0, #60	; 0x3c
 80019a2:	f7ff ffa7 	bl	80018f4 <WriteCommand>

		WriteMem(SSD1306_I2C_ADDR , 0x40, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	01db      	lsls	r3, r3, #7
 80019aa:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <ssd1306_UpdateScreen+0x54>)
 80019ac:	441a      	add	r2, r3
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	2140      	movs	r1, #64	; 0x40
 80019b2:	203c      	movs	r0, #60	; 0x3c
 80019b4:	f7ff ff46 	bl	8001844 <WriteMem>
	for (i = 0; i < 8; i++) {
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	3301      	adds	r3, #1
 80019bc:	71fb      	strb	r3, [r7, #7]
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	2b07      	cmp	r3, #7
 80019c2:	d9e1      	bls.n	8001988 <ssd1306_UpdateScreen+0xc>
	}
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000370 	.word	0x20000370

080019d4 <ssd1306_DrawPixel>:
    	WriteMem(SSD1306_I2C_ADDR , 0x40, &beuth[SSD1306_WIDTH * i], SSD1306_WIDTH);
	}
}

void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
 80019de:	460b      	mov	r3, r1
 80019e0:	71bb      	strb	r3, [r7, #6]
 80019e2:	4613      	mov	r3, r2
 80019e4:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db48      	blt.n	8001a80 <ssd1306_DrawPixel+0xac>
 80019ee:	79bb      	ldrb	r3, [r7, #6]
 80019f0:	2b3f      	cmp	r3, #63	; 0x3f
 80019f2:	d845      	bhi.n	8001a80 <ssd1306_DrawPixel+0xac>
	{
		return;
	}
	
	if (SSD1306.Inverted) 
 80019f4:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <ssd1306_DrawPixel+0xb8>)
 80019f6:	791b      	ldrb	r3, [r3, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d006      	beq.n	8001a0a <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 80019fc:	797b      	ldrb	r3, [r7, #5]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	bf0c      	ite	eq
 8001a02:	2301      	moveq	r3, #1
 8001a04:	2300      	movne	r3, #0
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	717b      	strb	r3, [r7, #5]
	}
	
	if (color == White)
 8001a0a:	797b      	ldrb	r3, [r7, #5]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d11a      	bne.n	8001a46 <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a10:	79fa      	ldrb	r2, [r7, #7]
 8001a12:	79bb      	ldrb	r3, [r7, #6]
 8001a14:	08db      	lsrs	r3, r3, #3
 8001a16:	b2d8      	uxtb	r0, r3
 8001a18:	4603      	mov	r3, r0
 8001a1a:	01db      	lsls	r3, r3, #7
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a1c      	ldr	r2, [pc, #112]	; (8001a90 <ssd1306_DrawPixel+0xbc>)
 8001a20:	5cd3      	ldrb	r3, [r2, r3]
 8001a22:	b25a      	sxtb	r2, r3
 8001a24:	79bb      	ldrb	r3, [r7, #6]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	b25b      	sxtb	r3, r3
 8001a32:	4313      	orrs	r3, r2
 8001a34:	b259      	sxtb	r1, r3
 8001a36:	79fa      	ldrb	r2, [r7, #7]
 8001a38:	4603      	mov	r3, r0
 8001a3a:	01db      	lsls	r3, r3, #7
 8001a3c:	4413      	add	r3, r2
 8001a3e:	b2c9      	uxtb	r1, r1
 8001a40:	4a13      	ldr	r2, [pc, #76]	; (8001a90 <ssd1306_DrawPixel+0xbc>)
 8001a42:	54d1      	strb	r1, [r2, r3]
 8001a44:	e01d      	b.n	8001a82 <ssd1306_DrawPixel+0xae>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a46:	79fa      	ldrb	r2, [r7, #7]
 8001a48:	79bb      	ldrb	r3, [r7, #6]
 8001a4a:	08db      	lsrs	r3, r3, #3
 8001a4c:	b2d8      	uxtb	r0, r3
 8001a4e:	4603      	mov	r3, r0
 8001a50:	01db      	lsls	r3, r3, #7
 8001a52:	4413      	add	r3, r2
 8001a54:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <ssd1306_DrawPixel+0xbc>)
 8001a56:	5cd3      	ldrb	r3, [r2, r3]
 8001a58:	b25a      	sxtb	r2, r3
 8001a5a:	79bb      	ldrb	r3, [r7, #6]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	2101      	movs	r1, #1
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	b25b      	sxtb	r3, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	b25b      	sxtb	r3, r3
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	b259      	sxtb	r1, r3
 8001a70:	79fa      	ldrb	r2, [r7, #7]
 8001a72:	4603      	mov	r3, r0
 8001a74:	01db      	lsls	r3, r3, #7
 8001a76:	4413      	add	r3, r2
 8001a78:	b2c9      	uxtb	r1, r1
 8001a7a:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <ssd1306_DrawPixel+0xbc>)
 8001a7c:	54d1      	strb	r1, [r2, r3]
 8001a7e:	e000      	b.n	8001a82 <ssd1306_DrawPixel+0xae>
		return;
 8001a80:	bf00      	nop
	}
}
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	20000770 	.word	0x20000770
 8001a90:	20000370 	.word	0x20000370

08001a94 <ssd1306_WriteChar>:

char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b089      	sub	sp, #36	; 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	1d38      	adds	r0, r7, #4
 8001a9e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4623      	mov	r3, r4
 8001aa6:	73fb      	strb	r3, [r7, #15]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001aac:	4b38      	ldr	r3, [pc, #224]	; (8001b90 <ssd1306_WriteChar+0xfc>)
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	793b      	ldrb	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ab8:	dc06      	bgt.n	8001ac8 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001aba:	4b35      	ldr	r3, [pc, #212]	; (8001b90 <ssd1306_WriteChar+0xfc>)
 8001abc:	885b      	ldrh	r3, [r3, #2]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	797b      	ldrb	r3, [r7, #5]
 8001ac2:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001ac4:	2b3f      	cmp	r3, #63	; 0x3f
 8001ac6:	dd01      	ble.n	8001acc <ssd1306_WriteChar+0x38>
	{
		return 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e05d      	b.n	8001b88 <ssd1306_WriteChar+0xf4>
	}
	
	for (i = 0; i < Font.FontHeight; i++)
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
 8001ad0:	e04c      	b.n	8001b6c <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	3b20      	subs	r3, #32
 8001ad8:	7979      	ldrb	r1, [r7, #5]
 8001ada:	fb01 f303 	mul.w	r3, r1, r3
 8001ade:	4619      	mov	r1, r3
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	440b      	add	r3, r1
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8001aec:	2300      	movs	r3, #0
 8001aee:	61bb      	str	r3, [r7, #24]
 8001af0:	e034      	b.n	8001b5c <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d012      	beq.n	8001b28 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001b02:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <ssd1306_WriteChar+0xfc>)
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b2d8      	uxtb	r0, r3
 8001b10:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <ssd1306_WriteChar+0xfc>)
 8001b12:	885b      	ldrh	r3, [r3, #2]
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	7bba      	ldrb	r2, [r7, #14]
 8001b20:	4619      	mov	r1, r3
 8001b22:	f7ff ff57 	bl	80019d4 <ssd1306_DrawPixel>
 8001b26:	e016      	b.n	8001b56 <ssd1306_WriteChar+0xc2>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001b28:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <ssd1306_WriteChar+0xfc>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	b2d8      	uxtb	r0, r3
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <ssd1306_WriteChar+0xfc>)
 8001b38:	885b      	ldrh	r3, [r3, #2]
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	b2d9      	uxtb	r1, r3
 8001b44:	7bbb      	ldrb	r3, [r7, #14]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	bf0c      	ite	eq
 8001b4a:	2301      	moveq	r3, #1
 8001b4c:	2300      	movne	r3, #0
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	461a      	mov	r2, r3
 8001b52:	f7ff ff3f 	bl	80019d4 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	61bb      	str	r3, [r7, #24]
 8001b5c:	793b      	ldrb	r3, [r7, #4]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d3c5      	bcc.n	8001af2 <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	797b      	ldrb	r3, [r7, #5]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d3ad      	bcc.n	8001ad2 <ssd1306_WriteChar+0x3e>
			}
		}
	}
	
	SSD1306.CurrentX += Font.FontWidth;
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <ssd1306_WriteChar+0xfc>)
 8001b78:	881a      	ldrh	r2, [r3, #0]
 8001b7a:	793b      	ldrb	r3, [r7, #4]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <ssd1306_WriteChar+0xfc>)
 8001b84:	801a      	strh	r2, [r3, #0]
	
	return ch;
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3724      	adds	r7, #36	; 0x24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd90      	pop	{r4, r7, pc}
 8001b90:	20000770 	.word	0x20000770

08001b94 <ssd1306_WriteString>:

char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	1d38      	adds	r0, r7, #4
 8001b9e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001ba2:	70fb      	strb	r3, [r7, #3]
	while (*str) 
 8001ba4:	e012      	b.n	8001bcc <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	7818      	ldrb	r0, [r3, #0]
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	1d3a      	adds	r2, r7, #4
 8001bae:	ca06      	ldmia	r2, {r1, r2}
 8001bb0:	f7ff ff70 	bl	8001a94 <ssd1306_WriteChar>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d002      	beq.n	8001bc6 <ssd1306_WriteString+0x32>
		{
			return *str;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	e008      	b.n	8001bd8 <ssd1306_WriteString+0x44>
		}
		
		str++;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
	while (*str) 
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1e8      	bne.n	8001ba6 <ssd1306_WriteString+0x12>
	}
	
	return *str;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	781b      	ldrb	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <ssd1306_SetCursor>:

void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	460a      	mov	r2, r1
 8001bea:	71fb      	strb	r3, [r7, #7]
 8001bec:	4613      	mov	r3, r2
 8001bee:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <ssd1306_SetCursor+0x2c>)
 8001bf6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001bf8:	79bb      	ldrb	r3, [r7, #6]
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <ssd1306_SetCursor+0x2c>)
 8001bfe:	805a      	strh	r2, [r3, #2]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	20000770 	.word	0x20000770

08001c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_MspInit+0x44>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <HAL_MspInit+0x44>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6193      	str	r3, [r2, #24]
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <HAL_MspInit+0x44>)
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_MspInit+0x44>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <HAL_MspInit+0x44>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	61d3      	str	r3, [r2, #28]
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_MspInit+0x44>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c46:	2007      	movs	r0, #7
 8001c48:	f001 fff2 	bl	8003c30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000

08001c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <NMI_Handler+0x4>

08001c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <HardFault_Handler+0x4>

08001c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <MemManage_Handler+0x4>

08001c6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6e:	e7fe      	b.n	8001c6e <BusFault_Handler+0x4>

08001c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <UsageFault_Handler+0x4>

08001c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca4:	f000 fb4e 	bl	8002344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}

08001cac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <ADC1_2_IRQHandler+0x10>)
 8001cb2:	f000 ff2f 	bl	8002b14 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000200 	.word	0x20000200

08001cc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <TIM2_IRQHandler+0x10>)
 8001cc6:	f004 fb39 	bl	800633c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	2000077c 	.word	0x2000077c

08001cd4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <I2C1_EV_IRQHandler+0x10>)
 8001cda:	f002 fa1c 	bl	8004116 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200002d8 	.word	0x200002d8

08001ce8 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <ADC3_IRQHandler+0x10>)
 8001cee:	f000 ff11 	bl	8002b14 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000026c 	.word	0x2000026c

08001cfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return 1;
 8001d00:	2301      	movs	r3, #1
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <_kill>:

int _kill(int pid, int sig)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d16:	f006 f91b 	bl	8007f50 <__errno>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2216      	movs	r2, #22
 8001d1e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <_exit>:

void _exit (int status)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ffe7 	bl	8001d0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d3e:	e7fe      	b.n	8001d3e <_exit+0x12>

08001d40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	e00a      	b.n	8001d68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d52:	f3af 8000 	nop.w
 8001d56:	4601      	mov	r1, r0
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	60ba      	str	r2, [r7, #8]
 8001d5e:	b2ca      	uxtb	r2, r1
 8001d60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	3301      	adds	r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	dbf0      	blt.n	8001d52 <_read+0x12>
  }

  return len;
 8001d70:	687b      	ldr	r3, [r7, #4]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e009      	b.n	8001da0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	60ba      	str	r2, [r7, #8]
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	dbf1      	blt.n	8001d8c <_write+0x12>
  }
  return len;
 8001da8:	687b      	ldr	r3, [r7, #4]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <_close>:

int _close(int file)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dda:	605a      	str	r2, [r3, #4]
  return 0;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <_isatty>:

int _isatty(int file)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001df2:	2301      	movs	r3, #1
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e24:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <_sbrk+0x5c>)
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <_sbrk+0x60>)
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <_sbrk+0x64>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d102      	bne.n	8001e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <_sbrk+0x64>)
 8001e3a:	4a12      	ldr	r2, [pc, #72]	; (8001e84 <_sbrk+0x68>)
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <_sbrk+0x64>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d207      	bcs.n	8001e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e4c:	f006 f880 	bl	8007f50 <__errno>
 8001e50:	4603      	mov	r3, r0
 8001e52:	220c      	movs	r2, #12
 8001e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5a:	e009      	b.n	8001e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <_sbrk+0x64>)
 8001e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20010000 	.word	0x20010000
 8001e7c:	00000400 	.word	0x00000400
 8001e80:	20000778 	.word	0x20000778
 8001e84:	20000c80 	.word	0x20000c80

08001e88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <SystemInit+0x20>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e92:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <SystemInit+0x20>)
 8001e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eb2:	f107 0310 	add.w	r3, r7, #16
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eca:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001ecc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ed0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60-1;
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001ed4:	223b      	movs	r2, #59	; 0x3b
 8001ed6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001ee0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001ee4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee6:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eec:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ef2:	4814      	ldr	r0, [pc, #80]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001ef4:	f003 ffde 	bl	8005eb4 <HAL_TIM_Base_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001efe:	f7ff fc43 	bl	8001788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	480d      	ldr	r0, [pc, #52]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001f10:	f004 fc6a 	bl	80067e8 <HAL_TIM_ConfigClockSource>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001f1a:	f7ff fc35 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4806      	ldr	r0, [pc, #24]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001f2c:	f005 fa5e 	bl	80073ec <HAL_TIMEx_MasterConfigSynchronization>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f36:	f7ff fc27 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f3a:	bf00      	nop
 8001f3c:	3720      	adds	r7, #32
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	2000077c 	.word	0x2000077c

08001f48 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	; 0x28
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f4e:	f107 031c 	add.w	r3, r7, #28
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f5a:	463b      	mov	r3, r7
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
 8001f68:	615a      	str	r2, [r3, #20]
 8001f6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f6c:	4b21      	ldr	r3, [pc, #132]	; (8001ff4 <MX_TIM4_Init+0xac>)
 8001f6e:	4a22      	ldr	r2, [pc, #136]	; (8001ff8 <MX_TIM4_Init+0xb0>)
 8001f70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60-1;
 8001f72:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <MX_TIM4_Init+0xac>)
 8001f74:	223b      	movs	r2, #59	; 0x3b
 8001f76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f78:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <MX_TIM4_Init+0xac>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 140-1;
 8001f7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <MX_TIM4_Init+0xac>)
 8001f80:	228b      	movs	r2, #139	; 0x8b
 8001f82:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f84:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <MX_TIM4_Init+0xac>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <MX_TIM4_Init+0xac>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f90:	4818      	ldr	r0, [pc, #96]	; (8001ff4 <MX_TIM4_Init+0xac>)
 8001f92:	f004 f863 	bl	800605c <HAL_TIM_PWM_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001f9c:	f7ff fbf4 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fa8:	f107 031c 	add.w	r3, r7, #28
 8001fac:	4619      	mov	r1, r3
 8001fae:	4811      	ldr	r0, [pc, #68]	; (8001ff4 <MX_TIM4_Init+0xac>)
 8001fb0:	f005 fa1c 	bl	80073ec <HAL_TIMEx_MasterConfigSynchronization>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001fba:	f7ff fbe5 	bl	8001788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fbe:	2360      	movs	r3, #96	; 0x60
 8001fc0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fce:	463b      	mov	r3, r7
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4807      	ldr	r0, [pc, #28]	; (8001ff4 <MX_TIM4_Init+0xac>)
 8001fd6:	f004 faf3 	bl	80065c0 <HAL_TIM_PWM_ConfigChannel>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001fe0:	f7ff fbd2 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001fe4:	4803      	ldr	r0, [pc, #12]	; (8001ff4 <MX_TIM4_Init+0xac>)
 8001fe6:	f000 f84d 	bl	8002084 <HAL_TIM_MspPostInit>

}
 8001fea:	bf00      	nop
 8001fec:	3728      	adds	r7, #40	; 0x28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000838 	.word	0x20000838
 8001ff8:	40000800 	.word	0x40000800

08001ffc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800200c:	d113      	bne.n	8002036 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <HAL_TIM_Base_MspInit+0x44>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	4a0b      	ldr	r2, [pc, #44]	; (8002040 <HAL_TIM_Base_MspInit+0x44>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	61d3      	str	r3, [r2, #28]
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <HAL_TIM_Base_MspInit+0x44>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	201c      	movs	r0, #28
 800202c:	f001 fe0b 	bl	8003c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002030:	201c      	movs	r0, #28
 8002032:	f001 fe24 	bl	8003c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002036:	bf00      	nop
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000

08002044 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0a      	ldr	r2, [pc, #40]	; (800207c <HAL_TIM_PWM_MspInit+0x38>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d10b      	bne.n	800206e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_TIM_PWM_MspInit+0x3c>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	4a09      	ldr	r2, [pc, #36]	; (8002080 <HAL_TIM_PWM_MspInit+0x3c>)
 800205c:	f043 0304 	orr.w	r3, r3, #4
 8002060:	61d3      	str	r3, [r2, #28]
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <HAL_TIM_PWM_MspInit+0x3c>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40000800 	.word	0x40000800
 8002080:	40021000 	.word	0x40021000

08002084 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a11      	ldr	r2, [pc, #68]	; (80020e8 <HAL_TIM_MspPostInit+0x64>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d11b      	bne.n	80020de <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <HAL_TIM_MspPostInit+0x68>)
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	4a10      	ldr	r2, [pc, #64]	; (80020ec <HAL_TIM_MspPostInit+0x68>)
 80020ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b0:	6153      	str	r3, [r2, #20]
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <HAL_TIM_MspPostInit+0x68>)
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020be:	2340      	movs	r3, #64	; 0x40
 80020c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020ce:	2302      	movs	r3, #2
 80020d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	4619      	mov	r1, r3
 80020d8:	4805      	ldr	r0, [pc, #20]	; (80020f0 <HAL_TIM_MspPostInit+0x6c>)
 80020da:	f001 fdeb 	bl	8003cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80020de:	bf00      	nop
 80020e0:	3720      	adds	r7, #32
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40000800 	.word	0x40000800
 80020ec:	40021000 	.word	0x40021000
 80020f0:	48000400 	.word	0x48000400

080020f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <MX_USART2_UART_Init+0x58>)
 80020fa:	4a15      	ldr	r2, [pc, #84]	; (8002150 <MX_USART2_UART_Init+0x5c>)
 80020fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80020fe:	4b13      	ldr	r3, [pc, #76]	; (800214c <MX_USART2_UART_Init+0x58>)
 8002100:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002104:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <MX_USART2_UART_Init+0x58>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <MX_USART2_UART_Init+0x58>)
 800210e:	2200      	movs	r2, #0
 8002110:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <MX_USART2_UART_Init+0x58>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <MX_USART2_UART_Init+0x58>)
 800211a:	220c      	movs	r2, #12
 800211c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <MX_USART2_UART_Init+0x58>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <MX_USART2_UART_Init+0x58>)
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <MX_USART2_UART_Init+0x58>)
 800212c:	2200      	movs	r2, #0
 800212e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <MX_USART2_UART_Init+0x58>)
 8002132:	2200      	movs	r2, #0
 8002134:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002136:	4805      	ldr	r0, [pc, #20]	; (800214c <MX_USART2_UART_Init+0x58>)
 8002138:	f005 fa0c 	bl	8007554 <HAL_UART_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002142:	f7ff fb21 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200008f4 	.word	0x200008f4
 8002150:	40004400 	.word	0x40004400

08002154 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	; 0x28
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a17      	ldr	r2, [pc, #92]	; (80021d0 <HAL_UART_MspInit+0x7c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d128      	bne.n	80021c8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002176:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <HAL_UART_MspInit+0x80>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	4a16      	ldr	r2, [pc, #88]	; (80021d4 <HAL_UART_MspInit+0x80>)
 800217c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002180:	61d3      	str	r3, [r2, #28]
 8002182:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <HAL_UART_MspInit+0x80>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_UART_MspInit+0x80>)
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	4a10      	ldr	r2, [pc, #64]	; (80021d4 <HAL_UART_MspInit+0x80>)
 8002194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002198:	6153      	str	r3, [r2, #20]
 800219a:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <HAL_UART_MspInit+0x80>)
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021a6:	230c      	movs	r3, #12
 80021a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b2:	2300      	movs	r3, #0
 80021b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021b6:	2307      	movs	r3, #7
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4619      	mov	r1, r3
 80021c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c4:	f001 fd76 	bl	8003cb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021c8:	bf00      	nop
 80021ca:	3728      	adds	r7, #40	; 0x28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40004400 	.word	0x40004400
 80021d4:	40021000 	.word	0x40021000

080021d8 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <MX_USB_PCD_Init+0x44>)
 80021de:	4a10      	ldr	r2, [pc, #64]	; (8002220 <MX_USB_PCD_Init+0x48>)
 80021e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <MX_USB_PCD_Init+0x44>)
 80021e4:	2208      	movs	r2, #8
 80021e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <MX_USB_PCD_Init+0x44>)
 80021ea:	2202      	movs	r2, #2
 80021ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <MX_USB_PCD_Init+0x44>)
 80021f0:	2202      	movs	r2, #2
 80021f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <MX_USB_PCD_Init+0x44>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <MX_USB_PCD_Init+0x44>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <MX_USB_PCD_Init+0x44>)
 8002202:	2200      	movs	r2, #0
 8002204:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002206:	4805      	ldr	r0, [pc, #20]	; (800221c <MX_USB_PCD_Init+0x44>)
 8002208:	f002 f8da 	bl	80043c0 <HAL_PCD_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8002212:	f7ff fab9 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	2000097c 	.word	0x2000097c
 8002220:	40005c00 	.word	0x40005c00

08002224 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0a      	ldr	r2, [pc, #40]	; (800225c <HAL_PCD_MspInit+0x38>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d10b      	bne.n	800224e <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002236:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_PCD_MspInit+0x3c>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	4a09      	ldr	r2, [pc, #36]	; (8002260 <HAL_PCD_MspInit+0x3c>)
 800223c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002240:	61d3      	str	r3, [r2, #28]
 8002242:	4b07      	ldr	r3, [pc, #28]	; (8002260 <HAL_PCD_MspInit+0x3c>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40005c00 	.word	0x40005c00
 8002260:	40021000 	.word	0x40021000

08002264 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800229c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002268:	f7ff fe0e 	bl	8001e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800226c:	480c      	ldr	r0, [pc, #48]	; (80022a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800226e:	490d      	ldr	r1, [pc, #52]	; (80022a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002270:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <LoopForever+0xe>)
  movs r3, #0
 8002272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002274:	e002      	b.n	800227c <LoopCopyDataInit>

08002276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800227a:	3304      	adds	r3, #4

0800227c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800227c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800227e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002280:	d3f9      	bcc.n	8002276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002282:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002284:	4c0a      	ldr	r4, [pc, #40]	; (80022b0 <LoopForever+0x16>)
  movs r3, #0
 8002286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002288:	e001      	b.n	800228e <LoopFillZerobss>

0800228a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800228a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800228c:	3204      	adds	r2, #4

0800228e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800228e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002290:	d3fb      	bcc.n	800228a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002292:	f005 fe63 	bl	8007f5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002296:	f7ff f995 	bl	80015c4 <main>

0800229a <LoopForever>:

LoopForever:
    b LoopForever
 800229a:	e7fe      	b.n	800229a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800229c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80022a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80022a8:	0800bf34 	.word	0x0800bf34
  ldr r2, =_sbss
 80022ac:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80022b0:	20000c7c 	.word	0x20000c7c

080022b4 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022b4:	e7fe      	b.n	80022b4 <ADC4_IRQHandler>
	...

080022b8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <HAL_Init+0x28>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a07      	ldr	r2, [pc, #28]	; (80022e0 <HAL_Init+0x28>)
 80022c2:	f043 0310 	orr.w	r3, r3, #16
 80022c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c8:	2003      	movs	r0, #3
 80022ca:	f001 fcb1 	bl	8003c30 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ce:	2000      	movs	r0, #0
 80022d0:	f000 f808 	bl	80022e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022d4:	f7ff fc9c 	bl	8001c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40022000 	.word	0x40022000

080022e4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_InitTick+0x54>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_InitTick+0x58>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	4619      	mov	r1, r3
 80022f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80022fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002302:	4618      	mov	r0, r3
 8002304:	f001 fcc9 	bl	8003c9a <HAL_SYSTICK_Config>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e00e      	b.n	8002330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b0f      	cmp	r3, #15
 8002316:	d80a      	bhi.n	800232e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002318:	2200      	movs	r2, #0
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f001 fc91 	bl	8003c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002324:	4a06      	ldr	r2, [pc, #24]	; (8002340 <HAL_InitTick+0x5c>)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	e000      	b.n	8002330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000008 	.word	0x20000008
 800233c:	20000010 	.word	0x20000010
 8002340:	2000000c 	.word	0x2000000c

08002344 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x20>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_IncTick+0x24>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4413      	add	r3, r2
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <HAL_IncTick+0x24>)
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	20000010 	.word	0x20000010
 8002368:	20000c68 	.word	0x20000c68

0800236c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <HAL_GetTick+0x14>)
 8002372:	681b      	ldr	r3, [r3, #0]
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	20000c68 	.word	0x20000c68

08002384 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800238c:	f7ff ffee 	bl	800236c <HAL_GetTick>
 8002390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239c:	d005      	beq.n	80023aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_Delay+0x44>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80023aa:	bf00      	nop
 80023ac:	f7ff ffde 	bl	800236c <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d8f7      	bhi.n	80023ac <HAL_Delay+0x28>
  {
  }
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000010 	.word	0x20000010

080023cc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_ADC_GetState>:
  *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
  * @param  hadc ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Return ADC state */
  return hadc->State;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b0a2      	sub	sp, #136	; 0x88
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __IO uint32_t wait_loop_index = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e210      	b.n	8002864 <HAL_ADC_Init+0x444>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	2b00      	cmp	r3, #0
 8002452:	f040 808e 	bne.w	8002572 <HAL_ADC_Init+0x152>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d169      	bne.n	8002532 <HAL_ADC_Init+0x112>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a92      	ldr	r2, [pc, #584]	; (80026c4 <HAL_ADC_Init+0x2a4>)
 800247c:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a91      	ldr	r2, [pc, #580]	; (80026c8 <HAL_ADC_Init+0x2a8>)
 8002482:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a91      	ldr	r2, [pc, #580]	; (80026cc <HAL_ADC_Init+0x2ac>)
 8002488:	659a      	str	r2, [r3, #88]	; 0x58
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a90      	ldr	r2, [pc, #576]	; (80026d0 <HAL_ADC_Init+0x2b0>)
 800248e:	65da      	str	r2, [r3, #92]	; 0x5c
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a90      	ldr	r2, [pc, #576]	; (80026d4 <HAL_ADC_Init+0x2b4>)
 8002494:	661a      	str	r2, [r3, #96]	; 0x60
    
    if (hadc->MspInitCallback == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800249a:	2b00      	cmp	r3, #0
 800249c:	d102      	bne.n	80024a4 <HAL_ADC_Init+0x84>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a8d      	ldr	r2, [pc, #564]	; (80026d8 <HAL_ADC_Init+0x2b8>)
 80024a2:	665a      	str	r2, [r3, #100]	; 0x64
    }
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d13b      	bne.n	8002532 <HAL_ADC_Init+0x112>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f001 fa82 	bl	80039c4 <ADC_Disable>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d12f      	bne.n	8002532 <HAL_ADC_Init+0x112>
 80024d2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d12b      	bne.n	8002532 <HAL_ADC_Init+0x112>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024e2:	f023 0302 	bic.w	r3, r3, #2
 80024e6:	f043 0202 	orr.w	r2, r3, #2
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024fc:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800250c:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800250e:	4b73      	ldr	r3, [pc, #460]	; (80026dc <HAL_ADC_Init+0x2bc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a73      	ldr	r2, [pc, #460]	; (80026e0 <HAL_ADC_Init+0x2c0>)
 8002514:	fba2 2303 	umull	r2, r3, r2, r3
 8002518:	0c9a      	lsrs	r2, r3, #18
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8002524:	e002      	b.n	800252c <HAL_ADC_Init+0x10c>
          {
            wait_loop_index--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	3b01      	subs	r3, #1
 800252a:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f9      	bne.n	8002526 <HAL_ADC_Init+0x106>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <HAL_ADC_Init+0x130>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800254a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800254e:	d110      	bne.n	8002572 <HAL_ADC_Init+0x152>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	f023 0312 	bic.w	r3, r3, #18
 8002558:	f043 0210 	orr.w	r2, r3, #16
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002564:	f043 0201 	orr.w	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	2b00      	cmp	r3, #0
 800257c:	f040 8165 	bne.w	800284a <HAL_ADC_Init+0x42a>
 8002580:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002584:	2b00      	cmp	r3, #0
 8002586:	f040 8160 	bne.w	800284a <HAL_ADC_Init+0x42a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002594:	2b00      	cmp	r3, #0
 8002596:	f040 8158 	bne.w	800284a <HAL_ADC_Init+0x42a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025a2:	f043 0202 	orr.w	r2, r3, #2
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025b2:	d004      	beq.n	80025be <HAL_ADC_Init+0x19e>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a4a      	ldr	r2, [pc, #296]	; (80026e4 <HAL_ADC_Init+0x2c4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d101      	bne.n	80025c2 <HAL_ADC_Init+0x1a2>
 80025be:	4b4a      	ldr	r3, [pc, #296]	; (80026e8 <HAL_ADC_Init+0x2c8>)
 80025c0:	e000      	b.n	80025c4 <HAL_ADC_Init+0x1a4>
 80025c2:	4b4a      	ldr	r3, [pc, #296]	; (80026ec <HAL_ADC_Init+0x2cc>)
 80025c4:	67fb      	str	r3, [r7, #124]	; 0x7c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025ce:	d102      	bne.n	80025d6 <HAL_ADC_Init+0x1b6>
 80025d0:	4b44      	ldr	r3, [pc, #272]	; (80026e4 <HAL_ADC_Init+0x2c4>)
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	e01a      	b.n	800260c <HAL_ADC_Init+0x1ec>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a42      	ldr	r2, [pc, #264]	; (80026e4 <HAL_ADC_Init+0x2c4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d103      	bne.n	80025e8 <HAL_ADC_Init+0x1c8>
 80025e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	e011      	b.n	800260c <HAL_ADC_Init+0x1ec>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a40      	ldr	r2, [pc, #256]	; (80026f0 <HAL_ADC_Init+0x2d0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d102      	bne.n	80025f8 <HAL_ADC_Init+0x1d8>
 80025f2:	4b40      	ldr	r3, [pc, #256]	; (80026f4 <HAL_ADC_Init+0x2d4>)
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	e009      	b.n	800260c <HAL_ADC_Init+0x1ec>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a3d      	ldr	r2, [pc, #244]	; (80026f4 <HAL_ADC_Init+0x2d4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d102      	bne.n	8002608 <HAL_ADC_Init+0x1e8>
 8002602:	4b3b      	ldr	r3, [pc, #236]	; (80026f0 <HAL_ADC_Init+0x2d0>)
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	e001      	b.n	800260c <HAL_ADC_Init+0x1ec>
 8002608:	2300      	movs	r3, #0
 800260a:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d108      	bne.n	800262c <HAL_ADC_Init+0x20c>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_ADC_Init+0x20c>
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <HAL_ADC_Init+0x20e>
 800262c:	2300      	movs	r3, #0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d11c      	bne.n	800266c <HAL_ADC_Init+0x24c>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002632:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002634:	2b00      	cmp	r3, #0
 8002636:	d010      	beq.n	800265a <HAL_ADC_Init+0x23a>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	2b01      	cmp	r3, #1
 8002642:	d107      	bne.n	8002654 <HAL_ADC_Init+0x234>
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_ADC_Init+0x234>
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <HAL_ADC_Init+0x236>
 8002654:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002656:	2b00      	cmp	r3, #0
 8002658:	d108      	bne.n	800266c <HAL_ADC_Init+0x24c>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800265a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	431a      	orrs	r2, r3
 8002668:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800266a:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	7e5b      	ldrb	r3, [r3, #25]
 8002670:	035b      	lsls	r3, r3, #13
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002676:	2a01      	cmp	r2, #1
 8002678:	d002      	beq.n	8002680 <HAL_ADC_Init+0x260>
 800267a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800267e:	e000      	b.n	8002682 <HAL_ADC_Init+0x262>
 8002680:	2200      	movs	r2, #0
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	4313      	orrs	r3, r2
 8002690:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d137      	bne.n	8002714 <HAL_ADC_Init+0x2f4>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	7e5b      	ldrb	r3, [r3, #25]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d125      	bne.n	80026f8 <HAL_ADC_Init+0x2d8>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	3b01      	subs	r3, #1
 80026b2:	045a      	lsls	r2, r3, #17
 80026b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026c2:	e027      	b.n	8002714 <HAL_ADC_Init+0x2f4>
 80026c4:	08001515 	.word	0x08001515
 80026c8:	080023cd 	.word	0x080023cd
 80026cc:	080023e1 	.word	0x080023e1
 80026d0:	080023f5 	.word	0x080023f5
 80026d4:	080030e9 	.word	0x080030e9
 80026d8:	08001201 	.word	0x08001201
 80026dc:	20000008 	.word	0x20000008
 80026e0:	431bde83 	.word	0x431bde83
 80026e4:	50000100 	.word	0x50000100
 80026e8:	50000300 	.word	0x50000300
 80026ec:	50000700 	.word	0x50000700
 80026f0:	50000400 	.word	0x50000400
 80026f4:	50000500 	.word	0x50000500
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002700:	f043 0220 	orr.w	r2, r3, #32
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270c:	f043 0201 	orr.w	r2, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	2b01      	cmp	r3, #1
 800271a:	d048      	beq.n	80027ae <HAL_ADC_Init+0x38e>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a52      	ldr	r2, [pc, #328]	; (800286c <HAL_ADC_Init+0x44c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d004      	beq.n	8002730 <HAL_ADC_Init+0x310>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a51      	ldr	r2, [pc, #324]	; (8002870 <HAL_ADC_Init+0x450>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d132      	bne.n	8002796 <HAL_ADC_Init+0x376>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002738:	d02a      	beq.n	8002790 <HAL_ADC_Init+0x370>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002742:	d022      	beq.n	800278a <HAL_ADC_Init+0x36a>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800274c:	d01a      	beq.n	8002784 <HAL_ADC_Init+0x364>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002752:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002756:	d012      	beq.n	800277e <HAL_ADC_Init+0x35e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002760:	d00a      	beq.n	8002778 <HAL_ADC_Init+0x358>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 800276a:	d002      	beq.n	8002772 <HAL_ADC_Init+0x352>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002770:	e015      	b.n	800279e <HAL_ADC_Init+0x37e>
 8002772:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002776:	e012      	b.n	800279e <HAL_ADC_Init+0x37e>
 8002778:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800277c:	e00f      	b.n	800279e <HAL_ADC_Init+0x37e>
 800277e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002782:	e00c      	b.n	800279e <HAL_ADC_Init+0x37e>
 8002784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002788:	e009      	b.n	800279e <HAL_ADC_Init+0x37e>
 800278a:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800278e:	e006      	b.n	800279e <HAL_ADC_Init+0x37e>
 8002790:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002794:	e003      	b.n	800279e <HAL_ADC_Init+0x37e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d116      	bne.n	80027ea <HAL_ADC_Init+0x3ca>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ca:	f023 0302 	bic.w	r3, r3, #2
 80027ce:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	7e1b      	ldrb	r3, [r3, #24]
 80027d4:	039a      	lsls	r2, r3, #14
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	4b20      	ldr	r3, [pc, #128]	; (8002874 <HAL_ADC_Init+0x454>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80027fc:	430b      	orrs	r3, r1
 80027fe:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d10c      	bne.n	8002822 <HAL_ADC_Init+0x402>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f023 010f 	bic.w	r1, r3, #15
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	1e5a      	subs	r2, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
 8002820:	e007      	b.n	8002832 <HAL_ADC_Init+0x412>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 020f 	bic.w	r2, r2, #15
 8002830:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	f023 0303 	bic.w	r3, r3, #3
 8002840:	f043 0201 	orr.w	r2, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	641a      	str	r2, [r3, #64]	; 0x40
 8002848:	e00a      	b.n	8002860 <HAL_ADC_Init+0x440>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f023 0312 	bic.w	r3, r3, #18
 8002852:	f043 0210 	orr.w	r2, r3, #16
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800285a:	2301      	movs	r3, #1
 800285c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002860:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8002864:	4618      	mov	r0, r3
 8002866:	3788      	adds	r7, #136	; 0x88
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	50000400 	.word	0x50000400
 8002870:	50000500 	.word	0x50000500
 8002874:	fff0c007 	.word	0xfff0c007

08002878 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b00      	cmp	r3, #0
 8002890:	f040 8123 	bne.w	8002ada <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_ADC_Start_IT+0x2a>
 800289e:	2302      	movs	r3, #2
 80028a0:	e11e      	b.n	8002ae0 <HAL_ADC_Start_IT+0x268>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f001 f826 	bl	80038fc <ADC_Enable>
 80028b0:	4603      	mov	r3, r0
 80028b2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f040 810a 	bne.w	8002ad0 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028c4:	f023 0301 	bic.w	r3, r3, #1
 80028c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028d8:	d004      	beq.n	80028e4 <HAL_ADC_Start_IT+0x6c>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a82      	ldr	r2, [pc, #520]	; (8002ae8 <HAL_ADC_Start_IT+0x270>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d106      	bne.n	80028f2 <HAL_ADC_Start_IT+0x7a>
 80028e4:	4b81      	ldr	r3, [pc, #516]	; (8002aec <HAL_ADC_Start_IT+0x274>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d010      	beq.n	8002912 <HAL_ADC_Start_IT+0x9a>
 80028f0:	e005      	b.n	80028fe <HAL_ADC_Start_IT+0x86>
 80028f2:	4b7f      	ldr	r3, [pc, #508]	; (8002af0 <HAL_ADC_Start_IT+0x278>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 031f 	and.w	r3, r3, #31
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d009      	beq.n	8002912 <HAL_ADC_Start_IT+0x9a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002906:	d004      	beq.n	8002912 <HAL_ADC_Start_IT+0x9a>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a79      	ldr	r2, [pc, #484]	; (8002af4 <HAL_ADC_Start_IT+0x27c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d115      	bne.n	800293e <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d036      	beq.n	800299a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002934:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800293c:	e02d      	b.n	800299a <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002952:	d004      	beq.n	800295e <HAL_ADC_Start_IT+0xe6>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a63      	ldr	r2, [pc, #396]	; (8002ae8 <HAL_ADC_Start_IT+0x270>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d10a      	bne.n	8002974 <HAL_ADC_Start_IT+0xfc>
 800295e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	bf14      	ite	ne
 800296c:	2301      	movne	r3, #1
 800296e:	2300      	moveq	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	e008      	b.n	8002986 <HAL_ADC_Start_IT+0x10e>
 8002974:	4b5f      	ldr	r3, [pc, #380]	; (8002af4 <HAL_ADC_Start_IT+0x27c>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	bf14      	ite	ne
 8002980:	2301      	movne	r3, #1
 8002982:	2300      	moveq	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d007      	beq.n	800299a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002992:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a6:	d106      	bne.n	80029b6 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ac:	f023 0206 	bic.w	r2, r3, #6
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	645a      	str	r2, [r3, #68]	; 0x44
 80029b4:	e002      	b.n	80029bc <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	221c      	movs	r2, #28
 80029ca:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d110      	bne.n	80029f6 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0204 	bic.w	r2, r2, #4
 80029e2:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0208 	orr.w	r2, r2, #8
 80029f2:	605a      	str	r2, [r3, #4]
          break;
 80029f4:	e008      	b.n	8002a08 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 020c 	orr.w	r2, r2, #12
 8002a04:	605a      	str	r2, [r3, #4]
          break;
 8002a06:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d107      	bne.n	8002a20 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0210 	bic.w	r2, r2, #16
 8002a1e:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a28:	d004      	beq.n	8002a34 <HAL_ADC_Start_IT+0x1bc>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a2e      	ldr	r2, [pc, #184]	; (8002ae8 <HAL_ADC_Start_IT+0x270>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d106      	bne.n	8002a42 <HAL_ADC_Start_IT+0x1ca>
 8002a34:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <HAL_ADC_Start_IT+0x274>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d03e      	beq.n	8002abe <HAL_ADC_Start_IT+0x246>
 8002a40:	e005      	b.n	8002a4e <HAL_ADC_Start_IT+0x1d6>
 8002a42:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <HAL_ADC_Start_IT+0x278>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d037      	beq.n	8002abe <HAL_ADC_Start_IT+0x246>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a56:	d004      	beq.n	8002a62 <HAL_ADC_Start_IT+0x1ea>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a22      	ldr	r2, [pc, #136]	; (8002ae8 <HAL_ADC_Start_IT+0x270>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d106      	bne.n	8002a70 <HAL_ADC_Start_IT+0x1f8>
 8002a62:	4b22      	ldr	r3, [pc, #136]	; (8002aec <HAL_ADC_Start_IT+0x274>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	2b05      	cmp	r3, #5
 8002a6c:	d027      	beq.n	8002abe <HAL_ADC_Start_IT+0x246>
 8002a6e:	e005      	b.n	8002a7c <HAL_ADC_Start_IT+0x204>
 8002a70:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <HAL_ADC_Start_IT+0x278>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	2b05      	cmp	r3, #5
 8002a7a:	d020      	beq.n	8002abe <HAL_ADC_Start_IT+0x246>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a84:	d004      	beq.n	8002a90 <HAL_ADC_Start_IT+0x218>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a17      	ldr	r2, [pc, #92]	; (8002ae8 <HAL_ADC_Start_IT+0x270>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d106      	bne.n	8002a9e <HAL_ADC_Start_IT+0x226>
 8002a90:	4b16      	ldr	r3, [pc, #88]	; (8002aec <HAL_ADC_Start_IT+0x274>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	2b09      	cmp	r3, #9
 8002a9a:	d010      	beq.n	8002abe <HAL_ADC_Start_IT+0x246>
 8002a9c:	e005      	b.n	8002aaa <HAL_ADC_Start_IT+0x232>
 8002a9e:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <HAL_ADC_Start_IT+0x278>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	2b09      	cmp	r3, #9
 8002aa8:	d009      	beq.n	8002abe <HAL_ADC_Start_IT+0x246>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ab2:	d004      	beq.n	8002abe <HAL_ADC_Start_IT+0x246>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0e      	ldr	r2, [pc, #56]	; (8002af4 <HAL_ADC_Start_IT+0x27c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d10f      	bne.n	8002ade <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0204 	orr.w	r2, r2, #4
 8002acc:	609a      	str	r2, [r3, #8]
 8002ace:	e006      	b.n	8002ade <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ad8:	e001      	b.n	8002ade <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ada:	2302      	movs	r3, #2
 8002adc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	50000100 	.word	0x50000100
 8002aec:	50000300 	.word	0x50000300
 8002af0:	50000700 	.word	0x50000700
 8002af4:	50000400 	.word	0x50000400

08002af8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d004      	beq.n	8002b4c <HAL_ADC_IRQHandler+0x38>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10b      	bne.n	8002b64 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 80bd 	beq.w	8002cd2 <HAL_ADC_IRQHandler+0x1be>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 80b7 	beq.w	8002cd2 <HAL_ADC_IRQHandler+0x1be>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d105      	bne.n	8002b7c <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b84:	d004      	beq.n	8002b90 <HAL_ADC_IRQHandler+0x7c>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a90      	ldr	r2, [pc, #576]	; (8002dcc <HAL_ADC_IRQHandler+0x2b8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d106      	bne.n	8002b9e <HAL_ADC_IRQHandler+0x8a>
 8002b90:	4b8f      	ldr	r3, [pc, #572]	; (8002dd0 <HAL_ADC_IRQHandler+0x2bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d03e      	beq.n	8002c1a <HAL_ADC_IRQHandler+0x106>
 8002b9c:	e005      	b.n	8002baa <HAL_ADC_IRQHandler+0x96>
 8002b9e:	4b8d      	ldr	r3, [pc, #564]	; (8002dd4 <HAL_ADC_IRQHandler+0x2c0>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d037      	beq.n	8002c1a <HAL_ADC_IRQHandler+0x106>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bb2:	d004      	beq.n	8002bbe <HAL_ADC_IRQHandler+0xaa>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a84      	ldr	r2, [pc, #528]	; (8002dcc <HAL_ADC_IRQHandler+0x2b8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d106      	bne.n	8002bcc <HAL_ADC_IRQHandler+0xb8>
 8002bbe:	4b84      	ldr	r3, [pc, #528]	; (8002dd0 <HAL_ADC_IRQHandler+0x2bc>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 031f 	and.w	r3, r3, #31
 8002bc6:	2b05      	cmp	r3, #5
 8002bc8:	d027      	beq.n	8002c1a <HAL_ADC_IRQHandler+0x106>
 8002bca:	e005      	b.n	8002bd8 <HAL_ADC_IRQHandler+0xc4>
 8002bcc:	4b81      	ldr	r3, [pc, #516]	; (8002dd4 <HAL_ADC_IRQHandler+0x2c0>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	2b05      	cmp	r3, #5
 8002bd6:	d020      	beq.n	8002c1a <HAL_ADC_IRQHandler+0x106>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002be0:	d004      	beq.n	8002bec <HAL_ADC_IRQHandler+0xd8>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a79      	ldr	r2, [pc, #484]	; (8002dcc <HAL_ADC_IRQHandler+0x2b8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d106      	bne.n	8002bfa <HAL_ADC_IRQHandler+0xe6>
 8002bec:	4b78      	ldr	r3, [pc, #480]	; (8002dd0 <HAL_ADC_IRQHandler+0x2bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	2b09      	cmp	r3, #9
 8002bf6:	d010      	beq.n	8002c1a <HAL_ADC_IRQHandler+0x106>
 8002bf8:	e005      	b.n	8002c06 <HAL_ADC_IRQHandler+0xf2>
 8002bfa:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <HAL_ADC_IRQHandler+0x2c0>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	2b09      	cmp	r3, #9
 8002c04:	d009      	beq.n	8002c1a <HAL_ADC_IRQHandler+0x106>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c0e:	d004      	beq.n	8002c1a <HAL_ADC_IRQHandler+0x106>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a70      	ldr	r2, [pc, #448]	; (8002dd8 <HAL_ADC_IRQHandler+0x2c4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d104      	bne.n	8002c24 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	61bb      	str	r3, [r7, #24]
 8002c22:	e00f      	b.n	8002c44 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c2c:	d004      	beq.n	8002c38 <HAL_ADC_IRQHandler+0x124>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a66      	ldr	r2, [pc, #408]	; (8002dcc <HAL_ADC_IRQHandler+0x2b8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d102      	bne.n	8002c3e <HAL_ADC_IRQHandler+0x12a>
 8002c38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c3c:	e000      	b.n	8002c40 <HAL_ADC_IRQHandler+0x12c>
 8002c3e:	4b66      	ldr	r3, [pc, #408]	; (8002dd8 <HAL_ADC_IRQHandler+0x2c4>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d137      	bne.n	8002cc2 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d132      	bne.n	8002cc2 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d02d      	beq.n	8002cc2 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d11a      	bne.n	8002caa <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 020c 	bic.w	r2, r2, #12
 8002c82:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d112      	bne.n	8002cc2 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f043 0201 	orr.w	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ca8:	e00b      	b.n	8002cc2 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f043 0210 	orr.w	r2, r3, #16
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	f043 0201 	orr.w	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Conversion complete callback */
    /* Note: into callback, to determine if conversion has been triggered     */
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	4798      	blx	r3
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	220c      	movs	r2, #12
 8002cd0:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d004      	beq.n	8002ce6 <HAL_ADC_IRQHandler+0x1d2>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10b      	bne.n	8002cfe <HAL_ADC_IRQHandler+0x1ea>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8138 	beq.w	8002f62 <HAL_ADC_IRQHandler+0x44e>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 8132 	beq.w	8002f62 <HAL_ADC_IRQHandler+0x44e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d12:	d004      	beq.n	8002d1e <HAL_ADC_IRQHandler+0x20a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a2c      	ldr	r2, [pc, #176]	; (8002dcc <HAL_ADC_IRQHandler+0x2b8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d106      	bne.n	8002d2c <HAL_ADC_IRQHandler+0x218>
 8002d1e:	4b2c      	ldr	r3, [pc, #176]	; (8002dd0 <HAL_ADC_IRQHandler+0x2bc>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 031f 	and.w	r3, r3, #31
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d03e      	beq.n	8002da8 <HAL_ADC_IRQHandler+0x294>
 8002d2a:	e005      	b.n	8002d38 <HAL_ADC_IRQHandler+0x224>
 8002d2c:	4b29      	ldr	r3, [pc, #164]	; (8002dd4 <HAL_ADC_IRQHandler+0x2c0>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d037      	beq.n	8002da8 <HAL_ADC_IRQHandler+0x294>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d40:	d004      	beq.n	8002d4c <HAL_ADC_IRQHandler+0x238>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a21      	ldr	r2, [pc, #132]	; (8002dcc <HAL_ADC_IRQHandler+0x2b8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d106      	bne.n	8002d5a <HAL_ADC_IRQHandler+0x246>
 8002d4c:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <HAL_ADC_IRQHandler+0x2bc>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d027      	beq.n	8002da8 <HAL_ADC_IRQHandler+0x294>
 8002d58:	e005      	b.n	8002d66 <HAL_ADC_IRQHandler+0x252>
 8002d5a:	4b1e      	ldr	r3, [pc, #120]	; (8002dd4 <HAL_ADC_IRQHandler+0x2c0>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 031f 	and.w	r3, r3, #31
 8002d62:	2b05      	cmp	r3, #5
 8002d64:	d020      	beq.n	8002da8 <HAL_ADC_IRQHandler+0x294>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d6e:	d004      	beq.n	8002d7a <HAL_ADC_IRQHandler+0x266>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a15      	ldr	r2, [pc, #84]	; (8002dcc <HAL_ADC_IRQHandler+0x2b8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d106      	bne.n	8002d88 <HAL_ADC_IRQHandler+0x274>
 8002d7a:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <HAL_ADC_IRQHandler+0x2bc>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 031f 	and.w	r3, r3, #31
 8002d82:	2b09      	cmp	r3, #9
 8002d84:	d010      	beq.n	8002da8 <HAL_ADC_IRQHandler+0x294>
 8002d86:	e005      	b.n	8002d94 <HAL_ADC_IRQHandler+0x280>
 8002d88:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <HAL_ADC_IRQHandler+0x2c0>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	2b09      	cmp	r3, #9
 8002d92:	d009      	beq.n	8002da8 <HAL_ADC_IRQHandler+0x294>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d9c:	d004      	beq.n	8002da8 <HAL_ADC_IRQHandler+0x294>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a0d      	ldr	r2, [pc, #52]	; (8002dd8 <HAL_ADC_IRQHandler+0x2c4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d104      	bne.n	8002db2 <HAL_ADC_IRQHandler+0x29e>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	61bb      	str	r3, [r7, #24]
 8002db0:	e017      	b.n	8002de2 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dba:	d004      	beq.n	8002dc6 <HAL_ADC_IRQHandler+0x2b2>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a02      	ldr	r2, [pc, #8]	; (8002dcc <HAL_ADC_IRQHandler+0x2b8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d10a      	bne.n	8002ddc <HAL_ADC_IRQHandler+0x2c8>
 8002dc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002dca:	e008      	b.n	8002dde <HAL_ADC_IRQHandler+0x2ca>
 8002dcc:	50000100 	.word	0x50000100
 8002dd0:	50000300 	.word	0x50000300
 8002dd4:	50000700 	.word	0x50000700
 8002dd8:	50000400 	.word	0x50000400
 8002ddc:	4b93      	ldr	r3, [pc, #588]	; (800302c <HAL_ADC_IRQHandler+0x518>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f040 80b0 	bne.w	8002f52 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00d      	beq.n	8002e18 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f040 80a3 	bne.w	8002f52 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 809d 	bne.w	8002f52 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 8097 	beq.w	8002f52 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e2c:	d004      	beq.n	8002e38 <HAL_ADC_IRQHandler+0x324>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a7f      	ldr	r2, [pc, #508]	; (8003030 <HAL_ADC_IRQHandler+0x51c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d106      	bne.n	8002e46 <HAL_ADC_IRQHandler+0x332>
 8002e38:	4b7e      	ldr	r3, [pc, #504]	; (8003034 <HAL_ADC_IRQHandler+0x520>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d03e      	beq.n	8002ec2 <HAL_ADC_IRQHandler+0x3ae>
 8002e44:	e005      	b.n	8002e52 <HAL_ADC_IRQHandler+0x33e>
 8002e46:	4b7c      	ldr	r3, [pc, #496]	; (8003038 <HAL_ADC_IRQHandler+0x524>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 031f 	and.w	r3, r3, #31
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d037      	beq.n	8002ec2 <HAL_ADC_IRQHandler+0x3ae>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e5a:	d004      	beq.n	8002e66 <HAL_ADC_IRQHandler+0x352>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a73      	ldr	r2, [pc, #460]	; (8003030 <HAL_ADC_IRQHandler+0x51c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d106      	bne.n	8002e74 <HAL_ADC_IRQHandler+0x360>
 8002e66:	4b73      	ldr	r3, [pc, #460]	; (8003034 <HAL_ADC_IRQHandler+0x520>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	2b06      	cmp	r3, #6
 8002e70:	d027      	beq.n	8002ec2 <HAL_ADC_IRQHandler+0x3ae>
 8002e72:	e005      	b.n	8002e80 <HAL_ADC_IRQHandler+0x36c>
 8002e74:	4b70      	ldr	r3, [pc, #448]	; (8003038 <HAL_ADC_IRQHandler+0x524>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 031f 	and.w	r3, r3, #31
 8002e7c:	2b06      	cmp	r3, #6
 8002e7e:	d020      	beq.n	8002ec2 <HAL_ADC_IRQHandler+0x3ae>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e88:	d004      	beq.n	8002e94 <HAL_ADC_IRQHandler+0x380>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a68      	ldr	r2, [pc, #416]	; (8003030 <HAL_ADC_IRQHandler+0x51c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d106      	bne.n	8002ea2 <HAL_ADC_IRQHandler+0x38e>
 8002e94:	4b67      	ldr	r3, [pc, #412]	; (8003034 <HAL_ADC_IRQHandler+0x520>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 031f 	and.w	r3, r3, #31
 8002e9c:	2b07      	cmp	r3, #7
 8002e9e:	d010      	beq.n	8002ec2 <HAL_ADC_IRQHandler+0x3ae>
 8002ea0:	e005      	b.n	8002eae <HAL_ADC_IRQHandler+0x39a>
 8002ea2:	4b65      	ldr	r3, [pc, #404]	; (8003038 <HAL_ADC_IRQHandler+0x524>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	2b07      	cmp	r3, #7
 8002eac:	d009      	beq.n	8002ec2 <HAL_ADC_IRQHandler+0x3ae>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eb6:	d004      	beq.n	8002ec2 <HAL_ADC_IRQHandler+0x3ae>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a5b      	ldr	r2, [pc, #364]	; (800302c <HAL_ADC_IRQHandler+0x518>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d104      	bne.n	8002ecc <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	e00f      	b.n	8002eec <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ed4:	d004      	beq.n	8002ee0 <HAL_ADC_IRQHandler+0x3cc>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a55      	ldr	r2, [pc, #340]	; (8003030 <HAL_ADC_IRQHandler+0x51c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d102      	bne.n	8002ee6 <HAL_ADC_IRQHandler+0x3d2>
 8002ee0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ee4:	e000      	b.n	8002ee8 <HAL_ADC_IRQHandler+0x3d4>
 8002ee6:	4b51      	ldr	r3, [pc, #324]	; (800302c <HAL_ADC_IRQHandler+0x518>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d12d      	bne.n	8002f52 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d11a      	bne.n	8002f3a <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f12:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d112      	bne.n	8002f52 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f043 0201 	orr.w	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
 8002f38:	e00b      	b.n	8002f52 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	f043 0210 	orr.w	r2, r3, #16
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	f043 0201 	orr.w	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	645a      	str	r2, [r3, #68]	; 0x44
    /* Conversion complete callback */
    /* Note: into callback, to determine if conversion has been triggered     */
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2260      	movs	r2, #96	; 0x60
 8002f60:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d012      	beq.n	8002f92 <HAL_ADC_IRQHandler+0x47e>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00d      	beq.n	8002f92 <HAL_ADC_IRQHandler+0x47e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2280      	movs	r2, #128	; 0x80
 8002f90:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d012      	beq.n	8002fc2 <HAL_ADC_IRQHandler+0x4ae>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00d      	beq.n	8002fc2 <HAL_ADC_IRQHandler+0x4ae>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f8ac 	bl	8003110 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fc0:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d012      	beq.n	8002ff2 <HAL_ADC_IRQHandler+0x4de>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00d      	beq.n	8002ff2 <HAL_ADC_IRQHandler+0x4de>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f89e 	bl	8003124 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ff0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f003 0310 	and.w	r3, r3, #16
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d050      	beq.n	800309e <HAL_ADC_IRQHandler+0x58a>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	2b00      	cmp	r3, #0
 8003004:	d04b      	beq.n	800309e <HAL_ADC_IRQHandler+0x58a>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300a:	2b01      	cmp	r3, #1
 800300c:	d102      	bne.n	8003014 <HAL_ADC_IRQHandler+0x500>
    {
      overrun_error = 1U;
 800300e:	2301      	movs	r3, #1
 8003010:	61fb      	str	r3, [r7, #28]
 8003012:	e02d      	b.n	8003070 <HAL_ADC_IRQHandler+0x55c>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800301c:	d004      	beq.n	8003028 <HAL_ADC_IRQHandler+0x514>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a03      	ldr	r2, [pc, #12]	; (8003030 <HAL_ADC_IRQHandler+0x51c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d109      	bne.n	800303c <HAL_ADC_IRQHandler+0x528>
 8003028:	4b02      	ldr	r3, [pc, #8]	; (8003034 <HAL_ADC_IRQHandler+0x520>)
 800302a:	e008      	b.n	800303e <HAL_ADC_IRQHandler+0x52a>
 800302c:	50000400 	.word	0x50000400
 8003030:	50000100 	.word	0x50000100
 8003034:	50000300 	.word	0x50000300
 8003038:	50000700 	.word	0x50000700
 800303c:	4b29      	ldr	r3, [pc, #164]	; (80030e4 <HAL_ADC_IRQHandler+0x5d0>)
 800303e:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <HAL_ADC_IRQHandler+0x54c>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d10a      	bne.n	8003070 <HAL_ADC_IRQHandler+0x55c>
        {
          overrun_error = 1U;  
 800305a:	2301      	movs	r3, #1
 800305c:	61fb      	str	r3, [r7, #28]
 800305e:	e007      	b.n	8003070 <HAL_ADC_IRQHandler+0x55c>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <HAL_ADC_IRQHandler+0x55c>
        {
          overrun_error = 1U;  
 800306c:	2301      	movs	r3, #1
 800306e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d10f      	bne.n	8003096 <HAL_ADC_IRQHandler+0x582>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	f043 0202 	orr.w	r2, r3, #2
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	4798      	blx	r3
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2210      	movs	r2, #16
 800309c:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d018      	beq.n	80030da <HAL_ADC_IRQHandler+0x5c6>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d013      	beq.n	80030da <HAL_ADC_IRQHandler+0x5c6>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	f043 0208 	orr.w	r2, r3, #8
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030d2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f811 	bl	80030fc <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80030da:	bf00      	nop
 80030dc:	3720      	adds	r7, #32
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	50000700 	.word	0x50000700

080030e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003138:	b480      	push	{r7}
 800313a:	b0a3      	sub	sp, #140	; 0x8c
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <HAL_ADC_ConfigChannel+0x22>
 8003156:	2302      	movs	r3, #2
 8003158:	e2ce      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x5c0>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	f040 82b2 	bne.w	80036d6 <HAL_ADC_ConfigChannel+0x59e>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b04      	cmp	r3, #4
 8003178:	d81c      	bhi.n	80031b4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	461a      	mov	r2, r3
 800318e:	231f      	movs	r3, #31
 8003190:	4093      	lsls	r3, r2
 8003192:	43db      	mvns	r3, r3
 8003194:	4019      	ands	r1, r3
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	fa00 f203 	lsl.w	r2, r0, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	631a      	str	r2, [r3, #48]	; 0x30
 80031b2:	e063      	b.n	800327c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b09      	cmp	r3, #9
 80031ba:	d81e      	bhi.n	80031fa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	4413      	add	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	3b1e      	subs	r3, #30
 80031d0:	221f      	movs	r2, #31
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	4019      	ands	r1, r3
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	4413      	add	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	3b1e      	subs	r3, #30
 80031ec:	fa00 f203 	lsl.w	r2, r0, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	635a      	str	r2, [r3, #52]	; 0x34
 80031f8:	e040      	b.n	800327c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b0e      	cmp	r3, #14
 8003200:	d81e      	bhi.n	8003240 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4413      	add	r3, r2
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	3b3c      	subs	r3, #60	; 0x3c
 8003216:	221f      	movs	r2, #31
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	4019      	ands	r1, r3
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4413      	add	r3, r2
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	3b3c      	subs	r3, #60	; 0x3c
 8003232:	fa00 f203 	lsl.w	r2, r0, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	639a      	str	r2, [r3, #56]	; 0x38
 800323e:	e01d      	b.n	800327c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	4413      	add	r3, r2
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	3b5a      	subs	r3, #90	; 0x5a
 8003254:	221f      	movs	r2, #31
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	4019      	ands	r1, r3
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4413      	add	r3, r2
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	3b5a      	subs	r3, #90	; 0x5a
 8003270:	fa00 f203 	lsl.w	r2, r0, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
 8003286:	2b00      	cmp	r3, #0
 8003288:	f040 80e9 	bne.w	800345e <HAL_ADC_ConfigChannel+0x326>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b09      	cmp	r3, #9
 8003292:	d91c      	bls.n	80032ce <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6999      	ldr	r1, [r3, #24]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	4613      	mov	r3, r2
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	4413      	add	r3, r2
 80032a4:	3b1e      	subs	r3, #30
 80032a6:	2207      	movs	r2, #7
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	4019      	ands	r1, r3
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	6898      	ldr	r0, [r3, #8]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4613      	mov	r3, r2
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	4413      	add	r3, r2
 80032be:	3b1e      	subs	r3, #30
 80032c0:	fa00 f203 	lsl.w	r2, r0, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	619a      	str	r2, [r3, #24]
 80032cc:	e019      	b.n	8003302 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6959      	ldr	r1, [r3, #20]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	4413      	add	r3, r2
 80032de:	2207      	movs	r2, #7
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	4019      	ands	r1, r3
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	6898      	ldr	r0, [r3, #8]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4613      	mov	r3, r2
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	4413      	add	r3, r2
 80032f6:	fa00 f203 	lsl.w	r2, r0, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	08db      	lsrs	r3, r3, #3
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	3b01      	subs	r3, #1
 8003322:	2b03      	cmp	r3, #3
 8003324:	d852      	bhi.n	80033cc <HAL_ADC_ConfigChannel+0x294>
 8003326:	a201      	add	r2, pc, #4	; (adr r2, 800332c <HAL_ADC_ConfigChannel+0x1f4>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	0800333d 	.word	0x0800333d
 8003330:	08003361 	.word	0x08003361
 8003334:	08003385 	.word	0x08003385
 8003338:	080033a9 	.word	0x080033a9
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003342:	4b9c      	ldr	r3, [pc, #624]	; (80035b4 <HAL_ADC_ConfigChannel+0x47c>)
 8003344:	4013      	ands	r3, r2
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	0691      	lsls	r1, r2, #26
 800334c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003350:	430a      	orrs	r2, r1
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800335c:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800335e:	e081      	b.n	8003464 <HAL_ADC_ConfigChannel+0x32c>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003366:	4b93      	ldr	r3, [pc, #588]	; (80035b4 <HAL_ADC_ConfigChannel+0x47c>)
 8003368:	4013      	ands	r3, r2
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	6812      	ldr	r2, [r2, #0]
 800336e:	0691      	lsls	r1, r2, #26
 8003370:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003374:	430a      	orrs	r2, r1
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003380:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003382:	e06f      	b.n	8003464 <HAL_ADC_ConfigChannel+0x32c>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800338a:	4b8a      	ldr	r3, [pc, #552]	; (80035b4 <HAL_ADC_ConfigChannel+0x47c>)
 800338c:	4013      	ands	r3, r2
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	0691      	lsls	r1, r2, #26
 8003394:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003398:	430a      	orrs	r2, r1
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80033a4:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80033a6:	e05d      	b.n	8003464 <HAL_ADC_ConfigChannel+0x32c>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80033ae:	4b81      	ldr	r3, [pc, #516]	; (80035b4 <HAL_ADC_ConfigChannel+0x47c>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	6812      	ldr	r2, [r2, #0]
 80033b6:	0691      	lsls	r1, r2, #26
 80033b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033bc:	430a      	orrs	r2, r1
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80033c8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80033ca:	e04b      	b.n	8003464 <HAL_ADC_ConfigChannel+0x32c>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	069b      	lsls	r3, r3, #26
 80033dc:	429a      	cmp	r2, r3
 80033de:	d107      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x2b8>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033ee:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	069b      	lsls	r3, r3, #26
 8003400:	429a      	cmp	r2, r3
 8003402:	d107      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x2dc>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003412:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800341a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	069b      	lsls	r3, r3, #26
 8003424:	429a      	cmp	r2, r3
 8003426:	d107      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x300>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003436:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800343e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	069b      	lsls	r3, r3, #26
 8003448:	429a      	cmp	r2, r3
 800344a:	d10a      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x32a>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800345a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800345c:	e001      	b.n	8003462 <HAL_ADC_ConfigChannel+0x32a>
    }

  }
 800345e:	bf00      	nop
 8003460:	e000      	b.n	8003464 <HAL_ADC_ConfigChannel+0x32c>
      break;
 8003462:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	2b01      	cmp	r3, #1
 8003470:	d108      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x34c>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x34c>
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <HAL_ADC_ConfigChannel+0x34e>
 8003484:	2300      	movs	r3, #0
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 8130 	bne.w	80036ec <HAL_ADC_ConfigChannel+0x5b4>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d00f      	beq.n	80034b4 <HAL_ADC_ConfigChannel+0x37c>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2201      	movs	r2, #1
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43da      	mvns	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	400a      	ands	r2, r1
 80034ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80034b2:	e049      	b.n	8003548 <HAL_ADC_ConfigChannel+0x410>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2201      	movs	r2, #1
 80034c2:	409a      	lsls	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b09      	cmp	r3, #9
 80034d4:	d91c      	bls.n	8003510 <HAL_ADC_ConfigChannel+0x3d8>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6999      	ldr	r1, [r3, #24]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	4413      	add	r3, r2
 80034e6:	3b1b      	subs	r3, #27
 80034e8:	2207      	movs	r2, #7
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	4019      	ands	r1, r3
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6898      	ldr	r0, [r3, #8]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	4613      	mov	r3, r2
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	4413      	add	r3, r2
 8003500:	3b1b      	subs	r3, #27
 8003502:	fa00 f203 	lsl.w	r2, r0, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	619a      	str	r2, [r3, #24]
 800350e:	e01b      	b.n	8003548 <HAL_ADC_ConfigChannel+0x410>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6959      	ldr	r1, [r3, #20]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	4613      	mov	r3, r2
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	4413      	add	r3, r2
 8003522:	2207      	movs	r2, #7
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	4019      	ands	r1, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	6898      	ldr	r0, [r3, #8]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	4613      	mov	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4413      	add	r3, r2
 800353c:	fa00 f203 	lsl.w	r2, r0, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003550:	d004      	beq.n	800355c <HAL_ADC_ConfigChannel+0x424>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a18      	ldr	r2, [pc, #96]	; (80035b8 <HAL_ADC_ConfigChannel+0x480>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d101      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x428>
 800355c:	4b17      	ldr	r3, [pc, #92]	; (80035bc <HAL_ADC_ConfigChannel+0x484>)
 800355e:	e000      	b.n	8003562 <HAL_ADC_ConfigChannel+0x42a>
 8003560:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <HAL_ADC_ConfigChannel+0x488>)
 8003562:	67fb      	str	r3, [r7, #124]	; 0x7c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b10      	cmp	r3, #16
 800356a:	d105      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x440>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800356c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003574:	2b00      	cmp	r3, #0
 8003576:	d015      	beq.n	80035a4 <HAL_ADC_ConfigChannel+0x46c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800357c:	2b11      	cmp	r3, #17
 800357e:	d105      	bne.n	800358c <HAL_ADC_ConfigChannel+0x454>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003580:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00b      	beq.n	80035a4 <HAL_ADC_ConfigChannel+0x46c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003590:	2b12      	cmp	r3, #18
 8003592:	f040 80ab 	bne.w	80036ec <HAL_ADC_ConfigChannel+0x5b4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003596:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f040 80a4 	bne.w	80036ec <HAL_ADC_ConfigChannel+0x5b4>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035ac:	d10a      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x48c>
 80035ae:	4b02      	ldr	r3, [pc, #8]	; (80035b8 <HAL_ADC_ConfigChannel+0x480>)
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	e022      	b.n	80035fa <HAL_ADC_ConfigChannel+0x4c2>
 80035b4:	83fff000 	.word	0x83fff000
 80035b8:	50000100 	.word	0x50000100
 80035bc:	50000300 	.word	0x50000300
 80035c0:	50000700 	.word	0x50000700
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a4e      	ldr	r2, [pc, #312]	; (8003704 <HAL_ADC_ConfigChannel+0x5cc>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d103      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x49e>
 80035ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	e011      	b.n	80035fa <HAL_ADC_ConfigChannel+0x4c2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a4b      	ldr	r2, [pc, #300]	; (8003708 <HAL_ADC_ConfigChannel+0x5d0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d102      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x4ae>
 80035e0:	4b4a      	ldr	r3, [pc, #296]	; (800370c <HAL_ADC_ConfigChannel+0x5d4>)
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	e009      	b.n	80035fa <HAL_ADC_ConfigChannel+0x4c2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a48      	ldr	r2, [pc, #288]	; (800370c <HAL_ADC_ConfigChannel+0x5d4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d102      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x4be>
 80035f0:	4b45      	ldr	r3, [pc, #276]	; (8003708 <HAL_ADC_ConfigChannel+0x5d0>)
 80035f2:	613b      	str	r3, [r7, #16]
 80035f4:	e001      	b.n	80035fa <HAL_ADC_ConfigChannel+0x4c2>
 80035f6:	2300      	movs	r3, #0
 80035f8:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d108      	bne.n	800361a <HAL_ADC_ConfigChannel+0x4e2>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_ADC_ConfigChannel+0x4e2>
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <HAL_ADC_ConfigChannel+0x4e4>
 800361a:	2300      	movs	r3, #0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d150      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x58a>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003620:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003622:	2b00      	cmp	r3, #0
 8003624:	d010      	beq.n	8003648 <HAL_ADC_ConfigChannel+0x510>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b01      	cmp	r3, #1
 8003630:	d107      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x50a>
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x50a>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <HAL_ADC_ConfigChannel+0x50c>
 8003642:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003644:	2b00      	cmp	r3, #0
 8003646:	d13c      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x58a>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b10      	cmp	r3, #16
 800364e:	d11d      	bne.n	800368c <HAL_ADC_ConfigChannel+0x554>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003658:	d118      	bne.n	800368c <HAL_ADC_ConfigChannel+0x554>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800365a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003662:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003664:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003666:	4b2a      	ldr	r3, [pc, #168]	; (8003710 <HAL_ADC_ConfigChannel+0x5d8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a2a      	ldr	r2, [pc, #168]	; (8003714 <HAL_ADC_ConfigChannel+0x5dc>)
 800366c:	fba2 2303 	umull	r2, r3, r2, r3
 8003670:	0c9a      	lsrs	r2, r3, #18
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 800367c:	e002      	b.n	8003684 <HAL_ADC_ConfigChannel+0x54c>
          {
            wait_loop_index--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	3b01      	subs	r3, #1
 8003682:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f9      	bne.n	800367e <HAL_ADC_ConfigChannel+0x546>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800368a:	e02e      	b.n	80036ea <HAL_ADC_ConfigChannel+0x5b2>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b11      	cmp	r3, #17
 8003692:	d10b      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x574>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800369c:	d106      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x574>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800369e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80036a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036a8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80036aa:	e01e      	b.n	80036ea <HAL_ADC_ConfigChannel+0x5b2>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b12      	cmp	r3, #18
 80036b2:	d11a      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x5b2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80036b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80036bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036be:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80036c0:	e013      	b.n	80036ea <HAL_ADC_ConfigChannel+0x5b2>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f043 0220 	orr.w	r2, r3, #32
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80036d4:	e00a      	b.n	80036ec <HAL_ADC_ConfigChannel+0x5b4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f043 0220 	orr.w	r2, r3, #32
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80036e8:	e000      	b.n	80036ec <HAL_ADC_ConfigChannel+0x5b4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80036ea:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80036f4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	378c      	adds	r7, #140	; 0x8c
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	50000100 	.word	0x50000100
 8003708:	50000400 	.word	0x50000400
 800370c:	50000500 	.word	0x50000500
 8003710:	20000008 	.word	0x20000008
 8003714:	431bde83 	.word	0x431bde83

08003718 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003718:	b480      	push	{r7}
 800371a:	b0a1      	sub	sp, #132	; 0x84
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003730:	d102      	bne.n	8003738 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003732:	4b6d      	ldr	r3, [pc, #436]	; (80038e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	e01a      	b.n	800376e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a6a      	ldr	r2, [pc, #424]	; (80038e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d103      	bne.n	800374a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003742:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	e011      	b.n	800376e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a67      	ldr	r2, [pc, #412]	; (80038ec <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d102      	bne.n	800375a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003754:	4b66      	ldr	r3, [pc, #408]	; (80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	e009      	b.n	800376e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a64      	ldr	r2, [pc, #400]	; (80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d102      	bne.n	800376a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003764:	4b61      	ldr	r3, [pc, #388]	; (80038ec <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	e001      	b.n	800376e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0b0      	b.n	80038da <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003782:	2302      	movs	r3, #2
 8003784:	e0a9      	b.n	80038da <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	f040 808d 	bne.w	80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f040 8086 	bne.w	80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037b4:	d004      	beq.n	80037c0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a4b      	ldr	r2, [pc, #300]	; (80038e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d101      	bne.n	80037c4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80037c0:	4b4c      	ldr	r3, [pc, #304]	; (80038f4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80037c2:	e000      	b.n	80037c6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80037c4:	4b4c      	ldr	r3, [pc, #304]	; (80038f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80037c6:	67bb      	str	r3, [r7, #120]	; 0x78
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d040      	beq.n	8003852 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80037d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	6859      	ldr	r1, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037e2:	035b      	lsls	r3, r3, #13
 80037e4:	430b      	orrs	r3, r1
 80037e6:	431a      	orrs	r2, r3
 80037e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037ea:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d108      	bne.n	800380c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800380c:	2300      	movs	r3, #0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d15c      	bne.n	80038cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b01      	cmp	r3, #1
 800381c:	d107      	bne.n	800382e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800382e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003830:	2b00      	cmp	r3, #0
 8003832:	d14b      	bne.n	80038cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800383c:	f023 030f 	bic.w	r3, r3, #15
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	6811      	ldr	r1, [r2, #0]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	6892      	ldr	r2, [r2, #8]
 8003848:	430a      	orrs	r2, r1
 800384a:	431a      	orrs	r2, r3
 800384c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800384e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003850:	e03c      	b.n	80038cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003852:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800385a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800385c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 0303 	and.w	r3, r3, #3
 8003868:	2b01      	cmp	r3, #1
 800386a:	d108      	bne.n	800387e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800387e:	2300      	movs	r3, #0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d123      	bne.n	80038cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	2b01      	cmp	r3, #1
 800388e:	d107      	bne.n	80038a0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80038a0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d112      	bne.n	80038cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80038a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80038ae:	f023 030f 	bic.w	r3, r3, #15
 80038b2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80038b4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80038b6:	e009      	b.n	80038cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	f043 0220 	orr.w	r2, r3, #32
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80038ca:	e000      	b.n	80038ce <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80038cc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80038d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
} 
 80038da:	4618      	mov	r0, r3
 80038dc:	3784      	adds	r7, #132	; 0x84
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	50000100 	.word	0x50000100
 80038ec:	50000400 	.word	0x50000400
 80038f0:	50000500 	.word	0x50000500
 80038f4:	50000300 	.word	0x50000300
 80038f8:	50000700 	.word	0x50000700

080038fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	2b01      	cmp	r3, #1
 8003914:	d108      	bne.n	8003928 <ADC_Enable+0x2c>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <ADC_Enable+0x2c>
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <ADC_Enable+0x2e>
 8003928:	2300      	movs	r3, #0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d143      	bne.n	80039b6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <ADC_Enable+0xc4>)
 8003936:	4013      	ands	r3, r2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00d      	beq.n	8003958 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	f043 0210 	orr.w	r2, r3, #16
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394c:	f043 0201 	orr.w	r2, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e02f      	b.n	80039b8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003968:	f7fe fd00 	bl	800236c <HAL_GetTick>
 800396c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800396e:	e01b      	b.n	80039a8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003970:	f7fe fcfc 	bl	800236c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d914      	bls.n	80039a8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b01      	cmp	r3, #1
 800398a:	d00d      	beq.n	80039a8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	f043 0210 	orr.w	r2, r3, #16
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399c:	f043 0201 	orr.w	r2, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e007      	b.n	80039b8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d1dc      	bne.n	8003970 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	8000003f 	.word	0x8000003f

080039c4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d108      	bne.n	80039f0 <ADC_Disable+0x2c>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <ADC_Disable+0x2c>
 80039ec:	2301      	movs	r3, #1
 80039ee:	e000      	b.n	80039f2 <ADC_Disable+0x2e>
 80039f0:	2300      	movs	r3, #0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d047      	beq.n	8003a86 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 030d 	and.w	r3, r3, #13
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d10f      	bne.n	8003a24 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0202 	orr.w	r2, r2, #2
 8003a12:	609a      	str	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2203      	movs	r2, #3
 8003a1a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003a1c:	f7fe fca6 	bl	800236c <HAL_GetTick>
 8003a20:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003a22:	e029      	b.n	8003a78 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	f043 0210 	orr.w	r2, r3, #16
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a34:	f043 0201 	orr.w	r2, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e023      	b.n	8003a88 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a40:	f7fe fc94 	bl	800236c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d914      	bls.n	8003a78 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d10d      	bne.n	8003a78 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	f043 0210 	orr.w	r2, r3, #16
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6c:	f043 0201 	orr.w	r2, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e007      	b.n	8003a88 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d0dc      	beq.n	8003a40 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003aac:	4013      	ands	r3, r2
 8003aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ac2:	4a04      	ldr	r2, [pc, #16]	; (8003ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	60d3      	str	r3, [r2, #12]
}
 8003ac8:	bf00      	nop
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	e000ed00 	.word	0xe000ed00

08003ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003adc:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	0a1b      	lsrs	r3, r3, #8
 8003ae2:	f003 0307 	and.w	r3, r3, #7
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	e000ed00 	.word	0xe000ed00

08003af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	db0b      	blt.n	8003b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	f003 021f 	and.w	r2, r3, #31
 8003b0c:	4907      	ldr	r1, [pc, #28]	; (8003b2c <__NVIC_EnableIRQ+0x38>)
 8003b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	2001      	movs	r0, #1
 8003b16:	fa00 f202 	lsl.w	r2, r0, r2
 8003b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	e000e100 	.word	0xe000e100

08003b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	6039      	str	r1, [r7, #0]
 8003b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	db0a      	blt.n	8003b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	490c      	ldr	r1, [pc, #48]	; (8003b7c <__NVIC_SetPriority+0x4c>)
 8003b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4e:	0112      	lsls	r2, r2, #4
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	440b      	add	r3, r1
 8003b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b58:	e00a      	b.n	8003b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	4908      	ldr	r1, [pc, #32]	; (8003b80 <__NVIC_SetPriority+0x50>)
 8003b60:	79fb      	ldrb	r3, [r7, #7]
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	3b04      	subs	r3, #4
 8003b68:	0112      	lsls	r2, r2, #4
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	761a      	strb	r2, [r3, #24]
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	e000e100 	.word	0xe000e100
 8003b80:	e000ed00 	.word	0xe000ed00

08003b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b089      	sub	sp, #36	; 0x24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f1c3 0307 	rsb	r3, r3, #7
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	bf28      	it	cs
 8003ba2:	2304      	movcs	r3, #4
 8003ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	2b06      	cmp	r3, #6
 8003bac:	d902      	bls.n	8003bb4 <NVIC_EncodePriority+0x30>
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	3b03      	subs	r3, #3
 8003bb2:	e000      	b.n	8003bb6 <NVIC_EncodePriority+0x32>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	43da      	mvns	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	401a      	ands	r2, r3
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd6:	43d9      	mvns	r1, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bdc:	4313      	orrs	r3, r2
         );
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3724      	adds	r7, #36	; 0x24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
	...

08003bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bfc:	d301      	bcc.n	8003c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e00f      	b.n	8003c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c02:	4a0a      	ldr	r2, [pc, #40]	; (8003c2c <SysTick_Config+0x40>)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c0a:	210f      	movs	r1, #15
 8003c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c10:	f7ff ff8e 	bl	8003b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c14:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <SysTick_Config+0x40>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c1a:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <SysTick_Config+0x40>)
 8003c1c:	2207      	movs	r2, #7
 8003c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	e000e010 	.word	0xe000e010

08003c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7ff ff29 	bl	8003a90 <__NVIC_SetPriorityGrouping>
}
 8003c3e:	bf00      	nop
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b086      	sub	sp, #24
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	607a      	str	r2, [r7, #4]
 8003c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c58:	f7ff ff3e 	bl	8003ad8 <__NVIC_GetPriorityGrouping>
 8003c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	6978      	ldr	r0, [r7, #20]
 8003c64:	f7ff ff8e 	bl	8003b84 <NVIC_EncodePriority>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c6e:	4611      	mov	r1, r2
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff ff5d 	bl	8003b30 <__NVIC_SetPriority>
}
 8003c76:	bf00      	nop
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	4603      	mov	r3, r0
 8003c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff ff31 	bl	8003af4 <__NVIC_EnableIRQ>
}
 8003c92:	bf00      	nop
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b082      	sub	sp, #8
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7ff ffa2 	bl	8003bec <SysTick_Config>
 8003ca8:	4603      	mov	r3, r0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cc2:	e160      	b.n	8003f86 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	2101      	movs	r1, #1
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 8152 	beq.w	8003f80 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d005      	beq.n	8003cf4 <HAL_GPIO_Init+0x40>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d130      	bne.n	8003d56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	2203      	movs	r2, #3
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	43db      	mvns	r3, r3
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43db      	mvns	r3, r3
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4013      	ands	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	091b      	lsrs	r3, r3, #4
 8003d40:	f003 0201 	and.w	r2, r3, #1
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d017      	beq.n	8003d92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43db      	mvns	r3, r3
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4013      	ands	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d123      	bne.n	8003de6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	08da      	lsrs	r2, r3, #3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3208      	adds	r2, #8
 8003da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003daa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	220f      	movs	r2, #15
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	08da      	lsrs	r2, r3, #3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3208      	adds	r2, #8
 8003de0:	6939      	ldr	r1, [r7, #16]
 8003de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	2203      	movs	r2, #3
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43db      	mvns	r3, r3
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f003 0203 	and.w	r2, r3, #3
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 80ac 	beq.w	8003f80 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e28:	4b5e      	ldr	r3, [pc, #376]	; (8003fa4 <HAL_GPIO_Init+0x2f0>)
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	4a5d      	ldr	r2, [pc, #372]	; (8003fa4 <HAL_GPIO_Init+0x2f0>)
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	6193      	str	r3, [r2, #24]
 8003e34:	4b5b      	ldr	r3, [pc, #364]	; (8003fa4 <HAL_GPIO_Init+0x2f0>)
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e40:	4a59      	ldr	r2, [pc, #356]	; (8003fa8 <HAL_GPIO_Init+0x2f4>)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	089b      	lsrs	r3, r3, #2
 8003e46:	3302      	adds	r3, #2
 8003e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	220f      	movs	r2, #15
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4013      	ands	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e6a:	d025      	beq.n	8003eb8 <HAL_GPIO_Init+0x204>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a4f      	ldr	r2, [pc, #316]	; (8003fac <HAL_GPIO_Init+0x2f8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d01f      	beq.n	8003eb4 <HAL_GPIO_Init+0x200>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a4e      	ldr	r2, [pc, #312]	; (8003fb0 <HAL_GPIO_Init+0x2fc>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d019      	beq.n	8003eb0 <HAL_GPIO_Init+0x1fc>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a4d      	ldr	r2, [pc, #308]	; (8003fb4 <HAL_GPIO_Init+0x300>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d013      	beq.n	8003eac <HAL_GPIO_Init+0x1f8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a4c      	ldr	r2, [pc, #304]	; (8003fb8 <HAL_GPIO_Init+0x304>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00d      	beq.n	8003ea8 <HAL_GPIO_Init+0x1f4>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a4b      	ldr	r2, [pc, #300]	; (8003fbc <HAL_GPIO_Init+0x308>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d007      	beq.n	8003ea4 <HAL_GPIO_Init+0x1f0>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a4a      	ldr	r2, [pc, #296]	; (8003fc0 <HAL_GPIO_Init+0x30c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d101      	bne.n	8003ea0 <HAL_GPIO_Init+0x1ec>
 8003e9c:	2306      	movs	r3, #6
 8003e9e:	e00c      	b.n	8003eba <HAL_GPIO_Init+0x206>
 8003ea0:	2307      	movs	r3, #7
 8003ea2:	e00a      	b.n	8003eba <HAL_GPIO_Init+0x206>
 8003ea4:	2305      	movs	r3, #5
 8003ea6:	e008      	b.n	8003eba <HAL_GPIO_Init+0x206>
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	e006      	b.n	8003eba <HAL_GPIO_Init+0x206>
 8003eac:	2303      	movs	r3, #3
 8003eae:	e004      	b.n	8003eba <HAL_GPIO_Init+0x206>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e002      	b.n	8003eba <HAL_GPIO_Init+0x206>
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e000      	b.n	8003eba <HAL_GPIO_Init+0x206>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	f002 0203 	and.w	r2, r2, #3
 8003ec0:	0092      	lsls	r2, r2, #2
 8003ec2:	4093      	lsls	r3, r2
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003eca:	4937      	ldr	r1, [pc, #220]	; (8003fa8 <HAL_GPIO_Init+0x2f4>)
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	089b      	lsrs	r3, r3, #2
 8003ed0:	3302      	adds	r3, #2
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ed8:	4b3a      	ldr	r3, [pc, #232]	; (8003fc4 <HAL_GPIO_Init+0x310>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003efc:	4a31      	ldr	r2, [pc, #196]	; (8003fc4 <HAL_GPIO_Init+0x310>)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f02:	4b30      	ldr	r3, [pc, #192]	; (8003fc4 <HAL_GPIO_Init+0x310>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f26:	4a27      	ldr	r2, [pc, #156]	; (8003fc4 <HAL_GPIO_Init+0x310>)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f2c:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <HAL_GPIO_Init+0x310>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	43db      	mvns	r3, r3
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f50:	4a1c      	ldr	r2, [pc, #112]	; (8003fc4 <HAL_GPIO_Init+0x310>)
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f56:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <HAL_GPIO_Init+0x310>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4013      	ands	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f7a:	4a12      	ldr	r2, [pc, #72]	; (8003fc4 <HAL_GPIO_Init+0x310>)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	3301      	adds	r3, #1
 8003f84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f47f ae97 	bne.w	8003cc4 <HAL_GPIO_Init+0x10>
  }
}
 8003f96:	bf00      	nop
 8003f98:	bf00      	nop
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40010000 	.word	0x40010000
 8003fac:	48000400 	.word	0x48000400
 8003fb0:	48000800 	.word	0x48000800
 8003fb4:	48000c00 	.word	0x48000c00
 8003fb8:	48001000 	.word	0x48001000
 8003fbc:	48001400 	.word	0x48001400
 8003fc0:	48001800 	.word	0x48001800
 8003fc4:	40010400 	.word	0x40010400

08003fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	807b      	strh	r3, [r7, #2]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fd8:	787b      	ldrb	r3, [r7, #1]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fde:	887a      	ldrh	r2, [r7, #2]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fe4:	e002      	b.n	8003fec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fe6:	887a      	ldrh	r2, [r7, #2]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e081      	b.n	800410e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fd fa0e 	bl	8001440 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2224      	movs	r2, #36	; 0x24
 8004028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0201 	bic.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004048:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004058:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d107      	bne.n	8004072 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800406e:	609a      	str	r2, [r3, #8]
 8004070:	e006      	b.n	8004080 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800407e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d104      	bne.n	8004092 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004090:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6812      	ldr	r2, [r2, #0]
 800409c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69d9      	ldr	r1, [r3, #28]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1a      	ldr	r2, [r3, #32]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	68f9      	ldr	r1, [r7, #12]
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	4798      	blx	r3
  }
}
 8004142:	bf00      	nop
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b20      	cmp	r3, #32
 800415e:	d138      	bne.n	80041d2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800416a:	2302      	movs	r3, #2
 800416c:	e032      	b.n	80041d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2224      	movs	r2, #36	; 0x24
 800417a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0201 	bic.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800419c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6819      	ldr	r1, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0201 	orr.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e000      	b.n	80041d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041d2:	2302      	movs	r3, #2
  }
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b20      	cmp	r3, #32
 80041f4:	d139      	bne.n	800426a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004200:	2302      	movs	r3, #2
 8004202:	e033      	b.n	800426c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2224      	movs	r2, #36	; 0x24
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0201 	bic.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004232:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	021b      	lsls	r3, r3, #8
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f042 0201 	orr.w	r2, r2, #1
 8004254:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	e000      	b.n	800426c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800426a:	2302      	movs	r3, #2
  }
}
 800426c:	4618      	mov	r0, r3
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_OPAMP_Init>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)

{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e08f      	b.n	80043ae <HAL_OPAMP_Init+0x136>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b05      	cmp	r3, #5
 8004298:	d101      	bne.n	800429e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e087      	b.n	80043ae <HAL_OPAMP_Init+0x136>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d101      	bne.n	80042ae <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e07f      	b.n	80043ae <HAL_OPAMP_Init+0x136>
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
    }

    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));

    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	2b80      	cmp	r3, #128	; 0x80
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042b4:	4b40      	ldr	r3, [pc, #256]	; (80043b8 <HAL_OPAMP_Init+0x140>)
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	4a3f      	ldr	r2, [pc, #252]	; (80043b8 <HAL_OPAMP_Init+0x140>)
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	6193      	str	r3, [r2, #24]
 80042c0:	4b3d      	ldr	r3, [pc, #244]	; (80043b8 <HAL_OPAMP_Init+0x140>)
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d103      	bne.n	80042e0 <HAL_OPAMP_Init+0x68>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7fd fa7d 	bl	80017e0 <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b40      	cmp	r3, #64	; 0x40
 80042ec:	d003      	beq.n	80042f6 <HAL_OPAMP_Init+0x7e>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b60      	cmp	r3, #96	; 0x60
 80042f4:	d125      	bne.n	8004342 <HAL_OPAMP_Init+0xca>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	4b2f      	ldr	r3, [pc, #188]	; (80043bc <HAL_OPAMP_Init+0x144>)
 80042fe:	4013      	ands	r3, r2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6851      	ldr	r1, [r2, #4]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	68d2      	ldr	r2, [r2, #12]
 8004308:	4311      	orrs	r1, r2
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6912      	ldr	r2, [r2, #16]
 800430e:	4311      	orrs	r1, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6992      	ldr	r2, [r2, #24]
 8004314:	4311      	orrs	r1, r2
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	69d2      	ldr	r2, [r2, #28]
 800431a:	4311      	orrs	r1, r2
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6a12      	ldr	r2, [r2, #32]
 8004320:	4311      	orrs	r1, r2
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004326:	4311      	orrs	r1, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800432c:	04d2      	lsls	r2, r2, #19
 800432e:	4311      	orrs	r1, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004334:	0612      	lsls	r2, r2, #24
 8004336:	4311      	orrs	r1, r2
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	430b      	orrs	r3, r1
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	e02a      	b.n	8004398 <HAL_OPAMP_Init+0x120>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	4b1c      	ldr	r3, [pc, #112]	; (80043bc <HAL_OPAMP_Init+0x144>)
 800434a:	4013      	ands	r3, r2
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6851      	ldr	r1, [r2, #4]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6892      	ldr	r2, [r2, #8]
 8004354:	4311      	orrs	r1, r2
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	68d2      	ldr	r2, [r2, #12]
 800435a:	4311      	orrs	r1, r2
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6912      	ldr	r2, [r2, #16]
 8004360:	4311      	orrs	r1, r2
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6952      	ldr	r2, [r2, #20]
 8004366:	4311      	orrs	r1, r2
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6992      	ldr	r2, [r2, #24]
 800436c:	4311      	orrs	r1, r2
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	69d2      	ldr	r2, [r2, #28]
 8004372:	4311      	orrs	r1, r2
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6a12      	ldr	r2, [r2, #32]
 8004378:	4311      	orrs	r1, r2
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800437e:	4311      	orrs	r1, r2
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004384:	04d2      	lsls	r2, r2, #19
 8004386:	4311      	orrs	r1, r2
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800438c:	0612      	lsls	r2, r2, #24
 800438e:	4311      	orrs	r1, r2
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	430b      	orrs	r3, r1
 8004396:	6013      	str	r3, [r2, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d103      	bne.n	80043ac <HAL_OPAMP_Init+0x134>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40021000 	.word	0x40021000
 80043bc:	e0003811 	.word	0xe0003811

080043c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043c2:	b08b      	sub	sp, #44	; 0x2c
 80043c4:	af06      	add	r7, sp, #24
 80043c6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e0c4      	b.n	800455c <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fd ff1c 	bl	8002224 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2203      	movs	r2, #3
 80043f0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f003 fd6c 	bl	8007ed6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043fe:	2300      	movs	r3, #0
 8004400:	73fb      	strb	r3, [r7, #15]
 8004402:	e040      	b.n	8004486 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	4613      	mov	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	440b      	add	r3, r1
 8004414:	3301      	adds	r3, #1
 8004416:	2201      	movs	r2, #1
 8004418:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	440b      	add	r3, r1
 800442a:	7bfa      	ldrb	r2, [r7, #15]
 800442c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	440b      	add	r3, r1
 800443e:	3303      	adds	r3, #3
 8004440:	2200      	movs	r2, #0
 8004442:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004444:	7bfa      	ldrb	r2, [r7, #15]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	440b      	add	r3, r1
 8004452:	3338      	adds	r3, #56	; 0x38
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004458:	7bfa      	ldrb	r2, [r7, #15]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	440b      	add	r3, r1
 8004466:	333c      	adds	r3, #60	; 0x3c
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800446c:	7bfa      	ldrb	r2, [r7, #15]
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	440b      	add	r3, r1
 800447a:	3340      	adds	r3, #64	; 0x40
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	3301      	adds	r3, #1
 8004484:	73fb      	strb	r3, [r7, #15]
 8004486:	7bfa      	ldrb	r2, [r7, #15]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	429a      	cmp	r2, r3
 800448e:	d3b9      	bcc.n	8004404 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004490:	2300      	movs	r3, #0
 8004492:	73fb      	strb	r3, [r7, #15]
 8004494:	e044      	b.n	8004520 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004496:	7bfa      	ldrb	r2, [r7, #15]
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	440b      	add	r3, r1
 80044a4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044ac:	7bfa      	ldrb	r2, [r7, #15]
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	440b      	add	r3, r1
 80044ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044be:	7bfa      	ldrb	r2, [r7, #15]
 80044c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044c2:	7bfa      	ldrb	r2, [r7, #15]
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	440b      	add	r3, r1
 80044d0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80044d4:	2200      	movs	r2, #0
 80044d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044d8:	7bfa      	ldrb	r2, [r7, #15]
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	440b      	add	r3, r1
 80044e6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044ee:	7bfa      	ldrb	r2, [r7, #15]
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	440b      	add	r3, r1
 80044fc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004504:	7bfa      	ldrb	r2, [r7, #15]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	440b      	add	r3, r1
 8004512:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	3301      	adds	r3, #1
 800451e:	73fb      	strb	r3, [r7, #15]
 8004520:	7bfa      	ldrb	r2, [r7, #15]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	429a      	cmp	r2, r3
 8004528:	d3b5      	bcc.n	8004496 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	603b      	str	r3, [r7, #0]
 8004530:	687e      	ldr	r6, [r7, #4]
 8004532:	466d      	mov	r5, sp
 8004534:	f106 0410 	add.w	r4, r6, #16
 8004538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800453a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	602b      	str	r3, [r5, #0]
 8004540:	1d33      	adds	r3, r6, #4
 8004542:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004544:	6838      	ldr	r0, [r7, #0]
 8004546:	f003 fce1 	bl	8007f0c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004564 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800456a:	af00      	add	r7, sp, #0
 800456c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004570:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004574:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004576:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800457a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d102      	bne.n	800458a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	f001 b83a 	b.w	80055fe <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800458a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800458e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 816f 	beq.w	800487e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80045a0:	4bb5      	ldr	r3, [pc, #724]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 030c 	and.w	r3, r3, #12
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d00c      	beq.n	80045c6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045ac:	4bb2      	ldr	r3, [pc, #712]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 030c 	and.w	r3, r3, #12
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d15c      	bne.n	8004672 <HAL_RCC_OscConfig+0x10e>
 80045b8:	4baf      	ldr	r3, [pc, #700]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80045c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c4:	d155      	bne.n	8004672 <HAL_RCC_OscConfig+0x10e>
 80045c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045ca:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80045d2:	fa93 f3a3 	rbit	r3, r3
 80045d6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80045da:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045de:	fab3 f383 	clz	r3, r3
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	095b      	lsrs	r3, r3, #5
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	f043 0301 	orr.w	r3, r3, #1
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d102      	bne.n	80045f8 <HAL_RCC_OscConfig+0x94>
 80045f2:	4ba1      	ldr	r3, [pc, #644]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	e015      	b.n	8004624 <HAL_RCC_OscConfig+0xc0>
 80045f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045fc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004600:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004604:	fa93 f3a3 	rbit	r3, r3
 8004608:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800460c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004610:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004614:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004618:	fa93 f3a3 	rbit	r3, r3
 800461c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004620:	4b95      	ldr	r3, [pc, #596]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004628:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800462c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004630:	fa92 f2a2 	rbit	r2, r2
 8004634:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004638:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800463c:	fab2 f282 	clz	r2, r2
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	f042 0220 	orr.w	r2, r2, #32
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	f002 021f 	and.w	r2, r2, #31
 800464c:	2101      	movs	r1, #1
 800464e:	fa01 f202 	lsl.w	r2, r1, r2
 8004652:	4013      	ands	r3, r2
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8111 	beq.w	800487c <HAL_RCC_OscConfig+0x318>
 800465a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800465e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	f040 8108 	bne.w	800487c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	f000 bfc6 	b.w	80055fe <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004672:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004676:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004682:	d106      	bne.n	8004692 <HAL_RCC_OscConfig+0x12e>
 8004684:	4b7c      	ldr	r3, [pc, #496]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a7b      	ldr	r2, [pc, #492]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 800468a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	e036      	b.n	8004700 <HAL_RCC_OscConfig+0x19c>
 8004692:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004696:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10c      	bne.n	80046bc <HAL_RCC_OscConfig+0x158>
 80046a2:	4b75      	ldr	r3, [pc, #468]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a74      	ldr	r2, [pc, #464]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 80046a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	4b72      	ldr	r3, [pc, #456]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a71      	ldr	r2, [pc, #452]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 80046b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	e021      	b.n	8004700 <HAL_RCC_OscConfig+0x19c>
 80046bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046cc:	d10c      	bne.n	80046e8 <HAL_RCC_OscConfig+0x184>
 80046ce:	4b6a      	ldr	r3, [pc, #424]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a69      	ldr	r2, [pc, #420]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 80046d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	4b67      	ldr	r3, [pc, #412]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a66      	ldr	r2, [pc, #408]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 80046e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	e00b      	b.n	8004700 <HAL_RCC_OscConfig+0x19c>
 80046e8:	4b63      	ldr	r3, [pc, #396]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a62      	ldr	r2, [pc, #392]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 80046ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	4b60      	ldr	r3, [pc, #384]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a5f      	ldr	r2, [pc, #380]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 80046fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046fe:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004700:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004704:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d059      	beq.n	80047c4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004710:	f7fd fe2c 	bl	800236c <HAL_GetTick>
 8004714:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004718:	e00a      	b.n	8004730 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800471a:	f7fd fe27 	bl	800236c <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b64      	cmp	r3, #100	; 0x64
 8004728:	d902      	bls.n	8004730 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	f000 bf67 	b.w	80055fe <HAL_RCC_OscConfig+0x109a>
 8004730:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004734:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004738:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800473c:	fa93 f3a3 	rbit	r3, r3
 8004740:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004744:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004748:	fab3 f383 	clz	r3, r3
 800474c:	b2db      	uxtb	r3, r3
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	b2db      	uxtb	r3, r3
 8004752:	f043 0301 	orr.w	r3, r3, #1
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	d102      	bne.n	8004762 <HAL_RCC_OscConfig+0x1fe>
 800475c:	4b46      	ldr	r3, [pc, #280]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	e015      	b.n	800478e <HAL_RCC_OscConfig+0x22a>
 8004762:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004766:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800476e:	fa93 f3a3 	rbit	r3, r3
 8004772:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004776:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800477a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800477e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004782:	fa93 f3a3 	rbit	r3, r3
 8004786:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800478a:	4b3b      	ldr	r3, [pc, #236]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004792:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004796:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800479a:	fa92 f2a2 	rbit	r2, r2
 800479e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80047a2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80047a6:	fab2 f282 	clz	r2, r2
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	f042 0220 	orr.w	r2, r2, #32
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	f002 021f 	and.w	r2, r2, #31
 80047b6:	2101      	movs	r1, #1
 80047b8:	fa01 f202 	lsl.w	r2, r1, r2
 80047bc:	4013      	ands	r3, r2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0ab      	beq.n	800471a <HAL_RCC_OscConfig+0x1b6>
 80047c2:	e05c      	b.n	800487e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c4:	f7fd fdd2 	bl	800236c <HAL_GetTick>
 80047c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047cc:	e00a      	b.n	80047e4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047ce:	f7fd fdcd 	bl	800236c <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b64      	cmp	r3, #100	; 0x64
 80047dc:	d902      	bls.n	80047e4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	f000 bf0d 	b.w	80055fe <HAL_RCC_OscConfig+0x109a>
 80047e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047e8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80047f0:	fa93 f3a3 	rbit	r3, r3
 80047f4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80047f8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047fc:	fab3 f383 	clz	r3, r3
 8004800:	b2db      	uxtb	r3, r3
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	b2db      	uxtb	r3, r3
 8004806:	f043 0301 	orr.w	r3, r3, #1
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	d102      	bne.n	8004816 <HAL_RCC_OscConfig+0x2b2>
 8004810:	4b19      	ldr	r3, [pc, #100]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	e015      	b.n	8004842 <HAL_RCC_OscConfig+0x2de>
 8004816:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800481a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004822:	fa93 f3a3 	rbit	r3, r3
 8004826:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800482a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800482e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004832:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004836:	fa93 f3a3 	rbit	r3, r3
 800483a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800483e:	4b0e      	ldr	r3, [pc, #56]	; (8004878 <HAL_RCC_OscConfig+0x314>)
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004846:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800484a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800484e:	fa92 f2a2 	rbit	r2, r2
 8004852:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004856:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800485a:	fab2 f282 	clz	r2, r2
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	f042 0220 	orr.w	r2, r2, #32
 8004864:	b2d2      	uxtb	r2, r2
 8004866:	f002 021f 	and.w	r2, r2, #31
 800486a:	2101      	movs	r1, #1
 800486c:	fa01 f202 	lsl.w	r2, r1, r2
 8004870:	4013      	ands	r3, r2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1ab      	bne.n	80047ce <HAL_RCC_OscConfig+0x26a>
 8004876:	e002      	b.n	800487e <HAL_RCC_OscConfig+0x31a>
 8004878:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800487c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800487e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004882:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 817f 	beq.w	8004b92 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004894:	4ba7      	ldr	r3, [pc, #668]	; (8004b34 <HAL_RCC_OscConfig+0x5d0>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 030c 	and.w	r3, r3, #12
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00c      	beq.n	80048ba <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80048a0:	4ba4      	ldr	r3, [pc, #656]	; (8004b34 <HAL_RCC_OscConfig+0x5d0>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f003 030c 	and.w	r3, r3, #12
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d173      	bne.n	8004994 <HAL_RCC_OscConfig+0x430>
 80048ac:	4ba1      	ldr	r3, [pc, #644]	; (8004b34 <HAL_RCC_OscConfig+0x5d0>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80048b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b8:	d16c      	bne.n	8004994 <HAL_RCC_OscConfig+0x430>
 80048ba:	2302      	movs	r3, #2
 80048bc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80048c4:	fa93 f3a3 	rbit	r3, r3
 80048c8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80048cc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048d0:	fab3 f383 	clz	r3, r3
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d102      	bne.n	80048ea <HAL_RCC_OscConfig+0x386>
 80048e4:	4b93      	ldr	r3, [pc, #588]	; (8004b34 <HAL_RCC_OscConfig+0x5d0>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	e013      	b.n	8004912 <HAL_RCC_OscConfig+0x3ae>
 80048ea:	2302      	movs	r3, #2
 80048ec:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80048f4:	fa93 f3a3 	rbit	r3, r3
 80048f8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80048fc:	2302      	movs	r3, #2
 80048fe:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004902:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004906:	fa93 f3a3 	rbit	r3, r3
 800490a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800490e:	4b89      	ldr	r3, [pc, #548]	; (8004b34 <HAL_RCC_OscConfig+0x5d0>)
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	2202      	movs	r2, #2
 8004914:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004918:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800491c:	fa92 f2a2 	rbit	r2, r2
 8004920:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004924:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004928:	fab2 f282 	clz	r2, r2
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	f042 0220 	orr.w	r2, r2, #32
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	f002 021f 	and.w	r2, r2, #31
 8004938:	2101      	movs	r1, #1
 800493a:	fa01 f202 	lsl.w	r2, r1, r2
 800493e:	4013      	ands	r3, r2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <HAL_RCC_OscConfig+0x3f6>
 8004944:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004948:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d002      	beq.n	800495a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	f000 be52 	b.w	80055fe <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800495a:	4b76      	ldr	r3, [pc, #472]	; (8004b34 <HAL_RCC_OscConfig+0x5d0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004966:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	21f8      	movs	r1, #248	; 0xf8
 8004970:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004974:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004978:	fa91 f1a1 	rbit	r1, r1
 800497c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004980:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004984:	fab1 f181 	clz	r1, r1
 8004988:	b2c9      	uxtb	r1, r1
 800498a:	408b      	lsls	r3, r1
 800498c:	4969      	ldr	r1, [pc, #420]	; (8004b34 <HAL_RCC_OscConfig+0x5d0>)
 800498e:	4313      	orrs	r3, r2
 8004990:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004992:	e0fe      	b.n	8004b92 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004994:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004998:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 8088 	beq.w	8004ab6 <HAL_RCC_OscConfig+0x552>
 80049a6:	2301      	movs	r3, #1
 80049a8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ac:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80049b0:	fa93 f3a3 	rbit	r3, r3
 80049b4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80049b8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049bc:	fab3 f383 	clz	r3, r3
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80049c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	461a      	mov	r2, r3
 80049ce:	2301      	movs	r3, #1
 80049d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d2:	f7fd fccb 	bl	800236c <HAL_GetTick>
 80049d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049da:	e00a      	b.n	80049f2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049dc:	f7fd fcc6 	bl	800236c <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d902      	bls.n	80049f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	f000 be06 	b.w	80055fe <HAL_RCC_OscConfig+0x109a>
 80049f2:	2302      	movs	r3, #2
 80049f4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80049fc:	fa93 f3a3 	rbit	r3, r3
 8004a00:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004a04:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a08:	fab3 f383 	clz	r3, r3
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	095b      	lsrs	r3, r3, #5
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	f043 0301 	orr.w	r3, r3, #1
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d102      	bne.n	8004a22 <HAL_RCC_OscConfig+0x4be>
 8004a1c:	4b45      	ldr	r3, [pc, #276]	; (8004b34 <HAL_RCC_OscConfig+0x5d0>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	e013      	b.n	8004a4a <HAL_RCC_OscConfig+0x4e6>
 8004a22:	2302      	movs	r3, #2
 8004a24:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a28:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004a2c:	fa93 f3a3 	rbit	r3, r3
 8004a30:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004a34:	2302      	movs	r3, #2
 8004a36:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004a3a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004a3e:	fa93 f3a3 	rbit	r3, r3
 8004a42:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004a46:	4b3b      	ldr	r3, [pc, #236]	; (8004b34 <HAL_RCC_OscConfig+0x5d0>)
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004a50:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004a54:	fa92 f2a2 	rbit	r2, r2
 8004a58:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004a5c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004a60:	fab2 f282 	clz	r2, r2
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	f042 0220 	orr.w	r2, r2, #32
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	f002 021f 	and.w	r2, r2, #31
 8004a70:	2101      	movs	r1, #1
 8004a72:	fa01 f202 	lsl.w	r2, r1, r2
 8004a76:	4013      	ands	r3, r2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0af      	beq.n	80049dc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a7c:	4b2d      	ldr	r3, [pc, #180]	; (8004b34 <HAL_RCC_OscConfig+0x5d0>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	21f8      	movs	r1, #248	; 0xf8
 8004a92:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a96:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004a9a:	fa91 f1a1 	rbit	r1, r1
 8004a9e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004aa2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004aa6:	fab1 f181 	clz	r1, r1
 8004aaa:	b2c9      	uxtb	r1, r1
 8004aac:	408b      	lsls	r3, r1
 8004aae:	4921      	ldr	r1, [pc, #132]	; (8004b34 <HAL_RCC_OscConfig+0x5d0>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	600b      	str	r3, [r1, #0]
 8004ab4:	e06d      	b.n	8004b92 <HAL_RCC_OscConfig+0x62e>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004abc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004ac0:	fa93 f3a3 	rbit	r3, r3
 8004ac4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004ac8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004acc:	fab3 f383 	clz	r3, r3
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ad6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	461a      	mov	r2, r3
 8004ade:	2300      	movs	r3, #0
 8004ae0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae2:	f7fd fc43 	bl	800236c <HAL_GetTick>
 8004ae6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aea:	e00a      	b.n	8004b02 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aec:	f7fd fc3e 	bl	800236c <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d902      	bls.n	8004b02 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	f000 bd7e 	b.w	80055fe <HAL_RCC_OscConfig+0x109a>
 8004b02:	2302      	movs	r3, #2
 8004b04:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b08:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004b0c:	fa93 f3a3 	rbit	r3, r3
 8004b10:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004b14:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b18:	fab3 f383 	clz	r3, r3
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d105      	bne.n	8004b38 <HAL_RCC_OscConfig+0x5d4>
 8004b2c:	4b01      	ldr	r3, [pc, #4]	; (8004b34 <HAL_RCC_OscConfig+0x5d0>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	e016      	b.n	8004b60 <HAL_RCC_OscConfig+0x5fc>
 8004b32:	bf00      	nop
 8004b34:	40021000 	.word	0x40021000
 8004b38:	2302      	movs	r3, #2
 8004b3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b42:	fa93 f3a3 	rbit	r3, r3
 8004b46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004b50:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004b54:	fa93 f3a3 	rbit	r3, r3
 8004b58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004b5c:	4bbf      	ldr	r3, [pc, #764]	; (8004e5c <HAL_RCC_OscConfig+0x8f8>)
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	2202      	movs	r2, #2
 8004b62:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004b66:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004b6a:	fa92 f2a2 	rbit	r2, r2
 8004b6e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004b72:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004b76:	fab2 f282 	clz	r2, r2
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	f042 0220 	orr.w	r2, r2, #32
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	f002 021f 	and.w	r2, r2, #31
 8004b86:	2101      	movs	r1, #1
 8004b88:	fa01 f202 	lsl.w	r2, r1, r2
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1ac      	bne.n	8004aec <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 8113 	beq.w	8004dce <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ba8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d07c      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x74e>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc2:	fa93 f3a3 	rbit	r3, r3
 8004bc6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004bca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bce:	fab3 f383 	clz	r3, r3
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	4ba2      	ldr	r3, [pc, #648]	; (8004e60 <HAL_RCC_OscConfig+0x8fc>)
 8004bd8:	4413      	add	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	461a      	mov	r2, r3
 8004bde:	2301      	movs	r3, #1
 8004be0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004be2:	f7fd fbc3 	bl	800236c <HAL_GetTick>
 8004be6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bea:	e00a      	b.n	8004c02 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bec:	f7fd fbbe 	bl	800236c <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d902      	bls.n	8004c02 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	f000 bcfe 	b.w	80055fe <HAL_RCC_OscConfig+0x109a>
 8004c02:	2302      	movs	r3, #2
 8004c04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c0c:	fa93 f2a3 	rbit	r2, r3
 8004c10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c14:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c22:	2202      	movs	r2, #2
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	fa93 f2a3 	rbit	r2, r3
 8004c34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c46:	2202      	movs	r2, #2
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	fa93 f2a3 	rbit	r2, r3
 8004c58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004c60:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c62:	4b7e      	ldr	r3, [pc, #504]	; (8004e5c <HAL_RCC_OscConfig+0x8f8>)
 8004c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004c6e:	2102      	movs	r1, #2
 8004c70:	6019      	str	r1, [r3, #0]
 8004c72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c76:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	fa93 f1a3 	rbit	r1, r3
 8004c80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c84:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c88:	6019      	str	r1, [r3, #0]
  return result;
 8004c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c8e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	fab3 f383 	clz	r3, r3
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d09d      	beq.n	8004bec <HAL_RCC_OscConfig+0x688>
 8004cb0:	e08d      	b.n	8004dce <HAL_RCC_OscConfig+0x86a>
 8004cb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cb6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004cba:	2201      	movs	r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cc2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	fa93 f2a3 	rbit	r2, r3
 8004ccc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cd0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004cd4:	601a      	str	r2, [r3, #0]
  return result;
 8004cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cda:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004cde:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ce0:	fab3 f383 	clz	r3, r3
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	4b5d      	ldr	r3, [pc, #372]	; (8004e60 <HAL_RCC_OscConfig+0x8fc>)
 8004cea:	4413      	add	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	461a      	mov	r2, r3
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf4:	f7fd fb3a 	bl	800236c <HAL_GetTick>
 8004cf8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cfc:	e00a      	b.n	8004d14 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cfe:	f7fd fb35 	bl	800236c <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d902      	bls.n	8004d14 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	f000 bc75 	b.w	80055fe <HAL_RCC_OscConfig+0x109a>
 8004d14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d18:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d24:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	fa93 f2a3 	rbit	r2, r3
 8004d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d32:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d40:	2202      	movs	r2, #2
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	fa93 f2a3 	rbit	r2, r3
 8004d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d60:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004d64:	2202      	movs	r2, #2
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d6c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	fa93 f2a3 	rbit	r2, r3
 8004d76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d7a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004d7e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d80:	4b36      	ldr	r3, [pc, #216]	; (8004e5c <HAL_RCC_OscConfig+0x8f8>)
 8004d82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d88:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004d8c:	2102      	movs	r1, #2
 8004d8e:	6019      	str	r1, [r3, #0]
 8004d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d94:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	fa93 f1a3 	rbit	r1, r3
 8004d9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004da2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004da6:	6019      	str	r1, [r3, #0]
  return result;
 8004da8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dac:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	fab3 f383 	clz	r3, r3
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	f003 031f 	and.w	r3, r3, #31
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d197      	bne.n	8004cfe <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0304 	and.w	r3, r3, #4
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 81a5 	beq.w	800512e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004de4:	2300      	movs	r3, #0
 8004de6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dea:	4b1c      	ldr	r3, [pc, #112]	; (8004e5c <HAL_RCC_OscConfig+0x8f8>)
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d116      	bne.n	8004e24 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004df6:	4b19      	ldr	r3, [pc, #100]	; (8004e5c <HAL_RCC_OscConfig+0x8f8>)
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	4a18      	ldr	r2, [pc, #96]	; (8004e5c <HAL_RCC_OscConfig+0x8f8>)
 8004dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e00:	61d3      	str	r3, [r2, #28]
 8004e02:	4b16      	ldr	r3, [pc, #88]	; (8004e5c <HAL_RCC_OscConfig+0x8f8>)
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004e0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e1c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e24:	4b0f      	ldr	r3, [pc, #60]	; (8004e64 <HAL_RCC_OscConfig+0x900>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d121      	bne.n	8004e74 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e30:	4b0c      	ldr	r3, [pc, #48]	; (8004e64 <HAL_RCC_OscConfig+0x900>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a0b      	ldr	r2, [pc, #44]	; (8004e64 <HAL_RCC_OscConfig+0x900>)
 8004e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e3a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e3c:	f7fd fa96 	bl	800236c <HAL_GetTick>
 8004e40:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e44:	e010      	b.n	8004e68 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e46:	f7fd fa91 	bl	800236c <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b64      	cmp	r3, #100	; 0x64
 8004e54:	d908      	bls.n	8004e68 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e3d1      	b.n	80055fe <HAL_RCC_OscConfig+0x109a>
 8004e5a:	bf00      	nop
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	10908120 	.word	0x10908120
 8004e64:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e68:	4b8d      	ldr	r3, [pc, #564]	; (80050a0 <HAL_RCC_OscConfig+0xb3c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0e8      	beq.n	8004e46 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d106      	bne.n	8004e92 <HAL_RCC_OscConfig+0x92e>
 8004e84:	4b87      	ldr	r3, [pc, #540]	; (80050a4 <HAL_RCC_OscConfig+0xb40>)
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	4a86      	ldr	r2, [pc, #536]	; (80050a4 <HAL_RCC_OscConfig+0xb40>)
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	6213      	str	r3, [r2, #32]
 8004e90:	e035      	b.n	8004efe <HAL_RCC_OscConfig+0x99a>
 8004e92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10c      	bne.n	8004ebc <HAL_RCC_OscConfig+0x958>
 8004ea2:	4b80      	ldr	r3, [pc, #512]	; (80050a4 <HAL_RCC_OscConfig+0xb40>)
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	4a7f      	ldr	r2, [pc, #508]	; (80050a4 <HAL_RCC_OscConfig+0xb40>)
 8004ea8:	f023 0301 	bic.w	r3, r3, #1
 8004eac:	6213      	str	r3, [r2, #32]
 8004eae:	4b7d      	ldr	r3, [pc, #500]	; (80050a4 <HAL_RCC_OscConfig+0xb40>)
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	4a7c      	ldr	r2, [pc, #496]	; (80050a4 <HAL_RCC_OscConfig+0xb40>)
 8004eb4:	f023 0304 	bic.w	r3, r3, #4
 8004eb8:	6213      	str	r3, [r2, #32]
 8004eba:	e020      	b.n	8004efe <HAL_RCC_OscConfig+0x99a>
 8004ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ec0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2b05      	cmp	r3, #5
 8004eca:	d10c      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x982>
 8004ecc:	4b75      	ldr	r3, [pc, #468]	; (80050a4 <HAL_RCC_OscConfig+0xb40>)
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	4a74      	ldr	r2, [pc, #464]	; (80050a4 <HAL_RCC_OscConfig+0xb40>)
 8004ed2:	f043 0304 	orr.w	r3, r3, #4
 8004ed6:	6213      	str	r3, [r2, #32]
 8004ed8:	4b72      	ldr	r3, [pc, #456]	; (80050a4 <HAL_RCC_OscConfig+0xb40>)
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	4a71      	ldr	r2, [pc, #452]	; (80050a4 <HAL_RCC_OscConfig+0xb40>)
 8004ede:	f043 0301 	orr.w	r3, r3, #1
 8004ee2:	6213      	str	r3, [r2, #32]
 8004ee4:	e00b      	b.n	8004efe <HAL_RCC_OscConfig+0x99a>
 8004ee6:	4b6f      	ldr	r3, [pc, #444]	; (80050a4 <HAL_RCC_OscConfig+0xb40>)
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	4a6e      	ldr	r2, [pc, #440]	; (80050a4 <HAL_RCC_OscConfig+0xb40>)
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	6213      	str	r3, [r2, #32]
 8004ef2:	4b6c      	ldr	r3, [pc, #432]	; (80050a4 <HAL_RCC_OscConfig+0xb40>)
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	4a6b      	ldr	r2, [pc, #428]	; (80050a4 <HAL_RCC_OscConfig+0xb40>)
 8004ef8:	f023 0304 	bic.w	r3, r3, #4
 8004efc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 8081 	beq.w	8005012 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f10:	f7fd fa2c 	bl	800236c <HAL_GetTick>
 8004f14:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f18:	e00b      	b.n	8004f32 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f1a:	f7fd fa27 	bl	800236c <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e365      	b.n	80055fe <HAL_RCC_OscConfig+0x109a>
 8004f32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f36:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f42:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	fa93 f2a3 	rbit	r2, r3
 8004f4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f50:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f5a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004f5e:	2202      	movs	r2, #2
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f66:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	fa93 f2a3 	rbit	r2, r3
 8004f70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f74:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004f78:	601a      	str	r2, [r3, #0]
  return result;
 8004f7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f7e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004f82:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f84:	fab3 f383 	clz	r3, r3
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	f043 0302 	orr.w	r3, r3, #2
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d102      	bne.n	8004f9e <HAL_RCC_OscConfig+0xa3a>
 8004f98:	4b42      	ldr	r3, [pc, #264]	; (80050a4 <HAL_RCC_OscConfig+0xb40>)
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	e013      	b.n	8004fc6 <HAL_RCC_OscConfig+0xa62>
 8004f9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fa2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	fa93 f2a3 	rbit	r2, r3
 8004fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fbc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	4b38      	ldr	r3, [pc, #224]	; (80050a4 <HAL_RCC_OscConfig+0xb40>)
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004fca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004fce:	2102      	movs	r1, #2
 8004fd0:	6011      	str	r1, [r2, #0]
 8004fd2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004fd6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	fa92 f1a2 	rbit	r1, r2
 8004fe0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004fe4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004fe8:	6011      	str	r1, [r2, #0]
  return result;
 8004fea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004fee:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	fab2 f282 	clz	r2, r2
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	f002 021f 	and.w	r2, r2, #31
 8005004:	2101      	movs	r1, #1
 8005006:	fa01 f202 	lsl.w	r2, r1, r2
 800500a:	4013      	ands	r3, r2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d084      	beq.n	8004f1a <HAL_RCC_OscConfig+0x9b6>
 8005010:	e083      	b.n	800511a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005012:	f7fd f9ab 	bl	800236c <HAL_GetTick>
 8005016:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800501a:	e00b      	b.n	8005034 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800501c:	f7fd f9a6 	bl	800236c <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	f241 3288 	movw	r2, #5000	; 0x1388
 800502c:	4293      	cmp	r3, r2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e2e4      	b.n	80055fe <HAL_RCC_OscConfig+0x109a>
 8005034:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005038:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800503c:	2202      	movs	r2, #2
 800503e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005040:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005044:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	fa93 f2a3 	rbit	r2, r3
 800504e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005052:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800505c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005060:	2202      	movs	r2, #2
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005068:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	fa93 f2a3 	rbit	r2, r3
 8005072:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005076:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800507a:	601a      	str	r2, [r3, #0]
  return result;
 800507c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005080:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005084:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005086:	fab3 f383 	clz	r3, r3
 800508a:	b2db      	uxtb	r3, r3
 800508c:	095b      	lsrs	r3, r3, #5
 800508e:	b2db      	uxtb	r3, r3
 8005090:	f043 0302 	orr.w	r3, r3, #2
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d106      	bne.n	80050a8 <HAL_RCC_OscConfig+0xb44>
 800509a:	4b02      	ldr	r3, [pc, #8]	; (80050a4 <HAL_RCC_OscConfig+0xb40>)
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	e017      	b.n	80050d0 <HAL_RCC_OscConfig+0xb6c>
 80050a0:	40007000 	.word	0x40007000
 80050a4:	40021000 	.word	0x40021000
 80050a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050ac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80050b0:	2202      	movs	r2, #2
 80050b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050b8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	fa93 f2a3 	rbit	r2, r3
 80050c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050c6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	4bb3      	ldr	r3, [pc, #716]	; (800539c <HAL_RCC_OscConfig+0xe38>)
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80050d4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80050d8:	2102      	movs	r1, #2
 80050da:	6011      	str	r1, [r2, #0]
 80050dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80050e0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80050e4:	6812      	ldr	r2, [r2, #0]
 80050e6:	fa92 f1a2 	rbit	r1, r2
 80050ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80050ee:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80050f2:	6011      	str	r1, [r2, #0]
  return result;
 80050f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80050f8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80050fc:	6812      	ldr	r2, [r2, #0]
 80050fe:	fab2 f282 	clz	r2, r2
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	f002 021f 	and.w	r2, r2, #31
 800510e:	2101      	movs	r1, #1
 8005110:	fa01 f202 	lsl.w	r2, r1, r2
 8005114:	4013      	ands	r3, r2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d180      	bne.n	800501c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800511a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800511e:	2b01      	cmp	r3, #1
 8005120:	d105      	bne.n	800512e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005122:	4b9e      	ldr	r3, [pc, #632]	; (800539c <HAL_RCC_OscConfig+0xe38>)
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	4a9d      	ldr	r2, [pc, #628]	; (800539c <HAL_RCC_OscConfig+0xe38>)
 8005128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800512c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800512e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005132:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 825e 	beq.w	80055fc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005140:	4b96      	ldr	r3, [pc, #600]	; (800539c <HAL_RCC_OscConfig+0xe38>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f003 030c 	and.w	r3, r3, #12
 8005148:	2b08      	cmp	r3, #8
 800514a:	f000 821f 	beq.w	800558c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800514e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005152:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	2b02      	cmp	r3, #2
 800515c:	f040 8170 	bne.w	8005440 <HAL_RCC_OscConfig+0xedc>
 8005160:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005164:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005168:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800516c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005172:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	fa93 f2a3 	rbit	r2, r3
 800517c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005180:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005184:	601a      	str	r2, [r3, #0]
  return result;
 8005186:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800518a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800518e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005190:	fab3 f383 	clz	r3, r3
 8005194:	b2db      	uxtb	r3, r3
 8005196:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800519a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	461a      	mov	r2, r3
 80051a2:	2300      	movs	r3, #0
 80051a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a6:	f7fd f8e1 	bl	800236c <HAL_GetTick>
 80051aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051ae:	e009      	b.n	80051c4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051b0:	f7fd f8dc 	bl	800236c <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e21c      	b.n	80055fe <HAL_RCC_OscConfig+0x109a>
 80051c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80051cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051d6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	fa93 f2a3 	rbit	r2, r3
 80051e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051e4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80051e8:	601a      	str	r2, [r3, #0]
  return result;
 80051ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051ee:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80051f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051f4:	fab3 f383 	clz	r3, r3
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	f043 0301 	orr.w	r3, r3, #1
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b01      	cmp	r3, #1
 8005206:	d102      	bne.n	800520e <HAL_RCC_OscConfig+0xcaa>
 8005208:	4b64      	ldr	r3, [pc, #400]	; (800539c <HAL_RCC_OscConfig+0xe38>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	e027      	b.n	800525e <HAL_RCC_OscConfig+0xcfa>
 800520e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005212:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005216:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800521a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005220:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	fa93 f2a3 	rbit	r2, r3
 800522a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800522e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005238:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800523c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005246:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	fa93 f2a3 	rbit	r2, r3
 8005250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005254:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	4b50      	ldr	r3, [pc, #320]	; (800539c <HAL_RCC_OscConfig+0xe38>)
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005262:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005266:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800526a:	6011      	str	r1, [r2, #0]
 800526c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005270:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005274:	6812      	ldr	r2, [r2, #0]
 8005276:	fa92 f1a2 	rbit	r1, r2
 800527a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800527e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8005282:	6011      	str	r1, [r2, #0]
  return result;
 8005284:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005288:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800528c:	6812      	ldr	r2, [r2, #0]
 800528e:	fab2 f282 	clz	r2, r2
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	f042 0220 	orr.w	r2, r2, #32
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	f002 021f 	and.w	r2, r2, #31
 800529e:	2101      	movs	r1, #1
 80052a0:	fa01 f202 	lsl.w	r2, r1, r2
 80052a4:	4013      	ands	r3, r2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d182      	bne.n	80051b0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052aa:	4b3c      	ldr	r3, [pc, #240]	; (800539c <HAL_RCC_OscConfig+0xe38>)
 80052ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ae:	f023 020f 	bic.w	r2, r3, #15
 80052b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	4937      	ldr	r1, [pc, #220]	; (800539c <HAL_RCC_OscConfig+0xe38>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80052c4:	4b35      	ldr	r3, [pc, #212]	; (800539c <HAL_RCC_OscConfig+0xe38>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80052cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6a19      	ldr	r1, [r3, #32]
 80052d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	430b      	orrs	r3, r1
 80052e6:	492d      	ldr	r1, [pc, #180]	; (800539c <HAL_RCC_OscConfig+0xe38>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	604b      	str	r3, [r1, #4]
 80052ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052f0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80052f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052fe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	fa93 f2a3 	rbit	r2, r3
 8005308:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800530c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005310:	601a      	str	r2, [r3, #0]
  return result;
 8005312:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005316:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800531a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800531c:	fab3 f383 	clz	r3, r3
 8005320:	b2db      	uxtb	r3, r3
 8005322:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005326:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	461a      	mov	r2, r3
 800532e:	2301      	movs	r3, #1
 8005330:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005332:	f7fd f81b 	bl	800236c <HAL_GetTick>
 8005336:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800533a:	e009      	b.n	8005350 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800533c:	f7fd f816 	bl	800236c <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e156      	b.n	80055fe <HAL_RCC_OscConfig+0x109a>
 8005350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005354:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005358:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800535c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005362:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	fa93 f2a3 	rbit	r2, r3
 800536c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005370:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005374:	601a      	str	r2, [r3, #0]
  return result;
 8005376:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800537a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800537e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005380:	fab3 f383 	clz	r3, r3
 8005384:	b2db      	uxtb	r3, r3
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	b2db      	uxtb	r3, r3
 800538a:	f043 0301 	orr.w	r3, r3, #1
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b01      	cmp	r3, #1
 8005392:	d105      	bne.n	80053a0 <HAL_RCC_OscConfig+0xe3c>
 8005394:	4b01      	ldr	r3, [pc, #4]	; (800539c <HAL_RCC_OscConfig+0xe38>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	e02a      	b.n	80053f0 <HAL_RCC_OscConfig+0xe8c>
 800539a:	bf00      	nop
 800539c:	40021000 	.word	0x40021000
 80053a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053a4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80053a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053b2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	fa93 f2a3 	rbit	r2, r3
 80053bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053c0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053ca:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80053ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053d8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	fa93 f2a3 	rbit	r2, r3
 80053e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053e6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	4b86      	ldr	r3, [pc, #536]	; (8005608 <HAL_RCC_OscConfig+0x10a4>)
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80053f4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80053f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80053fc:	6011      	str	r1, [r2, #0]
 80053fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005402:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005406:	6812      	ldr	r2, [r2, #0]
 8005408:	fa92 f1a2 	rbit	r1, r2
 800540c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005410:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005414:	6011      	str	r1, [r2, #0]
  return result;
 8005416:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800541a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800541e:	6812      	ldr	r2, [r2, #0]
 8005420:	fab2 f282 	clz	r2, r2
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	f042 0220 	orr.w	r2, r2, #32
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	f002 021f 	and.w	r2, r2, #31
 8005430:	2101      	movs	r1, #1
 8005432:	fa01 f202 	lsl.w	r2, r1, r2
 8005436:	4013      	ands	r3, r2
 8005438:	2b00      	cmp	r3, #0
 800543a:	f43f af7f 	beq.w	800533c <HAL_RCC_OscConfig+0xdd8>
 800543e:	e0dd      	b.n	80055fc <HAL_RCC_OscConfig+0x1098>
 8005440:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005444:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005448:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800544c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005452:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	fa93 f2a3 	rbit	r2, r3
 800545c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005460:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005464:	601a      	str	r2, [r3, #0]
  return result;
 8005466:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800546a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800546e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005470:	fab3 f383 	clz	r3, r3
 8005474:	b2db      	uxtb	r3, r3
 8005476:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800547a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	461a      	mov	r2, r3
 8005482:	2300      	movs	r3, #0
 8005484:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005486:	f7fc ff71 	bl	800236c <HAL_GetTick>
 800548a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800548e:	e009      	b.n	80054a4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005490:	f7fc ff6c 	bl	800236c <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e0ac      	b.n	80055fe <HAL_RCC_OscConfig+0x109a>
 80054a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054a8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80054ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054b6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	fa93 f2a3 	rbit	r2, r3
 80054c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054c4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80054c8:	601a      	str	r2, [r3, #0]
  return result;
 80054ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054ce:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80054d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054d4:	fab3 f383 	clz	r3, r3
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f043 0301 	orr.w	r3, r3, #1
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d102      	bne.n	80054ee <HAL_RCC_OscConfig+0xf8a>
 80054e8:	4b47      	ldr	r3, [pc, #284]	; (8005608 <HAL_RCC_OscConfig+0x10a4>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	e027      	b.n	800553e <HAL_RCC_OscConfig+0xfda>
 80054ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054f2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80054f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005500:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	fa93 f2a3 	rbit	r2, r3
 800550a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800550e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005518:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800551c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005526:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	fa93 f2a3 	rbit	r2, r3
 8005530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005534:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	4b33      	ldr	r3, [pc, #204]	; (8005608 <HAL_RCC_OscConfig+0x10a4>)
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005542:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005546:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800554a:	6011      	str	r1, [r2, #0]
 800554c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005550:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005554:	6812      	ldr	r2, [r2, #0]
 8005556:	fa92 f1a2 	rbit	r1, r2
 800555a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800555e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005562:	6011      	str	r1, [r2, #0]
  return result;
 8005564:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005568:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800556c:	6812      	ldr	r2, [r2, #0]
 800556e:	fab2 f282 	clz	r2, r2
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	f042 0220 	orr.w	r2, r2, #32
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	f002 021f 	and.w	r2, r2, #31
 800557e:	2101      	movs	r1, #1
 8005580:	fa01 f202 	lsl.w	r2, r1, r2
 8005584:	4013      	ands	r3, r2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d182      	bne.n	8005490 <HAL_RCC_OscConfig+0xf2c>
 800558a:	e037      	b.n	80055fc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800558c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005590:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d101      	bne.n	80055a0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e02e      	b.n	80055fe <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80055a0:	4b19      	ldr	r3, [pc, #100]	; (8005608 <HAL_RCC_OscConfig+0x10a4>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80055a8:	4b17      	ldr	r3, [pc, #92]	; (8005608 <HAL_RCC_OscConfig+0x10a4>)
 80055aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ac:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80055b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80055b4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80055b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d117      	bne.n	80055f8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80055c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80055cc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80055d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80055dc:	429a      	cmp	r2, r3
 80055de:	d10b      	bne.n	80055f8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80055e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055e4:	f003 020f 	and.w	r2, r3, #15
 80055e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d001      	beq.n	80055fc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e000      	b.n	80055fe <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40021000 	.word	0x40021000

0800560c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b09e      	sub	sp, #120	; 0x78
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e162      	b.n	80058ea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005624:	4b90      	ldr	r3, [pc, #576]	; (8005868 <HAL_RCC_ClockConfig+0x25c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0307 	and.w	r3, r3, #7
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d910      	bls.n	8005654 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005632:	4b8d      	ldr	r3, [pc, #564]	; (8005868 <HAL_RCC_ClockConfig+0x25c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f023 0207 	bic.w	r2, r3, #7
 800563a:	498b      	ldr	r1, [pc, #556]	; (8005868 <HAL_RCC_ClockConfig+0x25c>)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	4313      	orrs	r3, r2
 8005640:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005642:	4b89      	ldr	r3, [pc, #548]	; (8005868 <HAL_RCC_ClockConfig+0x25c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d001      	beq.n	8005654 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e14a      	b.n	80058ea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d008      	beq.n	8005672 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005660:	4b82      	ldr	r3, [pc, #520]	; (800586c <HAL_RCC_ClockConfig+0x260>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	497f      	ldr	r1, [pc, #508]	; (800586c <HAL_RCC_ClockConfig+0x260>)
 800566e:	4313      	orrs	r3, r2
 8005670:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 80dc 	beq.w	8005838 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d13c      	bne.n	8005702 <HAL_RCC_ClockConfig+0xf6>
 8005688:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800568c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005690:	fa93 f3a3 	rbit	r3, r3
 8005694:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005698:	fab3 f383 	clz	r3, r3
 800569c:	b2db      	uxtb	r3, r3
 800569e:	095b      	lsrs	r3, r3, #5
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	f043 0301 	orr.w	r3, r3, #1
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d102      	bne.n	80056b2 <HAL_RCC_ClockConfig+0xa6>
 80056ac:	4b6f      	ldr	r3, [pc, #444]	; (800586c <HAL_RCC_ClockConfig+0x260>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	e00f      	b.n	80056d2 <HAL_RCC_ClockConfig+0xc6>
 80056b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056ba:	fa93 f3a3 	rbit	r3, r3
 80056be:	667b      	str	r3, [r7, #100]	; 0x64
 80056c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056c4:	663b      	str	r3, [r7, #96]	; 0x60
 80056c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056c8:	fa93 f3a3 	rbit	r3, r3
 80056cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056ce:	4b67      	ldr	r3, [pc, #412]	; (800586c <HAL_RCC_ClockConfig+0x260>)
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80056d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056da:	fa92 f2a2 	rbit	r2, r2
 80056de:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80056e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056e2:	fab2 f282 	clz	r2, r2
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	f042 0220 	orr.w	r2, r2, #32
 80056ec:	b2d2      	uxtb	r2, r2
 80056ee:	f002 021f 	and.w	r2, r2, #31
 80056f2:	2101      	movs	r1, #1
 80056f4:	fa01 f202 	lsl.w	r2, r1, r2
 80056f8:	4013      	ands	r3, r2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d17b      	bne.n	80057f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e0f3      	b.n	80058ea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2b02      	cmp	r3, #2
 8005708:	d13c      	bne.n	8005784 <HAL_RCC_ClockConfig+0x178>
 800570a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800570e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005712:	fa93 f3a3 	rbit	r3, r3
 8005716:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800571a:	fab3 f383 	clz	r3, r3
 800571e:	b2db      	uxtb	r3, r3
 8005720:	095b      	lsrs	r3, r3, #5
 8005722:	b2db      	uxtb	r3, r3
 8005724:	f043 0301 	orr.w	r3, r3, #1
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b01      	cmp	r3, #1
 800572c:	d102      	bne.n	8005734 <HAL_RCC_ClockConfig+0x128>
 800572e:	4b4f      	ldr	r3, [pc, #316]	; (800586c <HAL_RCC_ClockConfig+0x260>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	e00f      	b.n	8005754 <HAL_RCC_ClockConfig+0x148>
 8005734:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005738:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800573c:	fa93 f3a3 	rbit	r3, r3
 8005740:	647b      	str	r3, [r7, #68]	; 0x44
 8005742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005746:	643b      	str	r3, [r7, #64]	; 0x40
 8005748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800574a:	fa93 f3a3 	rbit	r3, r3
 800574e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005750:	4b46      	ldr	r3, [pc, #280]	; (800586c <HAL_RCC_ClockConfig+0x260>)
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005754:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005758:	63ba      	str	r2, [r7, #56]	; 0x38
 800575a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800575c:	fa92 f2a2 	rbit	r2, r2
 8005760:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005764:	fab2 f282 	clz	r2, r2
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	f042 0220 	orr.w	r2, r2, #32
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	f002 021f 	and.w	r2, r2, #31
 8005774:	2101      	movs	r1, #1
 8005776:	fa01 f202 	lsl.w	r2, r1, r2
 800577a:	4013      	ands	r3, r2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d13a      	bne.n	80057f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e0b2      	b.n	80058ea <HAL_RCC_ClockConfig+0x2de>
 8005784:	2302      	movs	r3, #2
 8005786:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578a:	fa93 f3a3 	rbit	r3, r3
 800578e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005792:	fab3 f383 	clz	r3, r3
 8005796:	b2db      	uxtb	r3, r3
 8005798:	095b      	lsrs	r3, r3, #5
 800579a:	b2db      	uxtb	r3, r3
 800579c:	f043 0301 	orr.w	r3, r3, #1
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d102      	bne.n	80057ac <HAL_RCC_ClockConfig+0x1a0>
 80057a6:	4b31      	ldr	r3, [pc, #196]	; (800586c <HAL_RCC_ClockConfig+0x260>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	e00d      	b.n	80057c8 <HAL_RCC_ClockConfig+0x1bc>
 80057ac:	2302      	movs	r3, #2
 80057ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	fa93 f3a3 	rbit	r3, r3
 80057b6:	627b      	str	r3, [r7, #36]	; 0x24
 80057b8:	2302      	movs	r3, #2
 80057ba:	623b      	str	r3, [r7, #32]
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	fa93 f3a3 	rbit	r3, r3
 80057c2:	61fb      	str	r3, [r7, #28]
 80057c4:	4b29      	ldr	r3, [pc, #164]	; (800586c <HAL_RCC_ClockConfig+0x260>)
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	2202      	movs	r2, #2
 80057ca:	61ba      	str	r2, [r7, #24]
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	fa92 f2a2 	rbit	r2, r2
 80057d2:	617a      	str	r2, [r7, #20]
  return result;
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	fab2 f282 	clz	r2, r2
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	f042 0220 	orr.w	r2, r2, #32
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	f002 021f 	and.w	r2, r2, #31
 80057e6:	2101      	movs	r1, #1
 80057e8:	fa01 f202 	lsl.w	r2, r1, r2
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e079      	b.n	80058ea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057f6:	4b1d      	ldr	r3, [pc, #116]	; (800586c <HAL_RCC_ClockConfig+0x260>)
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f023 0203 	bic.w	r2, r3, #3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	491a      	ldr	r1, [pc, #104]	; (800586c <HAL_RCC_ClockConfig+0x260>)
 8005804:	4313      	orrs	r3, r2
 8005806:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005808:	f7fc fdb0 	bl	800236c <HAL_GetTick>
 800580c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800580e:	e00a      	b.n	8005826 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005810:	f7fc fdac 	bl	800236c <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	f241 3288 	movw	r2, #5000	; 0x1388
 800581e:	4293      	cmp	r3, r2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e061      	b.n	80058ea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005826:	4b11      	ldr	r3, [pc, #68]	; (800586c <HAL_RCC_ClockConfig+0x260>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f003 020c 	and.w	r2, r3, #12
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	429a      	cmp	r2, r3
 8005836:	d1eb      	bne.n	8005810 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005838:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <HAL_RCC_ClockConfig+0x25c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0307 	and.w	r3, r3, #7
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	429a      	cmp	r2, r3
 8005844:	d214      	bcs.n	8005870 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005846:	4b08      	ldr	r3, [pc, #32]	; (8005868 <HAL_RCC_ClockConfig+0x25c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f023 0207 	bic.w	r2, r3, #7
 800584e:	4906      	ldr	r1, [pc, #24]	; (8005868 <HAL_RCC_ClockConfig+0x25c>)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	4313      	orrs	r3, r2
 8005854:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005856:	4b04      	ldr	r3, [pc, #16]	; (8005868 <HAL_RCC_ClockConfig+0x25c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d005      	beq.n	8005870 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e040      	b.n	80058ea <HAL_RCC_ClockConfig+0x2de>
 8005868:	40022000 	.word	0x40022000
 800586c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b00      	cmp	r3, #0
 800587a:	d008      	beq.n	800588e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800587c:	4b1d      	ldr	r3, [pc, #116]	; (80058f4 <HAL_RCC_ClockConfig+0x2e8>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	491a      	ldr	r1, [pc, #104]	; (80058f4 <HAL_RCC_ClockConfig+0x2e8>)
 800588a:	4313      	orrs	r3, r2
 800588c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b00      	cmp	r3, #0
 8005898:	d009      	beq.n	80058ae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800589a:	4b16      	ldr	r3, [pc, #88]	; (80058f4 <HAL_RCC_ClockConfig+0x2e8>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	4912      	ldr	r1, [pc, #72]	; (80058f4 <HAL_RCC_ClockConfig+0x2e8>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80058ae:	f000 f829 	bl	8005904 <HAL_RCC_GetSysClockFreq>
 80058b2:	4601      	mov	r1, r0
 80058b4:	4b0f      	ldr	r3, [pc, #60]	; (80058f4 <HAL_RCC_ClockConfig+0x2e8>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058bc:	22f0      	movs	r2, #240	; 0xf0
 80058be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	fa92 f2a2 	rbit	r2, r2
 80058c6:	60fa      	str	r2, [r7, #12]
  return result;
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	fab2 f282 	clz	r2, r2
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	40d3      	lsrs	r3, r2
 80058d2:	4a09      	ldr	r2, [pc, #36]	; (80058f8 <HAL_RCC_ClockConfig+0x2ec>)
 80058d4:	5cd3      	ldrb	r3, [r2, r3]
 80058d6:	fa21 f303 	lsr.w	r3, r1, r3
 80058da:	4a08      	ldr	r2, [pc, #32]	; (80058fc <HAL_RCC_ClockConfig+0x2f0>)
 80058dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80058de:	4b08      	ldr	r3, [pc, #32]	; (8005900 <HAL_RCC_ClockConfig+0x2f4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fc fcfe 	bl	80022e4 <HAL_InitTick>
  
  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3778      	adds	r7, #120	; 0x78
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	40021000 	.word	0x40021000
 80058f8:	0800bb18 	.word	0x0800bb18
 80058fc:	20000008 	.word	0x20000008
 8005900:	2000000c 	.word	0x2000000c

08005904 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005904:	b480      	push	{r7}
 8005906:	b08b      	sub	sp, #44	; 0x2c
 8005908:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	61fb      	str	r3, [r7, #28]
 800590e:	2300      	movs	r3, #0
 8005910:	61bb      	str	r3, [r7, #24]
 8005912:	2300      	movs	r3, #0
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800591e:	4b2a      	ldr	r3, [pc, #168]	; (80059c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	f003 030c 	and.w	r3, r3, #12
 800592a:	2b04      	cmp	r3, #4
 800592c:	d002      	beq.n	8005934 <HAL_RCC_GetSysClockFreq+0x30>
 800592e:	2b08      	cmp	r3, #8
 8005930:	d003      	beq.n	800593a <HAL_RCC_GetSysClockFreq+0x36>
 8005932:	e03f      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005934:	4b25      	ldr	r3, [pc, #148]	; (80059cc <HAL_RCC_GetSysClockFreq+0xc8>)
 8005936:	623b      	str	r3, [r7, #32]
      break;
 8005938:	e03f      	b.n	80059ba <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005940:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005944:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	fa92 f2a2 	rbit	r2, r2
 800594c:	607a      	str	r2, [r7, #4]
  return result;
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	fab2 f282 	clz	r2, r2
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	40d3      	lsrs	r3, r2
 8005958:	4a1d      	ldr	r2, [pc, #116]	; (80059d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800595a:	5cd3      	ldrb	r3, [r2, r3]
 800595c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800595e:	4b1a      	ldr	r3, [pc, #104]	; (80059c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005962:	f003 030f 	and.w	r3, r3, #15
 8005966:	220f      	movs	r2, #15
 8005968:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	fa92 f2a2 	rbit	r2, r2
 8005970:	60fa      	str	r2, [r7, #12]
  return result;
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	fab2 f282 	clz	r2, r2
 8005978:	b2d2      	uxtb	r2, r2
 800597a:	40d3      	lsrs	r3, r2
 800597c:	4a15      	ldr	r2, [pc, #84]	; (80059d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800597e:	5cd3      	ldrb	r3, [r2, r3]
 8005980:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d008      	beq.n	800599e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800598c:	4a0f      	ldr	r2, [pc, #60]	; (80059cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	fbb2 f2f3 	udiv	r2, r2, r3
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	fb02 f303 	mul.w	r3, r2, r3
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
 800599c:	e007      	b.n	80059ae <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800599e:	4a0b      	ldr	r2, [pc, #44]	; (80059cc <HAL_RCC_GetSysClockFreq+0xc8>)
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	fb02 f303 	mul.w	r3, r2, r3
 80059ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	623b      	str	r3, [r7, #32]
      break;
 80059b2:	e002      	b.n	80059ba <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80059b4:	4b05      	ldr	r3, [pc, #20]	; (80059cc <HAL_RCC_GetSysClockFreq+0xc8>)
 80059b6:	623b      	str	r3, [r7, #32]
      break;
 80059b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059ba:	6a3b      	ldr	r3, [r7, #32]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	372c      	adds	r7, #44	; 0x2c
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	40021000 	.word	0x40021000
 80059cc:	007a1200 	.word	0x007a1200
 80059d0:	0800bb30 	.word	0x0800bb30
 80059d4:	0800bb40 	.word	0x0800bb40

080059d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059dc:	4b03      	ldr	r3, [pc, #12]	; (80059ec <HAL_RCC_GetHCLKFreq+0x14>)
 80059de:	681b      	ldr	r3, [r3, #0]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	20000008 	.word	0x20000008

080059f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80059f6:	f7ff ffef 	bl	80059d8 <HAL_RCC_GetHCLKFreq>
 80059fa:	4601      	mov	r1, r0
 80059fc:	4b0b      	ldr	r3, [pc, #44]	; (8005a2c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a04:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005a08:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	fa92 f2a2 	rbit	r2, r2
 8005a10:	603a      	str	r2, [r7, #0]
  return result;
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	fab2 f282 	clz	r2, r2
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	40d3      	lsrs	r3, r2
 8005a1c:	4a04      	ldr	r2, [pc, #16]	; (8005a30 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005a1e:	5cd3      	ldrb	r3, [r2, r3]
 8005a20:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	0800bb28 	.word	0x0800bb28

08005a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005a3a:	f7ff ffcd 	bl	80059d8 <HAL_RCC_GetHCLKFreq>
 8005a3e:	4601      	mov	r1, r0
 8005a40:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005a48:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005a4c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	fa92 f2a2 	rbit	r2, r2
 8005a54:	603a      	str	r2, [r7, #0]
  return result;
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	fab2 f282 	clz	r2, r2
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	40d3      	lsrs	r3, r2
 8005a60:	4a04      	ldr	r2, [pc, #16]	; (8005a74 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005a62:	5cd3      	ldrb	r3, [r2, r3]
 8005a64:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	40021000 	.word	0x40021000
 8005a74:	0800bb28 	.word	0x0800bb28

08005a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b092      	sub	sp, #72	; 0x48
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 80d4 	beq.w	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a9c:	4b4e      	ldr	r3, [pc, #312]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10e      	bne.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aa8:	4b4b      	ldr	r3, [pc, #300]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	4a4a      	ldr	r2, [pc, #296]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab2:	61d3      	str	r3, [r2, #28]
 8005ab4:	4b48      	ldr	r3, [pc, #288]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005abc:	60bb      	str	r3, [r7, #8]
 8005abe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac6:	4b45      	ldr	r3, [pc, #276]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d118      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ad2:	4b42      	ldr	r3, [pc, #264]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a41      	ldr	r2, [pc, #260]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005adc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ade:	f7fc fc45 	bl	800236c <HAL_GetTick>
 8005ae2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae4:	e008      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ae6:	f7fc fc41 	bl	800236c <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b64      	cmp	r3, #100	; 0x64
 8005af2:	d901      	bls.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e1d6      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005af8:	4b38      	ldr	r3, [pc, #224]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0f0      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b04:	4b34      	ldr	r3, [pc, #208]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 8084 	beq.w	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d07c      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b24:	4b2c      	ldr	r3, [pc, #176]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b36:	fa93 f3a3 	rbit	r3, r3
 8005b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b3e:	fab3 f383 	clz	r3, r3
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	461a      	mov	r2, r3
 8005b46:	4b26      	ldr	r3, [pc, #152]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b48:	4413      	add	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	2301      	movs	r3, #1
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	fa93 f3a3 	rbit	r3, r3
 8005b5e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b62:	fab3 f383 	clz	r3, r3
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	461a      	mov	r2, r3
 8005b6a:	4b1d      	ldr	r3, [pc, #116]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b6c:	4413      	add	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	461a      	mov	r2, r3
 8005b72:	2300      	movs	r3, #0
 8005b74:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b76:	4a18      	ldr	r2, [pc, #96]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b7a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d04b      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b86:	f7fc fbf1 	bl	800236c <HAL_GetTick>
 8005b8a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b8c:	e00a      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b8e:	f7fc fbed 	bl	800236c <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e180      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005baa:	fa93 f3a3 	rbit	r3, r3
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	623b      	str	r3, [r7, #32]
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	fa93 f3a3 	rbit	r3, r3
 8005bba:	61fb      	str	r3, [r7, #28]
  return result;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bbe:	fab3 f383 	clz	r3, r3
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	095b      	lsrs	r3, r3, #5
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	f043 0302 	orr.w	r3, r3, #2
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d108      	bne.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005bd2:	4b01      	ldr	r3, [pc, #4]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	e00d      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	40007000 	.word	0x40007000
 8005be0:	10908100 	.word	0x10908100
 8005be4:	2302      	movs	r3, #2
 8005be6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	fa93 f3a3 	rbit	r3, r3
 8005bee:	617b      	str	r3, [r7, #20]
 8005bf0:	4b9a      	ldr	r3, [pc, #616]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	613a      	str	r2, [r7, #16]
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	fa92 f2a2 	rbit	r2, r2
 8005bfe:	60fa      	str	r2, [r7, #12]
  return result;
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	fab2 f282 	clz	r2, r2
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c0c:	b2d2      	uxtb	r2, r2
 8005c0e:	f002 021f 	and.w	r2, r2, #31
 8005c12:	2101      	movs	r1, #1
 8005c14:	fa01 f202 	lsl.w	r2, r1, r2
 8005c18:	4013      	ands	r3, r2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0b7      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005c1e:	4b8f      	ldr	r3, [pc, #572]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	498c      	ldr	r1, [pc, #560]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d105      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c38:	4b88      	ldr	r3, [pc, #544]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c3a:	69db      	ldr	r3, [r3, #28]
 8005c3c:	4a87      	ldr	r2, [pc, #540]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d008      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c50:	4b82      	ldr	r3, [pc, #520]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c54:	f023 0203 	bic.w	r2, r3, #3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	497f      	ldr	r1, [pc, #508]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d008      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c6e:	4b7b      	ldr	r3, [pc, #492]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	4978      	ldr	r1, [pc, #480]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d008      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c8c:	4b73      	ldr	r3, [pc, #460]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	4970      	ldr	r1, [pc, #448]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0320 	and.w	r3, r3, #32
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d008      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005caa:	4b6c      	ldr	r3, [pc, #432]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cae:	f023 0210 	bic.w	r2, r3, #16
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	4969      	ldr	r1, [pc, #420]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d008      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005cc8:	4b64      	ldr	r3, [pc, #400]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd4:	4961      	ldr	r1, [pc, #388]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d008      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ce6:	4b5d      	ldr	r3, [pc, #372]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cea:	f023 0220 	bic.w	r2, r3, #32
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	495a      	ldr	r1, [pc, #360]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d008      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d04:	4b55      	ldr	r3, [pc, #340]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d08:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	4952      	ldr	r1, [pc, #328]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0308 	and.w	r3, r3, #8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d008      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d22:	4b4e      	ldr	r3, [pc, #312]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	494b      	ldr	r1, [pc, #300]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0310 	and.w	r3, r3, #16
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d008      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d40:	4b46      	ldr	r3, [pc, #280]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	4943      	ldr	r1, [pc, #268]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d008      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d5e:	4b3f      	ldr	r3, [pc, #252]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6a:	493c      	ldr	r1, [pc, #240]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d008      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d7c:	4b37      	ldr	r3, [pc, #220]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d80:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d88:	4934      	ldr	r1, [pc, #208]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d008      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005d9a:	4b30      	ldr	r3, [pc, #192]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da6:	492d      	ldr	r1, [pc, #180]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d008      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005db8:	4b28      	ldr	r3, [pc, #160]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc4:	4925      	ldr	r1, [pc, #148]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d008      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005dd6:	4b21      	ldr	r3, [pc, #132]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dda:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	491e      	ldr	r1, [pc, #120]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d008      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005df4:	4b19      	ldr	r3, [pc, #100]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	4916      	ldr	r1, [pc, #88]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d008      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005e12:	4b12      	ldr	r3, [pc, #72]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1e:	490f      	ldr	r1, [pc, #60]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d008      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005e30:	4b0a      	ldr	r3, [pc, #40]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e34:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3c:	4907      	ldr	r1, [pc, #28]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00c      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005e4e:	4b03      	ldr	r3, [pc, #12]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e52:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	e002      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005e5a:	bf00      	nop
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e62:	4913      	ldr	r1, [pc, #76]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d008      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005e74:	4b0e      	ldr	r3, [pc, #56]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e80:	490b      	ldr	r1, [pc, #44]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d008      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005e92:	4b07      	ldr	r3, [pc, #28]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e96:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e9e:	4904      	ldr	r1, [pc, #16]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3748      	adds	r7, #72	; 0x48
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	40021000 	.word	0x40021000

08005eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e054      	b.n	8005f70 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d111      	bne.n	8005ef6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f001 fa28 	bl	8007330 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d102      	bne.n	8005eee <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a23      	ldr	r2, [pc, #140]	; (8005f78 <HAL_TIM_Base_Init+0xc4>)
 8005eec:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2202      	movs	r2, #2
 8005efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	3304      	adds	r3, #4
 8005f06:	4619      	mov	r1, r3
 8005f08:	4610      	mov	r0, r2
 8005f0a:	f000 fdad 	bl	8006a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	08001ffd 	.word	0x08001ffd

08005f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d001      	beq.n	8005f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e04f      	b.n	8006034 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0201 	orr.w	r2, r2, #1
 8005faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a23      	ldr	r2, [pc, #140]	; (8006040 <HAL_TIM_Base_Start_IT+0xc4>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d01d      	beq.n	8005ff2 <HAL_TIM_Base_Start_IT+0x76>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fbe:	d018      	beq.n	8005ff2 <HAL_TIM_Base_Start_IT+0x76>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a1f      	ldr	r2, [pc, #124]	; (8006044 <HAL_TIM_Base_Start_IT+0xc8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d013      	beq.n	8005ff2 <HAL_TIM_Base_Start_IT+0x76>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a1e      	ldr	r2, [pc, #120]	; (8006048 <HAL_TIM_Base_Start_IT+0xcc>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d00e      	beq.n	8005ff2 <HAL_TIM_Base_Start_IT+0x76>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a1c      	ldr	r2, [pc, #112]	; (800604c <HAL_TIM_Base_Start_IT+0xd0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d009      	beq.n	8005ff2 <HAL_TIM_Base_Start_IT+0x76>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a1b      	ldr	r2, [pc, #108]	; (8006050 <HAL_TIM_Base_Start_IT+0xd4>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d004      	beq.n	8005ff2 <HAL_TIM_Base_Start_IT+0x76>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a19      	ldr	r2, [pc, #100]	; (8006054 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d115      	bne.n	800601e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	4b17      	ldr	r3, [pc, #92]	; (8006058 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2b06      	cmp	r3, #6
 8006002:	d015      	beq.n	8006030 <HAL_TIM_Base_Start_IT+0xb4>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800600a:	d011      	beq.n	8006030 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601c:	e008      	b.n	8006030 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f042 0201 	orr.w	r2, r2, #1
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	e000      	b.n	8006032 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006030:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	40012c00 	.word	0x40012c00
 8006044:	40000400 	.word	0x40000400
 8006048:	40000800 	.word	0x40000800
 800604c:	40013400 	.word	0x40013400
 8006050:	40014000 	.word	0x40014000
 8006054:	40015000 	.word	0x40015000
 8006058:	00010007 	.word	0x00010007

0800605c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e054      	b.n	8006118 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d111      	bne.n	800609e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f001 f954 	bl	8007330 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800608c:	2b00      	cmp	r3, #0
 800608e:	d102      	bne.n	8006096 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a23      	ldr	r2, [pc, #140]	; (8006120 <HAL_TIM_PWM_Init+0xc4>)
 8006094:	665a      	str	r2, [r3, #100]	; 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2202      	movs	r2, #2
 80060a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	3304      	adds	r3, #4
 80060ae:	4619      	mov	r1, r3
 80060b0:	4610      	mov	r0, r2
 80060b2:	f000 fcd9 	bl	8006a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	08002045 	.word	0x08002045

08006124 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d109      	bne.n	8006148 <HAL_TIM_PWM_Start+0x24>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b01      	cmp	r3, #1
 800613e:	bf14      	ite	ne
 8006140:	2301      	movne	r3, #1
 8006142:	2300      	moveq	r3, #0
 8006144:	b2db      	uxtb	r3, r3
 8006146:	e03c      	b.n	80061c2 <HAL_TIM_PWM_Start+0x9e>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2b04      	cmp	r3, #4
 800614c:	d109      	bne.n	8006162 <HAL_TIM_PWM_Start+0x3e>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b01      	cmp	r3, #1
 8006158:	bf14      	ite	ne
 800615a:	2301      	movne	r3, #1
 800615c:	2300      	moveq	r3, #0
 800615e:	b2db      	uxtb	r3, r3
 8006160:	e02f      	b.n	80061c2 <HAL_TIM_PWM_Start+0x9e>
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b08      	cmp	r3, #8
 8006166:	d109      	bne.n	800617c <HAL_TIM_PWM_Start+0x58>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b01      	cmp	r3, #1
 8006172:	bf14      	ite	ne
 8006174:	2301      	movne	r3, #1
 8006176:	2300      	moveq	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	e022      	b.n	80061c2 <HAL_TIM_PWM_Start+0x9e>
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2b0c      	cmp	r3, #12
 8006180:	d109      	bne.n	8006196 <HAL_TIM_PWM_Start+0x72>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b01      	cmp	r3, #1
 800618c:	bf14      	ite	ne
 800618e:	2301      	movne	r3, #1
 8006190:	2300      	moveq	r3, #0
 8006192:	b2db      	uxtb	r3, r3
 8006194:	e015      	b.n	80061c2 <HAL_TIM_PWM_Start+0x9e>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2b10      	cmp	r3, #16
 800619a:	d109      	bne.n	80061b0 <HAL_TIM_PWM_Start+0x8c>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	bf14      	ite	ne
 80061a8:	2301      	movne	r3, #1
 80061aa:	2300      	moveq	r3, #0
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	e008      	b.n	80061c2 <HAL_TIM_PWM_Start+0x9e>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	bf14      	ite	ne
 80061bc:	2301      	movne	r3, #1
 80061be:	2300      	moveq	r3, #0
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e0a1      	b.n	800630e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d104      	bne.n	80061da <HAL_TIM_PWM_Start+0xb6>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061d8:	e023      	b.n	8006222 <HAL_TIM_PWM_Start+0xfe>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d104      	bne.n	80061ea <HAL_TIM_PWM_Start+0xc6>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061e8:	e01b      	b.n	8006222 <HAL_TIM_PWM_Start+0xfe>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d104      	bne.n	80061fa <HAL_TIM_PWM_Start+0xd6>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2202      	movs	r2, #2
 80061f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061f8:	e013      	b.n	8006222 <HAL_TIM_PWM_Start+0xfe>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b0c      	cmp	r3, #12
 80061fe:	d104      	bne.n	800620a <HAL_TIM_PWM_Start+0xe6>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006208:	e00b      	b.n	8006222 <HAL_TIM_PWM_Start+0xfe>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b10      	cmp	r3, #16
 800620e:	d104      	bne.n	800621a <HAL_TIM_PWM_Start+0xf6>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006218:	e003      	b.n	8006222 <HAL_TIM_PWM_Start+0xfe>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2202      	movs	r2, #2
 800621e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2201      	movs	r2, #1
 8006228:	6839      	ldr	r1, [r7, #0]
 800622a:	4618      	mov	r0, r3
 800622c:	f001 f85a 	bl	80072e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a38      	ldr	r2, [pc, #224]	; (8006318 <HAL_TIM_PWM_Start+0x1f4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d018      	beq.n	800626c <HAL_TIM_PWM_Start+0x148>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a37      	ldr	r2, [pc, #220]	; (800631c <HAL_TIM_PWM_Start+0x1f8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d013      	beq.n	800626c <HAL_TIM_PWM_Start+0x148>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a35      	ldr	r2, [pc, #212]	; (8006320 <HAL_TIM_PWM_Start+0x1fc>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d00e      	beq.n	800626c <HAL_TIM_PWM_Start+0x148>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a34      	ldr	r2, [pc, #208]	; (8006324 <HAL_TIM_PWM_Start+0x200>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d009      	beq.n	800626c <HAL_TIM_PWM_Start+0x148>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a32      	ldr	r2, [pc, #200]	; (8006328 <HAL_TIM_PWM_Start+0x204>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d004      	beq.n	800626c <HAL_TIM_PWM_Start+0x148>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a31      	ldr	r2, [pc, #196]	; (800632c <HAL_TIM_PWM_Start+0x208>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d101      	bne.n	8006270 <HAL_TIM_PWM_Start+0x14c>
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <HAL_TIM_PWM_Start+0x14e>
 8006270:	2300      	movs	r3, #0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d007      	beq.n	8006286 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006284:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a23      	ldr	r2, [pc, #140]	; (8006318 <HAL_TIM_PWM_Start+0x1f4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d01d      	beq.n	80062cc <HAL_TIM_PWM_Start+0x1a8>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006298:	d018      	beq.n	80062cc <HAL_TIM_PWM_Start+0x1a8>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a24      	ldr	r2, [pc, #144]	; (8006330 <HAL_TIM_PWM_Start+0x20c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d013      	beq.n	80062cc <HAL_TIM_PWM_Start+0x1a8>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a22      	ldr	r2, [pc, #136]	; (8006334 <HAL_TIM_PWM_Start+0x210>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d00e      	beq.n	80062cc <HAL_TIM_PWM_Start+0x1a8>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a1a      	ldr	r2, [pc, #104]	; (800631c <HAL_TIM_PWM_Start+0x1f8>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d009      	beq.n	80062cc <HAL_TIM_PWM_Start+0x1a8>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a18      	ldr	r2, [pc, #96]	; (8006320 <HAL_TIM_PWM_Start+0x1fc>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d004      	beq.n	80062cc <HAL_TIM_PWM_Start+0x1a8>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a19      	ldr	r2, [pc, #100]	; (800632c <HAL_TIM_PWM_Start+0x208>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d115      	bne.n	80062f8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	4b19      	ldr	r3, [pc, #100]	; (8006338 <HAL_TIM_PWM_Start+0x214>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b06      	cmp	r3, #6
 80062dc:	d015      	beq.n	800630a <HAL_TIM_PWM_Start+0x1e6>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e4:	d011      	beq.n	800630a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f042 0201 	orr.w	r2, r2, #1
 80062f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f6:	e008      	b.n	800630a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0201 	orr.w	r2, r2, #1
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	e000      	b.n	800630c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800630a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	40012c00 	.word	0x40012c00
 800631c:	40013400 	.word	0x40013400
 8006320:	40014000 	.word	0x40014000
 8006324:	40014400 	.word	0x40014400
 8006328:	40014800 	.word	0x40014800
 800632c:	40015000 	.word	0x40015000
 8006330:	40000400 	.word	0x40000400
 8006334:	40000800 	.word	0x40000800
 8006338:	00010007 	.word	0x00010007

0800633c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b02      	cmp	r3, #2
 8006350:	d128      	bne.n	80063a4 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b02      	cmp	r3, #2
 800635e:	d121      	bne.n	80063a4 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0202 	mvn.w	r2, #2
 8006368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d005      	beq.n	800638a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	4798      	blx	r3
 8006388:	e009      	b.n	800639e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f003 0304 	and.w	r3, r3, #4
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	d128      	bne.n	8006404 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f003 0304 	and.w	r3, r3, #4
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d121      	bne.n	8006404 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f06f 0204 	mvn.w	r2, #4
 80063c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2202      	movs	r2, #2
 80063ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d005      	beq.n	80063ea <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	4798      	blx	r3
 80063e8:	e009      	b.n	80063fe <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	2b08      	cmp	r3, #8
 8006410:	d128      	bne.n	8006464 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b08      	cmp	r3, #8
 800641e:	d121      	bne.n	8006464 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f06f 0208 	mvn.w	r2, #8
 8006428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2204      	movs	r2, #4
 800642e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d005      	beq.n	800644a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	4798      	blx	r3
 8006448:	e009      	b.n	800645e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	f003 0310 	and.w	r3, r3, #16
 800646e:	2b10      	cmp	r3, #16
 8006470:	d128      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f003 0310 	and.w	r3, r3, #16
 800647c:	2b10      	cmp	r3, #16
 800647e:	d121      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f06f 0210 	mvn.w	r2, #16
 8006488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2208      	movs	r2, #8
 800648e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800649a:	2b00      	cmp	r3, #0
 800649c:	d005      	beq.n	80064aa <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	4798      	blx	r3
 80064a8:	e009      	b.n	80064be <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d110      	bne.n	80064f4 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d109      	bne.n	80064f4 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f06f 0201 	mvn.w	r2, #1
 80064e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fe:	2b80      	cmp	r3, #128	; 0x80
 8006500:	d110      	bne.n	8006524 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650c:	2b80      	cmp	r3, #128	; 0x80
 800650e:	d109      	bne.n	8006524 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	4798      	blx	r3
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006532:	d110      	bne.n	8006556 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653e:	2b80      	cmp	r3, #128	; 0x80
 8006540:	d109      	bne.n	8006556 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800654a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	4798      	blx	r3
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006560:	2b40      	cmp	r3, #64	; 0x40
 8006562:	d110      	bne.n	8006586 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656e:	2b40      	cmp	r3, #64	; 0x40
 8006570:	d109      	bne.n	8006586 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800657a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	f003 0320 	and.w	r3, r3, #32
 8006590:	2b20      	cmp	r3, #32
 8006592:	d110      	bne.n	80065b6 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	2b20      	cmp	r3, #32
 80065a0:	d109      	bne.n	80065b6 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f06f 0220 	mvn.w	r2, #32
 80065aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065b6:	bf00      	nop
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
	...

080065c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d101      	bne.n	80065de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065da:	2302      	movs	r3, #2
 80065dc:	e0ff      	b.n	80067de <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b14      	cmp	r3, #20
 80065ea:	f200 80f0 	bhi.w	80067ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 80065ee:	a201      	add	r2, pc, #4	; (adr r2, 80065f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f4:	08006649 	.word	0x08006649
 80065f8:	080067cf 	.word	0x080067cf
 80065fc:	080067cf 	.word	0x080067cf
 8006600:	080067cf 	.word	0x080067cf
 8006604:	08006689 	.word	0x08006689
 8006608:	080067cf 	.word	0x080067cf
 800660c:	080067cf 	.word	0x080067cf
 8006610:	080067cf 	.word	0x080067cf
 8006614:	080066cb 	.word	0x080066cb
 8006618:	080067cf 	.word	0x080067cf
 800661c:	080067cf 	.word	0x080067cf
 8006620:	080067cf 	.word	0x080067cf
 8006624:	0800670b 	.word	0x0800670b
 8006628:	080067cf 	.word	0x080067cf
 800662c:	080067cf 	.word	0x080067cf
 8006630:	080067cf 	.word	0x080067cf
 8006634:	0800674d 	.word	0x0800674d
 8006638:	080067cf 	.word	0x080067cf
 800663c:	080067cf 	.word	0x080067cf
 8006640:	080067cf 	.word	0x080067cf
 8006644:	0800678d 	.word	0x0800678d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68b9      	ldr	r1, [r7, #8]
 800664e:	4618      	mov	r0, r3
 8006650:	f000 faa8 	bl	8006ba4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699a      	ldr	r2, [r3, #24]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f042 0208 	orr.w	r2, r2, #8
 8006662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	699a      	ldr	r2, [r3, #24]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0204 	bic.w	r2, r2, #4
 8006672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6999      	ldr	r1, [r3, #24]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	691a      	ldr	r2, [r3, #16]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	619a      	str	r2, [r3, #24]
      break;
 8006686:	e0a5      	b.n	80067d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68b9      	ldr	r1, [r7, #8]
 800668e:	4618      	mov	r0, r3
 8006690:	f000 fb22 	bl	8006cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699a      	ldr	r2, [r3, #24]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6999      	ldr	r1, [r3, #24]
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	021a      	lsls	r2, r3, #8
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	619a      	str	r2, [r3, #24]
      break;
 80066c8:	e084      	b.n	80067d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68b9      	ldr	r1, [r7, #8]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 fb95 	bl	8006e00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69da      	ldr	r2, [r3, #28]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f042 0208 	orr.w	r2, r2, #8
 80066e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69da      	ldr	r2, [r3, #28]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0204 	bic.w	r2, r2, #4
 80066f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	69d9      	ldr	r1, [r3, #28]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	691a      	ldr	r2, [r3, #16]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	61da      	str	r2, [r3, #28]
      break;
 8006708:	e064      	b.n	80067d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68b9      	ldr	r1, [r7, #8]
 8006710:	4618      	mov	r0, r3
 8006712:	f000 fc07 	bl	8006f24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69da      	ldr	r2, [r3, #28]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69da      	ldr	r2, [r3, #28]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69d9      	ldr	r1, [r3, #28]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	021a      	lsls	r2, r3, #8
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	430a      	orrs	r2, r1
 8006748:	61da      	str	r2, [r3, #28]
      break;
 800674a:	e043      	b.n	80067d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	4618      	mov	r0, r3
 8006754:	f000 fc56 	bl	8007004 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f042 0208 	orr.w	r2, r2, #8
 8006766:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f022 0204 	bic.w	r2, r2, #4
 8006776:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	691a      	ldr	r2, [r3, #16]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800678a:	e023      	b.n	80067d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68b9      	ldr	r1, [r7, #8]
 8006792:	4618      	mov	r0, r3
 8006794:	f000 fca0 	bl	80070d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	021a      	lsls	r2, r3, #8
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067cc:	e002      	b.n	80067d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	75fb      	strb	r3, [r7, #23]
      break;
 80067d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop

080067e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d101      	bne.n	8006804 <HAL_TIM_ConfigClockSource+0x1c>
 8006800:	2302      	movs	r3, #2
 8006802:	e0b6      	b.n	8006972 <HAL_TIM_ConfigClockSource+0x18a>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006822:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800682e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006840:	d03e      	beq.n	80068c0 <HAL_TIM_ConfigClockSource+0xd8>
 8006842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006846:	f200 8087 	bhi.w	8006958 <HAL_TIM_ConfigClockSource+0x170>
 800684a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800684e:	f000 8086 	beq.w	800695e <HAL_TIM_ConfigClockSource+0x176>
 8006852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006856:	d87f      	bhi.n	8006958 <HAL_TIM_ConfigClockSource+0x170>
 8006858:	2b70      	cmp	r3, #112	; 0x70
 800685a:	d01a      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0xaa>
 800685c:	2b70      	cmp	r3, #112	; 0x70
 800685e:	d87b      	bhi.n	8006958 <HAL_TIM_ConfigClockSource+0x170>
 8006860:	2b60      	cmp	r3, #96	; 0x60
 8006862:	d050      	beq.n	8006906 <HAL_TIM_ConfigClockSource+0x11e>
 8006864:	2b60      	cmp	r3, #96	; 0x60
 8006866:	d877      	bhi.n	8006958 <HAL_TIM_ConfigClockSource+0x170>
 8006868:	2b50      	cmp	r3, #80	; 0x50
 800686a:	d03c      	beq.n	80068e6 <HAL_TIM_ConfigClockSource+0xfe>
 800686c:	2b50      	cmp	r3, #80	; 0x50
 800686e:	d873      	bhi.n	8006958 <HAL_TIM_ConfigClockSource+0x170>
 8006870:	2b40      	cmp	r3, #64	; 0x40
 8006872:	d058      	beq.n	8006926 <HAL_TIM_ConfigClockSource+0x13e>
 8006874:	2b40      	cmp	r3, #64	; 0x40
 8006876:	d86f      	bhi.n	8006958 <HAL_TIM_ConfigClockSource+0x170>
 8006878:	2b30      	cmp	r3, #48	; 0x30
 800687a:	d064      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0x15e>
 800687c:	2b30      	cmp	r3, #48	; 0x30
 800687e:	d86b      	bhi.n	8006958 <HAL_TIM_ConfigClockSource+0x170>
 8006880:	2b20      	cmp	r3, #32
 8006882:	d060      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0x15e>
 8006884:	2b20      	cmp	r3, #32
 8006886:	d867      	bhi.n	8006958 <HAL_TIM_ConfigClockSource+0x170>
 8006888:	2b00      	cmp	r3, #0
 800688a:	d05c      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0x15e>
 800688c:	2b10      	cmp	r3, #16
 800688e:	d05a      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0x15e>
 8006890:	e062      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	6899      	ldr	r1, [r3, #8]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f000 fcff 	bl	80072a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	609a      	str	r2, [r3, #8]
      break;
 80068be:	e04f      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6818      	ldr	r0, [r3, #0]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	6899      	ldr	r1, [r3, #8]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f000 fce8 	bl	80072a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689a      	ldr	r2, [r3, #8]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068e2:	609a      	str	r2, [r3, #8]
      break;
 80068e4:	e03c      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6818      	ldr	r0, [r3, #0]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	6859      	ldr	r1, [r3, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	461a      	mov	r2, r3
 80068f4:	f000 fc5c 	bl	80071b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2150      	movs	r1, #80	; 0x50
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fcb5 	bl	800726e <TIM_ITRx_SetConfig>
      break;
 8006904:	e02c      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6818      	ldr	r0, [r3, #0]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	6859      	ldr	r1, [r3, #4]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	461a      	mov	r2, r3
 8006914:	f000 fc7b 	bl	800720e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2160      	movs	r1, #96	; 0x60
 800691e:	4618      	mov	r0, r3
 8006920:	f000 fca5 	bl	800726e <TIM_ITRx_SetConfig>
      break;
 8006924:	e01c      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6818      	ldr	r0, [r3, #0]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	6859      	ldr	r1, [r3, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	461a      	mov	r2, r3
 8006934:	f000 fc3c 	bl	80071b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2140      	movs	r1, #64	; 0x40
 800693e:	4618      	mov	r0, r3
 8006940:	f000 fc95 	bl	800726e <TIM_ITRx_SetConfig>
      break;
 8006944:	e00c      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4619      	mov	r1, r3
 8006950:	4610      	mov	r0, r2
 8006952:	f000 fc8c 	bl	800726e <TIM_ITRx_SetConfig>
      break;
 8006956:	e003      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	73fb      	strb	r3, [r7, #15]
      break;
 800695c:	e000      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800695e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006970:	7bfb      	ldrb	r3, [r7, #15]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800697a:	b480      	push	{r7}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006982:	bf00      	nop
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800698e:	b480      	push	{r7}
 8006990:	b083      	sub	sp, #12
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006996:	bf00      	nop
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b083      	sub	sp, #12
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069aa:	bf00      	nop
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b083      	sub	sp, #12
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80069be:	bf00      	nop
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b083      	sub	sp, #12
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069d2:	bf00      	nop
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069fa:	bf00      	nop
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b083      	sub	sp, #12
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006a0e:	bf00      	nop
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b083      	sub	sp, #12
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006a22:	bf00      	nop
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(const TIM_HandleTypeDef *htim)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  return htim->State;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a3c:	b2db      	uxtb	r3, r3
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <HAL_TIM_PWM_GetState>:
  * @brief  Return the TIM PWM handle state.
  * @param  htim TIM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(const TIM_HandleTypeDef *htim)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  return htim->State;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a58:	b2db      	uxtb	r3, r3
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
	...

08006a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a42      	ldr	r2, [pc, #264]	; (8006b84 <TIM_Base_SetConfig+0x11c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d013      	beq.n	8006aa8 <TIM_Base_SetConfig+0x40>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a86:	d00f      	beq.n	8006aa8 <TIM_Base_SetConfig+0x40>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a3f      	ldr	r2, [pc, #252]	; (8006b88 <TIM_Base_SetConfig+0x120>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00b      	beq.n	8006aa8 <TIM_Base_SetConfig+0x40>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a3e      	ldr	r2, [pc, #248]	; (8006b8c <TIM_Base_SetConfig+0x124>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d007      	beq.n	8006aa8 <TIM_Base_SetConfig+0x40>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a3d      	ldr	r2, [pc, #244]	; (8006b90 <TIM_Base_SetConfig+0x128>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d003      	beq.n	8006aa8 <TIM_Base_SetConfig+0x40>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a3c      	ldr	r2, [pc, #240]	; (8006b94 <TIM_Base_SetConfig+0x12c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d108      	bne.n	8006aba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a31      	ldr	r2, [pc, #196]	; (8006b84 <TIM_Base_SetConfig+0x11c>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d01f      	beq.n	8006b02 <TIM_Base_SetConfig+0x9a>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac8:	d01b      	beq.n	8006b02 <TIM_Base_SetConfig+0x9a>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a2e      	ldr	r2, [pc, #184]	; (8006b88 <TIM_Base_SetConfig+0x120>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d017      	beq.n	8006b02 <TIM_Base_SetConfig+0x9a>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a2d      	ldr	r2, [pc, #180]	; (8006b8c <TIM_Base_SetConfig+0x124>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d013      	beq.n	8006b02 <TIM_Base_SetConfig+0x9a>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a2c      	ldr	r2, [pc, #176]	; (8006b90 <TIM_Base_SetConfig+0x128>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00f      	beq.n	8006b02 <TIM_Base_SetConfig+0x9a>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a2c      	ldr	r2, [pc, #176]	; (8006b98 <TIM_Base_SetConfig+0x130>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d00b      	beq.n	8006b02 <TIM_Base_SetConfig+0x9a>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a2b      	ldr	r2, [pc, #172]	; (8006b9c <TIM_Base_SetConfig+0x134>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d007      	beq.n	8006b02 <TIM_Base_SetConfig+0x9a>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a2a      	ldr	r2, [pc, #168]	; (8006ba0 <TIM_Base_SetConfig+0x138>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d003      	beq.n	8006b02 <TIM_Base_SetConfig+0x9a>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a25      	ldr	r2, [pc, #148]	; (8006b94 <TIM_Base_SetConfig+0x12c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d108      	bne.n	8006b14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a12      	ldr	r2, [pc, #72]	; (8006b84 <TIM_Base_SetConfig+0x11c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d013      	beq.n	8006b68 <TIM_Base_SetConfig+0x100>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a13      	ldr	r2, [pc, #76]	; (8006b90 <TIM_Base_SetConfig+0x128>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d00f      	beq.n	8006b68 <TIM_Base_SetConfig+0x100>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a13      	ldr	r2, [pc, #76]	; (8006b98 <TIM_Base_SetConfig+0x130>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00b      	beq.n	8006b68 <TIM_Base_SetConfig+0x100>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a12      	ldr	r2, [pc, #72]	; (8006b9c <TIM_Base_SetConfig+0x134>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d007      	beq.n	8006b68 <TIM_Base_SetConfig+0x100>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a11      	ldr	r2, [pc, #68]	; (8006ba0 <TIM_Base_SetConfig+0x138>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d003      	beq.n	8006b68 <TIM_Base_SetConfig+0x100>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a0c      	ldr	r2, [pc, #48]	; (8006b94 <TIM_Base_SetConfig+0x12c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d103      	bne.n	8006b70 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	691a      	ldr	r2, [r3, #16]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	615a      	str	r2, [r3, #20]
}
 8006b76:	bf00      	nop
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	40012c00 	.word	0x40012c00
 8006b88:	40000400 	.word	0x40000400
 8006b8c:	40000800 	.word	0x40000800
 8006b90:	40013400 	.word	0x40013400
 8006b94:	40015000 	.word	0x40015000
 8006b98:	40014000 	.word	0x40014000
 8006b9c:	40014400 	.word	0x40014400
 8006ba0:	40014800 	.word	0x40014800

08006ba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	f023 0201 	bic.w	r2, r3, #1
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 0303 	bic.w	r3, r3, #3
 8006bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f023 0302 	bic.w	r3, r3, #2
 8006bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a30      	ldr	r2, [pc, #192]	; (8006cc0 <TIM_OC1_SetConfig+0x11c>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d013      	beq.n	8006c2c <TIM_OC1_SetConfig+0x88>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a2f      	ldr	r2, [pc, #188]	; (8006cc4 <TIM_OC1_SetConfig+0x120>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d00f      	beq.n	8006c2c <TIM_OC1_SetConfig+0x88>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a2e      	ldr	r2, [pc, #184]	; (8006cc8 <TIM_OC1_SetConfig+0x124>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d00b      	beq.n	8006c2c <TIM_OC1_SetConfig+0x88>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a2d      	ldr	r2, [pc, #180]	; (8006ccc <TIM_OC1_SetConfig+0x128>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d007      	beq.n	8006c2c <TIM_OC1_SetConfig+0x88>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a2c      	ldr	r2, [pc, #176]	; (8006cd0 <TIM_OC1_SetConfig+0x12c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d003      	beq.n	8006c2c <TIM_OC1_SetConfig+0x88>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a2b      	ldr	r2, [pc, #172]	; (8006cd4 <TIM_OC1_SetConfig+0x130>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d10c      	bne.n	8006c46 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f023 0308 	bic.w	r3, r3, #8
 8006c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f023 0304 	bic.w	r3, r3, #4
 8006c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a1d      	ldr	r2, [pc, #116]	; (8006cc0 <TIM_OC1_SetConfig+0x11c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d013      	beq.n	8006c76 <TIM_OC1_SetConfig+0xd2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a1c      	ldr	r2, [pc, #112]	; (8006cc4 <TIM_OC1_SetConfig+0x120>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d00f      	beq.n	8006c76 <TIM_OC1_SetConfig+0xd2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a1b      	ldr	r2, [pc, #108]	; (8006cc8 <TIM_OC1_SetConfig+0x124>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00b      	beq.n	8006c76 <TIM_OC1_SetConfig+0xd2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a1a      	ldr	r2, [pc, #104]	; (8006ccc <TIM_OC1_SetConfig+0x128>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d007      	beq.n	8006c76 <TIM_OC1_SetConfig+0xd2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a19      	ldr	r2, [pc, #100]	; (8006cd0 <TIM_OC1_SetConfig+0x12c>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d003      	beq.n	8006c76 <TIM_OC1_SetConfig+0xd2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a18      	ldr	r2, [pc, #96]	; (8006cd4 <TIM_OC1_SetConfig+0x130>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d111      	bne.n	8006c9a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	621a      	str	r2, [r3, #32]
}
 8006cb4:	bf00      	nop
 8006cb6:	371c      	adds	r7, #28
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	40012c00 	.word	0x40012c00
 8006cc4:	40013400 	.word	0x40013400
 8006cc8:	40014000 	.word	0x40014000
 8006ccc:	40014400 	.word	0x40014400
 8006cd0:	40014800 	.word	0x40014800
 8006cd4:	40015000 	.word	0x40015000

08006cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	f023 0210 	bic.w	r2, r3, #16
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	021b      	lsls	r3, r3, #8
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f023 0320 	bic.w	r3, r3, #32
 8006d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	011b      	lsls	r3, r3, #4
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a2c      	ldr	r2, [pc, #176]	; (8006de8 <TIM_OC2_SetConfig+0x110>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d007      	beq.n	8006d4c <TIM_OC2_SetConfig+0x74>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a2b      	ldr	r2, [pc, #172]	; (8006dec <TIM_OC2_SetConfig+0x114>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d003      	beq.n	8006d4c <TIM_OC2_SetConfig+0x74>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a2a      	ldr	r2, [pc, #168]	; (8006df0 <TIM_OC2_SetConfig+0x118>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d10d      	bne.n	8006d68 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	011b      	lsls	r3, r3, #4
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a1f      	ldr	r2, [pc, #124]	; (8006de8 <TIM_OC2_SetConfig+0x110>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d013      	beq.n	8006d98 <TIM_OC2_SetConfig+0xc0>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a1e      	ldr	r2, [pc, #120]	; (8006dec <TIM_OC2_SetConfig+0x114>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d00f      	beq.n	8006d98 <TIM_OC2_SetConfig+0xc0>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a1e      	ldr	r2, [pc, #120]	; (8006df4 <TIM_OC2_SetConfig+0x11c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d00b      	beq.n	8006d98 <TIM_OC2_SetConfig+0xc0>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a1d      	ldr	r2, [pc, #116]	; (8006df8 <TIM_OC2_SetConfig+0x120>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d007      	beq.n	8006d98 <TIM_OC2_SetConfig+0xc0>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a1c      	ldr	r2, [pc, #112]	; (8006dfc <TIM_OC2_SetConfig+0x124>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d003      	beq.n	8006d98 <TIM_OC2_SetConfig+0xc0>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a17      	ldr	r2, [pc, #92]	; (8006df0 <TIM_OC2_SetConfig+0x118>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d113      	bne.n	8006dc0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d9e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006da6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	621a      	str	r2, [r3, #32]
}
 8006dda:	bf00      	nop
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	40012c00 	.word	0x40012c00
 8006dec:	40013400 	.word	0x40013400
 8006df0:	40015000 	.word	0x40015000
 8006df4:	40014000 	.word	0x40014000
 8006df8:	40014400 	.word	0x40014400
 8006dfc:	40014800 	.word	0x40014800

08006e00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0303 	bic.w	r3, r3, #3
 8006e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	021b      	lsls	r3, r3, #8
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a2b      	ldr	r2, [pc, #172]	; (8006f0c <TIM_OC3_SetConfig+0x10c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d007      	beq.n	8006e72 <TIM_OC3_SetConfig+0x72>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a2a      	ldr	r2, [pc, #168]	; (8006f10 <TIM_OC3_SetConfig+0x110>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d003      	beq.n	8006e72 <TIM_OC3_SetConfig+0x72>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a29      	ldr	r2, [pc, #164]	; (8006f14 <TIM_OC3_SetConfig+0x114>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d10d      	bne.n	8006e8e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	021b      	lsls	r3, r3, #8
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e8c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a1e      	ldr	r2, [pc, #120]	; (8006f0c <TIM_OC3_SetConfig+0x10c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d013      	beq.n	8006ebe <TIM_OC3_SetConfig+0xbe>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a1d      	ldr	r2, [pc, #116]	; (8006f10 <TIM_OC3_SetConfig+0x110>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d00f      	beq.n	8006ebe <TIM_OC3_SetConfig+0xbe>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a1d      	ldr	r2, [pc, #116]	; (8006f18 <TIM_OC3_SetConfig+0x118>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d00b      	beq.n	8006ebe <TIM_OC3_SetConfig+0xbe>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a1c      	ldr	r2, [pc, #112]	; (8006f1c <TIM_OC3_SetConfig+0x11c>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d007      	beq.n	8006ebe <TIM_OC3_SetConfig+0xbe>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a1b      	ldr	r2, [pc, #108]	; (8006f20 <TIM_OC3_SetConfig+0x120>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d003      	beq.n	8006ebe <TIM_OC3_SetConfig+0xbe>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a16      	ldr	r2, [pc, #88]	; (8006f14 <TIM_OC3_SetConfig+0x114>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d113      	bne.n	8006ee6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	011b      	lsls	r3, r3, #4
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	621a      	str	r2, [r3, #32]
}
 8006f00:	bf00      	nop
 8006f02:	371c      	adds	r7, #28
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	40012c00 	.word	0x40012c00
 8006f10:	40013400 	.word	0x40013400
 8006f14:	40015000 	.word	0x40015000
 8006f18:	40014000 	.word	0x40014000
 8006f1c:	40014400 	.word	0x40014400
 8006f20:	40014800 	.word	0x40014800

08006f24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	021b      	lsls	r3, r3, #8
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	031b      	lsls	r3, r3, #12
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a1a      	ldr	r2, [pc, #104]	; (8006fec <TIM_OC4_SetConfig+0xc8>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d013      	beq.n	8006fb0 <TIM_OC4_SetConfig+0x8c>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a19      	ldr	r2, [pc, #100]	; (8006ff0 <TIM_OC4_SetConfig+0xcc>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d00f      	beq.n	8006fb0 <TIM_OC4_SetConfig+0x8c>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a18      	ldr	r2, [pc, #96]	; (8006ff4 <TIM_OC4_SetConfig+0xd0>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d00b      	beq.n	8006fb0 <TIM_OC4_SetConfig+0x8c>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a17      	ldr	r2, [pc, #92]	; (8006ff8 <TIM_OC4_SetConfig+0xd4>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d007      	beq.n	8006fb0 <TIM_OC4_SetConfig+0x8c>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a16      	ldr	r2, [pc, #88]	; (8006ffc <TIM_OC4_SetConfig+0xd8>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d003      	beq.n	8006fb0 <TIM_OC4_SetConfig+0x8c>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a15      	ldr	r2, [pc, #84]	; (8007000 <TIM_OC4_SetConfig+0xdc>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d109      	bne.n	8006fc4 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	019b      	lsls	r3, r3, #6
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	621a      	str	r2, [r3, #32]
}
 8006fde:	bf00      	nop
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	40012c00 	.word	0x40012c00
 8006ff0:	40013400 	.word	0x40013400
 8006ff4:	40014000 	.word	0x40014000
 8006ff8:	40014400 	.word	0x40014400
 8006ffc:	40014800 	.word	0x40014800
 8007000:	40015000 	.word	0x40015000

08007004 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007048:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	041b      	lsls	r3, r3, #16
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	4313      	orrs	r3, r2
 8007054:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a19      	ldr	r2, [pc, #100]	; (80070c0 <TIM_OC5_SetConfig+0xbc>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d013      	beq.n	8007086 <TIM_OC5_SetConfig+0x82>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a18      	ldr	r2, [pc, #96]	; (80070c4 <TIM_OC5_SetConfig+0xc0>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d00f      	beq.n	8007086 <TIM_OC5_SetConfig+0x82>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a17      	ldr	r2, [pc, #92]	; (80070c8 <TIM_OC5_SetConfig+0xc4>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d00b      	beq.n	8007086 <TIM_OC5_SetConfig+0x82>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a16      	ldr	r2, [pc, #88]	; (80070cc <TIM_OC5_SetConfig+0xc8>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d007      	beq.n	8007086 <TIM_OC5_SetConfig+0x82>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a15      	ldr	r2, [pc, #84]	; (80070d0 <TIM_OC5_SetConfig+0xcc>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d003      	beq.n	8007086 <TIM_OC5_SetConfig+0x82>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a14      	ldr	r2, [pc, #80]	; (80070d4 <TIM_OC5_SetConfig+0xd0>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d109      	bne.n	800709a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800708c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	021b      	lsls	r3, r3, #8
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	4313      	orrs	r3, r2
 8007098:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	621a      	str	r2, [r3, #32]
}
 80070b4:	bf00      	nop
 80070b6:	371c      	adds	r7, #28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr
 80070c0:	40012c00 	.word	0x40012c00
 80070c4:	40013400 	.word	0x40013400
 80070c8:	40014000 	.word	0x40014000
 80070cc:	40014400 	.word	0x40014400
 80070d0:	40014800 	.word	0x40014800
 80070d4:	40015000 	.word	0x40015000

080070d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800710a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	021b      	lsls	r3, r3, #8
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	4313      	orrs	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800711e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	051b      	lsls	r3, r3, #20
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	4313      	orrs	r3, r2
 800712a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a1a      	ldr	r2, [pc, #104]	; (8007198 <TIM_OC6_SetConfig+0xc0>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d013      	beq.n	800715c <TIM_OC6_SetConfig+0x84>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a19      	ldr	r2, [pc, #100]	; (800719c <TIM_OC6_SetConfig+0xc4>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d00f      	beq.n	800715c <TIM_OC6_SetConfig+0x84>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a18      	ldr	r2, [pc, #96]	; (80071a0 <TIM_OC6_SetConfig+0xc8>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d00b      	beq.n	800715c <TIM_OC6_SetConfig+0x84>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a17      	ldr	r2, [pc, #92]	; (80071a4 <TIM_OC6_SetConfig+0xcc>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d007      	beq.n	800715c <TIM_OC6_SetConfig+0x84>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a16      	ldr	r2, [pc, #88]	; (80071a8 <TIM_OC6_SetConfig+0xd0>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d003      	beq.n	800715c <TIM_OC6_SetConfig+0x84>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a15      	ldr	r2, [pc, #84]	; (80071ac <TIM_OC6_SetConfig+0xd4>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d109      	bne.n	8007170 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007162:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	029b      	lsls	r3, r3, #10
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4313      	orrs	r3, r2
 800716e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	685a      	ldr	r2, [r3, #4]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	621a      	str	r2, [r3, #32]
}
 800718a:	bf00      	nop
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	40012c00 	.word	0x40012c00
 800719c:	40013400 	.word	0x40013400
 80071a0:	40014000 	.word	0x40014000
 80071a4:	40014400 	.word	0x40014400
 80071a8:	40014800 	.word	0x40014800
 80071ac:	40015000 	.word	0x40015000

080071b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b087      	sub	sp, #28
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	f023 0201 	bic.w	r2, r3, #1
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	011b      	lsls	r3, r3, #4
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f023 030a 	bic.w	r3, r3, #10
 80071ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	621a      	str	r2, [r3, #32]
}
 8007202:	bf00      	nop
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800720e:	b480      	push	{r7}
 8007210:	b087      	sub	sp, #28
 8007212:	af00      	add	r7, sp, #0
 8007214:	60f8      	str	r0, [r7, #12]
 8007216:	60b9      	str	r1, [r7, #8]
 8007218:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	f023 0210 	bic.w	r2, r3, #16
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007238:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	031b      	lsls	r3, r3, #12
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	4313      	orrs	r3, r2
 8007242:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800724a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	4313      	orrs	r3, r2
 8007254:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	621a      	str	r2, [r3, #32]
}
 8007262:	bf00      	nop
 8007264:	371c      	adds	r7, #28
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800726e:	b480      	push	{r7}
 8007270:	b085      	sub	sp, #20
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007284:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4313      	orrs	r3, r2
 800728c:	f043 0307 	orr.w	r3, r3, #7
 8007290:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	609a      	str	r2, [r3, #8]
}
 8007298:	bf00      	nop
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b087      	sub	sp, #28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
 80072b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	021a      	lsls	r2, r3, #8
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	431a      	orrs	r2, r3
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	609a      	str	r2, [r3, #8]
}
 80072d8:	bf00      	nop
 80072da:	371c      	adds	r7, #28
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	f003 031f 	and.w	r3, r3, #31
 80072f6:	2201      	movs	r2, #1
 80072f8:	fa02 f303 	lsl.w	r3, r2, r3
 80072fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6a1a      	ldr	r2, [r3, #32]
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	43db      	mvns	r3, r3
 8007306:	401a      	ands	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6a1a      	ldr	r2, [r3, #32]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f003 031f 	and.w	r3, r3, #31
 8007316:	6879      	ldr	r1, [r7, #4]
 8007318:	fa01 f303 	lsl.w	r3, r1, r3
 800731c:	431a      	orrs	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	621a      	str	r2, [r3, #32]
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
	...

08007330 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a1e      	ldr	r2, [pc, #120]	; (80073b4 <TIM_ResetCallback+0x84>)
 800733c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a1d      	ldr	r2, [pc, #116]	; (80073b8 <TIM_ResetCallback+0x88>)
 8007344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a1c      	ldr	r2, [pc, #112]	; (80073bc <TIM_ResetCallback+0x8c>)
 800734c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a1b      	ldr	r2, [pc, #108]	; (80073c0 <TIM_ResetCallback+0x90>)
 8007354:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a1a      	ldr	r2, [pc, #104]	; (80073c4 <TIM_ResetCallback+0x94>)
 800735c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a19      	ldr	r2, [pc, #100]	; (80073c8 <TIM_ResetCallback+0x98>)
 8007364:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a18      	ldr	r2, [pc, #96]	; (80073cc <TIM_ResetCallback+0x9c>)
 800736c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a17      	ldr	r2, [pc, #92]	; (80073d0 <TIM_ResetCallback+0xa0>)
 8007374:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a16      	ldr	r2, [pc, #88]	; (80073d4 <TIM_ResetCallback+0xa4>)
 800737c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a15      	ldr	r2, [pc, #84]	; (80073d8 <TIM_ResetCallback+0xa8>)
 8007384:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a14      	ldr	r2, [pc, #80]	; (80073dc <TIM_ResetCallback+0xac>)
 800738c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a13      	ldr	r2, [pc, #76]	; (80073e0 <TIM_ResetCallback+0xb0>)
 8007394:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a12      	ldr	r2, [pc, #72]	; (80073e4 <TIM_ResetCallback+0xb4>)
 800739c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
#if defined(TIM_BDTR_BK2E)
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a11      	ldr	r2, [pc, #68]	; (80073e8 <TIM_ResetCallback+0xb8>)
 80073a4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* TIM_BDTR_BK2E */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	0800156d 	.word	0x0800156d
 80073b8:	0800697b 	.word	0x0800697b
 80073bc:	080069f3 	.word	0x080069f3
 80073c0:	08006a07 	.word	0x08006a07
 80073c4:	080069a3 	.word	0x080069a3
 80073c8:	080069b7 	.word	0x080069b7
 80073cc:	0800698f 	.word	0x0800698f
 80073d0:	080069cb 	.word	0x080069cb
 80073d4:	080069df 	.word	0x080069df
 80073d8:	08006a1b 	.word	0x08006a1b
 80073dc:	08007505 	.word	0x08007505
 80073e0:	08007519 	.word	0x08007519
 80073e4:	0800752d 	.word	0x0800752d
 80073e8:	08007541 	.word	0x08007541

080073ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d101      	bne.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007400:	2302      	movs	r3, #2
 8007402:	e06d      	b.n	80074e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a30      	ldr	r2, [pc, #192]	; (80074ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d009      	beq.n	8007442 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a2f      	ldr	r2, [pc, #188]	; (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d004      	beq.n	8007442 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a2d      	ldr	r2, [pc, #180]	; (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d108      	bne.n	8007454 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007448:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	4313      	orrs	r3, r2
 8007452:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800745a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a1e      	ldr	r2, [pc, #120]	; (80074ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d01d      	beq.n	80074b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007480:	d018      	beq.n	80074b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a1c      	ldr	r2, [pc, #112]	; (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d013      	beq.n	80074b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a1a      	ldr	r2, [pc, #104]	; (80074fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d00e      	beq.n	80074b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a15      	ldr	r2, [pc, #84]	; (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d009      	beq.n	80074b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a16      	ldr	r2, [pc, #88]	; (8007500 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d004      	beq.n	80074b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a11      	ldr	r2, [pc, #68]	; (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d10c      	bne.n	80074ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	40012c00 	.word	0x40012c00
 80074f0:	40013400 	.word	0x40013400
 80074f4:	40015000 	.word	0x40015000
 80074f8:	40000400 	.word	0x40000400
 80074fc:	40000800 	.word	0x40000800
 8007500:	40014000 	.word	0x40014000

08007504 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e040      	b.n	80075e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800756a:	2b00      	cmp	r3, #0
 800756c:	d106      	bne.n	800757c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7fa fdec 	bl	8002154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2224      	movs	r2, #36	; 0x24
 8007580:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 0201 	bic.w	r2, r2, #1
 8007590:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f8b6 	bl	8007704 <UART_SetConfig>
 8007598:	4603      	mov	r3, r0
 800759a:	2b01      	cmp	r3, #1
 800759c:	d101      	bne.n	80075a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e022      	b.n	80075e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d002      	beq.n	80075b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fa7e 	bl	8007aac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689a      	ldr	r2, [r3, #8]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0201 	orr.w	r2, r2, #1
 80075de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fb05 	bl	8007bf0 <UART_CheckIdleState>
 80075e6:	4603      	mov	r3, r0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08a      	sub	sp, #40	; 0x28
 80075f4:	af02      	add	r7, sp, #8
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	603b      	str	r3, [r7, #0]
 80075fc:	4613      	mov	r3, r2
 80075fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007604:	2b20      	cmp	r3, #32
 8007606:	d178      	bne.n	80076fa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <HAL_UART_Transmit+0x24>
 800760e:	88fb      	ldrh	r3, [r7, #6]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e071      	b.n	80076fc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2221      	movs	r2, #33	; 0x21
 8007624:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007626:	f7fa fea1 	bl	800236c <HAL_GetTick>
 800762a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	88fa      	ldrh	r2, [r7, #6]
 8007630:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	88fa      	ldrh	r2, [r7, #6]
 8007638:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007644:	d108      	bne.n	8007658 <HAL_UART_Transmit+0x68>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d104      	bne.n	8007658 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800764e:	2300      	movs	r3, #0
 8007650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	61bb      	str	r3, [r7, #24]
 8007656:	e003      	b.n	8007660 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800765c:	2300      	movs	r3, #0
 800765e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007660:	e030      	b.n	80076c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2200      	movs	r2, #0
 800766a:	2180      	movs	r1, #128	; 0x80
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 fb67 	bl	8007d40 <UART_WaitOnFlagUntilTimeout>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d004      	beq.n	8007682 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2220      	movs	r2, #32
 800767c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e03c      	b.n	80076fc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10b      	bne.n	80076a0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	881a      	ldrh	r2, [r3, #0]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007694:	b292      	uxth	r2, r2
 8007696:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	3302      	adds	r3, #2
 800769c:	61bb      	str	r3, [r7, #24]
 800769e:	e008      	b.n	80076b2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	781a      	ldrb	r2, [r3, #0]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	b292      	uxth	r2, r2
 80076aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	3301      	adds	r3, #1
 80076b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	3b01      	subs	r3, #1
 80076bc:	b29a      	uxth	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1c8      	bne.n	8007662 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	2200      	movs	r2, #0
 80076d8:	2140      	movs	r1, #64	; 0x40
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 fb30 	bl	8007d40 <UART_WaitOnFlagUntilTimeout>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d004      	beq.n	80076f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2220      	movs	r2, #32
 80076ea:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e005      	b.n	80076fc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2220      	movs	r2, #32
 80076f4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	e000      	b.n	80076fc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80076fa:	2302      	movs	r3, #2
  }
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3720      	adds	r7, #32
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b088      	sub	sp, #32
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800770c:	2300      	movs	r3, #0
 800770e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	431a      	orrs	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	431a      	orrs	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	69db      	ldr	r3, [r3, #28]
 8007724:	4313      	orrs	r3, r2
 8007726:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	4b92      	ldr	r3, [pc, #584]	; (8007978 <UART_SetConfig+0x274>)
 8007730:	4013      	ands	r3, r2
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	6812      	ldr	r2, [r2, #0]
 8007736:	6979      	ldr	r1, [r7, #20]
 8007738:	430b      	orrs	r3, r1
 800773a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68da      	ldr	r2, [r3, #12]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a1b      	ldr	r3, [r3, #32]
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	4313      	orrs	r3, r2
 8007760:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	430a      	orrs	r2, r1
 8007774:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a80      	ldr	r2, [pc, #512]	; (800797c <UART_SetConfig+0x278>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d120      	bne.n	80077c2 <UART_SetConfig+0xbe>
 8007780:	4b7f      	ldr	r3, [pc, #508]	; (8007980 <UART_SetConfig+0x27c>)
 8007782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007784:	f003 0303 	and.w	r3, r3, #3
 8007788:	2b03      	cmp	r3, #3
 800778a:	d817      	bhi.n	80077bc <UART_SetConfig+0xb8>
 800778c:	a201      	add	r2, pc, #4	; (adr r2, 8007794 <UART_SetConfig+0x90>)
 800778e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007792:	bf00      	nop
 8007794:	080077a5 	.word	0x080077a5
 8007798:	080077b1 	.word	0x080077b1
 800779c:	080077b7 	.word	0x080077b7
 80077a0:	080077ab 	.word	0x080077ab
 80077a4:	2301      	movs	r3, #1
 80077a6:	77fb      	strb	r3, [r7, #31]
 80077a8:	e0b5      	b.n	8007916 <UART_SetConfig+0x212>
 80077aa:	2302      	movs	r3, #2
 80077ac:	77fb      	strb	r3, [r7, #31]
 80077ae:	e0b2      	b.n	8007916 <UART_SetConfig+0x212>
 80077b0:	2304      	movs	r3, #4
 80077b2:	77fb      	strb	r3, [r7, #31]
 80077b4:	e0af      	b.n	8007916 <UART_SetConfig+0x212>
 80077b6:	2308      	movs	r3, #8
 80077b8:	77fb      	strb	r3, [r7, #31]
 80077ba:	e0ac      	b.n	8007916 <UART_SetConfig+0x212>
 80077bc:	2310      	movs	r3, #16
 80077be:	77fb      	strb	r3, [r7, #31]
 80077c0:	e0a9      	b.n	8007916 <UART_SetConfig+0x212>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a6f      	ldr	r2, [pc, #444]	; (8007984 <UART_SetConfig+0x280>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d124      	bne.n	8007816 <UART_SetConfig+0x112>
 80077cc:	4b6c      	ldr	r3, [pc, #432]	; (8007980 <UART_SetConfig+0x27c>)
 80077ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80077d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077d8:	d011      	beq.n	80077fe <UART_SetConfig+0xfa>
 80077da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077de:	d817      	bhi.n	8007810 <UART_SetConfig+0x10c>
 80077e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077e4:	d011      	beq.n	800780a <UART_SetConfig+0x106>
 80077e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077ea:	d811      	bhi.n	8007810 <UART_SetConfig+0x10c>
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d003      	beq.n	80077f8 <UART_SetConfig+0xf4>
 80077f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077f4:	d006      	beq.n	8007804 <UART_SetConfig+0x100>
 80077f6:	e00b      	b.n	8007810 <UART_SetConfig+0x10c>
 80077f8:	2300      	movs	r3, #0
 80077fa:	77fb      	strb	r3, [r7, #31]
 80077fc:	e08b      	b.n	8007916 <UART_SetConfig+0x212>
 80077fe:	2302      	movs	r3, #2
 8007800:	77fb      	strb	r3, [r7, #31]
 8007802:	e088      	b.n	8007916 <UART_SetConfig+0x212>
 8007804:	2304      	movs	r3, #4
 8007806:	77fb      	strb	r3, [r7, #31]
 8007808:	e085      	b.n	8007916 <UART_SetConfig+0x212>
 800780a:	2308      	movs	r3, #8
 800780c:	77fb      	strb	r3, [r7, #31]
 800780e:	e082      	b.n	8007916 <UART_SetConfig+0x212>
 8007810:	2310      	movs	r3, #16
 8007812:	77fb      	strb	r3, [r7, #31]
 8007814:	e07f      	b.n	8007916 <UART_SetConfig+0x212>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a5b      	ldr	r2, [pc, #364]	; (8007988 <UART_SetConfig+0x284>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d124      	bne.n	800786a <UART_SetConfig+0x166>
 8007820:	4b57      	ldr	r3, [pc, #348]	; (8007980 <UART_SetConfig+0x27c>)
 8007822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007824:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007828:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800782c:	d011      	beq.n	8007852 <UART_SetConfig+0x14e>
 800782e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007832:	d817      	bhi.n	8007864 <UART_SetConfig+0x160>
 8007834:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007838:	d011      	beq.n	800785e <UART_SetConfig+0x15a>
 800783a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800783e:	d811      	bhi.n	8007864 <UART_SetConfig+0x160>
 8007840:	2b00      	cmp	r3, #0
 8007842:	d003      	beq.n	800784c <UART_SetConfig+0x148>
 8007844:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007848:	d006      	beq.n	8007858 <UART_SetConfig+0x154>
 800784a:	e00b      	b.n	8007864 <UART_SetConfig+0x160>
 800784c:	2300      	movs	r3, #0
 800784e:	77fb      	strb	r3, [r7, #31]
 8007850:	e061      	b.n	8007916 <UART_SetConfig+0x212>
 8007852:	2302      	movs	r3, #2
 8007854:	77fb      	strb	r3, [r7, #31]
 8007856:	e05e      	b.n	8007916 <UART_SetConfig+0x212>
 8007858:	2304      	movs	r3, #4
 800785a:	77fb      	strb	r3, [r7, #31]
 800785c:	e05b      	b.n	8007916 <UART_SetConfig+0x212>
 800785e:	2308      	movs	r3, #8
 8007860:	77fb      	strb	r3, [r7, #31]
 8007862:	e058      	b.n	8007916 <UART_SetConfig+0x212>
 8007864:	2310      	movs	r3, #16
 8007866:	77fb      	strb	r3, [r7, #31]
 8007868:	e055      	b.n	8007916 <UART_SetConfig+0x212>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a47      	ldr	r2, [pc, #284]	; (800798c <UART_SetConfig+0x288>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d124      	bne.n	80078be <UART_SetConfig+0x1ba>
 8007874:	4b42      	ldr	r3, [pc, #264]	; (8007980 <UART_SetConfig+0x27c>)
 8007876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007878:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800787c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007880:	d011      	beq.n	80078a6 <UART_SetConfig+0x1a2>
 8007882:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007886:	d817      	bhi.n	80078b8 <UART_SetConfig+0x1b4>
 8007888:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800788c:	d011      	beq.n	80078b2 <UART_SetConfig+0x1ae>
 800788e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007892:	d811      	bhi.n	80078b8 <UART_SetConfig+0x1b4>
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <UART_SetConfig+0x19c>
 8007898:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800789c:	d006      	beq.n	80078ac <UART_SetConfig+0x1a8>
 800789e:	e00b      	b.n	80078b8 <UART_SetConfig+0x1b4>
 80078a0:	2300      	movs	r3, #0
 80078a2:	77fb      	strb	r3, [r7, #31]
 80078a4:	e037      	b.n	8007916 <UART_SetConfig+0x212>
 80078a6:	2302      	movs	r3, #2
 80078a8:	77fb      	strb	r3, [r7, #31]
 80078aa:	e034      	b.n	8007916 <UART_SetConfig+0x212>
 80078ac:	2304      	movs	r3, #4
 80078ae:	77fb      	strb	r3, [r7, #31]
 80078b0:	e031      	b.n	8007916 <UART_SetConfig+0x212>
 80078b2:	2308      	movs	r3, #8
 80078b4:	77fb      	strb	r3, [r7, #31]
 80078b6:	e02e      	b.n	8007916 <UART_SetConfig+0x212>
 80078b8:	2310      	movs	r3, #16
 80078ba:	77fb      	strb	r3, [r7, #31]
 80078bc:	e02b      	b.n	8007916 <UART_SetConfig+0x212>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a33      	ldr	r2, [pc, #204]	; (8007990 <UART_SetConfig+0x28c>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d124      	bne.n	8007912 <UART_SetConfig+0x20e>
 80078c8:	4b2d      	ldr	r3, [pc, #180]	; (8007980 <UART_SetConfig+0x27c>)
 80078ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078cc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80078d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80078d4:	d011      	beq.n	80078fa <UART_SetConfig+0x1f6>
 80078d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80078da:	d817      	bhi.n	800790c <UART_SetConfig+0x208>
 80078dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078e0:	d011      	beq.n	8007906 <UART_SetConfig+0x202>
 80078e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078e6:	d811      	bhi.n	800790c <UART_SetConfig+0x208>
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d003      	beq.n	80078f4 <UART_SetConfig+0x1f0>
 80078ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078f0:	d006      	beq.n	8007900 <UART_SetConfig+0x1fc>
 80078f2:	e00b      	b.n	800790c <UART_SetConfig+0x208>
 80078f4:	2300      	movs	r3, #0
 80078f6:	77fb      	strb	r3, [r7, #31]
 80078f8:	e00d      	b.n	8007916 <UART_SetConfig+0x212>
 80078fa:	2302      	movs	r3, #2
 80078fc:	77fb      	strb	r3, [r7, #31]
 80078fe:	e00a      	b.n	8007916 <UART_SetConfig+0x212>
 8007900:	2304      	movs	r3, #4
 8007902:	77fb      	strb	r3, [r7, #31]
 8007904:	e007      	b.n	8007916 <UART_SetConfig+0x212>
 8007906:	2308      	movs	r3, #8
 8007908:	77fb      	strb	r3, [r7, #31]
 800790a:	e004      	b.n	8007916 <UART_SetConfig+0x212>
 800790c:	2310      	movs	r3, #16
 800790e:	77fb      	strb	r3, [r7, #31]
 8007910:	e001      	b.n	8007916 <UART_SetConfig+0x212>
 8007912:	2310      	movs	r3, #16
 8007914:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	69db      	ldr	r3, [r3, #28]
 800791a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800791e:	d16b      	bne.n	80079f8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8007920:	7ffb      	ldrb	r3, [r7, #31]
 8007922:	2b08      	cmp	r3, #8
 8007924:	d838      	bhi.n	8007998 <UART_SetConfig+0x294>
 8007926:	a201      	add	r2, pc, #4	; (adr r2, 800792c <UART_SetConfig+0x228>)
 8007928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792c:	08007951 	.word	0x08007951
 8007930:	08007959 	.word	0x08007959
 8007934:	08007961 	.word	0x08007961
 8007938:	08007999 	.word	0x08007999
 800793c:	08007967 	.word	0x08007967
 8007940:	08007999 	.word	0x08007999
 8007944:	08007999 	.word	0x08007999
 8007948:	08007999 	.word	0x08007999
 800794c:	0800796f 	.word	0x0800796f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007950:	f7fe f84e 	bl	80059f0 <HAL_RCC_GetPCLK1Freq>
 8007954:	61b8      	str	r0, [r7, #24]
        break;
 8007956:	e024      	b.n	80079a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007958:	f7fe f86c 	bl	8005a34 <HAL_RCC_GetPCLK2Freq>
 800795c:	61b8      	str	r0, [r7, #24]
        break;
 800795e:	e020      	b.n	80079a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007960:	4b0c      	ldr	r3, [pc, #48]	; (8007994 <UART_SetConfig+0x290>)
 8007962:	61bb      	str	r3, [r7, #24]
        break;
 8007964:	e01d      	b.n	80079a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007966:	f7fd ffcd 	bl	8005904 <HAL_RCC_GetSysClockFreq>
 800796a:	61b8      	str	r0, [r7, #24]
        break;
 800796c:	e019      	b.n	80079a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800796e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007972:	61bb      	str	r3, [r7, #24]
        break;
 8007974:	e015      	b.n	80079a2 <UART_SetConfig+0x29e>
 8007976:	bf00      	nop
 8007978:	efff69f3 	.word	0xefff69f3
 800797c:	40013800 	.word	0x40013800
 8007980:	40021000 	.word	0x40021000
 8007984:	40004400 	.word	0x40004400
 8007988:	40004800 	.word	0x40004800
 800798c:	40004c00 	.word	0x40004c00
 8007990:	40005000 	.word	0x40005000
 8007994:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007998:	2300      	movs	r3, #0
 800799a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	77bb      	strb	r3, [r7, #30]
        break;
 80079a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d073      	beq.n	8007a90 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	005a      	lsls	r2, r3, #1
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	085b      	lsrs	r3, r3, #1
 80079b2:	441a      	add	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	2b0f      	cmp	r3, #15
 80079c2:	d916      	bls.n	80079f2 <UART_SetConfig+0x2ee>
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ca:	d212      	bcs.n	80079f2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	f023 030f 	bic.w	r3, r3, #15
 80079d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	085b      	lsrs	r3, r3, #1
 80079da:	b29b      	uxth	r3, r3
 80079dc:	f003 0307 	and.w	r3, r3, #7
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	89fb      	ldrh	r3, [r7, #14]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	89fa      	ldrh	r2, [r7, #14]
 80079ee:	60da      	str	r2, [r3, #12]
 80079f0:	e04e      	b.n	8007a90 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	77bb      	strb	r3, [r7, #30]
 80079f6:	e04b      	b.n	8007a90 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079f8:	7ffb      	ldrb	r3, [r7, #31]
 80079fa:	2b08      	cmp	r3, #8
 80079fc:	d827      	bhi.n	8007a4e <UART_SetConfig+0x34a>
 80079fe:	a201      	add	r2, pc, #4	; (adr r2, 8007a04 <UART_SetConfig+0x300>)
 8007a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a04:	08007a29 	.word	0x08007a29
 8007a08:	08007a31 	.word	0x08007a31
 8007a0c:	08007a39 	.word	0x08007a39
 8007a10:	08007a4f 	.word	0x08007a4f
 8007a14:	08007a3f 	.word	0x08007a3f
 8007a18:	08007a4f 	.word	0x08007a4f
 8007a1c:	08007a4f 	.word	0x08007a4f
 8007a20:	08007a4f 	.word	0x08007a4f
 8007a24:	08007a47 	.word	0x08007a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a28:	f7fd ffe2 	bl	80059f0 <HAL_RCC_GetPCLK1Freq>
 8007a2c:	61b8      	str	r0, [r7, #24]
        break;
 8007a2e:	e013      	b.n	8007a58 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a30:	f7fe f800 	bl	8005a34 <HAL_RCC_GetPCLK2Freq>
 8007a34:	61b8      	str	r0, [r7, #24]
        break;
 8007a36:	e00f      	b.n	8007a58 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a38:	4b1b      	ldr	r3, [pc, #108]	; (8007aa8 <UART_SetConfig+0x3a4>)
 8007a3a:	61bb      	str	r3, [r7, #24]
        break;
 8007a3c:	e00c      	b.n	8007a58 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a3e:	f7fd ff61 	bl	8005904 <HAL_RCC_GetSysClockFreq>
 8007a42:	61b8      	str	r0, [r7, #24]
        break;
 8007a44:	e008      	b.n	8007a58 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a4a:	61bb      	str	r3, [r7, #24]
        break;
 8007a4c:	e004      	b.n	8007a58 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	77bb      	strb	r3, [r7, #30]
        break;
 8007a56:	bf00      	nop
    }

    if (pclk != 0U)
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d018      	beq.n	8007a90 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	085a      	lsrs	r2, r3, #1
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	441a      	add	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	2b0f      	cmp	r3, #15
 8007a76:	d909      	bls.n	8007a8c <UART_SetConfig+0x388>
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a7e:	d205      	bcs.n	8007a8c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	60da      	str	r2, [r3, #12]
 8007a8a:	e001      	b.n	8007a90 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007a9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3720      	adds	r7, #32
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	007a1200 	.word	0x007a1200

08007aac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00a      	beq.n	8007ad6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ada:	f003 0302 	and.w	r3, r3, #2
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	430a      	orrs	r2, r1
 8007af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afc:	f003 0304 	and.w	r3, r3, #4
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00a      	beq.n	8007b1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1e:	f003 0308 	and.w	r3, r3, #8
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00a      	beq.n	8007b3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	430a      	orrs	r2, r1
 8007b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b40:	f003 0310 	and.w	r3, r3, #16
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b62:	f003 0320 	and.w	r3, r3, #32
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d01a      	beq.n	8007bc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007baa:	d10a      	bne.n	8007bc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00a      	beq.n	8007be4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	430a      	orrs	r2, r1
 8007be2:	605a      	str	r2, [r3, #4]
  }
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b098      	sub	sp, #96	; 0x60
 8007bf4:	af02      	add	r7, sp, #8
 8007bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c00:	f7fa fbb4 	bl	800236c <HAL_GetTick>
 8007c04:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0308 	and.w	r3, r3, #8
 8007c10:	2b08      	cmp	r3, #8
 8007c12:	d12e      	bne.n	8007c72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f88c 	bl	8007d40 <UART_WaitOnFlagUntilTimeout>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d021      	beq.n	8007c72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c36:	e853 3f00 	ldrex	r3, [r3]
 8007c3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c42:	653b      	str	r3, [r7, #80]	; 0x50
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c4c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c4e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c54:	e841 2300 	strex	r3, r2, [r1]
 8007c58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1e6      	bne.n	8007c2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2220      	movs	r2, #32
 8007c64:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e062      	b.n	8007d38 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0304 	and.w	r3, r3, #4
 8007c7c:	2b04      	cmp	r3, #4
 8007c7e:	d149      	bne.n	8007d14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f856 	bl	8007d40 <UART_WaitOnFlagUntilTimeout>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d03c      	beq.n	8007d14 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	e853 3f00 	ldrex	r3, [r3]
 8007ca6:	623b      	str	r3, [r7, #32]
   return(result);
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cb8:	633b      	str	r3, [r7, #48]	; 0x30
 8007cba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cc0:	e841 2300 	strex	r3, r2, [r1]
 8007cc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1e6      	bne.n	8007c9a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	3308      	adds	r3, #8
 8007cd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	e853 3f00 	ldrex	r3, [r3]
 8007cda:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f023 0301 	bic.w	r3, r3, #1
 8007ce2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3308      	adds	r3, #8
 8007cea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cec:	61fa      	str	r2, [r7, #28]
 8007cee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	69b9      	ldr	r1, [r7, #24]
 8007cf2:	69fa      	ldr	r2, [r7, #28]
 8007cf4:	e841 2300 	strex	r3, r2, [r1]
 8007cf8:	617b      	str	r3, [r7, #20]
   return(result);
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e5      	bne.n	8007ccc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2220      	movs	r2, #32
 8007d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e011      	b.n	8007d38 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2220      	movs	r2, #32
 8007d18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3758      	adds	r7, #88	; 0x58
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	603b      	str	r3, [r7, #0]
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d50:	e049      	b.n	8007de6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d58:	d045      	beq.n	8007de6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d5a:	f7fa fb07 	bl	800236c <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	69ba      	ldr	r2, [r7, #24]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d302      	bcc.n	8007d70 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e048      	b.n	8007e06 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0304 	and.w	r3, r3, #4
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d031      	beq.n	8007de6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	69db      	ldr	r3, [r3, #28]
 8007d88:	f003 0308 	and.w	r3, r3, #8
 8007d8c:	2b08      	cmp	r3, #8
 8007d8e:	d110      	bne.n	8007db2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2208      	movs	r2, #8
 8007d96:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 f838 	bl	8007e0e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2208      	movs	r2, #8
 8007da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e029      	b.n	8007e06 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dc0:	d111      	bne.n	8007de6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 f81e 	bl	8007e0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e00f      	b.n	8007e06 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	69da      	ldr	r2, [r3, #28]
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	4013      	ands	r3, r2
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	bf0c      	ite	eq
 8007df6:	2301      	moveq	r3, #1
 8007df8:	2300      	movne	r3, #0
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	79fb      	ldrb	r3, [r7, #7]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d0a6      	beq.n	8007d52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b095      	sub	sp, #84	; 0x54
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e1e:	e853 3f00 	ldrex	r3, [r3]
 8007e22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	461a      	mov	r2, r3
 8007e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e34:	643b      	str	r3, [r7, #64]	; 0x40
 8007e36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e3c:	e841 2300 	strex	r3, r2, [r1]
 8007e40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1e6      	bne.n	8007e16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3308      	adds	r3, #8
 8007e4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	e853 3f00 	ldrex	r3, [r3]
 8007e56:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	f023 0301 	bic.w	r3, r3, #1
 8007e5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3308      	adds	r3, #8
 8007e66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e70:	e841 2300 	strex	r3, r2, [r1]
 8007e74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1e5      	bne.n	8007e48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d118      	bne.n	8007eb6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	e853 3f00 	ldrex	r3, [r3]
 8007e90:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	f023 0310 	bic.w	r3, r3, #16
 8007e98:	647b      	str	r3, [r7, #68]	; 0x44
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ea2:	61bb      	str	r3, [r7, #24]
 8007ea4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea6:	6979      	ldr	r1, [r7, #20]
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	e841 2300 	strex	r3, r2, [r1]
 8007eae:	613b      	str	r3, [r7, #16]
   return(result);
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1e6      	bne.n	8007e84 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007eca:	bf00      	nop
 8007ecc:	3754      	adds	r7, #84	; 0x54
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b085      	sub	sp, #20
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007ede:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007ee2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	43db      	mvns	r3, r3
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007f0c:	b084      	sub	sp, #16
 8007f0e:	b480      	push	{r7}
 8007f10:	b083      	sub	sp, #12
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
 8007f16:	f107 0014 	add.w	r0, r7, #20
 8007f1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	b004      	add	sp, #16
 8007f4c:	4770      	bx	lr
	...

08007f50 <__errno>:
 8007f50:	4b01      	ldr	r3, [pc, #4]	; (8007f58 <__errno+0x8>)
 8007f52:	6818      	ldr	r0, [r3, #0]
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	20000014 	.word	0x20000014

08007f5c <__libc_init_array>:
 8007f5c:	b570      	push	{r4, r5, r6, lr}
 8007f5e:	4d0d      	ldr	r5, [pc, #52]	; (8007f94 <__libc_init_array+0x38>)
 8007f60:	4c0d      	ldr	r4, [pc, #52]	; (8007f98 <__libc_init_array+0x3c>)
 8007f62:	1b64      	subs	r4, r4, r5
 8007f64:	10a4      	asrs	r4, r4, #2
 8007f66:	2600      	movs	r6, #0
 8007f68:	42a6      	cmp	r6, r4
 8007f6a:	d109      	bne.n	8007f80 <__libc_init_array+0x24>
 8007f6c:	4d0b      	ldr	r5, [pc, #44]	; (8007f9c <__libc_init_array+0x40>)
 8007f6e:	4c0c      	ldr	r4, [pc, #48]	; (8007fa0 <__libc_init_array+0x44>)
 8007f70:	f002 ff0a 	bl	800ad88 <_init>
 8007f74:	1b64      	subs	r4, r4, r5
 8007f76:	10a4      	asrs	r4, r4, #2
 8007f78:	2600      	movs	r6, #0
 8007f7a:	42a6      	cmp	r6, r4
 8007f7c:	d105      	bne.n	8007f8a <__libc_init_array+0x2e>
 8007f7e:	bd70      	pop	{r4, r5, r6, pc}
 8007f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f84:	4798      	blx	r3
 8007f86:	3601      	adds	r6, #1
 8007f88:	e7ee      	b.n	8007f68 <__libc_init_array+0xc>
 8007f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f8e:	4798      	blx	r3
 8007f90:	3601      	adds	r6, #1
 8007f92:	e7f2      	b.n	8007f7a <__libc_init_array+0x1e>
 8007f94:	0800bf2c 	.word	0x0800bf2c
 8007f98:	0800bf2c 	.word	0x0800bf2c
 8007f9c:	0800bf2c 	.word	0x0800bf2c
 8007fa0:	0800bf30 	.word	0x0800bf30

08007fa4 <malloc>:
 8007fa4:	4b02      	ldr	r3, [pc, #8]	; (8007fb0 <malloc+0xc>)
 8007fa6:	4601      	mov	r1, r0
 8007fa8:	6818      	ldr	r0, [r3, #0]
 8007faa:	f000 b87f 	b.w	80080ac <_malloc_r>
 8007fae:	bf00      	nop
 8007fb0:	20000014 	.word	0x20000014

08007fb4 <free>:
 8007fb4:	4b02      	ldr	r3, [pc, #8]	; (8007fc0 <free+0xc>)
 8007fb6:	4601      	mov	r1, r0
 8007fb8:	6818      	ldr	r0, [r3, #0]
 8007fba:	f000 b80b 	b.w	8007fd4 <_free_r>
 8007fbe:	bf00      	nop
 8007fc0:	20000014 	.word	0x20000014

08007fc4 <memset>:
 8007fc4:	4402      	add	r2, r0
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d100      	bne.n	8007fce <memset+0xa>
 8007fcc:	4770      	bx	lr
 8007fce:	f803 1b01 	strb.w	r1, [r3], #1
 8007fd2:	e7f9      	b.n	8007fc8 <memset+0x4>

08007fd4 <_free_r>:
 8007fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fd6:	2900      	cmp	r1, #0
 8007fd8:	d044      	beq.n	8008064 <_free_r+0x90>
 8007fda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fde:	9001      	str	r0, [sp, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f1a1 0404 	sub.w	r4, r1, #4
 8007fe6:	bfb8      	it	lt
 8007fe8:	18e4      	addlt	r4, r4, r3
 8007fea:	f001 fbf9 	bl	80097e0 <__malloc_lock>
 8007fee:	4a1e      	ldr	r2, [pc, #120]	; (8008068 <_free_r+0x94>)
 8007ff0:	9801      	ldr	r0, [sp, #4]
 8007ff2:	6813      	ldr	r3, [r2, #0]
 8007ff4:	b933      	cbnz	r3, 8008004 <_free_r+0x30>
 8007ff6:	6063      	str	r3, [r4, #4]
 8007ff8:	6014      	str	r4, [r2, #0]
 8007ffa:	b003      	add	sp, #12
 8007ffc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008000:	f001 bbf4 	b.w	80097ec <__malloc_unlock>
 8008004:	42a3      	cmp	r3, r4
 8008006:	d908      	bls.n	800801a <_free_r+0x46>
 8008008:	6825      	ldr	r5, [r4, #0]
 800800a:	1961      	adds	r1, r4, r5
 800800c:	428b      	cmp	r3, r1
 800800e:	bf01      	itttt	eq
 8008010:	6819      	ldreq	r1, [r3, #0]
 8008012:	685b      	ldreq	r3, [r3, #4]
 8008014:	1949      	addeq	r1, r1, r5
 8008016:	6021      	streq	r1, [r4, #0]
 8008018:	e7ed      	b.n	8007ff6 <_free_r+0x22>
 800801a:	461a      	mov	r2, r3
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	b10b      	cbz	r3, 8008024 <_free_r+0x50>
 8008020:	42a3      	cmp	r3, r4
 8008022:	d9fa      	bls.n	800801a <_free_r+0x46>
 8008024:	6811      	ldr	r1, [r2, #0]
 8008026:	1855      	adds	r5, r2, r1
 8008028:	42a5      	cmp	r5, r4
 800802a:	d10b      	bne.n	8008044 <_free_r+0x70>
 800802c:	6824      	ldr	r4, [r4, #0]
 800802e:	4421      	add	r1, r4
 8008030:	1854      	adds	r4, r2, r1
 8008032:	42a3      	cmp	r3, r4
 8008034:	6011      	str	r1, [r2, #0]
 8008036:	d1e0      	bne.n	8007ffa <_free_r+0x26>
 8008038:	681c      	ldr	r4, [r3, #0]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	6053      	str	r3, [r2, #4]
 800803e:	4421      	add	r1, r4
 8008040:	6011      	str	r1, [r2, #0]
 8008042:	e7da      	b.n	8007ffa <_free_r+0x26>
 8008044:	d902      	bls.n	800804c <_free_r+0x78>
 8008046:	230c      	movs	r3, #12
 8008048:	6003      	str	r3, [r0, #0]
 800804a:	e7d6      	b.n	8007ffa <_free_r+0x26>
 800804c:	6825      	ldr	r5, [r4, #0]
 800804e:	1961      	adds	r1, r4, r5
 8008050:	428b      	cmp	r3, r1
 8008052:	bf04      	itt	eq
 8008054:	6819      	ldreq	r1, [r3, #0]
 8008056:	685b      	ldreq	r3, [r3, #4]
 8008058:	6063      	str	r3, [r4, #4]
 800805a:	bf04      	itt	eq
 800805c:	1949      	addeq	r1, r1, r5
 800805e:	6021      	streq	r1, [r4, #0]
 8008060:	6054      	str	r4, [r2, #4]
 8008062:	e7ca      	b.n	8007ffa <_free_r+0x26>
 8008064:	b003      	add	sp, #12
 8008066:	bd30      	pop	{r4, r5, pc}
 8008068:	20000c6c 	.word	0x20000c6c

0800806c <sbrk_aligned>:
 800806c:	b570      	push	{r4, r5, r6, lr}
 800806e:	4e0e      	ldr	r6, [pc, #56]	; (80080a8 <sbrk_aligned+0x3c>)
 8008070:	460c      	mov	r4, r1
 8008072:	6831      	ldr	r1, [r6, #0]
 8008074:	4605      	mov	r5, r0
 8008076:	b911      	cbnz	r1, 800807e <sbrk_aligned+0x12>
 8008078:	f000 fcf6 	bl	8008a68 <_sbrk_r>
 800807c:	6030      	str	r0, [r6, #0]
 800807e:	4621      	mov	r1, r4
 8008080:	4628      	mov	r0, r5
 8008082:	f000 fcf1 	bl	8008a68 <_sbrk_r>
 8008086:	1c43      	adds	r3, r0, #1
 8008088:	d00a      	beq.n	80080a0 <sbrk_aligned+0x34>
 800808a:	1cc4      	adds	r4, r0, #3
 800808c:	f024 0403 	bic.w	r4, r4, #3
 8008090:	42a0      	cmp	r0, r4
 8008092:	d007      	beq.n	80080a4 <sbrk_aligned+0x38>
 8008094:	1a21      	subs	r1, r4, r0
 8008096:	4628      	mov	r0, r5
 8008098:	f000 fce6 	bl	8008a68 <_sbrk_r>
 800809c:	3001      	adds	r0, #1
 800809e:	d101      	bne.n	80080a4 <sbrk_aligned+0x38>
 80080a0:	f04f 34ff 	mov.w	r4, #4294967295
 80080a4:	4620      	mov	r0, r4
 80080a6:	bd70      	pop	{r4, r5, r6, pc}
 80080a8:	20000c70 	.word	0x20000c70

080080ac <_malloc_r>:
 80080ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b0:	1ccd      	adds	r5, r1, #3
 80080b2:	f025 0503 	bic.w	r5, r5, #3
 80080b6:	3508      	adds	r5, #8
 80080b8:	2d0c      	cmp	r5, #12
 80080ba:	bf38      	it	cc
 80080bc:	250c      	movcc	r5, #12
 80080be:	2d00      	cmp	r5, #0
 80080c0:	4607      	mov	r7, r0
 80080c2:	db01      	blt.n	80080c8 <_malloc_r+0x1c>
 80080c4:	42a9      	cmp	r1, r5
 80080c6:	d905      	bls.n	80080d4 <_malloc_r+0x28>
 80080c8:	230c      	movs	r3, #12
 80080ca:	603b      	str	r3, [r7, #0]
 80080cc:	2600      	movs	r6, #0
 80080ce:	4630      	mov	r0, r6
 80080d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d4:	4e2e      	ldr	r6, [pc, #184]	; (8008190 <_malloc_r+0xe4>)
 80080d6:	f001 fb83 	bl	80097e0 <__malloc_lock>
 80080da:	6833      	ldr	r3, [r6, #0]
 80080dc:	461c      	mov	r4, r3
 80080de:	bb34      	cbnz	r4, 800812e <_malloc_r+0x82>
 80080e0:	4629      	mov	r1, r5
 80080e2:	4638      	mov	r0, r7
 80080e4:	f7ff ffc2 	bl	800806c <sbrk_aligned>
 80080e8:	1c43      	adds	r3, r0, #1
 80080ea:	4604      	mov	r4, r0
 80080ec:	d14d      	bne.n	800818a <_malloc_r+0xde>
 80080ee:	6834      	ldr	r4, [r6, #0]
 80080f0:	4626      	mov	r6, r4
 80080f2:	2e00      	cmp	r6, #0
 80080f4:	d140      	bne.n	8008178 <_malloc_r+0xcc>
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	4631      	mov	r1, r6
 80080fa:	4638      	mov	r0, r7
 80080fc:	eb04 0803 	add.w	r8, r4, r3
 8008100:	f000 fcb2 	bl	8008a68 <_sbrk_r>
 8008104:	4580      	cmp	r8, r0
 8008106:	d13a      	bne.n	800817e <_malloc_r+0xd2>
 8008108:	6821      	ldr	r1, [r4, #0]
 800810a:	3503      	adds	r5, #3
 800810c:	1a6d      	subs	r5, r5, r1
 800810e:	f025 0503 	bic.w	r5, r5, #3
 8008112:	3508      	adds	r5, #8
 8008114:	2d0c      	cmp	r5, #12
 8008116:	bf38      	it	cc
 8008118:	250c      	movcc	r5, #12
 800811a:	4629      	mov	r1, r5
 800811c:	4638      	mov	r0, r7
 800811e:	f7ff ffa5 	bl	800806c <sbrk_aligned>
 8008122:	3001      	adds	r0, #1
 8008124:	d02b      	beq.n	800817e <_malloc_r+0xd2>
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	442b      	add	r3, r5
 800812a:	6023      	str	r3, [r4, #0]
 800812c:	e00e      	b.n	800814c <_malloc_r+0xa0>
 800812e:	6822      	ldr	r2, [r4, #0]
 8008130:	1b52      	subs	r2, r2, r5
 8008132:	d41e      	bmi.n	8008172 <_malloc_r+0xc6>
 8008134:	2a0b      	cmp	r2, #11
 8008136:	d916      	bls.n	8008166 <_malloc_r+0xba>
 8008138:	1961      	adds	r1, r4, r5
 800813a:	42a3      	cmp	r3, r4
 800813c:	6025      	str	r5, [r4, #0]
 800813e:	bf18      	it	ne
 8008140:	6059      	strne	r1, [r3, #4]
 8008142:	6863      	ldr	r3, [r4, #4]
 8008144:	bf08      	it	eq
 8008146:	6031      	streq	r1, [r6, #0]
 8008148:	5162      	str	r2, [r4, r5]
 800814a:	604b      	str	r3, [r1, #4]
 800814c:	4638      	mov	r0, r7
 800814e:	f104 060b 	add.w	r6, r4, #11
 8008152:	f001 fb4b 	bl	80097ec <__malloc_unlock>
 8008156:	f026 0607 	bic.w	r6, r6, #7
 800815a:	1d23      	adds	r3, r4, #4
 800815c:	1af2      	subs	r2, r6, r3
 800815e:	d0b6      	beq.n	80080ce <_malloc_r+0x22>
 8008160:	1b9b      	subs	r3, r3, r6
 8008162:	50a3      	str	r3, [r4, r2]
 8008164:	e7b3      	b.n	80080ce <_malloc_r+0x22>
 8008166:	6862      	ldr	r2, [r4, #4]
 8008168:	42a3      	cmp	r3, r4
 800816a:	bf0c      	ite	eq
 800816c:	6032      	streq	r2, [r6, #0]
 800816e:	605a      	strne	r2, [r3, #4]
 8008170:	e7ec      	b.n	800814c <_malloc_r+0xa0>
 8008172:	4623      	mov	r3, r4
 8008174:	6864      	ldr	r4, [r4, #4]
 8008176:	e7b2      	b.n	80080de <_malloc_r+0x32>
 8008178:	4634      	mov	r4, r6
 800817a:	6876      	ldr	r6, [r6, #4]
 800817c:	e7b9      	b.n	80080f2 <_malloc_r+0x46>
 800817e:	230c      	movs	r3, #12
 8008180:	603b      	str	r3, [r7, #0]
 8008182:	4638      	mov	r0, r7
 8008184:	f001 fb32 	bl	80097ec <__malloc_unlock>
 8008188:	e7a1      	b.n	80080ce <_malloc_r+0x22>
 800818a:	6025      	str	r5, [r4, #0]
 800818c:	e7de      	b.n	800814c <_malloc_r+0xa0>
 800818e:	bf00      	nop
 8008190:	20000c6c 	.word	0x20000c6c

08008194 <__cvt>:
 8008194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008198:	ec55 4b10 	vmov	r4, r5, d0
 800819c:	2d00      	cmp	r5, #0
 800819e:	460e      	mov	r6, r1
 80081a0:	4619      	mov	r1, r3
 80081a2:	462b      	mov	r3, r5
 80081a4:	bfbb      	ittet	lt
 80081a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80081aa:	461d      	movlt	r5, r3
 80081ac:	2300      	movge	r3, #0
 80081ae:	232d      	movlt	r3, #45	; 0x2d
 80081b0:	700b      	strb	r3, [r1, #0]
 80081b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80081b8:	4691      	mov	r9, r2
 80081ba:	f023 0820 	bic.w	r8, r3, #32
 80081be:	bfbc      	itt	lt
 80081c0:	4622      	movlt	r2, r4
 80081c2:	4614      	movlt	r4, r2
 80081c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081c8:	d005      	beq.n	80081d6 <__cvt+0x42>
 80081ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80081ce:	d100      	bne.n	80081d2 <__cvt+0x3e>
 80081d0:	3601      	adds	r6, #1
 80081d2:	2102      	movs	r1, #2
 80081d4:	e000      	b.n	80081d8 <__cvt+0x44>
 80081d6:	2103      	movs	r1, #3
 80081d8:	ab03      	add	r3, sp, #12
 80081da:	9301      	str	r3, [sp, #4]
 80081dc:	ab02      	add	r3, sp, #8
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	ec45 4b10 	vmov	d0, r4, r5
 80081e4:	4653      	mov	r3, sl
 80081e6:	4632      	mov	r2, r6
 80081e8:	f000 fcfa 	bl	8008be0 <_dtoa_r>
 80081ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80081f0:	4607      	mov	r7, r0
 80081f2:	d102      	bne.n	80081fa <__cvt+0x66>
 80081f4:	f019 0f01 	tst.w	r9, #1
 80081f8:	d022      	beq.n	8008240 <__cvt+0xac>
 80081fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081fe:	eb07 0906 	add.w	r9, r7, r6
 8008202:	d110      	bne.n	8008226 <__cvt+0x92>
 8008204:	783b      	ldrb	r3, [r7, #0]
 8008206:	2b30      	cmp	r3, #48	; 0x30
 8008208:	d10a      	bne.n	8008220 <__cvt+0x8c>
 800820a:	2200      	movs	r2, #0
 800820c:	2300      	movs	r3, #0
 800820e:	4620      	mov	r0, r4
 8008210:	4629      	mov	r1, r5
 8008212:	f7f8 fc61 	bl	8000ad8 <__aeabi_dcmpeq>
 8008216:	b918      	cbnz	r0, 8008220 <__cvt+0x8c>
 8008218:	f1c6 0601 	rsb	r6, r6, #1
 800821c:	f8ca 6000 	str.w	r6, [sl]
 8008220:	f8da 3000 	ldr.w	r3, [sl]
 8008224:	4499      	add	r9, r3
 8008226:	2200      	movs	r2, #0
 8008228:	2300      	movs	r3, #0
 800822a:	4620      	mov	r0, r4
 800822c:	4629      	mov	r1, r5
 800822e:	f7f8 fc53 	bl	8000ad8 <__aeabi_dcmpeq>
 8008232:	b108      	cbz	r0, 8008238 <__cvt+0xa4>
 8008234:	f8cd 900c 	str.w	r9, [sp, #12]
 8008238:	2230      	movs	r2, #48	; 0x30
 800823a:	9b03      	ldr	r3, [sp, #12]
 800823c:	454b      	cmp	r3, r9
 800823e:	d307      	bcc.n	8008250 <__cvt+0xbc>
 8008240:	9b03      	ldr	r3, [sp, #12]
 8008242:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008244:	1bdb      	subs	r3, r3, r7
 8008246:	4638      	mov	r0, r7
 8008248:	6013      	str	r3, [r2, #0]
 800824a:	b004      	add	sp, #16
 800824c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008250:	1c59      	adds	r1, r3, #1
 8008252:	9103      	str	r1, [sp, #12]
 8008254:	701a      	strb	r2, [r3, #0]
 8008256:	e7f0      	b.n	800823a <__cvt+0xa6>

08008258 <__exponent>:
 8008258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800825a:	4603      	mov	r3, r0
 800825c:	2900      	cmp	r1, #0
 800825e:	bfb8      	it	lt
 8008260:	4249      	neglt	r1, r1
 8008262:	f803 2b02 	strb.w	r2, [r3], #2
 8008266:	bfb4      	ite	lt
 8008268:	222d      	movlt	r2, #45	; 0x2d
 800826a:	222b      	movge	r2, #43	; 0x2b
 800826c:	2909      	cmp	r1, #9
 800826e:	7042      	strb	r2, [r0, #1]
 8008270:	dd2a      	ble.n	80082c8 <__exponent+0x70>
 8008272:	f10d 0407 	add.w	r4, sp, #7
 8008276:	46a4      	mov	ip, r4
 8008278:	270a      	movs	r7, #10
 800827a:	46a6      	mov	lr, r4
 800827c:	460a      	mov	r2, r1
 800827e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008282:	fb07 1516 	mls	r5, r7, r6, r1
 8008286:	3530      	adds	r5, #48	; 0x30
 8008288:	2a63      	cmp	r2, #99	; 0x63
 800828a:	f104 34ff 	add.w	r4, r4, #4294967295
 800828e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008292:	4631      	mov	r1, r6
 8008294:	dcf1      	bgt.n	800827a <__exponent+0x22>
 8008296:	3130      	adds	r1, #48	; 0x30
 8008298:	f1ae 0502 	sub.w	r5, lr, #2
 800829c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80082a0:	1c44      	adds	r4, r0, #1
 80082a2:	4629      	mov	r1, r5
 80082a4:	4561      	cmp	r1, ip
 80082a6:	d30a      	bcc.n	80082be <__exponent+0x66>
 80082a8:	f10d 0209 	add.w	r2, sp, #9
 80082ac:	eba2 020e 	sub.w	r2, r2, lr
 80082b0:	4565      	cmp	r5, ip
 80082b2:	bf88      	it	hi
 80082b4:	2200      	movhi	r2, #0
 80082b6:	4413      	add	r3, r2
 80082b8:	1a18      	subs	r0, r3, r0
 80082ba:	b003      	add	sp, #12
 80082bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80082c6:	e7ed      	b.n	80082a4 <__exponent+0x4c>
 80082c8:	2330      	movs	r3, #48	; 0x30
 80082ca:	3130      	adds	r1, #48	; 0x30
 80082cc:	7083      	strb	r3, [r0, #2]
 80082ce:	70c1      	strb	r1, [r0, #3]
 80082d0:	1d03      	adds	r3, r0, #4
 80082d2:	e7f1      	b.n	80082b8 <__exponent+0x60>

080082d4 <_printf_float>:
 80082d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d8:	ed2d 8b02 	vpush	{d8}
 80082dc:	b08d      	sub	sp, #52	; 0x34
 80082de:	460c      	mov	r4, r1
 80082e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80082e4:	4616      	mov	r6, r2
 80082e6:	461f      	mov	r7, r3
 80082e8:	4605      	mov	r5, r0
 80082ea:	f001 fa67 	bl	80097bc <_localeconv_r>
 80082ee:	f8d0 a000 	ldr.w	sl, [r0]
 80082f2:	4650      	mov	r0, sl
 80082f4:	f7f7 ff74 	bl	80001e0 <strlen>
 80082f8:	2300      	movs	r3, #0
 80082fa:	930a      	str	r3, [sp, #40]	; 0x28
 80082fc:	6823      	ldr	r3, [r4, #0]
 80082fe:	9305      	str	r3, [sp, #20]
 8008300:	f8d8 3000 	ldr.w	r3, [r8]
 8008304:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008308:	3307      	adds	r3, #7
 800830a:	f023 0307 	bic.w	r3, r3, #7
 800830e:	f103 0208 	add.w	r2, r3, #8
 8008312:	f8c8 2000 	str.w	r2, [r8]
 8008316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800831e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008322:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008326:	9307      	str	r3, [sp, #28]
 8008328:	f8cd 8018 	str.w	r8, [sp, #24]
 800832c:	ee08 0a10 	vmov	s16, r0
 8008330:	4b9f      	ldr	r3, [pc, #636]	; (80085b0 <_printf_float+0x2dc>)
 8008332:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008336:	f04f 32ff 	mov.w	r2, #4294967295
 800833a:	f7f8 fbff 	bl	8000b3c <__aeabi_dcmpun>
 800833e:	bb88      	cbnz	r0, 80083a4 <_printf_float+0xd0>
 8008340:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008344:	4b9a      	ldr	r3, [pc, #616]	; (80085b0 <_printf_float+0x2dc>)
 8008346:	f04f 32ff 	mov.w	r2, #4294967295
 800834a:	f7f8 fbd9 	bl	8000b00 <__aeabi_dcmple>
 800834e:	bb48      	cbnz	r0, 80083a4 <_printf_float+0xd0>
 8008350:	2200      	movs	r2, #0
 8008352:	2300      	movs	r3, #0
 8008354:	4640      	mov	r0, r8
 8008356:	4649      	mov	r1, r9
 8008358:	f7f8 fbc8 	bl	8000aec <__aeabi_dcmplt>
 800835c:	b110      	cbz	r0, 8008364 <_printf_float+0x90>
 800835e:	232d      	movs	r3, #45	; 0x2d
 8008360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008364:	4b93      	ldr	r3, [pc, #588]	; (80085b4 <_printf_float+0x2e0>)
 8008366:	4894      	ldr	r0, [pc, #592]	; (80085b8 <_printf_float+0x2e4>)
 8008368:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800836c:	bf94      	ite	ls
 800836e:	4698      	movls	r8, r3
 8008370:	4680      	movhi	r8, r0
 8008372:	2303      	movs	r3, #3
 8008374:	6123      	str	r3, [r4, #16]
 8008376:	9b05      	ldr	r3, [sp, #20]
 8008378:	f023 0204 	bic.w	r2, r3, #4
 800837c:	6022      	str	r2, [r4, #0]
 800837e:	f04f 0900 	mov.w	r9, #0
 8008382:	9700      	str	r7, [sp, #0]
 8008384:	4633      	mov	r3, r6
 8008386:	aa0b      	add	r2, sp, #44	; 0x2c
 8008388:	4621      	mov	r1, r4
 800838a:	4628      	mov	r0, r5
 800838c:	f000 f9d8 	bl	8008740 <_printf_common>
 8008390:	3001      	adds	r0, #1
 8008392:	f040 8090 	bne.w	80084b6 <_printf_float+0x1e2>
 8008396:	f04f 30ff 	mov.w	r0, #4294967295
 800839a:	b00d      	add	sp, #52	; 0x34
 800839c:	ecbd 8b02 	vpop	{d8}
 80083a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a4:	4642      	mov	r2, r8
 80083a6:	464b      	mov	r3, r9
 80083a8:	4640      	mov	r0, r8
 80083aa:	4649      	mov	r1, r9
 80083ac:	f7f8 fbc6 	bl	8000b3c <__aeabi_dcmpun>
 80083b0:	b140      	cbz	r0, 80083c4 <_printf_float+0xf0>
 80083b2:	464b      	mov	r3, r9
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	bfbc      	itt	lt
 80083b8:	232d      	movlt	r3, #45	; 0x2d
 80083ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80083be:	487f      	ldr	r0, [pc, #508]	; (80085bc <_printf_float+0x2e8>)
 80083c0:	4b7f      	ldr	r3, [pc, #508]	; (80085c0 <_printf_float+0x2ec>)
 80083c2:	e7d1      	b.n	8008368 <_printf_float+0x94>
 80083c4:	6863      	ldr	r3, [r4, #4]
 80083c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80083ca:	9206      	str	r2, [sp, #24]
 80083cc:	1c5a      	adds	r2, r3, #1
 80083ce:	d13f      	bne.n	8008450 <_printf_float+0x17c>
 80083d0:	2306      	movs	r3, #6
 80083d2:	6063      	str	r3, [r4, #4]
 80083d4:	9b05      	ldr	r3, [sp, #20]
 80083d6:	6861      	ldr	r1, [r4, #4]
 80083d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80083dc:	2300      	movs	r3, #0
 80083de:	9303      	str	r3, [sp, #12]
 80083e0:	ab0a      	add	r3, sp, #40	; 0x28
 80083e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80083e6:	ab09      	add	r3, sp, #36	; 0x24
 80083e8:	ec49 8b10 	vmov	d0, r8, r9
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	6022      	str	r2, [r4, #0]
 80083f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80083f4:	4628      	mov	r0, r5
 80083f6:	f7ff fecd 	bl	8008194 <__cvt>
 80083fa:	9b06      	ldr	r3, [sp, #24]
 80083fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083fe:	2b47      	cmp	r3, #71	; 0x47
 8008400:	4680      	mov	r8, r0
 8008402:	d108      	bne.n	8008416 <_printf_float+0x142>
 8008404:	1cc8      	adds	r0, r1, #3
 8008406:	db02      	blt.n	800840e <_printf_float+0x13a>
 8008408:	6863      	ldr	r3, [r4, #4]
 800840a:	4299      	cmp	r1, r3
 800840c:	dd41      	ble.n	8008492 <_printf_float+0x1be>
 800840e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008412:	fa5f fb8b 	uxtb.w	fp, fp
 8008416:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800841a:	d820      	bhi.n	800845e <_printf_float+0x18a>
 800841c:	3901      	subs	r1, #1
 800841e:	465a      	mov	r2, fp
 8008420:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008424:	9109      	str	r1, [sp, #36]	; 0x24
 8008426:	f7ff ff17 	bl	8008258 <__exponent>
 800842a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800842c:	1813      	adds	r3, r2, r0
 800842e:	2a01      	cmp	r2, #1
 8008430:	4681      	mov	r9, r0
 8008432:	6123      	str	r3, [r4, #16]
 8008434:	dc02      	bgt.n	800843c <_printf_float+0x168>
 8008436:	6822      	ldr	r2, [r4, #0]
 8008438:	07d2      	lsls	r2, r2, #31
 800843a:	d501      	bpl.n	8008440 <_printf_float+0x16c>
 800843c:	3301      	adds	r3, #1
 800843e:	6123      	str	r3, [r4, #16]
 8008440:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008444:	2b00      	cmp	r3, #0
 8008446:	d09c      	beq.n	8008382 <_printf_float+0xae>
 8008448:	232d      	movs	r3, #45	; 0x2d
 800844a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800844e:	e798      	b.n	8008382 <_printf_float+0xae>
 8008450:	9a06      	ldr	r2, [sp, #24]
 8008452:	2a47      	cmp	r2, #71	; 0x47
 8008454:	d1be      	bne.n	80083d4 <_printf_float+0x100>
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1bc      	bne.n	80083d4 <_printf_float+0x100>
 800845a:	2301      	movs	r3, #1
 800845c:	e7b9      	b.n	80083d2 <_printf_float+0xfe>
 800845e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008462:	d118      	bne.n	8008496 <_printf_float+0x1c2>
 8008464:	2900      	cmp	r1, #0
 8008466:	6863      	ldr	r3, [r4, #4]
 8008468:	dd0b      	ble.n	8008482 <_printf_float+0x1ae>
 800846a:	6121      	str	r1, [r4, #16]
 800846c:	b913      	cbnz	r3, 8008474 <_printf_float+0x1a0>
 800846e:	6822      	ldr	r2, [r4, #0]
 8008470:	07d0      	lsls	r0, r2, #31
 8008472:	d502      	bpl.n	800847a <_printf_float+0x1a6>
 8008474:	3301      	adds	r3, #1
 8008476:	440b      	add	r3, r1
 8008478:	6123      	str	r3, [r4, #16]
 800847a:	65a1      	str	r1, [r4, #88]	; 0x58
 800847c:	f04f 0900 	mov.w	r9, #0
 8008480:	e7de      	b.n	8008440 <_printf_float+0x16c>
 8008482:	b913      	cbnz	r3, 800848a <_printf_float+0x1b6>
 8008484:	6822      	ldr	r2, [r4, #0]
 8008486:	07d2      	lsls	r2, r2, #31
 8008488:	d501      	bpl.n	800848e <_printf_float+0x1ba>
 800848a:	3302      	adds	r3, #2
 800848c:	e7f4      	b.n	8008478 <_printf_float+0x1a4>
 800848e:	2301      	movs	r3, #1
 8008490:	e7f2      	b.n	8008478 <_printf_float+0x1a4>
 8008492:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008498:	4299      	cmp	r1, r3
 800849a:	db05      	blt.n	80084a8 <_printf_float+0x1d4>
 800849c:	6823      	ldr	r3, [r4, #0]
 800849e:	6121      	str	r1, [r4, #16]
 80084a0:	07d8      	lsls	r0, r3, #31
 80084a2:	d5ea      	bpl.n	800847a <_printf_float+0x1a6>
 80084a4:	1c4b      	adds	r3, r1, #1
 80084a6:	e7e7      	b.n	8008478 <_printf_float+0x1a4>
 80084a8:	2900      	cmp	r1, #0
 80084aa:	bfd4      	ite	le
 80084ac:	f1c1 0202 	rsble	r2, r1, #2
 80084b0:	2201      	movgt	r2, #1
 80084b2:	4413      	add	r3, r2
 80084b4:	e7e0      	b.n	8008478 <_printf_float+0x1a4>
 80084b6:	6823      	ldr	r3, [r4, #0]
 80084b8:	055a      	lsls	r2, r3, #21
 80084ba:	d407      	bmi.n	80084cc <_printf_float+0x1f8>
 80084bc:	6923      	ldr	r3, [r4, #16]
 80084be:	4642      	mov	r2, r8
 80084c0:	4631      	mov	r1, r6
 80084c2:	4628      	mov	r0, r5
 80084c4:	47b8      	blx	r7
 80084c6:	3001      	adds	r0, #1
 80084c8:	d12c      	bne.n	8008524 <_printf_float+0x250>
 80084ca:	e764      	b.n	8008396 <_printf_float+0xc2>
 80084cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084d0:	f240 80e0 	bls.w	8008694 <_printf_float+0x3c0>
 80084d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084d8:	2200      	movs	r2, #0
 80084da:	2300      	movs	r3, #0
 80084dc:	f7f8 fafc 	bl	8000ad8 <__aeabi_dcmpeq>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d034      	beq.n	800854e <_printf_float+0x27a>
 80084e4:	4a37      	ldr	r2, [pc, #220]	; (80085c4 <_printf_float+0x2f0>)
 80084e6:	2301      	movs	r3, #1
 80084e8:	4631      	mov	r1, r6
 80084ea:	4628      	mov	r0, r5
 80084ec:	47b8      	blx	r7
 80084ee:	3001      	adds	r0, #1
 80084f0:	f43f af51 	beq.w	8008396 <_printf_float+0xc2>
 80084f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084f8:	429a      	cmp	r2, r3
 80084fa:	db02      	blt.n	8008502 <_printf_float+0x22e>
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	07d8      	lsls	r0, r3, #31
 8008500:	d510      	bpl.n	8008524 <_printf_float+0x250>
 8008502:	ee18 3a10 	vmov	r3, s16
 8008506:	4652      	mov	r2, sl
 8008508:	4631      	mov	r1, r6
 800850a:	4628      	mov	r0, r5
 800850c:	47b8      	blx	r7
 800850e:	3001      	adds	r0, #1
 8008510:	f43f af41 	beq.w	8008396 <_printf_float+0xc2>
 8008514:	f04f 0800 	mov.w	r8, #0
 8008518:	f104 091a 	add.w	r9, r4, #26
 800851c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800851e:	3b01      	subs	r3, #1
 8008520:	4543      	cmp	r3, r8
 8008522:	dc09      	bgt.n	8008538 <_printf_float+0x264>
 8008524:	6823      	ldr	r3, [r4, #0]
 8008526:	079b      	lsls	r3, r3, #30
 8008528:	f100 8105 	bmi.w	8008736 <_printf_float+0x462>
 800852c:	68e0      	ldr	r0, [r4, #12]
 800852e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008530:	4298      	cmp	r0, r3
 8008532:	bfb8      	it	lt
 8008534:	4618      	movlt	r0, r3
 8008536:	e730      	b.n	800839a <_printf_float+0xc6>
 8008538:	2301      	movs	r3, #1
 800853a:	464a      	mov	r2, r9
 800853c:	4631      	mov	r1, r6
 800853e:	4628      	mov	r0, r5
 8008540:	47b8      	blx	r7
 8008542:	3001      	adds	r0, #1
 8008544:	f43f af27 	beq.w	8008396 <_printf_float+0xc2>
 8008548:	f108 0801 	add.w	r8, r8, #1
 800854c:	e7e6      	b.n	800851c <_printf_float+0x248>
 800854e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008550:	2b00      	cmp	r3, #0
 8008552:	dc39      	bgt.n	80085c8 <_printf_float+0x2f4>
 8008554:	4a1b      	ldr	r2, [pc, #108]	; (80085c4 <_printf_float+0x2f0>)
 8008556:	2301      	movs	r3, #1
 8008558:	4631      	mov	r1, r6
 800855a:	4628      	mov	r0, r5
 800855c:	47b8      	blx	r7
 800855e:	3001      	adds	r0, #1
 8008560:	f43f af19 	beq.w	8008396 <_printf_float+0xc2>
 8008564:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008568:	4313      	orrs	r3, r2
 800856a:	d102      	bne.n	8008572 <_printf_float+0x29e>
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	07d9      	lsls	r1, r3, #31
 8008570:	d5d8      	bpl.n	8008524 <_printf_float+0x250>
 8008572:	ee18 3a10 	vmov	r3, s16
 8008576:	4652      	mov	r2, sl
 8008578:	4631      	mov	r1, r6
 800857a:	4628      	mov	r0, r5
 800857c:	47b8      	blx	r7
 800857e:	3001      	adds	r0, #1
 8008580:	f43f af09 	beq.w	8008396 <_printf_float+0xc2>
 8008584:	f04f 0900 	mov.w	r9, #0
 8008588:	f104 0a1a 	add.w	sl, r4, #26
 800858c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800858e:	425b      	negs	r3, r3
 8008590:	454b      	cmp	r3, r9
 8008592:	dc01      	bgt.n	8008598 <_printf_float+0x2c4>
 8008594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008596:	e792      	b.n	80084be <_printf_float+0x1ea>
 8008598:	2301      	movs	r3, #1
 800859a:	4652      	mov	r2, sl
 800859c:	4631      	mov	r1, r6
 800859e:	4628      	mov	r0, r5
 80085a0:	47b8      	blx	r7
 80085a2:	3001      	adds	r0, #1
 80085a4:	f43f aef7 	beq.w	8008396 <_printf_float+0xc2>
 80085a8:	f109 0901 	add.w	r9, r9, #1
 80085ac:	e7ee      	b.n	800858c <_printf_float+0x2b8>
 80085ae:	bf00      	nop
 80085b0:	7fefffff 	.word	0x7fefffff
 80085b4:	0800bb54 	.word	0x0800bb54
 80085b8:	0800bb58 	.word	0x0800bb58
 80085bc:	0800bb60 	.word	0x0800bb60
 80085c0:	0800bb5c 	.word	0x0800bb5c
 80085c4:	0800bb64 	.word	0x0800bb64
 80085c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085cc:	429a      	cmp	r2, r3
 80085ce:	bfa8      	it	ge
 80085d0:	461a      	movge	r2, r3
 80085d2:	2a00      	cmp	r2, #0
 80085d4:	4691      	mov	r9, r2
 80085d6:	dc37      	bgt.n	8008648 <_printf_float+0x374>
 80085d8:	f04f 0b00 	mov.w	fp, #0
 80085dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085e0:	f104 021a 	add.w	r2, r4, #26
 80085e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085e6:	9305      	str	r3, [sp, #20]
 80085e8:	eba3 0309 	sub.w	r3, r3, r9
 80085ec:	455b      	cmp	r3, fp
 80085ee:	dc33      	bgt.n	8008658 <_printf_float+0x384>
 80085f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085f4:	429a      	cmp	r2, r3
 80085f6:	db3b      	blt.n	8008670 <_printf_float+0x39c>
 80085f8:	6823      	ldr	r3, [r4, #0]
 80085fa:	07da      	lsls	r2, r3, #31
 80085fc:	d438      	bmi.n	8008670 <_printf_float+0x39c>
 80085fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008600:	9a05      	ldr	r2, [sp, #20]
 8008602:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008604:	1a9a      	subs	r2, r3, r2
 8008606:	eba3 0901 	sub.w	r9, r3, r1
 800860a:	4591      	cmp	r9, r2
 800860c:	bfa8      	it	ge
 800860e:	4691      	movge	r9, r2
 8008610:	f1b9 0f00 	cmp.w	r9, #0
 8008614:	dc35      	bgt.n	8008682 <_printf_float+0x3ae>
 8008616:	f04f 0800 	mov.w	r8, #0
 800861a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800861e:	f104 0a1a 	add.w	sl, r4, #26
 8008622:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008626:	1a9b      	subs	r3, r3, r2
 8008628:	eba3 0309 	sub.w	r3, r3, r9
 800862c:	4543      	cmp	r3, r8
 800862e:	f77f af79 	ble.w	8008524 <_printf_float+0x250>
 8008632:	2301      	movs	r3, #1
 8008634:	4652      	mov	r2, sl
 8008636:	4631      	mov	r1, r6
 8008638:	4628      	mov	r0, r5
 800863a:	47b8      	blx	r7
 800863c:	3001      	adds	r0, #1
 800863e:	f43f aeaa 	beq.w	8008396 <_printf_float+0xc2>
 8008642:	f108 0801 	add.w	r8, r8, #1
 8008646:	e7ec      	b.n	8008622 <_printf_float+0x34e>
 8008648:	4613      	mov	r3, r2
 800864a:	4631      	mov	r1, r6
 800864c:	4642      	mov	r2, r8
 800864e:	4628      	mov	r0, r5
 8008650:	47b8      	blx	r7
 8008652:	3001      	adds	r0, #1
 8008654:	d1c0      	bne.n	80085d8 <_printf_float+0x304>
 8008656:	e69e      	b.n	8008396 <_printf_float+0xc2>
 8008658:	2301      	movs	r3, #1
 800865a:	4631      	mov	r1, r6
 800865c:	4628      	mov	r0, r5
 800865e:	9205      	str	r2, [sp, #20]
 8008660:	47b8      	blx	r7
 8008662:	3001      	adds	r0, #1
 8008664:	f43f ae97 	beq.w	8008396 <_printf_float+0xc2>
 8008668:	9a05      	ldr	r2, [sp, #20]
 800866a:	f10b 0b01 	add.w	fp, fp, #1
 800866e:	e7b9      	b.n	80085e4 <_printf_float+0x310>
 8008670:	ee18 3a10 	vmov	r3, s16
 8008674:	4652      	mov	r2, sl
 8008676:	4631      	mov	r1, r6
 8008678:	4628      	mov	r0, r5
 800867a:	47b8      	blx	r7
 800867c:	3001      	adds	r0, #1
 800867e:	d1be      	bne.n	80085fe <_printf_float+0x32a>
 8008680:	e689      	b.n	8008396 <_printf_float+0xc2>
 8008682:	9a05      	ldr	r2, [sp, #20]
 8008684:	464b      	mov	r3, r9
 8008686:	4442      	add	r2, r8
 8008688:	4631      	mov	r1, r6
 800868a:	4628      	mov	r0, r5
 800868c:	47b8      	blx	r7
 800868e:	3001      	adds	r0, #1
 8008690:	d1c1      	bne.n	8008616 <_printf_float+0x342>
 8008692:	e680      	b.n	8008396 <_printf_float+0xc2>
 8008694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008696:	2a01      	cmp	r2, #1
 8008698:	dc01      	bgt.n	800869e <_printf_float+0x3ca>
 800869a:	07db      	lsls	r3, r3, #31
 800869c:	d538      	bpl.n	8008710 <_printf_float+0x43c>
 800869e:	2301      	movs	r3, #1
 80086a0:	4642      	mov	r2, r8
 80086a2:	4631      	mov	r1, r6
 80086a4:	4628      	mov	r0, r5
 80086a6:	47b8      	blx	r7
 80086a8:	3001      	adds	r0, #1
 80086aa:	f43f ae74 	beq.w	8008396 <_printf_float+0xc2>
 80086ae:	ee18 3a10 	vmov	r3, s16
 80086b2:	4652      	mov	r2, sl
 80086b4:	4631      	mov	r1, r6
 80086b6:	4628      	mov	r0, r5
 80086b8:	47b8      	blx	r7
 80086ba:	3001      	adds	r0, #1
 80086bc:	f43f ae6b 	beq.w	8008396 <_printf_float+0xc2>
 80086c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086c4:	2200      	movs	r2, #0
 80086c6:	2300      	movs	r3, #0
 80086c8:	f7f8 fa06 	bl	8000ad8 <__aeabi_dcmpeq>
 80086cc:	b9d8      	cbnz	r0, 8008706 <_printf_float+0x432>
 80086ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086d0:	f108 0201 	add.w	r2, r8, #1
 80086d4:	3b01      	subs	r3, #1
 80086d6:	4631      	mov	r1, r6
 80086d8:	4628      	mov	r0, r5
 80086da:	47b8      	blx	r7
 80086dc:	3001      	adds	r0, #1
 80086de:	d10e      	bne.n	80086fe <_printf_float+0x42a>
 80086e0:	e659      	b.n	8008396 <_printf_float+0xc2>
 80086e2:	2301      	movs	r3, #1
 80086e4:	4652      	mov	r2, sl
 80086e6:	4631      	mov	r1, r6
 80086e8:	4628      	mov	r0, r5
 80086ea:	47b8      	blx	r7
 80086ec:	3001      	adds	r0, #1
 80086ee:	f43f ae52 	beq.w	8008396 <_printf_float+0xc2>
 80086f2:	f108 0801 	add.w	r8, r8, #1
 80086f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086f8:	3b01      	subs	r3, #1
 80086fa:	4543      	cmp	r3, r8
 80086fc:	dcf1      	bgt.n	80086e2 <_printf_float+0x40e>
 80086fe:	464b      	mov	r3, r9
 8008700:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008704:	e6dc      	b.n	80084c0 <_printf_float+0x1ec>
 8008706:	f04f 0800 	mov.w	r8, #0
 800870a:	f104 0a1a 	add.w	sl, r4, #26
 800870e:	e7f2      	b.n	80086f6 <_printf_float+0x422>
 8008710:	2301      	movs	r3, #1
 8008712:	4642      	mov	r2, r8
 8008714:	e7df      	b.n	80086d6 <_printf_float+0x402>
 8008716:	2301      	movs	r3, #1
 8008718:	464a      	mov	r2, r9
 800871a:	4631      	mov	r1, r6
 800871c:	4628      	mov	r0, r5
 800871e:	47b8      	blx	r7
 8008720:	3001      	adds	r0, #1
 8008722:	f43f ae38 	beq.w	8008396 <_printf_float+0xc2>
 8008726:	f108 0801 	add.w	r8, r8, #1
 800872a:	68e3      	ldr	r3, [r4, #12]
 800872c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800872e:	1a5b      	subs	r3, r3, r1
 8008730:	4543      	cmp	r3, r8
 8008732:	dcf0      	bgt.n	8008716 <_printf_float+0x442>
 8008734:	e6fa      	b.n	800852c <_printf_float+0x258>
 8008736:	f04f 0800 	mov.w	r8, #0
 800873a:	f104 0919 	add.w	r9, r4, #25
 800873e:	e7f4      	b.n	800872a <_printf_float+0x456>

08008740 <_printf_common>:
 8008740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008744:	4616      	mov	r6, r2
 8008746:	4699      	mov	r9, r3
 8008748:	688a      	ldr	r2, [r1, #8]
 800874a:	690b      	ldr	r3, [r1, #16]
 800874c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008750:	4293      	cmp	r3, r2
 8008752:	bfb8      	it	lt
 8008754:	4613      	movlt	r3, r2
 8008756:	6033      	str	r3, [r6, #0]
 8008758:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800875c:	4607      	mov	r7, r0
 800875e:	460c      	mov	r4, r1
 8008760:	b10a      	cbz	r2, 8008766 <_printf_common+0x26>
 8008762:	3301      	adds	r3, #1
 8008764:	6033      	str	r3, [r6, #0]
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	0699      	lsls	r1, r3, #26
 800876a:	bf42      	ittt	mi
 800876c:	6833      	ldrmi	r3, [r6, #0]
 800876e:	3302      	addmi	r3, #2
 8008770:	6033      	strmi	r3, [r6, #0]
 8008772:	6825      	ldr	r5, [r4, #0]
 8008774:	f015 0506 	ands.w	r5, r5, #6
 8008778:	d106      	bne.n	8008788 <_printf_common+0x48>
 800877a:	f104 0a19 	add.w	sl, r4, #25
 800877e:	68e3      	ldr	r3, [r4, #12]
 8008780:	6832      	ldr	r2, [r6, #0]
 8008782:	1a9b      	subs	r3, r3, r2
 8008784:	42ab      	cmp	r3, r5
 8008786:	dc26      	bgt.n	80087d6 <_printf_common+0x96>
 8008788:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800878c:	1e13      	subs	r3, r2, #0
 800878e:	6822      	ldr	r2, [r4, #0]
 8008790:	bf18      	it	ne
 8008792:	2301      	movne	r3, #1
 8008794:	0692      	lsls	r2, r2, #26
 8008796:	d42b      	bmi.n	80087f0 <_printf_common+0xb0>
 8008798:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800879c:	4649      	mov	r1, r9
 800879e:	4638      	mov	r0, r7
 80087a0:	47c0      	blx	r8
 80087a2:	3001      	adds	r0, #1
 80087a4:	d01e      	beq.n	80087e4 <_printf_common+0xa4>
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	68e5      	ldr	r5, [r4, #12]
 80087aa:	6832      	ldr	r2, [r6, #0]
 80087ac:	f003 0306 	and.w	r3, r3, #6
 80087b0:	2b04      	cmp	r3, #4
 80087b2:	bf08      	it	eq
 80087b4:	1aad      	subeq	r5, r5, r2
 80087b6:	68a3      	ldr	r3, [r4, #8]
 80087b8:	6922      	ldr	r2, [r4, #16]
 80087ba:	bf0c      	ite	eq
 80087bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087c0:	2500      	movne	r5, #0
 80087c2:	4293      	cmp	r3, r2
 80087c4:	bfc4      	itt	gt
 80087c6:	1a9b      	subgt	r3, r3, r2
 80087c8:	18ed      	addgt	r5, r5, r3
 80087ca:	2600      	movs	r6, #0
 80087cc:	341a      	adds	r4, #26
 80087ce:	42b5      	cmp	r5, r6
 80087d0:	d11a      	bne.n	8008808 <_printf_common+0xc8>
 80087d2:	2000      	movs	r0, #0
 80087d4:	e008      	b.n	80087e8 <_printf_common+0xa8>
 80087d6:	2301      	movs	r3, #1
 80087d8:	4652      	mov	r2, sl
 80087da:	4649      	mov	r1, r9
 80087dc:	4638      	mov	r0, r7
 80087de:	47c0      	blx	r8
 80087e0:	3001      	adds	r0, #1
 80087e2:	d103      	bne.n	80087ec <_printf_common+0xac>
 80087e4:	f04f 30ff 	mov.w	r0, #4294967295
 80087e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ec:	3501      	adds	r5, #1
 80087ee:	e7c6      	b.n	800877e <_printf_common+0x3e>
 80087f0:	18e1      	adds	r1, r4, r3
 80087f2:	1c5a      	adds	r2, r3, #1
 80087f4:	2030      	movs	r0, #48	; 0x30
 80087f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087fa:	4422      	add	r2, r4
 80087fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008800:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008804:	3302      	adds	r3, #2
 8008806:	e7c7      	b.n	8008798 <_printf_common+0x58>
 8008808:	2301      	movs	r3, #1
 800880a:	4622      	mov	r2, r4
 800880c:	4649      	mov	r1, r9
 800880e:	4638      	mov	r0, r7
 8008810:	47c0      	blx	r8
 8008812:	3001      	adds	r0, #1
 8008814:	d0e6      	beq.n	80087e4 <_printf_common+0xa4>
 8008816:	3601      	adds	r6, #1
 8008818:	e7d9      	b.n	80087ce <_printf_common+0x8e>
	...

0800881c <_printf_i>:
 800881c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008820:	7e0f      	ldrb	r7, [r1, #24]
 8008822:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008824:	2f78      	cmp	r7, #120	; 0x78
 8008826:	4691      	mov	r9, r2
 8008828:	4680      	mov	r8, r0
 800882a:	460c      	mov	r4, r1
 800882c:	469a      	mov	sl, r3
 800882e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008832:	d807      	bhi.n	8008844 <_printf_i+0x28>
 8008834:	2f62      	cmp	r7, #98	; 0x62
 8008836:	d80a      	bhi.n	800884e <_printf_i+0x32>
 8008838:	2f00      	cmp	r7, #0
 800883a:	f000 80d8 	beq.w	80089ee <_printf_i+0x1d2>
 800883e:	2f58      	cmp	r7, #88	; 0x58
 8008840:	f000 80a3 	beq.w	800898a <_printf_i+0x16e>
 8008844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008848:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800884c:	e03a      	b.n	80088c4 <_printf_i+0xa8>
 800884e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008852:	2b15      	cmp	r3, #21
 8008854:	d8f6      	bhi.n	8008844 <_printf_i+0x28>
 8008856:	a101      	add	r1, pc, #4	; (adr r1, 800885c <_printf_i+0x40>)
 8008858:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800885c:	080088b5 	.word	0x080088b5
 8008860:	080088c9 	.word	0x080088c9
 8008864:	08008845 	.word	0x08008845
 8008868:	08008845 	.word	0x08008845
 800886c:	08008845 	.word	0x08008845
 8008870:	08008845 	.word	0x08008845
 8008874:	080088c9 	.word	0x080088c9
 8008878:	08008845 	.word	0x08008845
 800887c:	08008845 	.word	0x08008845
 8008880:	08008845 	.word	0x08008845
 8008884:	08008845 	.word	0x08008845
 8008888:	080089d5 	.word	0x080089d5
 800888c:	080088f9 	.word	0x080088f9
 8008890:	080089b7 	.word	0x080089b7
 8008894:	08008845 	.word	0x08008845
 8008898:	08008845 	.word	0x08008845
 800889c:	080089f7 	.word	0x080089f7
 80088a0:	08008845 	.word	0x08008845
 80088a4:	080088f9 	.word	0x080088f9
 80088a8:	08008845 	.word	0x08008845
 80088ac:	08008845 	.word	0x08008845
 80088b0:	080089bf 	.word	0x080089bf
 80088b4:	682b      	ldr	r3, [r5, #0]
 80088b6:	1d1a      	adds	r2, r3, #4
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	602a      	str	r2, [r5, #0]
 80088bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088c4:	2301      	movs	r3, #1
 80088c6:	e0a3      	b.n	8008a10 <_printf_i+0x1f4>
 80088c8:	6820      	ldr	r0, [r4, #0]
 80088ca:	6829      	ldr	r1, [r5, #0]
 80088cc:	0606      	lsls	r6, r0, #24
 80088ce:	f101 0304 	add.w	r3, r1, #4
 80088d2:	d50a      	bpl.n	80088ea <_printf_i+0xce>
 80088d4:	680e      	ldr	r6, [r1, #0]
 80088d6:	602b      	str	r3, [r5, #0]
 80088d8:	2e00      	cmp	r6, #0
 80088da:	da03      	bge.n	80088e4 <_printf_i+0xc8>
 80088dc:	232d      	movs	r3, #45	; 0x2d
 80088de:	4276      	negs	r6, r6
 80088e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088e4:	485e      	ldr	r0, [pc, #376]	; (8008a60 <_printf_i+0x244>)
 80088e6:	230a      	movs	r3, #10
 80088e8:	e019      	b.n	800891e <_printf_i+0x102>
 80088ea:	680e      	ldr	r6, [r1, #0]
 80088ec:	602b      	str	r3, [r5, #0]
 80088ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088f2:	bf18      	it	ne
 80088f4:	b236      	sxthne	r6, r6
 80088f6:	e7ef      	b.n	80088d8 <_printf_i+0xbc>
 80088f8:	682b      	ldr	r3, [r5, #0]
 80088fa:	6820      	ldr	r0, [r4, #0]
 80088fc:	1d19      	adds	r1, r3, #4
 80088fe:	6029      	str	r1, [r5, #0]
 8008900:	0601      	lsls	r1, r0, #24
 8008902:	d501      	bpl.n	8008908 <_printf_i+0xec>
 8008904:	681e      	ldr	r6, [r3, #0]
 8008906:	e002      	b.n	800890e <_printf_i+0xf2>
 8008908:	0646      	lsls	r6, r0, #25
 800890a:	d5fb      	bpl.n	8008904 <_printf_i+0xe8>
 800890c:	881e      	ldrh	r6, [r3, #0]
 800890e:	4854      	ldr	r0, [pc, #336]	; (8008a60 <_printf_i+0x244>)
 8008910:	2f6f      	cmp	r7, #111	; 0x6f
 8008912:	bf0c      	ite	eq
 8008914:	2308      	moveq	r3, #8
 8008916:	230a      	movne	r3, #10
 8008918:	2100      	movs	r1, #0
 800891a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800891e:	6865      	ldr	r5, [r4, #4]
 8008920:	60a5      	str	r5, [r4, #8]
 8008922:	2d00      	cmp	r5, #0
 8008924:	bfa2      	ittt	ge
 8008926:	6821      	ldrge	r1, [r4, #0]
 8008928:	f021 0104 	bicge.w	r1, r1, #4
 800892c:	6021      	strge	r1, [r4, #0]
 800892e:	b90e      	cbnz	r6, 8008934 <_printf_i+0x118>
 8008930:	2d00      	cmp	r5, #0
 8008932:	d04d      	beq.n	80089d0 <_printf_i+0x1b4>
 8008934:	4615      	mov	r5, r2
 8008936:	fbb6 f1f3 	udiv	r1, r6, r3
 800893a:	fb03 6711 	mls	r7, r3, r1, r6
 800893e:	5dc7      	ldrb	r7, [r0, r7]
 8008940:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008944:	4637      	mov	r7, r6
 8008946:	42bb      	cmp	r3, r7
 8008948:	460e      	mov	r6, r1
 800894a:	d9f4      	bls.n	8008936 <_printf_i+0x11a>
 800894c:	2b08      	cmp	r3, #8
 800894e:	d10b      	bne.n	8008968 <_printf_i+0x14c>
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	07de      	lsls	r6, r3, #31
 8008954:	d508      	bpl.n	8008968 <_printf_i+0x14c>
 8008956:	6923      	ldr	r3, [r4, #16]
 8008958:	6861      	ldr	r1, [r4, #4]
 800895a:	4299      	cmp	r1, r3
 800895c:	bfde      	ittt	le
 800895e:	2330      	movle	r3, #48	; 0x30
 8008960:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008964:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008968:	1b52      	subs	r2, r2, r5
 800896a:	6122      	str	r2, [r4, #16]
 800896c:	f8cd a000 	str.w	sl, [sp]
 8008970:	464b      	mov	r3, r9
 8008972:	aa03      	add	r2, sp, #12
 8008974:	4621      	mov	r1, r4
 8008976:	4640      	mov	r0, r8
 8008978:	f7ff fee2 	bl	8008740 <_printf_common>
 800897c:	3001      	adds	r0, #1
 800897e:	d14c      	bne.n	8008a1a <_printf_i+0x1fe>
 8008980:	f04f 30ff 	mov.w	r0, #4294967295
 8008984:	b004      	add	sp, #16
 8008986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800898a:	4835      	ldr	r0, [pc, #212]	; (8008a60 <_printf_i+0x244>)
 800898c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008990:	6829      	ldr	r1, [r5, #0]
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	f851 6b04 	ldr.w	r6, [r1], #4
 8008998:	6029      	str	r1, [r5, #0]
 800899a:	061d      	lsls	r5, r3, #24
 800899c:	d514      	bpl.n	80089c8 <_printf_i+0x1ac>
 800899e:	07df      	lsls	r7, r3, #31
 80089a0:	bf44      	itt	mi
 80089a2:	f043 0320 	orrmi.w	r3, r3, #32
 80089a6:	6023      	strmi	r3, [r4, #0]
 80089a8:	b91e      	cbnz	r6, 80089b2 <_printf_i+0x196>
 80089aa:	6823      	ldr	r3, [r4, #0]
 80089ac:	f023 0320 	bic.w	r3, r3, #32
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	2310      	movs	r3, #16
 80089b4:	e7b0      	b.n	8008918 <_printf_i+0xfc>
 80089b6:	6823      	ldr	r3, [r4, #0]
 80089b8:	f043 0320 	orr.w	r3, r3, #32
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	2378      	movs	r3, #120	; 0x78
 80089c0:	4828      	ldr	r0, [pc, #160]	; (8008a64 <_printf_i+0x248>)
 80089c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089c6:	e7e3      	b.n	8008990 <_printf_i+0x174>
 80089c8:	0659      	lsls	r1, r3, #25
 80089ca:	bf48      	it	mi
 80089cc:	b2b6      	uxthmi	r6, r6
 80089ce:	e7e6      	b.n	800899e <_printf_i+0x182>
 80089d0:	4615      	mov	r5, r2
 80089d2:	e7bb      	b.n	800894c <_printf_i+0x130>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	6826      	ldr	r6, [r4, #0]
 80089d8:	6961      	ldr	r1, [r4, #20]
 80089da:	1d18      	adds	r0, r3, #4
 80089dc:	6028      	str	r0, [r5, #0]
 80089de:	0635      	lsls	r5, r6, #24
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	d501      	bpl.n	80089e8 <_printf_i+0x1cc>
 80089e4:	6019      	str	r1, [r3, #0]
 80089e6:	e002      	b.n	80089ee <_printf_i+0x1d2>
 80089e8:	0670      	lsls	r0, r6, #25
 80089ea:	d5fb      	bpl.n	80089e4 <_printf_i+0x1c8>
 80089ec:	8019      	strh	r1, [r3, #0]
 80089ee:	2300      	movs	r3, #0
 80089f0:	6123      	str	r3, [r4, #16]
 80089f2:	4615      	mov	r5, r2
 80089f4:	e7ba      	b.n	800896c <_printf_i+0x150>
 80089f6:	682b      	ldr	r3, [r5, #0]
 80089f8:	1d1a      	adds	r2, r3, #4
 80089fa:	602a      	str	r2, [r5, #0]
 80089fc:	681d      	ldr	r5, [r3, #0]
 80089fe:	6862      	ldr	r2, [r4, #4]
 8008a00:	2100      	movs	r1, #0
 8008a02:	4628      	mov	r0, r5
 8008a04:	f7f7 fbf4 	bl	80001f0 <memchr>
 8008a08:	b108      	cbz	r0, 8008a0e <_printf_i+0x1f2>
 8008a0a:	1b40      	subs	r0, r0, r5
 8008a0c:	6060      	str	r0, [r4, #4]
 8008a0e:	6863      	ldr	r3, [r4, #4]
 8008a10:	6123      	str	r3, [r4, #16]
 8008a12:	2300      	movs	r3, #0
 8008a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a18:	e7a8      	b.n	800896c <_printf_i+0x150>
 8008a1a:	6923      	ldr	r3, [r4, #16]
 8008a1c:	462a      	mov	r2, r5
 8008a1e:	4649      	mov	r1, r9
 8008a20:	4640      	mov	r0, r8
 8008a22:	47d0      	blx	sl
 8008a24:	3001      	adds	r0, #1
 8008a26:	d0ab      	beq.n	8008980 <_printf_i+0x164>
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	079b      	lsls	r3, r3, #30
 8008a2c:	d413      	bmi.n	8008a56 <_printf_i+0x23a>
 8008a2e:	68e0      	ldr	r0, [r4, #12]
 8008a30:	9b03      	ldr	r3, [sp, #12]
 8008a32:	4298      	cmp	r0, r3
 8008a34:	bfb8      	it	lt
 8008a36:	4618      	movlt	r0, r3
 8008a38:	e7a4      	b.n	8008984 <_printf_i+0x168>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	4632      	mov	r2, r6
 8008a3e:	4649      	mov	r1, r9
 8008a40:	4640      	mov	r0, r8
 8008a42:	47d0      	blx	sl
 8008a44:	3001      	adds	r0, #1
 8008a46:	d09b      	beq.n	8008980 <_printf_i+0x164>
 8008a48:	3501      	adds	r5, #1
 8008a4a:	68e3      	ldr	r3, [r4, #12]
 8008a4c:	9903      	ldr	r1, [sp, #12]
 8008a4e:	1a5b      	subs	r3, r3, r1
 8008a50:	42ab      	cmp	r3, r5
 8008a52:	dcf2      	bgt.n	8008a3a <_printf_i+0x21e>
 8008a54:	e7eb      	b.n	8008a2e <_printf_i+0x212>
 8008a56:	2500      	movs	r5, #0
 8008a58:	f104 0619 	add.w	r6, r4, #25
 8008a5c:	e7f5      	b.n	8008a4a <_printf_i+0x22e>
 8008a5e:	bf00      	nop
 8008a60:	0800bb66 	.word	0x0800bb66
 8008a64:	0800bb77 	.word	0x0800bb77

08008a68 <_sbrk_r>:
 8008a68:	b538      	push	{r3, r4, r5, lr}
 8008a6a:	4d06      	ldr	r5, [pc, #24]	; (8008a84 <_sbrk_r+0x1c>)
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	4604      	mov	r4, r0
 8008a70:	4608      	mov	r0, r1
 8008a72:	602b      	str	r3, [r5, #0]
 8008a74:	f7f9 f9d2 	bl	8001e1c <_sbrk>
 8008a78:	1c43      	adds	r3, r0, #1
 8008a7a:	d102      	bne.n	8008a82 <_sbrk_r+0x1a>
 8008a7c:	682b      	ldr	r3, [r5, #0]
 8008a7e:	b103      	cbz	r3, 8008a82 <_sbrk_r+0x1a>
 8008a80:	6023      	str	r3, [r4, #0]
 8008a82:	bd38      	pop	{r3, r4, r5, pc}
 8008a84:	20000c74 	.word	0x20000c74

08008a88 <siprintf>:
 8008a88:	b40e      	push	{r1, r2, r3}
 8008a8a:	b500      	push	{lr}
 8008a8c:	b09c      	sub	sp, #112	; 0x70
 8008a8e:	ab1d      	add	r3, sp, #116	; 0x74
 8008a90:	9002      	str	r0, [sp, #8]
 8008a92:	9006      	str	r0, [sp, #24]
 8008a94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a98:	4809      	ldr	r0, [pc, #36]	; (8008ac0 <siprintf+0x38>)
 8008a9a:	9107      	str	r1, [sp, #28]
 8008a9c:	9104      	str	r1, [sp, #16]
 8008a9e:	4909      	ldr	r1, [pc, #36]	; (8008ac4 <siprintf+0x3c>)
 8008aa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aa4:	9105      	str	r1, [sp, #20]
 8008aa6:	6800      	ldr	r0, [r0, #0]
 8008aa8:	9301      	str	r3, [sp, #4]
 8008aaa:	a902      	add	r1, sp, #8
 8008aac:	f001 fa9a 	bl	8009fe4 <_svfiprintf_r>
 8008ab0:	9b02      	ldr	r3, [sp, #8]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	701a      	strb	r2, [r3, #0]
 8008ab6:	b01c      	add	sp, #112	; 0x70
 8008ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008abc:	b003      	add	sp, #12
 8008abe:	4770      	bx	lr
 8008ac0:	20000014 	.word	0x20000014
 8008ac4:	ffff0208 	.word	0xffff0208

08008ac8 <quorem>:
 8008ac8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008acc:	6903      	ldr	r3, [r0, #16]
 8008ace:	690c      	ldr	r4, [r1, #16]
 8008ad0:	42a3      	cmp	r3, r4
 8008ad2:	4607      	mov	r7, r0
 8008ad4:	f2c0 8081 	blt.w	8008bda <quorem+0x112>
 8008ad8:	3c01      	subs	r4, #1
 8008ada:	f101 0814 	add.w	r8, r1, #20
 8008ade:	f100 0514 	add.w	r5, r0, #20
 8008ae2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ae6:	9301      	str	r3, [sp, #4]
 8008ae8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008aec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008af0:	3301      	adds	r3, #1
 8008af2:	429a      	cmp	r2, r3
 8008af4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008af8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008afc:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b00:	d331      	bcc.n	8008b66 <quorem+0x9e>
 8008b02:	f04f 0e00 	mov.w	lr, #0
 8008b06:	4640      	mov	r0, r8
 8008b08:	46ac      	mov	ip, r5
 8008b0a:	46f2      	mov	sl, lr
 8008b0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b10:	b293      	uxth	r3, r2
 8008b12:	fb06 e303 	mla	r3, r6, r3, lr
 8008b16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	ebaa 0303 	sub.w	r3, sl, r3
 8008b20:	f8dc a000 	ldr.w	sl, [ip]
 8008b24:	0c12      	lsrs	r2, r2, #16
 8008b26:	fa13 f38a 	uxtah	r3, r3, sl
 8008b2a:	fb06 e202 	mla	r2, r6, r2, lr
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	9b00      	ldr	r3, [sp, #0]
 8008b32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b36:	b292      	uxth	r2, r2
 8008b38:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b40:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b44:	4581      	cmp	r9, r0
 8008b46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b4a:	f84c 3b04 	str.w	r3, [ip], #4
 8008b4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b52:	d2db      	bcs.n	8008b0c <quorem+0x44>
 8008b54:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b58:	b92b      	cbnz	r3, 8008b66 <quorem+0x9e>
 8008b5a:	9b01      	ldr	r3, [sp, #4]
 8008b5c:	3b04      	subs	r3, #4
 8008b5e:	429d      	cmp	r5, r3
 8008b60:	461a      	mov	r2, r3
 8008b62:	d32e      	bcc.n	8008bc2 <quorem+0xfa>
 8008b64:	613c      	str	r4, [r7, #16]
 8008b66:	4638      	mov	r0, r7
 8008b68:	f001 f8c8 	bl	8009cfc <__mcmp>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	db24      	blt.n	8008bba <quorem+0xf2>
 8008b70:	3601      	adds	r6, #1
 8008b72:	4628      	mov	r0, r5
 8008b74:	f04f 0c00 	mov.w	ip, #0
 8008b78:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b7c:	f8d0 e000 	ldr.w	lr, [r0]
 8008b80:	b293      	uxth	r3, r2
 8008b82:	ebac 0303 	sub.w	r3, ip, r3
 8008b86:	0c12      	lsrs	r2, r2, #16
 8008b88:	fa13 f38e 	uxtah	r3, r3, lr
 8008b8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b9a:	45c1      	cmp	r9, r8
 8008b9c:	f840 3b04 	str.w	r3, [r0], #4
 8008ba0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ba4:	d2e8      	bcs.n	8008b78 <quorem+0xb0>
 8008ba6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008baa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bae:	b922      	cbnz	r2, 8008bba <quorem+0xf2>
 8008bb0:	3b04      	subs	r3, #4
 8008bb2:	429d      	cmp	r5, r3
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	d30a      	bcc.n	8008bce <quorem+0x106>
 8008bb8:	613c      	str	r4, [r7, #16]
 8008bba:	4630      	mov	r0, r6
 8008bbc:	b003      	add	sp, #12
 8008bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc2:	6812      	ldr	r2, [r2, #0]
 8008bc4:	3b04      	subs	r3, #4
 8008bc6:	2a00      	cmp	r2, #0
 8008bc8:	d1cc      	bne.n	8008b64 <quorem+0x9c>
 8008bca:	3c01      	subs	r4, #1
 8008bcc:	e7c7      	b.n	8008b5e <quorem+0x96>
 8008bce:	6812      	ldr	r2, [r2, #0]
 8008bd0:	3b04      	subs	r3, #4
 8008bd2:	2a00      	cmp	r2, #0
 8008bd4:	d1f0      	bne.n	8008bb8 <quorem+0xf0>
 8008bd6:	3c01      	subs	r4, #1
 8008bd8:	e7eb      	b.n	8008bb2 <quorem+0xea>
 8008bda:	2000      	movs	r0, #0
 8008bdc:	e7ee      	b.n	8008bbc <quorem+0xf4>
	...

08008be0 <_dtoa_r>:
 8008be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be4:	ed2d 8b04 	vpush	{d8-d9}
 8008be8:	ec57 6b10 	vmov	r6, r7, d0
 8008bec:	b093      	sub	sp, #76	; 0x4c
 8008bee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008bf0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008bf4:	9106      	str	r1, [sp, #24]
 8008bf6:	ee10 aa10 	vmov	sl, s0
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	9209      	str	r2, [sp, #36]	; 0x24
 8008bfe:	930c      	str	r3, [sp, #48]	; 0x30
 8008c00:	46bb      	mov	fp, r7
 8008c02:	b975      	cbnz	r5, 8008c22 <_dtoa_r+0x42>
 8008c04:	2010      	movs	r0, #16
 8008c06:	f7ff f9cd 	bl	8007fa4 <malloc>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	6260      	str	r0, [r4, #36]	; 0x24
 8008c0e:	b920      	cbnz	r0, 8008c1a <_dtoa_r+0x3a>
 8008c10:	4ba7      	ldr	r3, [pc, #668]	; (8008eb0 <_dtoa_r+0x2d0>)
 8008c12:	21ea      	movs	r1, #234	; 0xea
 8008c14:	48a7      	ldr	r0, [pc, #668]	; (8008eb4 <_dtoa_r+0x2d4>)
 8008c16:	f001 fae5 	bl	800a1e4 <__assert_func>
 8008c1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c1e:	6005      	str	r5, [r0, #0]
 8008c20:	60c5      	str	r5, [r0, #12]
 8008c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c24:	6819      	ldr	r1, [r3, #0]
 8008c26:	b151      	cbz	r1, 8008c3e <_dtoa_r+0x5e>
 8008c28:	685a      	ldr	r2, [r3, #4]
 8008c2a:	604a      	str	r2, [r1, #4]
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	4093      	lsls	r3, r2
 8008c30:	608b      	str	r3, [r1, #8]
 8008c32:	4620      	mov	r0, r4
 8008c34:	f000 fe20 	bl	8009878 <_Bfree>
 8008c38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	601a      	str	r2, [r3, #0]
 8008c3e:	1e3b      	subs	r3, r7, #0
 8008c40:	bfaa      	itet	ge
 8008c42:	2300      	movge	r3, #0
 8008c44:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008c48:	f8c8 3000 	strge.w	r3, [r8]
 8008c4c:	4b9a      	ldr	r3, [pc, #616]	; (8008eb8 <_dtoa_r+0x2d8>)
 8008c4e:	bfbc      	itt	lt
 8008c50:	2201      	movlt	r2, #1
 8008c52:	f8c8 2000 	strlt.w	r2, [r8]
 8008c56:	ea33 030b 	bics.w	r3, r3, fp
 8008c5a:	d11b      	bne.n	8008c94 <_dtoa_r+0xb4>
 8008c5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c5e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c62:	6013      	str	r3, [r2, #0]
 8008c64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c68:	4333      	orrs	r3, r6
 8008c6a:	f000 8592 	beq.w	8009792 <_dtoa_r+0xbb2>
 8008c6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c70:	b963      	cbnz	r3, 8008c8c <_dtoa_r+0xac>
 8008c72:	4b92      	ldr	r3, [pc, #584]	; (8008ebc <_dtoa_r+0x2dc>)
 8008c74:	e022      	b.n	8008cbc <_dtoa_r+0xdc>
 8008c76:	4b92      	ldr	r3, [pc, #584]	; (8008ec0 <_dtoa_r+0x2e0>)
 8008c78:	9301      	str	r3, [sp, #4]
 8008c7a:	3308      	adds	r3, #8
 8008c7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c7e:	6013      	str	r3, [r2, #0]
 8008c80:	9801      	ldr	r0, [sp, #4]
 8008c82:	b013      	add	sp, #76	; 0x4c
 8008c84:	ecbd 8b04 	vpop	{d8-d9}
 8008c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c8c:	4b8b      	ldr	r3, [pc, #556]	; (8008ebc <_dtoa_r+0x2dc>)
 8008c8e:	9301      	str	r3, [sp, #4]
 8008c90:	3303      	adds	r3, #3
 8008c92:	e7f3      	b.n	8008c7c <_dtoa_r+0x9c>
 8008c94:	2200      	movs	r2, #0
 8008c96:	2300      	movs	r3, #0
 8008c98:	4650      	mov	r0, sl
 8008c9a:	4659      	mov	r1, fp
 8008c9c:	f7f7 ff1c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ca0:	ec4b ab19 	vmov	d9, sl, fp
 8008ca4:	4680      	mov	r8, r0
 8008ca6:	b158      	cbz	r0, 8008cc0 <_dtoa_r+0xe0>
 8008ca8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008caa:	2301      	movs	r3, #1
 8008cac:	6013      	str	r3, [r2, #0]
 8008cae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f000 856b 	beq.w	800978c <_dtoa_r+0xbac>
 8008cb6:	4883      	ldr	r0, [pc, #524]	; (8008ec4 <_dtoa_r+0x2e4>)
 8008cb8:	6018      	str	r0, [r3, #0]
 8008cba:	1e43      	subs	r3, r0, #1
 8008cbc:	9301      	str	r3, [sp, #4]
 8008cbe:	e7df      	b.n	8008c80 <_dtoa_r+0xa0>
 8008cc0:	ec4b ab10 	vmov	d0, sl, fp
 8008cc4:	aa10      	add	r2, sp, #64	; 0x40
 8008cc6:	a911      	add	r1, sp, #68	; 0x44
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f001 f8bd 	bl	8009e48 <__d2b>
 8008cce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008cd2:	ee08 0a10 	vmov	s16, r0
 8008cd6:	2d00      	cmp	r5, #0
 8008cd8:	f000 8084 	beq.w	8008de4 <_dtoa_r+0x204>
 8008cdc:	ee19 3a90 	vmov	r3, s19
 8008ce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ce4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008ce8:	4656      	mov	r6, sl
 8008cea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008cee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008cf2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008cf6:	4b74      	ldr	r3, [pc, #464]	; (8008ec8 <_dtoa_r+0x2e8>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	4639      	mov	r1, r7
 8008cfe:	f7f7 facb 	bl	8000298 <__aeabi_dsub>
 8008d02:	a365      	add	r3, pc, #404	; (adr r3, 8008e98 <_dtoa_r+0x2b8>)
 8008d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d08:	f7f7 fc7e 	bl	8000608 <__aeabi_dmul>
 8008d0c:	a364      	add	r3, pc, #400	; (adr r3, 8008ea0 <_dtoa_r+0x2c0>)
 8008d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d12:	f7f7 fac3 	bl	800029c <__adddf3>
 8008d16:	4606      	mov	r6, r0
 8008d18:	4628      	mov	r0, r5
 8008d1a:	460f      	mov	r7, r1
 8008d1c:	f7f7 fc0a 	bl	8000534 <__aeabi_i2d>
 8008d20:	a361      	add	r3, pc, #388	; (adr r3, 8008ea8 <_dtoa_r+0x2c8>)
 8008d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d26:	f7f7 fc6f 	bl	8000608 <__aeabi_dmul>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	4630      	mov	r0, r6
 8008d30:	4639      	mov	r1, r7
 8008d32:	f7f7 fab3 	bl	800029c <__adddf3>
 8008d36:	4606      	mov	r6, r0
 8008d38:	460f      	mov	r7, r1
 8008d3a:	f7f7 ff15 	bl	8000b68 <__aeabi_d2iz>
 8008d3e:	2200      	movs	r2, #0
 8008d40:	9000      	str	r0, [sp, #0]
 8008d42:	2300      	movs	r3, #0
 8008d44:	4630      	mov	r0, r6
 8008d46:	4639      	mov	r1, r7
 8008d48:	f7f7 fed0 	bl	8000aec <__aeabi_dcmplt>
 8008d4c:	b150      	cbz	r0, 8008d64 <_dtoa_r+0x184>
 8008d4e:	9800      	ldr	r0, [sp, #0]
 8008d50:	f7f7 fbf0 	bl	8000534 <__aeabi_i2d>
 8008d54:	4632      	mov	r2, r6
 8008d56:	463b      	mov	r3, r7
 8008d58:	f7f7 febe 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d5c:	b910      	cbnz	r0, 8008d64 <_dtoa_r+0x184>
 8008d5e:	9b00      	ldr	r3, [sp, #0]
 8008d60:	3b01      	subs	r3, #1
 8008d62:	9300      	str	r3, [sp, #0]
 8008d64:	9b00      	ldr	r3, [sp, #0]
 8008d66:	2b16      	cmp	r3, #22
 8008d68:	d85a      	bhi.n	8008e20 <_dtoa_r+0x240>
 8008d6a:	9a00      	ldr	r2, [sp, #0]
 8008d6c:	4b57      	ldr	r3, [pc, #348]	; (8008ecc <_dtoa_r+0x2ec>)
 8008d6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d76:	ec51 0b19 	vmov	r0, r1, d9
 8008d7a:	f7f7 feb7 	bl	8000aec <__aeabi_dcmplt>
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	d050      	beq.n	8008e24 <_dtoa_r+0x244>
 8008d82:	9b00      	ldr	r3, [sp, #0]
 8008d84:	3b01      	subs	r3, #1
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	2300      	movs	r3, #0
 8008d8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d8e:	1b5d      	subs	r5, r3, r5
 8008d90:	1e6b      	subs	r3, r5, #1
 8008d92:	9305      	str	r3, [sp, #20]
 8008d94:	bf45      	ittet	mi
 8008d96:	f1c5 0301 	rsbmi	r3, r5, #1
 8008d9a:	9304      	strmi	r3, [sp, #16]
 8008d9c:	2300      	movpl	r3, #0
 8008d9e:	2300      	movmi	r3, #0
 8008da0:	bf4c      	ite	mi
 8008da2:	9305      	strmi	r3, [sp, #20]
 8008da4:	9304      	strpl	r3, [sp, #16]
 8008da6:	9b00      	ldr	r3, [sp, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	db3d      	blt.n	8008e28 <_dtoa_r+0x248>
 8008dac:	9b05      	ldr	r3, [sp, #20]
 8008dae:	9a00      	ldr	r2, [sp, #0]
 8008db0:	920a      	str	r2, [sp, #40]	; 0x28
 8008db2:	4413      	add	r3, r2
 8008db4:	9305      	str	r3, [sp, #20]
 8008db6:	2300      	movs	r3, #0
 8008db8:	9307      	str	r3, [sp, #28]
 8008dba:	9b06      	ldr	r3, [sp, #24]
 8008dbc:	2b09      	cmp	r3, #9
 8008dbe:	f200 8089 	bhi.w	8008ed4 <_dtoa_r+0x2f4>
 8008dc2:	2b05      	cmp	r3, #5
 8008dc4:	bfc4      	itt	gt
 8008dc6:	3b04      	subgt	r3, #4
 8008dc8:	9306      	strgt	r3, [sp, #24]
 8008dca:	9b06      	ldr	r3, [sp, #24]
 8008dcc:	f1a3 0302 	sub.w	r3, r3, #2
 8008dd0:	bfcc      	ite	gt
 8008dd2:	2500      	movgt	r5, #0
 8008dd4:	2501      	movle	r5, #1
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	f200 8087 	bhi.w	8008eea <_dtoa_r+0x30a>
 8008ddc:	e8df f003 	tbb	[pc, r3]
 8008de0:	59383a2d 	.word	0x59383a2d
 8008de4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008de8:	441d      	add	r5, r3
 8008dea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008dee:	2b20      	cmp	r3, #32
 8008df0:	bfc1      	itttt	gt
 8008df2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008df6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008dfa:	fa0b f303 	lslgt.w	r3, fp, r3
 8008dfe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e02:	bfda      	itte	le
 8008e04:	f1c3 0320 	rsble	r3, r3, #32
 8008e08:	fa06 f003 	lslle.w	r0, r6, r3
 8008e0c:	4318      	orrgt	r0, r3
 8008e0e:	f7f7 fb81 	bl	8000514 <__aeabi_ui2d>
 8008e12:	2301      	movs	r3, #1
 8008e14:	4606      	mov	r6, r0
 8008e16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e1a:	3d01      	subs	r5, #1
 8008e1c:	930e      	str	r3, [sp, #56]	; 0x38
 8008e1e:	e76a      	b.n	8008cf6 <_dtoa_r+0x116>
 8008e20:	2301      	movs	r3, #1
 8008e22:	e7b2      	b.n	8008d8a <_dtoa_r+0x1aa>
 8008e24:	900b      	str	r0, [sp, #44]	; 0x2c
 8008e26:	e7b1      	b.n	8008d8c <_dtoa_r+0x1ac>
 8008e28:	9b04      	ldr	r3, [sp, #16]
 8008e2a:	9a00      	ldr	r2, [sp, #0]
 8008e2c:	1a9b      	subs	r3, r3, r2
 8008e2e:	9304      	str	r3, [sp, #16]
 8008e30:	4253      	negs	r3, r2
 8008e32:	9307      	str	r3, [sp, #28]
 8008e34:	2300      	movs	r3, #0
 8008e36:	930a      	str	r3, [sp, #40]	; 0x28
 8008e38:	e7bf      	b.n	8008dba <_dtoa_r+0x1da>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	9308      	str	r3, [sp, #32]
 8008e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	dc55      	bgt.n	8008ef0 <_dtoa_r+0x310>
 8008e44:	2301      	movs	r3, #1
 8008e46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e4e:	e00c      	b.n	8008e6a <_dtoa_r+0x28a>
 8008e50:	2301      	movs	r3, #1
 8008e52:	e7f3      	b.n	8008e3c <_dtoa_r+0x25c>
 8008e54:	2300      	movs	r3, #0
 8008e56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e58:	9308      	str	r3, [sp, #32]
 8008e5a:	9b00      	ldr	r3, [sp, #0]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	9302      	str	r3, [sp, #8]
 8008e60:	3301      	adds	r3, #1
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	9303      	str	r3, [sp, #12]
 8008e66:	bfb8      	it	lt
 8008e68:	2301      	movlt	r3, #1
 8008e6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	6042      	str	r2, [r0, #4]
 8008e70:	2204      	movs	r2, #4
 8008e72:	f102 0614 	add.w	r6, r2, #20
 8008e76:	429e      	cmp	r6, r3
 8008e78:	6841      	ldr	r1, [r0, #4]
 8008e7a:	d93d      	bls.n	8008ef8 <_dtoa_r+0x318>
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f000 fcbb 	bl	80097f8 <_Balloc>
 8008e82:	9001      	str	r0, [sp, #4]
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d13b      	bne.n	8008f00 <_dtoa_r+0x320>
 8008e88:	4b11      	ldr	r3, [pc, #68]	; (8008ed0 <_dtoa_r+0x2f0>)
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e90:	e6c0      	b.n	8008c14 <_dtoa_r+0x34>
 8008e92:	2301      	movs	r3, #1
 8008e94:	e7df      	b.n	8008e56 <_dtoa_r+0x276>
 8008e96:	bf00      	nop
 8008e98:	636f4361 	.word	0x636f4361
 8008e9c:	3fd287a7 	.word	0x3fd287a7
 8008ea0:	8b60c8b3 	.word	0x8b60c8b3
 8008ea4:	3fc68a28 	.word	0x3fc68a28
 8008ea8:	509f79fb 	.word	0x509f79fb
 8008eac:	3fd34413 	.word	0x3fd34413
 8008eb0:	0800bb95 	.word	0x0800bb95
 8008eb4:	0800bbac 	.word	0x0800bbac
 8008eb8:	7ff00000 	.word	0x7ff00000
 8008ebc:	0800bb91 	.word	0x0800bb91
 8008ec0:	0800bb88 	.word	0x0800bb88
 8008ec4:	0800bb65 	.word	0x0800bb65
 8008ec8:	3ff80000 	.word	0x3ff80000
 8008ecc:	0800bca0 	.word	0x0800bca0
 8008ed0:	0800bc07 	.word	0x0800bc07
 8008ed4:	2501      	movs	r5, #1
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	9306      	str	r3, [sp, #24]
 8008eda:	9508      	str	r5, [sp, #32]
 8008edc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ee0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	2312      	movs	r3, #18
 8008ee8:	e7b0      	b.n	8008e4c <_dtoa_r+0x26c>
 8008eea:	2301      	movs	r3, #1
 8008eec:	9308      	str	r3, [sp, #32]
 8008eee:	e7f5      	b.n	8008edc <_dtoa_r+0x2fc>
 8008ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ef6:	e7b8      	b.n	8008e6a <_dtoa_r+0x28a>
 8008ef8:	3101      	adds	r1, #1
 8008efa:	6041      	str	r1, [r0, #4]
 8008efc:	0052      	lsls	r2, r2, #1
 8008efe:	e7b8      	b.n	8008e72 <_dtoa_r+0x292>
 8008f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f02:	9a01      	ldr	r2, [sp, #4]
 8008f04:	601a      	str	r2, [r3, #0]
 8008f06:	9b03      	ldr	r3, [sp, #12]
 8008f08:	2b0e      	cmp	r3, #14
 8008f0a:	f200 809d 	bhi.w	8009048 <_dtoa_r+0x468>
 8008f0e:	2d00      	cmp	r5, #0
 8008f10:	f000 809a 	beq.w	8009048 <_dtoa_r+0x468>
 8008f14:	9b00      	ldr	r3, [sp, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	dd32      	ble.n	8008f80 <_dtoa_r+0x3a0>
 8008f1a:	4ab7      	ldr	r2, [pc, #732]	; (80091f8 <_dtoa_r+0x618>)
 8008f1c:	f003 030f 	and.w	r3, r3, #15
 8008f20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f28:	9b00      	ldr	r3, [sp, #0]
 8008f2a:	05d8      	lsls	r0, r3, #23
 8008f2c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008f30:	d516      	bpl.n	8008f60 <_dtoa_r+0x380>
 8008f32:	4bb2      	ldr	r3, [pc, #712]	; (80091fc <_dtoa_r+0x61c>)
 8008f34:	ec51 0b19 	vmov	r0, r1, d9
 8008f38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f3c:	f7f7 fc8e 	bl	800085c <__aeabi_ddiv>
 8008f40:	f007 070f 	and.w	r7, r7, #15
 8008f44:	4682      	mov	sl, r0
 8008f46:	468b      	mov	fp, r1
 8008f48:	2503      	movs	r5, #3
 8008f4a:	4eac      	ldr	r6, [pc, #688]	; (80091fc <_dtoa_r+0x61c>)
 8008f4c:	b957      	cbnz	r7, 8008f64 <_dtoa_r+0x384>
 8008f4e:	4642      	mov	r2, r8
 8008f50:	464b      	mov	r3, r9
 8008f52:	4650      	mov	r0, sl
 8008f54:	4659      	mov	r1, fp
 8008f56:	f7f7 fc81 	bl	800085c <__aeabi_ddiv>
 8008f5a:	4682      	mov	sl, r0
 8008f5c:	468b      	mov	fp, r1
 8008f5e:	e028      	b.n	8008fb2 <_dtoa_r+0x3d2>
 8008f60:	2502      	movs	r5, #2
 8008f62:	e7f2      	b.n	8008f4a <_dtoa_r+0x36a>
 8008f64:	07f9      	lsls	r1, r7, #31
 8008f66:	d508      	bpl.n	8008f7a <_dtoa_r+0x39a>
 8008f68:	4640      	mov	r0, r8
 8008f6a:	4649      	mov	r1, r9
 8008f6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f70:	f7f7 fb4a 	bl	8000608 <__aeabi_dmul>
 8008f74:	3501      	adds	r5, #1
 8008f76:	4680      	mov	r8, r0
 8008f78:	4689      	mov	r9, r1
 8008f7a:	107f      	asrs	r7, r7, #1
 8008f7c:	3608      	adds	r6, #8
 8008f7e:	e7e5      	b.n	8008f4c <_dtoa_r+0x36c>
 8008f80:	f000 809b 	beq.w	80090ba <_dtoa_r+0x4da>
 8008f84:	9b00      	ldr	r3, [sp, #0]
 8008f86:	4f9d      	ldr	r7, [pc, #628]	; (80091fc <_dtoa_r+0x61c>)
 8008f88:	425e      	negs	r6, r3
 8008f8a:	4b9b      	ldr	r3, [pc, #620]	; (80091f8 <_dtoa_r+0x618>)
 8008f8c:	f006 020f 	and.w	r2, r6, #15
 8008f90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f98:	ec51 0b19 	vmov	r0, r1, d9
 8008f9c:	f7f7 fb34 	bl	8000608 <__aeabi_dmul>
 8008fa0:	1136      	asrs	r6, r6, #4
 8008fa2:	4682      	mov	sl, r0
 8008fa4:	468b      	mov	fp, r1
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	2502      	movs	r5, #2
 8008faa:	2e00      	cmp	r6, #0
 8008fac:	d17a      	bne.n	80090a4 <_dtoa_r+0x4c4>
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1d3      	bne.n	8008f5a <_dtoa_r+0x37a>
 8008fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 8082 	beq.w	80090be <_dtoa_r+0x4de>
 8008fba:	4b91      	ldr	r3, [pc, #580]	; (8009200 <_dtoa_r+0x620>)
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	4650      	mov	r0, sl
 8008fc0:	4659      	mov	r1, fp
 8008fc2:	f7f7 fd93 	bl	8000aec <__aeabi_dcmplt>
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	d079      	beq.n	80090be <_dtoa_r+0x4de>
 8008fca:	9b03      	ldr	r3, [sp, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d076      	beq.n	80090be <_dtoa_r+0x4de>
 8008fd0:	9b02      	ldr	r3, [sp, #8]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	dd36      	ble.n	8009044 <_dtoa_r+0x464>
 8008fd6:	9b00      	ldr	r3, [sp, #0]
 8008fd8:	4650      	mov	r0, sl
 8008fda:	4659      	mov	r1, fp
 8008fdc:	1e5f      	subs	r7, r3, #1
 8008fde:	2200      	movs	r2, #0
 8008fe0:	4b88      	ldr	r3, [pc, #544]	; (8009204 <_dtoa_r+0x624>)
 8008fe2:	f7f7 fb11 	bl	8000608 <__aeabi_dmul>
 8008fe6:	9e02      	ldr	r6, [sp, #8]
 8008fe8:	4682      	mov	sl, r0
 8008fea:	468b      	mov	fp, r1
 8008fec:	3501      	adds	r5, #1
 8008fee:	4628      	mov	r0, r5
 8008ff0:	f7f7 faa0 	bl	8000534 <__aeabi_i2d>
 8008ff4:	4652      	mov	r2, sl
 8008ff6:	465b      	mov	r3, fp
 8008ff8:	f7f7 fb06 	bl	8000608 <__aeabi_dmul>
 8008ffc:	4b82      	ldr	r3, [pc, #520]	; (8009208 <_dtoa_r+0x628>)
 8008ffe:	2200      	movs	r2, #0
 8009000:	f7f7 f94c 	bl	800029c <__adddf3>
 8009004:	46d0      	mov	r8, sl
 8009006:	46d9      	mov	r9, fp
 8009008:	4682      	mov	sl, r0
 800900a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800900e:	2e00      	cmp	r6, #0
 8009010:	d158      	bne.n	80090c4 <_dtoa_r+0x4e4>
 8009012:	4b7e      	ldr	r3, [pc, #504]	; (800920c <_dtoa_r+0x62c>)
 8009014:	2200      	movs	r2, #0
 8009016:	4640      	mov	r0, r8
 8009018:	4649      	mov	r1, r9
 800901a:	f7f7 f93d 	bl	8000298 <__aeabi_dsub>
 800901e:	4652      	mov	r2, sl
 8009020:	465b      	mov	r3, fp
 8009022:	4680      	mov	r8, r0
 8009024:	4689      	mov	r9, r1
 8009026:	f7f7 fd7f 	bl	8000b28 <__aeabi_dcmpgt>
 800902a:	2800      	cmp	r0, #0
 800902c:	f040 8295 	bne.w	800955a <_dtoa_r+0x97a>
 8009030:	4652      	mov	r2, sl
 8009032:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009036:	4640      	mov	r0, r8
 8009038:	4649      	mov	r1, r9
 800903a:	f7f7 fd57 	bl	8000aec <__aeabi_dcmplt>
 800903e:	2800      	cmp	r0, #0
 8009040:	f040 8289 	bne.w	8009556 <_dtoa_r+0x976>
 8009044:	ec5b ab19 	vmov	sl, fp, d9
 8009048:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800904a:	2b00      	cmp	r3, #0
 800904c:	f2c0 8148 	blt.w	80092e0 <_dtoa_r+0x700>
 8009050:	9a00      	ldr	r2, [sp, #0]
 8009052:	2a0e      	cmp	r2, #14
 8009054:	f300 8144 	bgt.w	80092e0 <_dtoa_r+0x700>
 8009058:	4b67      	ldr	r3, [pc, #412]	; (80091f8 <_dtoa_r+0x618>)
 800905a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800905e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009064:	2b00      	cmp	r3, #0
 8009066:	f280 80d5 	bge.w	8009214 <_dtoa_r+0x634>
 800906a:	9b03      	ldr	r3, [sp, #12]
 800906c:	2b00      	cmp	r3, #0
 800906e:	f300 80d1 	bgt.w	8009214 <_dtoa_r+0x634>
 8009072:	f040 826f 	bne.w	8009554 <_dtoa_r+0x974>
 8009076:	4b65      	ldr	r3, [pc, #404]	; (800920c <_dtoa_r+0x62c>)
 8009078:	2200      	movs	r2, #0
 800907a:	4640      	mov	r0, r8
 800907c:	4649      	mov	r1, r9
 800907e:	f7f7 fac3 	bl	8000608 <__aeabi_dmul>
 8009082:	4652      	mov	r2, sl
 8009084:	465b      	mov	r3, fp
 8009086:	f7f7 fd45 	bl	8000b14 <__aeabi_dcmpge>
 800908a:	9e03      	ldr	r6, [sp, #12]
 800908c:	4637      	mov	r7, r6
 800908e:	2800      	cmp	r0, #0
 8009090:	f040 8245 	bne.w	800951e <_dtoa_r+0x93e>
 8009094:	9d01      	ldr	r5, [sp, #4]
 8009096:	2331      	movs	r3, #49	; 0x31
 8009098:	f805 3b01 	strb.w	r3, [r5], #1
 800909c:	9b00      	ldr	r3, [sp, #0]
 800909e:	3301      	adds	r3, #1
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	e240      	b.n	8009526 <_dtoa_r+0x946>
 80090a4:	07f2      	lsls	r2, r6, #31
 80090a6:	d505      	bpl.n	80090b4 <_dtoa_r+0x4d4>
 80090a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090ac:	f7f7 faac 	bl	8000608 <__aeabi_dmul>
 80090b0:	3501      	adds	r5, #1
 80090b2:	2301      	movs	r3, #1
 80090b4:	1076      	asrs	r6, r6, #1
 80090b6:	3708      	adds	r7, #8
 80090b8:	e777      	b.n	8008faa <_dtoa_r+0x3ca>
 80090ba:	2502      	movs	r5, #2
 80090bc:	e779      	b.n	8008fb2 <_dtoa_r+0x3d2>
 80090be:	9f00      	ldr	r7, [sp, #0]
 80090c0:	9e03      	ldr	r6, [sp, #12]
 80090c2:	e794      	b.n	8008fee <_dtoa_r+0x40e>
 80090c4:	9901      	ldr	r1, [sp, #4]
 80090c6:	4b4c      	ldr	r3, [pc, #304]	; (80091f8 <_dtoa_r+0x618>)
 80090c8:	4431      	add	r1, r6
 80090ca:	910d      	str	r1, [sp, #52]	; 0x34
 80090cc:	9908      	ldr	r1, [sp, #32]
 80090ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80090d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090d6:	2900      	cmp	r1, #0
 80090d8:	d043      	beq.n	8009162 <_dtoa_r+0x582>
 80090da:	494d      	ldr	r1, [pc, #308]	; (8009210 <_dtoa_r+0x630>)
 80090dc:	2000      	movs	r0, #0
 80090de:	f7f7 fbbd 	bl	800085c <__aeabi_ddiv>
 80090e2:	4652      	mov	r2, sl
 80090e4:	465b      	mov	r3, fp
 80090e6:	f7f7 f8d7 	bl	8000298 <__aeabi_dsub>
 80090ea:	9d01      	ldr	r5, [sp, #4]
 80090ec:	4682      	mov	sl, r0
 80090ee:	468b      	mov	fp, r1
 80090f0:	4649      	mov	r1, r9
 80090f2:	4640      	mov	r0, r8
 80090f4:	f7f7 fd38 	bl	8000b68 <__aeabi_d2iz>
 80090f8:	4606      	mov	r6, r0
 80090fa:	f7f7 fa1b 	bl	8000534 <__aeabi_i2d>
 80090fe:	4602      	mov	r2, r0
 8009100:	460b      	mov	r3, r1
 8009102:	4640      	mov	r0, r8
 8009104:	4649      	mov	r1, r9
 8009106:	f7f7 f8c7 	bl	8000298 <__aeabi_dsub>
 800910a:	3630      	adds	r6, #48	; 0x30
 800910c:	f805 6b01 	strb.w	r6, [r5], #1
 8009110:	4652      	mov	r2, sl
 8009112:	465b      	mov	r3, fp
 8009114:	4680      	mov	r8, r0
 8009116:	4689      	mov	r9, r1
 8009118:	f7f7 fce8 	bl	8000aec <__aeabi_dcmplt>
 800911c:	2800      	cmp	r0, #0
 800911e:	d163      	bne.n	80091e8 <_dtoa_r+0x608>
 8009120:	4642      	mov	r2, r8
 8009122:	464b      	mov	r3, r9
 8009124:	4936      	ldr	r1, [pc, #216]	; (8009200 <_dtoa_r+0x620>)
 8009126:	2000      	movs	r0, #0
 8009128:	f7f7 f8b6 	bl	8000298 <__aeabi_dsub>
 800912c:	4652      	mov	r2, sl
 800912e:	465b      	mov	r3, fp
 8009130:	f7f7 fcdc 	bl	8000aec <__aeabi_dcmplt>
 8009134:	2800      	cmp	r0, #0
 8009136:	f040 80b5 	bne.w	80092a4 <_dtoa_r+0x6c4>
 800913a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800913c:	429d      	cmp	r5, r3
 800913e:	d081      	beq.n	8009044 <_dtoa_r+0x464>
 8009140:	4b30      	ldr	r3, [pc, #192]	; (8009204 <_dtoa_r+0x624>)
 8009142:	2200      	movs	r2, #0
 8009144:	4650      	mov	r0, sl
 8009146:	4659      	mov	r1, fp
 8009148:	f7f7 fa5e 	bl	8000608 <__aeabi_dmul>
 800914c:	4b2d      	ldr	r3, [pc, #180]	; (8009204 <_dtoa_r+0x624>)
 800914e:	4682      	mov	sl, r0
 8009150:	468b      	mov	fp, r1
 8009152:	4640      	mov	r0, r8
 8009154:	4649      	mov	r1, r9
 8009156:	2200      	movs	r2, #0
 8009158:	f7f7 fa56 	bl	8000608 <__aeabi_dmul>
 800915c:	4680      	mov	r8, r0
 800915e:	4689      	mov	r9, r1
 8009160:	e7c6      	b.n	80090f0 <_dtoa_r+0x510>
 8009162:	4650      	mov	r0, sl
 8009164:	4659      	mov	r1, fp
 8009166:	f7f7 fa4f 	bl	8000608 <__aeabi_dmul>
 800916a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800916c:	9d01      	ldr	r5, [sp, #4]
 800916e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009170:	4682      	mov	sl, r0
 8009172:	468b      	mov	fp, r1
 8009174:	4649      	mov	r1, r9
 8009176:	4640      	mov	r0, r8
 8009178:	f7f7 fcf6 	bl	8000b68 <__aeabi_d2iz>
 800917c:	4606      	mov	r6, r0
 800917e:	f7f7 f9d9 	bl	8000534 <__aeabi_i2d>
 8009182:	3630      	adds	r6, #48	; 0x30
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	4640      	mov	r0, r8
 800918a:	4649      	mov	r1, r9
 800918c:	f7f7 f884 	bl	8000298 <__aeabi_dsub>
 8009190:	f805 6b01 	strb.w	r6, [r5], #1
 8009194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009196:	429d      	cmp	r5, r3
 8009198:	4680      	mov	r8, r0
 800919a:	4689      	mov	r9, r1
 800919c:	f04f 0200 	mov.w	r2, #0
 80091a0:	d124      	bne.n	80091ec <_dtoa_r+0x60c>
 80091a2:	4b1b      	ldr	r3, [pc, #108]	; (8009210 <_dtoa_r+0x630>)
 80091a4:	4650      	mov	r0, sl
 80091a6:	4659      	mov	r1, fp
 80091a8:	f7f7 f878 	bl	800029c <__adddf3>
 80091ac:	4602      	mov	r2, r0
 80091ae:	460b      	mov	r3, r1
 80091b0:	4640      	mov	r0, r8
 80091b2:	4649      	mov	r1, r9
 80091b4:	f7f7 fcb8 	bl	8000b28 <__aeabi_dcmpgt>
 80091b8:	2800      	cmp	r0, #0
 80091ba:	d173      	bne.n	80092a4 <_dtoa_r+0x6c4>
 80091bc:	4652      	mov	r2, sl
 80091be:	465b      	mov	r3, fp
 80091c0:	4913      	ldr	r1, [pc, #76]	; (8009210 <_dtoa_r+0x630>)
 80091c2:	2000      	movs	r0, #0
 80091c4:	f7f7 f868 	bl	8000298 <__aeabi_dsub>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	4640      	mov	r0, r8
 80091ce:	4649      	mov	r1, r9
 80091d0:	f7f7 fc8c 	bl	8000aec <__aeabi_dcmplt>
 80091d4:	2800      	cmp	r0, #0
 80091d6:	f43f af35 	beq.w	8009044 <_dtoa_r+0x464>
 80091da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80091dc:	1e6b      	subs	r3, r5, #1
 80091de:	930f      	str	r3, [sp, #60]	; 0x3c
 80091e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091e4:	2b30      	cmp	r3, #48	; 0x30
 80091e6:	d0f8      	beq.n	80091da <_dtoa_r+0x5fa>
 80091e8:	9700      	str	r7, [sp, #0]
 80091ea:	e049      	b.n	8009280 <_dtoa_r+0x6a0>
 80091ec:	4b05      	ldr	r3, [pc, #20]	; (8009204 <_dtoa_r+0x624>)
 80091ee:	f7f7 fa0b 	bl	8000608 <__aeabi_dmul>
 80091f2:	4680      	mov	r8, r0
 80091f4:	4689      	mov	r9, r1
 80091f6:	e7bd      	b.n	8009174 <_dtoa_r+0x594>
 80091f8:	0800bca0 	.word	0x0800bca0
 80091fc:	0800bc78 	.word	0x0800bc78
 8009200:	3ff00000 	.word	0x3ff00000
 8009204:	40240000 	.word	0x40240000
 8009208:	401c0000 	.word	0x401c0000
 800920c:	40140000 	.word	0x40140000
 8009210:	3fe00000 	.word	0x3fe00000
 8009214:	9d01      	ldr	r5, [sp, #4]
 8009216:	4656      	mov	r6, sl
 8009218:	465f      	mov	r7, fp
 800921a:	4642      	mov	r2, r8
 800921c:	464b      	mov	r3, r9
 800921e:	4630      	mov	r0, r6
 8009220:	4639      	mov	r1, r7
 8009222:	f7f7 fb1b 	bl	800085c <__aeabi_ddiv>
 8009226:	f7f7 fc9f 	bl	8000b68 <__aeabi_d2iz>
 800922a:	4682      	mov	sl, r0
 800922c:	f7f7 f982 	bl	8000534 <__aeabi_i2d>
 8009230:	4642      	mov	r2, r8
 8009232:	464b      	mov	r3, r9
 8009234:	f7f7 f9e8 	bl	8000608 <__aeabi_dmul>
 8009238:	4602      	mov	r2, r0
 800923a:	460b      	mov	r3, r1
 800923c:	4630      	mov	r0, r6
 800923e:	4639      	mov	r1, r7
 8009240:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009244:	f7f7 f828 	bl	8000298 <__aeabi_dsub>
 8009248:	f805 6b01 	strb.w	r6, [r5], #1
 800924c:	9e01      	ldr	r6, [sp, #4]
 800924e:	9f03      	ldr	r7, [sp, #12]
 8009250:	1bae      	subs	r6, r5, r6
 8009252:	42b7      	cmp	r7, r6
 8009254:	4602      	mov	r2, r0
 8009256:	460b      	mov	r3, r1
 8009258:	d135      	bne.n	80092c6 <_dtoa_r+0x6e6>
 800925a:	f7f7 f81f 	bl	800029c <__adddf3>
 800925e:	4642      	mov	r2, r8
 8009260:	464b      	mov	r3, r9
 8009262:	4606      	mov	r6, r0
 8009264:	460f      	mov	r7, r1
 8009266:	f7f7 fc5f 	bl	8000b28 <__aeabi_dcmpgt>
 800926a:	b9d0      	cbnz	r0, 80092a2 <_dtoa_r+0x6c2>
 800926c:	4642      	mov	r2, r8
 800926e:	464b      	mov	r3, r9
 8009270:	4630      	mov	r0, r6
 8009272:	4639      	mov	r1, r7
 8009274:	f7f7 fc30 	bl	8000ad8 <__aeabi_dcmpeq>
 8009278:	b110      	cbz	r0, 8009280 <_dtoa_r+0x6a0>
 800927a:	f01a 0f01 	tst.w	sl, #1
 800927e:	d110      	bne.n	80092a2 <_dtoa_r+0x6c2>
 8009280:	4620      	mov	r0, r4
 8009282:	ee18 1a10 	vmov	r1, s16
 8009286:	f000 faf7 	bl	8009878 <_Bfree>
 800928a:	2300      	movs	r3, #0
 800928c:	9800      	ldr	r0, [sp, #0]
 800928e:	702b      	strb	r3, [r5, #0]
 8009290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009292:	3001      	adds	r0, #1
 8009294:	6018      	str	r0, [r3, #0]
 8009296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009298:	2b00      	cmp	r3, #0
 800929a:	f43f acf1 	beq.w	8008c80 <_dtoa_r+0xa0>
 800929e:	601d      	str	r5, [r3, #0]
 80092a0:	e4ee      	b.n	8008c80 <_dtoa_r+0xa0>
 80092a2:	9f00      	ldr	r7, [sp, #0]
 80092a4:	462b      	mov	r3, r5
 80092a6:	461d      	mov	r5, r3
 80092a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092ac:	2a39      	cmp	r2, #57	; 0x39
 80092ae:	d106      	bne.n	80092be <_dtoa_r+0x6de>
 80092b0:	9a01      	ldr	r2, [sp, #4]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d1f7      	bne.n	80092a6 <_dtoa_r+0x6c6>
 80092b6:	9901      	ldr	r1, [sp, #4]
 80092b8:	2230      	movs	r2, #48	; 0x30
 80092ba:	3701      	adds	r7, #1
 80092bc:	700a      	strb	r2, [r1, #0]
 80092be:	781a      	ldrb	r2, [r3, #0]
 80092c0:	3201      	adds	r2, #1
 80092c2:	701a      	strb	r2, [r3, #0]
 80092c4:	e790      	b.n	80091e8 <_dtoa_r+0x608>
 80092c6:	4ba6      	ldr	r3, [pc, #664]	; (8009560 <_dtoa_r+0x980>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	f7f7 f99d 	bl	8000608 <__aeabi_dmul>
 80092ce:	2200      	movs	r2, #0
 80092d0:	2300      	movs	r3, #0
 80092d2:	4606      	mov	r6, r0
 80092d4:	460f      	mov	r7, r1
 80092d6:	f7f7 fbff 	bl	8000ad8 <__aeabi_dcmpeq>
 80092da:	2800      	cmp	r0, #0
 80092dc:	d09d      	beq.n	800921a <_dtoa_r+0x63a>
 80092de:	e7cf      	b.n	8009280 <_dtoa_r+0x6a0>
 80092e0:	9a08      	ldr	r2, [sp, #32]
 80092e2:	2a00      	cmp	r2, #0
 80092e4:	f000 80d7 	beq.w	8009496 <_dtoa_r+0x8b6>
 80092e8:	9a06      	ldr	r2, [sp, #24]
 80092ea:	2a01      	cmp	r2, #1
 80092ec:	f300 80ba 	bgt.w	8009464 <_dtoa_r+0x884>
 80092f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092f2:	2a00      	cmp	r2, #0
 80092f4:	f000 80b2 	beq.w	800945c <_dtoa_r+0x87c>
 80092f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80092fc:	9e07      	ldr	r6, [sp, #28]
 80092fe:	9d04      	ldr	r5, [sp, #16]
 8009300:	9a04      	ldr	r2, [sp, #16]
 8009302:	441a      	add	r2, r3
 8009304:	9204      	str	r2, [sp, #16]
 8009306:	9a05      	ldr	r2, [sp, #20]
 8009308:	2101      	movs	r1, #1
 800930a:	441a      	add	r2, r3
 800930c:	4620      	mov	r0, r4
 800930e:	9205      	str	r2, [sp, #20]
 8009310:	f000 fb6a 	bl	80099e8 <__i2b>
 8009314:	4607      	mov	r7, r0
 8009316:	2d00      	cmp	r5, #0
 8009318:	dd0c      	ble.n	8009334 <_dtoa_r+0x754>
 800931a:	9b05      	ldr	r3, [sp, #20]
 800931c:	2b00      	cmp	r3, #0
 800931e:	dd09      	ble.n	8009334 <_dtoa_r+0x754>
 8009320:	42ab      	cmp	r3, r5
 8009322:	9a04      	ldr	r2, [sp, #16]
 8009324:	bfa8      	it	ge
 8009326:	462b      	movge	r3, r5
 8009328:	1ad2      	subs	r2, r2, r3
 800932a:	9204      	str	r2, [sp, #16]
 800932c:	9a05      	ldr	r2, [sp, #20]
 800932e:	1aed      	subs	r5, r5, r3
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	9305      	str	r3, [sp, #20]
 8009334:	9b07      	ldr	r3, [sp, #28]
 8009336:	b31b      	cbz	r3, 8009380 <_dtoa_r+0x7a0>
 8009338:	9b08      	ldr	r3, [sp, #32]
 800933a:	2b00      	cmp	r3, #0
 800933c:	f000 80af 	beq.w	800949e <_dtoa_r+0x8be>
 8009340:	2e00      	cmp	r6, #0
 8009342:	dd13      	ble.n	800936c <_dtoa_r+0x78c>
 8009344:	4639      	mov	r1, r7
 8009346:	4632      	mov	r2, r6
 8009348:	4620      	mov	r0, r4
 800934a:	f000 fc0d 	bl	8009b68 <__pow5mult>
 800934e:	ee18 2a10 	vmov	r2, s16
 8009352:	4601      	mov	r1, r0
 8009354:	4607      	mov	r7, r0
 8009356:	4620      	mov	r0, r4
 8009358:	f000 fb5c 	bl	8009a14 <__multiply>
 800935c:	ee18 1a10 	vmov	r1, s16
 8009360:	4680      	mov	r8, r0
 8009362:	4620      	mov	r0, r4
 8009364:	f000 fa88 	bl	8009878 <_Bfree>
 8009368:	ee08 8a10 	vmov	s16, r8
 800936c:	9b07      	ldr	r3, [sp, #28]
 800936e:	1b9a      	subs	r2, r3, r6
 8009370:	d006      	beq.n	8009380 <_dtoa_r+0x7a0>
 8009372:	ee18 1a10 	vmov	r1, s16
 8009376:	4620      	mov	r0, r4
 8009378:	f000 fbf6 	bl	8009b68 <__pow5mult>
 800937c:	ee08 0a10 	vmov	s16, r0
 8009380:	2101      	movs	r1, #1
 8009382:	4620      	mov	r0, r4
 8009384:	f000 fb30 	bl	80099e8 <__i2b>
 8009388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800938a:	2b00      	cmp	r3, #0
 800938c:	4606      	mov	r6, r0
 800938e:	f340 8088 	ble.w	80094a2 <_dtoa_r+0x8c2>
 8009392:	461a      	mov	r2, r3
 8009394:	4601      	mov	r1, r0
 8009396:	4620      	mov	r0, r4
 8009398:	f000 fbe6 	bl	8009b68 <__pow5mult>
 800939c:	9b06      	ldr	r3, [sp, #24]
 800939e:	2b01      	cmp	r3, #1
 80093a0:	4606      	mov	r6, r0
 80093a2:	f340 8081 	ble.w	80094a8 <_dtoa_r+0x8c8>
 80093a6:	f04f 0800 	mov.w	r8, #0
 80093aa:	6933      	ldr	r3, [r6, #16]
 80093ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80093b0:	6918      	ldr	r0, [r3, #16]
 80093b2:	f000 fac9 	bl	8009948 <__hi0bits>
 80093b6:	f1c0 0020 	rsb	r0, r0, #32
 80093ba:	9b05      	ldr	r3, [sp, #20]
 80093bc:	4418      	add	r0, r3
 80093be:	f010 001f 	ands.w	r0, r0, #31
 80093c2:	f000 8092 	beq.w	80094ea <_dtoa_r+0x90a>
 80093c6:	f1c0 0320 	rsb	r3, r0, #32
 80093ca:	2b04      	cmp	r3, #4
 80093cc:	f340 808a 	ble.w	80094e4 <_dtoa_r+0x904>
 80093d0:	f1c0 001c 	rsb	r0, r0, #28
 80093d4:	9b04      	ldr	r3, [sp, #16]
 80093d6:	4403      	add	r3, r0
 80093d8:	9304      	str	r3, [sp, #16]
 80093da:	9b05      	ldr	r3, [sp, #20]
 80093dc:	4403      	add	r3, r0
 80093de:	4405      	add	r5, r0
 80093e0:	9305      	str	r3, [sp, #20]
 80093e2:	9b04      	ldr	r3, [sp, #16]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	dd07      	ble.n	80093f8 <_dtoa_r+0x818>
 80093e8:	ee18 1a10 	vmov	r1, s16
 80093ec:	461a      	mov	r2, r3
 80093ee:	4620      	mov	r0, r4
 80093f0:	f000 fc14 	bl	8009c1c <__lshift>
 80093f4:	ee08 0a10 	vmov	s16, r0
 80093f8:	9b05      	ldr	r3, [sp, #20]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	dd05      	ble.n	800940a <_dtoa_r+0x82a>
 80093fe:	4631      	mov	r1, r6
 8009400:	461a      	mov	r2, r3
 8009402:	4620      	mov	r0, r4
 8009404:	f000 fc0a 	bl	8009c1c <__lshift>
 8009408:	4606      	mov	r6, r0
 800940a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800940c:	2b00      	cmp	r3, #0
 800940e:	d06e      	beq.n	80094ee <_dtoa_r+0x90e>
 8009410:	ee18 0a10 	vmov	r0, s16
 8009414:	4631      	mov	r1, r6
 8009416:	f000 fc71 	bl	8009cfc <__mcmp>
 800941a:	2800      	cmp	r0, #0
 800941c:	da67      	bge.n	80094ee <_dtoa_r+0x90e>
 800941e:	9b00      	ldr	r3, [sp, #0]
 8009420:	3b01      	subs	r3, #1
 8009422:	ee18 1a10 	vmov	r1, s16
 8009426:	9300      	str	r3, [sp, #0]
 8009428:	220a      	movs	r2, #10
 800942a:	2300      	movs	r3, #0
 800942c:	4620      	mov	r0, r4
 800942e:	f000 fa45 	bl	80098bc <__multadd>
 8009432:	9b08      	ldr	r3, [sp, #32]
 8009434:	ee08 0a10 	vmov	s16, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	f000 81b1 	beq.w	80097a0 <_dtoa_r+0xbc0>
 800943e:	2300      	movs	r3, #0
 8009440:	4639      	mov	r1, r7
 8009442:	220a      	movs	r2, #10
 8009444:	4620      	mov	r0, r4
 8009446:	f000 fa39 	bl	80098bc <__multadd>
 800944a:	9b02      	ldr	r3, [sp, #8]
 800944c:	2b00      	cmp	r3, #0
 800944e:	4607      	mov	r7, r0
 8009450:	f300 808e 	bgt.w	8009570 <_dtoa_r+0x990>
 8009454:	9b06      	ldr	r3, [sp, #24]
 8009456:	2b02      	cmp	r3, #2
 8009458:	dc51      	bgt.n	80094fe <_dtoa_r+0x91e>
 800945a:	e089      	b.n	8009570 <_dtoa_r+0x990>
 800945c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800945e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009462:	e74b      	b.n	80092fc <_dtoa_r+0x71c>
 8009464:	9b03      	ldr	r3, [sp, #12]
 8009466:	1e5e      	subs	r6, r3, #1
 8009468:	9b07      	ldr	r3, [sp, #28]
 800946a:	42b3      	cmp	r3, r6
 800946c:	bfbf      	itttt	lt
 800946e:	9b07      	ldrlt	r3, [sp, #28]
 8009470:	9607      	strlt	r6, [sp, #28]
 8009472:	1af2      	sublt	r2, r6, r3
 8009474:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009476:	bfb6      	itet	lt
 8009478:	189b      	addlt	r3, r3, r2
 800947a:	1b9e      	subge	r6, r3, r6
 800947c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800947e:	9b03      	ldr	r3, [sp, #12]
 8009480:	bfb8      	it	lt
 8009482:	2600      	movlt	r6, #0
 8009484:	2b00      	cmp	r3, #0
 8009486:	bfb7      	itett	lt
 8009488:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800948c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009490:	1a9d      	sublt	r5, r3, r2
 8009492:	2300      	movlt	r3, #0
 8009494:	e734      	b.n	8009300 <_dtoa_r+0x720>
 8009496:	9e07      	ldr	r6, [sp, #28]
 8009498:	9d04      	ldr	r5, [sp, #16]
 800949a:	9f08      	ldr	r7, [sp, #32]
 800949c:	e73b      	b.n	8009316 <_dtoa_r+0x736>
 800949e:	9a07      	ldr	r2, [sp, #28]
 80094a0:	e767      	b.n	8009372 <_dtoa_r+0x792>
 80094a2:	9b06      	ldr	r3, [sp, #24]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	dc18      	bgt.n	80094da <_dtoa_r+0x8fa>
 80094a8:	f1ba 0f00 	cmp.w	sl, #0
 80094ac:	d115      	bne.n	80094da <_dtoa_r+0x8fa>
 80094ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094b2:	b993      	cbnz	r3, 80094da <_dtoa_r+0x8fa>
 80094b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80094b8:	0d1b      	lsrs	r3, r3, #20
 80094ba:	051b      	lsls	r3, r3, #20
 80094bc:	b183      	cbz	r3, 80094e0 <_dtoa_r+0x900>
 80094be:	9b04      	ldr	r3, [sp, #16]
 80094c0:	3301      	adds	r3, #1
 80094c2:	9304      	str	r3, [sp, #16]
 80094c4:	9b05      	ldr	r3, [sp, #20]
 80094c6:	3301      	adds	r3, #1
 80094c8:	9305      	str	r3, [sp, #20]
 80094ca:	f04f 0801 	mov.w	r8, #1
 80094ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f47f af6a 	bne.w	80093aa <_dtoa_r+0x7ca>
 80094d6:	2001      	movs	r0, #1
 80094d8:	e76f      	b.n	80093ba <_dtoa_r+0x7da>
 80094da:	f04f 0800 	mov.w	r8, #0
 80094de:	e7f6      	b.n	80094ce <_dtoa_r+0x8ee>
 80094e0:	4698      	mov	r8, r3
 80094e2:	e7f4      	b.n	80094ce <_dtoa_r+0x8ee>
 80094e4:	f43f af7d 	beq.w	80093e2 <_dtoa_r+0x802>
 80094e8:	4618      	mov	r0, r3
 80094ea:	301c      	adds	r0, #28
 80094ec:	e772      	b.n	80093d4 <_dtoa_r+0x7f4>
 80094ee:	9b03      	ldr	r3, [sp, #12]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	dc37      	bgt.n	8009564 <_dtoa_r+0x984>
 80094f4:	9b06      	ldr	r3, [sp, #24]
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	dd34      	ble.n	8009564 <_dtoa_r+0x984>
 80094fa:	9b03      	ldr	r3, [sp, #12]
 80094fc:	9302      	str	r3, [sp, #8]
 80094fe:	9b02      	ldr	r3, [sp, #8]
 8009500:	b96b      	cbnz	r3, 800951e <_dtoa_r+0x93e>
 8009502:	4631      	mov	r1, r6
 8009504:	2205      	movs	r2, #5
 8009506:	4620      	mov	r0, r4
 8009508:	f000 f9d8 	bl	80098bc <__multadd>
 800950c:	4601      	mov	r1, r0
 800950e:	4606      	mov	r6, r0
 8009510:	ee18 0a10 	vmov	r0, s16
 8009514:	f000 fbf2 	bl	8009cfc <__mcmp>
 8009518:	2800      	cmp	r0, #0
 800951a:	f73f adbb 	bgt.w	8009094 <_dtoa_r+0x4b4>
 800951e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009520:	9d01      	ldr	r5, [sp, #4]
 8009522:	43db      	mvns	r3, r3
 8009524:	9300      	str	r3, [sp, #0]
 8009526:	f04f 0800 	mov.w	r8, #0
 800952a:	4631      	mov	r1, r6
 800952c:	4620      	mov	r0, r4
 800952e:	f000 f9a3 	bl	8009878 <_Bfree>
 8009532:	2f00      	cmp	r7, #0
 8009534:	f43f aea4 	beq.w	8009280 <_dtoa_r+0x6a0>
 8009538:	f1b8 0f00 	cmp.w	r8, #0
 800953c:	d005      	beq.n	800954a <_dtoa_r+0x96a>
 800953e:	45b8      	cmp	r8, r7
 8009540:	d003      	beq.n	800954a <_dtoa_r+0x96a>
 8009542:	4641      	mov	r1, r8
 8009544:	4620      	mov	r0, r4
 8009546:	f000 f997 	bl	8009878 <_Bfree>
 800954a:	4639      	mov	r1, r7
 800954c:	4620      	mov	r0, r4
 800954e:	f000 f993 	bl	8009878 <_Bfree>
 8009552:	e695      	b.n	8009280 <_dtoa_r+0x6a0>
 8009554:	2600      	movs	r6, #0
 8009556:	4637      	mov	r7, r6
 8009558:	e7e1      	b.n	800951e <_dtoa_r+0x93e>
 800955a:	9700      	str	r7, [sp, #0]
 800955c:	4637      	mov	r7, r6
 800955e:	e599      	b.n	8009094 <_dtoa_r+0x4b4>
 8009560:	40240000 	.word	0x40240000
 8009564:	9b08      	ldr	r3, [sp, #32]
 8009566:	2b00      	cmp	r3, #0
 8009568:	f000 80ca 	beq.w	8009700 <_dtoa_r+0xb20>
 800956c:	9b03      	ldr	r3, [sp, #12]
 800956e:	9302      	str	r3, [sp, #8]
 8009570:	2d00      	cmp	r5, #0
 8009572:	dd05      	ble.n	8009580 <_dtoa_r+0x9a0>
 8009574:	4639      	mov	r1, r7
 8009576:	462a      	mov	r2, r5
 8009578:	4620      	mov	r0, r4
 800957a:	f000 fb4f 	bl	8009c1c <__lshift>
 800957e:	4607      	mov	r7, r0
 8009580:	f1b8 0f00 	cmp.w	r8, #0
 8009584:	d05b      	beq.n	800963e <_dtoa_r+0xa5e>
 8009586:	6879      	ldr	r1, [r7, #4]
 8009588:	4620      	mov	r0, r4
 800958a:	f000 f935 	bl	80097f8 <_Balloc>
 800958e:	4605      	mov	r5, r0
 8009590:	b928      	cbnz	r0, 800959e <_dtoa_r+0x9be>
 8009592:	4b87      	ldr	r3, [pc, #540]	; (80097b0 <_dtoa_r+0xbd0>)
 8009594:	4602      	mov	r2, r0
 8009596:	f240 21ea 	movw	r1, #746	; 0x2ea
 800959a:	f7ff bb3b 	b.w	8008c14 <_dtoa_r+0x34>
 800959e:	693a      	ldr	r2, [r7, #16]
 80095a0:	3202      	adds	r2, #2
 80095a2:	0092      	lsls	r2, r2, #2
 80095a4:	f107 010c 	add.w	r1, r7, #12
 80095a8:	300c      	adds	r0, #12
 80095aa:	f000 f90b 	bl	80097c4 <memcpy>
 80095ae:	2201      	movs	r2, #1
 80095b0:	4629      	mov	r1, r5
 80095b2:	4620      	mov	r0, r4
 80095b4:	f000 fb32 	bl	8009c1c <__lshift>
 80095b8:	9b01      	ldr	r3, [sp, #4]
 80095ba:	f103 0901 	add.w	r9, r3, #1
 80095be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80095c2:	4413      	add	r3, r2
 80095c4:	9305      	str	r3, [sp, #20]
 80095c6:	f00a 0301 	and.w	r3, sl, #1
 80095ca:	46b8      	mov	r8, r7
 80095cc:	9304      	str	r3, [sp, #16]
 80095ce:	4607      	mov	r7, r0
 80095d0:	4631      	mov	r1, r6
 80095d2:	ee18 0a10 	vmov	r0, s16
 80095d6:	f7ff fa77 	bl	8008ac8 <quorem>
 80095da:	4641      	mov	r1, r8
 80095dc:	9002      	str	r0, [sp, #8]
 80095de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80095e2:	ee18 0a10 	vmov	r0, s16
 80095e6:	f000 fb89 	bl	8009cfc <__mcmp>
 80095ea:	463a      	mov	r2, r7
 80095ec:	9003      	str	r0, [sp, #12]
 80095ee:	4631      	mov	r1, r6
 80095f0:	4620      	mov	r0, r4
 80095f2:	f000 fb9f 	bl	8009d34 <__mdiff>
 80095f6:	68c2      	ldr	r2, [r0, #12]
 80095f8:	f109 3bff 	add.w	fp, r9, #4294967295
 80095fc:	4605      	mov	r5, r0
 80095fe:	bb02      	cbnz	r2, 8009642 <_dtoa_r+0xa62>
 8009600:	4601      	mov	r1, r0
 8009602:	ee18 0a10 	vmov	r0, s16
 8009606:	f000 fb79 	bl	8009cfc <__mcmp>
 800960a:	4602      	mov	r2, r0
 800960c:	4629      	mov	r1, r5
 800960e:	4620      	mov	r0, r4
 8009610:	9207      	str	r2, [sp, #28]
 8009612:	f000 f931 	bl	8009878 <_Bfree>
 8009616:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800961a:	ea43 0102 	orr.w	r1, r3, r2
 800961e:	9b04      	ldr	r3, [sp, #16]
 8009620:	430b      	orrs	r3, r1
 8009622:	464d      	mov	r5, r9
 8009624:	d10f      	bne.n	8009646 <_dtoa_r+0xa66>
 8009626:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800962a:	d02a      	beq.n	8009682 <_dtoa_r+0xaa2>
 800962c:	9b03      	ldr	r3, [sp, #12]
 800962e:	2b00      	cmp	r3, #0
 8009630:	dd02      	ble.n	8009638 <_dtoa_r+0xa58>
 8009632:	9b02      	ldr	r3, [sp, #8]
 8009634:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009638:	f88b a000 	strb.w	sl, [fp]
 800963c:	e775      	b.n	800952a <_dtoa_r+0x94a>
 800963e:	4638      	mov	r0, r7
 8009640:	e7ba      	b.n	80095b8 <_dtoa_r+0x9d8>
 8009642:	2201      	movs	r2, #1
 8009644:	e7e2      	b.n	800960c <_dtoa_r+0xa2c>
 8009646:	9b03      	ldr	r3, [sp, #12]
 8009648:	2b00      	cmp	r3, #0
 800964a:	db04      	blt.n	8009656 <_dtoa_r+0xa76>
 800964c:	9906      	ldr	r1, [sp, #24]
 800964e:	430b      	orrs	r3, r1
 8009650:	9904      	ldr	r1, [sp, #16]
 8009652:	430b      	orrs	r3, r1
 8009654:	d122      	bne.n	800969c <_dtoa_r+0xabc>
 8009656:	2a00      	cmp	r2, #0
 8009658:	ddee      	ble.n	8009638 <_dtoa_r+0xa58>
 800965a:	ee18 1a10 	vmov	r1, s16
 800965e:	2201      	movs	r2, #1
 8009660:	4620      	mov	r0, r4
 8009662:	f000 fadb 	bl	8009c1c <__lshift>
 8009666:	4631      	mov	r1, r6
 8009668:	ee08 0a10 	vmov	s16, r0
 800966c:	f000 fb46 	bl	8009cfc <__mcmp>
 8009670:	2800      	cmp	r0, #0
 8009672:	dc03      	bgt.n	800967c <_dtoa_r+0xa9c>
 8009674:	d1e0      	bne.n	8009638 <_dtoa_r+0xa58>
 8009676:	f01a 0f01 	tst.w	sl, #1
 800967a:	d0dd      	beq.n	8009638 <_dtoa_r+0xa58>
 800967c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009680:	d1d7      	bne.n	8009632 <_dtoa_r+0xa52>
 8009682:	2339      	movs	r3, #57	; 0x39
 8009684:	f88b 3000 	strb.w	r3, [fp]
 8009688:	462b      	mov	r3, r5
 800968a:	461d      	mov	r5, r3
 800968c:	3b01      	subs	r3, #1
 800968e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009692:	2a39      	cmp	r2, #57	; 0x39
 8009694:	d071      	beq.n	800977a <_dtoa_r+0xb9a>
 8009696:	3201      	adds	r2, #1
 8009698:	701a      	strb	r2, [r3, #0]
 800969a:	e746      	b.n	800952a <_dtoa_r+0x94a>
 800969c:	2a00      	cmp	r2, #0
 800969e:	dd07      	ble.n	80096b0 <_dtoa_r+0xad0>
 80096a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80096a4:	d0ed      	beq.n	8009682 <_dtoa_r+0xaa2>
 80096a6:	f10a 0301 	add.w	r3, sl, #1
 80096aa:	f88b 3000 	strb.w	r3, [fp]
 80096ae:	e73c      	b.n	800952a <_dtoa_r+0x94a>
 80096b0:	9b05      	ldr	r3, [sp, #20]
 80096b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80096b6:	4599      	cmp	r9, r3
 80096b8:	d047      	beq.n	800974a <_dtoa_r+0xb6a>
 80096ba:	ee18 1a10 	vmov	r1, s16
 80096be:	2300      	movs	r3, #0
 80096c0:	220a      	movs	r2, #10
 80096c2:	4620      	mov	r0, r4
 80096c4:	f000 f8fa 	bl	80098bc <__multadd>
 80096c8:	45b8      	cmp	r8, r7
 80096ca:	ee08 0a10 	vmov	s16, r0
 80096ce:	f04f 0300 	mov.w	r3, #0
 80096d2:	f04f 020a 	mov.w	r2, #10
 80096d6:	4641      	mov	r1, r8
 80096d8:	4620      	mov	r0, r4
 80096da:	d106      	bne.n	80096ea <_dtoa_r+0xb0a>
 80096dc:	f000 f8ee 	bl	80098bc <__multadd>
 80096e0:	4680      	mov	r8, r0
 80096e2:	4607      	mov	r7, r0
 80096e4:	f109 0901 	add.w	r9, r9, #1
 80096e8:	e772      	b.n	80095d0 <_dtoa_r+0x9f0>
 80096ea:	f000 f8e7 	bl	80098bc <__multadd>
 80096ee:	4639      	mov	r1, r7
 80096f0:	4680      	mov	r8, r0
 80096f2:	2300      	movs	r3, #0
 80096f4:	220a      	movs	r2, #10
 80096f6:	4620      	mov	r0, r4
 80096f8:	f000 f8e0 	bl	80098bc <__multadd>
 80096fc:	4607      	mov	r7, r0
 80096fe:	e7f1      	b.n	80096e4 <_dtoa_r+0xb04>
 8009700:	9b03      	ldr	r3, [sp, #12]
 8009702:	9302      	str	r3, [sp, #8]
 8009704:	9d01      	ldr	r5, [sp, #4]
 8009706:	ee18 0a10 	vmov	r0, s16
 800970a:	4631      	mov	r1, r6
 800970c:	f7ff f9dc 	bl	8008ac8 <quorem>
 8009710:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009714:	9b01      	ldr	r3, [sp, #4]
 8009716:	f805 ab01 	strb.w	sl, [r5], #1
 800971a:	1aea      	subs	r2, r5, r3
 800971c:	9b02      	ldr	r3, [sp, #8]
 800971e:	4293      	cmp	r3, r2
 8009720:	dd09      	ble.n	8009736 <_dtoa_r+0xb56>
 8009722:	ee18 1a10 	vmov	r1, s16
 8009726:	2300      	movs	r3, #0
 8009728:	220a      	movs	r2, #10
 800972a:	4620      	mov	r0, r4
 800972c:	f000 f8c6 	bl	80098bc <__multadd>
 8009730:	ee08 0a10 	vmov	s16, r0
 8009734:	e7e7      	b.n	8009706 <_dtoa_r+0xb26>
 8009736:	9b02      	ldr	r3, [sp, #8]
 8009738:	2b00      	cmp	r3, #0
 800973a:	bfc8      	it	gt
 800973c:	461d      	movgt	r5, r3
 800973e:	9b01      	ldr	r3, [sp, #4]
 8009740:	bfd8      	it	le
 8009742:	2501      	movle	r5, #1
 8009744:	441d      	add	r5, r3
 8009746:	f04f 0800 	mov.w	r8, #0
 800974a:	ee18 1a10 	vmov	r1, s16
 800974e:	2201      	movs	r2, #1
 8009750:	4620      	mov	r0, r4
 8009752:	f000 fa63 	bl	8009c1c <__lshift>
 8009756:	4631      	mov	r1, r6
 8009758:	ee08 0a10 	vmov	s16, r0
 800975c:	f000 face 	bl	8009cfc <__mcmp>
 8009760:	2800      	cmp	r0, #0
 8009762:	dc91      	bgt.n	8009688 <_dtoa_r+0xaa8>
 8009764:	d102      	bne.n	800976c <_dtoa_r+0xb8c>
 8009766:	f01a 0f01 	tst.w	sl, #1
 800976a:	d18d      	bne.n	8009688 <_dtoa_r+0xaa8>
 800976c:	462b      	mov	r3, r5
 800976e:	461d      	mov	r5, r3
 8009770:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009774:	2a30      	cmp	r2, #48	; 0x30
 8009776:	d0fa      	beq.n	800976e <_dtoa_r+0xb8e>
 8009778:	e6d7      	b.n	800952a <_dtoa_r+0x94a>
 800977a:	9a01      	ldr	r2, [sp, #4]
 800977c:	429a      	cmp	r2, r3
 800977e:	d184      	bne.n	800968a <_dtoa_r+0xaaa>
 8009780:	9b00      	ldr	r3, [sp, #0]
 8009782:	3301      	adds	r3, #1
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	2331      	movs	r3, #49	; 0x31
 8009788:	7013      	strb	r3, [r2, #0]
 800978a:	e6ce      	b.n	800952a <_dtoa_r+0x94a>
 800978c:	4b09      	ldr	r3, [pc, #36]	; (80097b4 <_dtoa_r+0xbd4>)
 800978e:	f7ff ba95 	b.w	8008cbc <_dtoa_r+0xdc>
 8009792:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009794:	2b00      	cmp	r3, #0
 8009796:	f47f aa6e 	bne.w	8008c76 <_dtoa_r+0x96>
 800979a:	4b07      	ldr	r3, [pc, #28]	; (80097b8 <_dtoa_r+0xbd8>)
 800979c:	f7ff ba8e 	b.w	8008cbc <_dtoa_r+0xdc>
 80097a0:	9b02      	ldr	r3, [sp, #8]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	dcae      	bgt.n	8009704 <_dtoa_r+0xb24>
 80097a6:	9b06      	ldr	r3, [sp, #24]
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	f73f aea8 	bgt.w	80094fe <_dtoa_r+0x91e>
 80097ae:	e7a9      	b.n	8009704 <_dtoa_r+0xb24>
 80097b0:	0800bc07 	.word	0x0800bc07
 80097b4:	0800bb64 	.word	0x0800bb64
 80097b8:	0800bb88 	.word	0x0800bb88

080097bc <_localeconv_r>:
 80097bc:	4800      	ldr	r0, [pc, #0]	; (80097c0 <_localeconv_r+0x4>)
 80097be:	4770      	bx	lr
 80097c0:	20000168 	.word	0x20000168

080097c4 <memcpy>:
 80097c4:	440a      	add	r2, r1
 80097c6:	4291      	cmp	r1, r2
 80097c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80097cc:	d100      	bne.n	80097d0 <memcpy+0xc>
 80097ce:	4770      	bx	lr
 80097d0:	b510      	push	{r4, lr}
 80097d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097da:	4291      	cmp	r1, r2
 80097dc:	d1f9      	bne.n	80097d2 <memcpy+0xe>
 80097de:	bd10      	pop	{r4, pc}

080097e0 <__malloc_lock>:
 80097e0:	4801      	ldr	r0, [pc, #4]	; (80097e8 <__malloc_lock+0x8>)
 80097e2:	f000 bd30 	b.w	800a246 <__retarget_lock_acquire_recursive>
 80097e6:	bf00      	nop
 80097e8:	20000c78 	.word	0x20000c78

080097ec <__malloc_unlock>:
 80097ec:	4801      	ldr	r0, [pc, #4]	; (80097f4 <__malloc_unlock+0x8>)
 80097ee:	f000 bd2b 	b.w	800a248 <__retarget_lock_release_recursive>
 80097f2:	bf00      	nop
 80097f4:	20000c78 	.word	0x20000c78

080097f8 <_Balloc>:
 80097f8:	b570      	push	{r4, r5, r6, lr}
 80097fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097fc:	4604      	mov	r4, r0
 80097fe:	460d      	mov	r5, r1
 8009800:	b976      	cbnz	r6, 8009820 <_Balloc+0x28>
 8009802:	2010      	movs	r0, #16
 8009804:	f7fe fbce 	bl	8007fa4 <malloc>
 8009808:	4602      	mov	r2, r0
 800980a:	6260      	str	r0, [r4, #36]	; 0x24
 800980c:	b920      	cbnz	r0, 8009818 <_Balloc+0x20>
 800980e:	4b18      	ldr	r3, [pc, #96]	; (8009870 <_Balloc+0x78>)
 8009810:	4818      	ldr	r0, [pc, #96]	; (8009874 <_Balloc+0x7c>)
 8009812:	2166      	movs	r1, #102	; 0x66
 8009814:	f000 fce6 	bl	800a1e4 <__assert_func>
 8009818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800981c:	6006      	str	r6, [r0, #0]
 800981e:	60c6      	str	r6, [r0, #12]
 8009820:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009822:	68f3      	ldr	r3, [r6, #12]
 8009824:	b183      	cbz	r3, 8009848 <_Balloc+0x50>
 8009826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800982e:	b9b8      	cbnz	r0, 8009860 <_Balloc+0x68>
 8009830:	2101      	movs	r1, #1
 8009832:	fa01 f605 	lsl.w	r6, r1, r5
 8009836:	1d72      	adds	r2, r6, #5
 8009838:	0092      	lsls	r2, r2, #2
 800983a:	4620      	mov	r0, r4
 800983c:	f000 fb60 	bl	8009f00 <_calloc_r>
 8009840:	b160      	cbz	r0, 800985c <_Balloc+0x64>
 8009842:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009846:	e00e      	b.n	8009866 <_Balloc+0x6e>
 8009848:	2221      	movs	r2, #33	; 0x21
 800984a:	2104      	movs	r1, #4
 800984c:	4620      	mov	r0, r4
 800984e:	f000 fb57 	bl	8009f00 <_calloc_r>
 8009852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009854:	60f0      	str	r0, [r6, #12]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1e4      	bne.n	8009826 <_Balloc+0x2e>
 800985c:	2000      	movs	r0, #0
 800985e:	bd70      	pop	{r4, r5, r6, pc}
 8009860:	6802      	ldr	r2, [r0, #0]
 8009862:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009866:	2300      	movs	r3, #0
 8009868:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800986c:	e7f7      	b.n	800985e <_Balloc+0x66>
 800986e:	bf00      	nop
 8009870:	0800bb95 	.word	0x0800bb95
 8009874:	0800bc18 	.word	0x0800bc18

08009878 <_Bfree>:
 8009878:	b570      	push	{r4, r5, r6, lr}
 800987a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800987c:	4605      	mov	r5, r0
 800987e:	460c      	mov	r4, r1
 8009880:	b976      	cbnz	r6, 80098a0 <_Bfree+0x28>
 8009882:	2010      	movs	r0, #16
 8009884:	f7fe fb8e 	bl	8007fa4 <malloc>
 8009888:	4602      	mov	r2, r0
 800988a:	6268      	str	r0, [r5, #36]	; 0x24
 800988c:	b920      	cbnz	r0, 8009898 <_Bfree+0x20>
 800988e:	4b09      	ldr	r3, [pc, #36]	; (80098b4 <_Bfree+0x3c>)
 8009890:	4809      	ldr	r0, [pc, #36]	; (80098b8 <_Bfree+0x40>)
 8009892:	218a      	movs	r1, #138	; 0x8a
 8009894:	f000 fca6 	bl	800a1e4 <__assert_func>
 8009898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800989c:	6006      	str	r6, [r0, #0]
 800989e:	60c6      	str	r6, [r0, #12]
 80098a0:	b13c      	cbz	r4, 80098b2 <_Bfree+0x3a>
 80098a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80098a4:	6862      	ldr	r2, [r4, #4]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098ac:	6021      	str	r1, [r4, #0]
 80098ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098b2:	bd70      	pop	{r4, r5, r6, pc}
 80098b4:	0800bb95 	.word	0x0800bb95
 80098b8:	0800bc18 	.word	0x0800bc18

080098bc <__multadd>:
 80098bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098c0:	690d      	ldr	r5, [r1, #16]
 80098c2:	4607      	mov	r7, r0
 80098c4:	460c      	mov	r4, r1
 80098c6:	461e      	mov	r6, r3
 80098c8:	f101 0c14 	add.w	ip, r1, #20
 80098cc:	2000      	movs	r0, #0
 80098ce:	f8dc 3000 	ldr.w	r3, [ip]
 80098d2:	b299      	uxth	r1, r3
 80098d4:	fb02 6101 	mla	r1, r2, r1, r6
 80098d8:	0c1e      	lsrs	r6, r3, #16
 80098da:	0c0b      	lsrs	r3, r1, #16
 80098dc:	fb02 3306 	mla	r3, r2, r6, r3
 80098e0:	b289      	uxth	r1, r1
 80098e2:	3001      	adds	r0, #1
 80098e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80098e8:	4285      	cmp	r5, r0
 80098ea:	f84c 1b04 	str.w	r1, [ip], #4
 80098ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80098f2:	dcec      	bgt.n	80098ce <__multadd+0x12>
 80098f4:	b30e      	cbz	r6, 800993a <__multadd+0x7e>
 80098f6:	68a3      	ldr	r3, [r4, #8]
 80098f8:	42ab      	cmp	r3, r5
 80098fa:	dc19      	bgt.n	8009930 <__multadd+0x74>
 80098fc:	6861      	ldr	r1, [r4, #4]
 80098fe:	4638      	mov	r0, r7
 8009900:	3101      	adds	r1, #1
 8009902:	f7ff ff79 	bl	80097f8 <_Balloc>
 8009906:	4680      	mov	r8, r0
 8009908:	b928      	cbnz	r0, 8009916 <__multadd+0x5a>
 800990a:	4602      	mov	r2, r0
 800990c:	4b0c      	ldr	r3, [pc, #48]	; (8009940 <__multadd+0x84>)
 800990e:	480d      	ldr	r0, [pc, #52]	; (8009944 <__multadd+0x88>)
 8009910:	21b5      	movs	r1, #181	; 0xb5
 8009912:	f000 fc67 	bl	800a1e4 <__assert_func>
 8009916:	6922      	ldr	r2, [r4, #16]
 8009918:	3202      	adds	r2, #2
 800991a:	f104 010c 	add.w	r1, r4, #12
 800991e:	0092      	lsls	r2, r2, #2
 8009920:	300c      	adds	r0, #12
 8009922:	f7ff ff4f 	bl	80097c4 <memcpy>
 8009926:	4621      	mov	r1, r4
 8009928:	4638      	mov	r0, r7
 800992a:	f7ff ffa5 	bl	8009878 <_Bfree>
 800992e:	4644      	mov	r4, r8
 8009930:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009934:	3501      	adds	r5, #1
 8009936:	615e      	str	r6, [r3, #20]
 8009938:	6125      	str	r5, [r4, #16]
 800993a:	4620      	mov	r0, r4
 800993c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009940:	0800bc07 	.word	0x0800bc07
 8009944:	0800bc18 	.word	0x0800bc18

08009948 <__hi0bits>:
 8009948:	0c03      	lsrs	r3, r0, #16
 800994a:	041b      	lsls	r3, r3, #16
 800994c:	b9d3      	cbnz	r3, 8009984 <__hi0bits+0x3c>
 800994e:	0400      	lsls	r0, r0, #16
 8009950:	2310      	movs	r3, #16
 8009952:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009956:	bf04      	itt	eq
 8009958:	0200      	lsleq	r0, r0, #8
 800995a:	3308      	addeq	r3, #8
 800995c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009960:	bf04      	itt	eq
 8009962:	0100      	lsleq	r0, r0, #4
 8009964:	3304      	addeq	r3, #4
 8009966:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800996a:	bf04      	itt	eq
 800996c:	0080      	lsleq	r0, r0, #2
 800996e:	3302      	addeq	r3, #2
 8009970:	2800      	cmp	r0, #0
 8009972:	db05      	blt.n	8009980 <__hi0bits+0x38>
 8009974:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009978:	f103 0301 	add.w	r3, r3, #1
 800997c:	bf08      	it	eq
 800997e:	2320      	moveq	r3, #32
 8009980:	4618      	mov	r0, r3
 8009982:	4770      	bx	lr
 8009984:	2300      	movs	r3, #0
 8009986:	e7e4      	b.n	8009952 <__hi0bits+0xa>

08009988 <__lo0bits>:
 8009988:	6803      	ldr	r3, [r0, #0]
 800998a:	f013 0207 	ands.w	r2, r3, #7
 800998e:	4601      	mov	r1, r0
 8009990:	d00b      	beq.n	80099aa <__lo0bits+0x22>
 8009992:	07da      	lsls	r2, r3, #31
 8009994:	d423      	bmi.n	80099de <__lo0bits+0x56>
 8009996:	0798      	lsls	r0, r3, #30
 8009998:	bf49      	itett	mi
 800999a:	085b      	lsrmi	r3, r3, #1
 800999c:	089b      	lsrpl	r3, r3, #2
 800999e:	2001      	movmi	r0, #1
 80099a0:	600b      	strmi	r3, [r1, #0]
 80099a2:	bf5c      	itt	pl
 80099a4:	600b      	strpl	r3, [r1, #0]
 80099a6:	2002      	movpl	r0, #2
 80099a8:	4770      	bx	lr
 80099aa:	b298      	uxth	r0, r3
 80099ac:	b9a8      	cbnz	r0, 80099da <__lo0bits+0x52>
 80099ae:	0c1b      	lsrs	r3, r3, #16
 80099b0:	2010      	movs	r0, #16
 80099b2:	b2da      	uxtb	r2, r3
 80099b4:	b90a      	cbnz	r2, 80099ba <__lo0bits+0x32>
 80099b6:	3008      	adds	r0, #8
 80099b8:	0a1b      	lsrs	r3, r3, #8
 80099ba:	071a      	lsls	r2, r3, #28
 80099bc:	bf04      	itt	eq
 80099be:	091b      	lsreq	r3, r3, #4
 80099c0:	3004      	addeq	r0, #4
 80099c2:	079a      	lsls	r2, r3, #30
 80099c4:	bf04      	itt	eq
 80099c6:	089b      	lsreq	r3, r3, #2
 80099c8:	3002      	addeq	r0, #2
 80099ca:	07da      	lsls	r2, r3, #31
 80099cc:	d403      	bmi.n	80099d6 <__lo0bits+0x4e>
 80099ce:	085b      	lsrs	r3, r3, #1
 80099d0:	f100 0001 	add.w	r0, r0, #1
 80099d4:	d005      	beq.n	80099e2 <__lo0bits+0x5a>
 80099d6:	600b      	str	r3, [r1, #0]
 80099d8:	4770      	bx	lr
 80099da:	4610      	mov	r0, r2
 80099dc:	e7e9      	b.n	80099b2 <__lo0bits+0x2a>
 80099de:	2000      	movs	r0, #0
 80099e0:	4770      	bx	lr
 80099e2:	2020      	movs	r0, #32
 80099e4:	4770      	bx	lr
	...

080099e8 <__i2b>:
 80099e8:	b510      	push	{r4, lr}
 80099ea:	460c      	mov	r4, r1
 80099ec:	2101      	movs	r1, #1
 80099ee:	f7ff ff03 	bl	80097f8 <_Balloc>
 80099f2:	4602      	mov	r2, r0
 80099f4:	b928      	cbnz	r0, 8009a02 <__i2b+0x1a>
 80099f6:	4b05      	ldr	r3, [pc, #20]	; (8009a0c <__i2b+0x24>)
 80099f8:	4805      	ldr	r0, [pc, #20]	; (8009a10 <__i2b+0x28>)
 80099fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80099fe:	f000 fbf1 	bl	800a1e4 <__assert_func>
 8009a02:	2301      	movs	r3, #1
 8009a04:	6144      	str	r4, [r0, #20]
 8009a06:	6103      	str	r3, [r0, #16]
 8009a08:	bd10      	pop	{r4, pc}
 8009a0a:	bf00      	nop
 8009a0c:	0800bc07 	.word	0x0800bc07
 8009a10:	0800bc18 	.word	0x0800bc18

08009a14 <__multiply>:
 8009a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a18:	4691      	mov	r9, r2
 8009a1a:	690a      	ldr	r2, [r1, #16]
 8009a1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	bfb8      	it	lt
 8009a24:	460b      	movlt	r3, r1
 8009a26:	460c      	mov	r4, r1
 8009a28:	bfbc      	itt	lt
 8009a2a:	464c      	movlt	r4, r9
 8009a2c:	4699      	movlt	r9, r3
 8009a2e:	6927      	ldr	r7, [r4, #16]
 8009a30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a34:	68a3      	ldr	r3, [r4, #8]
 8009a36:	6861      	ldr	r1, [r4, #4]
 8009a38:	eb07 060a 	add.w	r6, r7, sl
 8009a3c:	42b3      	cmp	r3, r6
 8009a3e:	b085      	sub	sp, #20
 8009a40:	bfb8      	it	lt
 8009a42:	3101      	addlt	r1, #1
 8009a44:	f7ff fed8 	bl	80097f8 <_Balloc>
 8009a48:	b930      	cbnz	r0, 8009a58 <__multiply+0x44>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	4b44      	ldr	r3, [pc, #272]	; (8009b60 <__multiply+0x14c>)
 8009a4e:	4845      	ldr	r0, [pc, #276]	; (8009b64 <__multiply+0x150>)
 8009a50:	f240 115d 	movw	r1, #349	; 0x15d
 8009a54:	f000 fbc6 	bl	800a1e4 <__assert_func>
 8009a58:	f100 0514 	add.w	r5, r0, #20
 8009a5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a60:	462b      	mov	r3, r5
 8009a62:	2200      	movs	r2, #0
 8009a64:	4543      	cmp	r3, r8
 8009a66:	d321      	bcc.n	8009aac <__multiply+0x98>
 8009a68:	f104 0314 	add.w	r3, r4, #20
 8009a6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009a70:	f109 0314 	add.w	r3, r9, #20
 8009a74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009a78:	9202      	str	r2, [sp, #8]
 8009a7a:	1b3a      	subs	r2, r7, r4
 8009a7c:	3a15      	subs	r2, #21
 8009a7e:	f022 0203 	bic.w	r2, r2, #3
 8009a82:	3204      	adds	r2, #4
 8009a84:	f104 0115 	add.w	r1, r4, #21
 8009a88:	428f      	cmp	r7, r1
 8009a8a:	bf38      	it	cc
 8009a8c:	2204      	movcc	r2, #4
 8009a8e:	9201      	str	r2, [sp, #4]
 8009a90:	9a02      	ldr	r2, [sp, #8]
 8009a92:	9303      	str	r3, [sp, #12]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d80c      	bhi.n	8009ab2 <__multiply+0x9e>
 8009a98:	2e00      	cmp	r6, #0
 8009a9a:	dd03      	ble.n	8009aa4 <__multiply+0x90>
 8009a9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d05a      	beq.n	8009b5a <__multiply+0x146>
 8009aa4:	6106      	str	r6, [r0, #16]
 8009aa6:	b005      	add	sp, #20
 8009aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aac:	f843 2b04 	str.w	r2, [r3], #4
 8009ab0:	e7d8      	b.n	8009a64 <__multiply+0x50>
 8009ab2:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ab6:	f1ba 0f00 	cmp.w	sl, #0
 8009aba:	d024      	beq.n	8009b06 <__multiply+0xf2>
 8009abc:	f104 0e14 	add.w	lr, r4, #20
 8009ac0:	46a9      	mov	r9, r5
 8009ac2:	f04f 0c00 	mov.w	ip, #0
 8009ac6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009aca:	f8d9 1000 	ldr.w	r1, [r9]
 8009ace:	fa1f fb82 	uxth.w	fp, r2
 8009ad2:	b289      	uxth	r1, r1
 8009ad4:	fb0a 110b 	mla	r1, sl, fp, r1
 8009ad8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009adc:	f8d9 2000 	ldr.w	r2, [r9]
 8009ae0:	4461      	add	r1, ip
 8009ae2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ae6:	fb0a c20b 	mla	r2, sl, fp, ip
 8009aea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009aee:	b289      	uxth	r1, r1
 8009af0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009af4:	4577      	cmp	r7, lr
 8009af6:	f849 1b04 	str.w	r1, [r9], #4
 8009afa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009afe:	d8e2      	bhi.n	8009ac6 <__multiply+0xb2>
 8009b00:	9a01      	ldr	r2, [sp, #4]
 8009b02:	f845 c002 	str.w	ip, [r5, r2]
 8009b06:	9a03      	ldr	r2, [sp, #12]
 8009b08:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b0c:	3304      	adds	r3, #4
 8009b0e:	f1b9 0f00 	cmp.w	r9, #0
 8009b12:	d020      	beq.n	8009b56 <__multiply+0x142>
 8009b14:	6829      	ldr	r1, [r5, #0]
 8009b16:	f104 0c14 	add.w	ip, r4, #20
 8009b1a:	46ae      	mov	lr, r5
 8009b1c:	f04f 0a00 	mov.w	sl, #0
 8009b20:	f8bc b000 	ldrh.w	fp, [ip]
 8009b24:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009b28:	fb09 220b 	mla	r2, r9, fp, r2
 8009b2c:	4492      	add	sl, r2
 8009b2e:	b289      	uxth	r1, r1
 8009b30:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009b34:	f84e 1b04 	str.w	r1, [lr], #4
 8009b38:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009b3c:	f8be 1000 	ldrh.w	r1, [lr]
 8009b40:	0c12      	lsrs	r2, r2, #16
 8009b42:	fb09 1102 	mla	r1, r9, r2, r1
 8009b46:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009b4a:	4567      	cmp	r7, ip
 8009b4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b50:	d8e6      	bhi.n	8009b20 <__multiply+0x10c>
 8009b52:	9a01      	ldr	r2, [sp, #4]
 8009b54:	50a9      	str	r1, [r5, r2]
 8009b56:	3504      	adds	r5, #4
 8009b58:	e79a      	b.n	8009a90 <__multiply+0x7c>
 8009b5a:	3e01      	subs	r6, #1
 8009b5c:	e79c      	b.n	8009a98 <__multiply+0x84>
 8009b5e:	bf00      	nop
 8009b60:	0800bc07 	.word	0x0800bc07
 8009b64:	0800bc18 	.word	0x0800bc18

08009b68 <__pow5mult>:
 8009b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b6c:	4615      	mov	r5, r2
 8009b6e:	f012 0203 	ands.w	r2, r2, #3
 8009b72:	4606      	mov	r6, r0
 8009b74:	460f      	mov	r7, r1
 8009b76:	d007      	beq.n	8009b88 <__pow5mult+0x20>
 8009b78:	4c25      	ldr	r4, [pc, #148]	; (8009c10 <__pow5mult+0xa8>)
 8009b7a:	3a01      	subs	r2, #1
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b82:	f7ff fe9b 	bl	80098bc <__multadd>
 8009b86:	4607      	mov	r7, r0
 8009b88:	10ad      	asrs	r5, r5, #2
 8009b8a:	d03d      	beq.n	8009c08 <__pow5mult+0xa0>
 8009b8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b8e:	b97c      	cbnz	r4, 8009bb0 <__pow5mult+0x48>
 8009b90:	2010      	movs	r0, #16
 8009b92:	f7fe fa07 	bl	8007fa4 <malloc>
 8009b96:	4602      	mov	r2, r0
 8009b98:	6270      	str	r0, [r6, #36]	; 0x24
 8009b9a:	b928      	cbnz	r0, 8009ba8 <__pow5mult+0x40>
 8009b9c:	4b1d      	ldr	r3, [pc, #116]	; (8009c14 <__pow5mult+0xac>)
 8009b9e:	481e      	ldr	r0, [pc, #120]	; (8009c18 <__pow5mult+0xb0>)
 8009ba0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009ba4:	f000 fb1e 	bl	800a1e4 <__assert_func>
 8009ba8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bac:	6004      	str	r4, [r0, #0]
 8009bae:	60c4      	str	r4, [r0, #12]
 8009bb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009bb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bb8:	b94c      	cbnz	r4, 8009bce <__pow5mult+0x66>
 8009bba:	f240 2171 	movw	r1, #625	; 0x271
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	f7ff ff12 	bl	80099e8 <__i2b>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bca:	4604      	mov	r4, r0
 8009bcc:	6003      	str	r3, [r0, #0]
 8009bce:	f04f 0900 	mov.w	r9, #0
 8009bd2:	07eb      	lsls	r3, r5, #31
 8009bd4:	d50a      	bpl.n	8009bec <__pow5mult+0x84>
 8009bd6:	4639      	mov	r1, r7
 8009bd8:	4622      	mov	r2, r4
 8009bda:	4630      	mov	r0, r6
 8009bdc:	f7ff ff1a 	bl	8009a14 <__multiply>
 8009be0:	4639      	mov	r1, r7
 8009be2:	4680      	mov	r8, r0
 8009be4:	4630      	mov	r0, r6
 8009be6:	f7ff fe47 	bl	8009878 <_Bfree>
 8009bea:	4647      	mov	r7, r8
 8009bec:	106d      	asrs	r5, r5, #1
 8009bee:	d00b      	beq.n	8009c08 <__pow5mult+0xa0>
 8009bf0:	6820      	ldr	r0, [r4, #0]
 8009bf2:	b938      	cbnz	r0, 8009c04 <__pow5mult+0x9c>
 8009bf4:	4622      	mov	r2, r4
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f7ff ff0b 	bl	8009a14 <__multiply>
 8009bfe:	6020      	str	r0, [r4, #0]
 8009c00:	f8c0 9000 	str.w	r9, [r0]
 8009c04:	4604      	mov	r4, r0
 8009c06:	e7e4      	b.n	8009bd2 <__pow5mult+0x6a>
 8009c08:	4638      	mov	r0, r7
 8009c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c0e:	bf00      	nop
 8009c10:	0800bd68 	.word	0x0800bd68
 8009c14:	0800bb95 	.word	0x0800bb95
 8009c18:	0800bc18 	.word	0x0800bc18

08009c1c <__lshift>:
 8009c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c20:	460c      	mov	r4, r1
 8009c22:	6849      	ldr	r1, [r1, #4]
 8009c24:	6923      	ldr	r3, [r4, #16]
 8009c26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c2a:	68a3      	ldr	r3, [r4, #8]
 8009c2c:	4607      	mov	r7, r0
 8009c2e:	4691      	mov	r9, r2
 8009c30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c34:	f108 0601 	add.w	r6, r8, #1
 8009c38:	42b3      	cmp	r3, r6
 8009c3a:	db0b      	blt.n	8009c54 <__lshift+0x38>
 8009c3c:	4638      	mov	r0, r7
 8009c3e:	f7ff fddb 	bl	80097f8 <_Balloc>
 8009c42:	4605      	mov	r5, r0
 8009c44:	b948      	cbnz	r0, 8009c5a <__lshift+0x3e>
 8009c46:	4602      	mov	r2, r0
 8009c48:	4b2a      	ldr	r3, [pc, #168]	; (8009cf4 <__lshift+0xd8>)
 8009c4a:	482b      	ldr	r0, [pc, #172]	; (8009cf8 <__lshift+0xdc>)
 8009c4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c50:	f000 fac8 	bl	800a1e4 <__assert_func>
 8009c54:	3101      	adds	r1, #1
 8009c56:	005b      	lsls	r3, r3, #1
 8009c58:	e7ee      	b.n	8009c38 <__lshift+0x1c>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	f100 0114 	add.w	r1, r0, #20
 8009c60:	f100 0210 	add.w	r2, r0, #16
 8009c64:	4618      	mov	r0, r3
 8009c66:	4553      	cmp	r3, sl
 8009c68:	db37      	blt.n	8009cda <__lshift+0xbe>
 8009c6a:	6920      	ldr	r0, [r4, #16]
 8009c6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c70:	f104 0314 	add.w	r3, r4, #20
 8009c74:	f019 091f 	ands.w	r9, r9, #31
 8009c78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009c80:	d02f      	beq.n	8009ce2 <__lshift+0xc6>
 8009c82:	f1c9 0e20 	rsb	lr, r9, #32
 8009c86:	468a      	mov	sl, r1
 8009c88:	f04f 0c00 	mov.w	ip, #0
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	fa02 f209 	lsl.w	r2, r2, r9
 8009c92:	ea42 020c 	orr.w	r2, r2, ip
 8009c96:	f84a 2b04 	str.w	r2, [sl], #4
 8009c9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c9e:	4298      	cmp	r0, r3
 8009ca0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009ca4:	d8f2      	bhi.n	8009c8c <__lshift+0x70>
 8009ca6:	1b03      	subs	r3, r0, r4
 8009ca8:	3b15      	subs	r3, #21
 8009caa:	f023 0303 	bic.w	r3, r3, #3
 8009cae:	3304      	adds	r3, #4
 8009cb0:	f104 0215 	add.w	r2, r4, #21
 8009cb4:	4290      	cmp	r0, r2
 8009cb6:	bf38      	it	cc
 8009cb8:	2304      	movcc	r3, #4
 8009cba:	f841 c003 	str.w	ip, [r1, r3]
 8009cbe:	f1bc 0f00 	cmp.w	ip, #0
 8009cc2:	d001      	beq.n	8009cc8 <__lshift+0xac>
 8009cc4:	f108 0602 	add.w	r6, r8, #2
 8009cc8:	3e01      	subs	r6, #1
 8009cca:	4638      	mov	r0, r7
 8009ccc:	612e      	str	r6, [r5, #16]
 8009cce:	4621      	mov	r1, r4
 8009cd0:	f7ff fdd2 	bl	8009878 <_Bfree>
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cda:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cde:	3301      	adds	r3, #1
 8009ce0:	e7c1      	b.n	8009c66 <__lshift+0x4a>
 8009ce2:	3904      	subs	r1, #4
 8009ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ce8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cec:	4298      	cmp	r0, r3
 8009cee:	d8f9      	bhi.n	8009ce4 <__lshift+0xc8>
 8009cf0:	e7ea      	b.n	8009cc8 <__lshift+0xac>
 8009cf2:	bf00      	nop
 8009cf4:	0800bc07 	.word	0x0800bc07
 8009cf8:	0800bc18 	.word	0x0800bc18

08009cfc <__mcmp>:
 8009cfc:	b530      	push	{r4, r5, lr}
 8009cfe:	6902      	ldr	r2, [r0, #16]
 8009d00:	690c      	ldr	r4, [r1, #16]
 8009d02:	1b12      	subs	r2, r2, r4
 8009d04:	d10e      	bne.n	8009d24 <__mcmp+0x28>
 8009d06:	f100 0314 	add.w	r3, r0, #20
 8009d0a:	3114      	adds	r1, #20
 8009d0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009d10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009d14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009d18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009d1c:	42a5      	cmp	r5, r4
 8009d1e:	d003      	beq.n	8009d28 <__mcmp+0x2c>
 8009d20:	d305      	bcc.n	8009d2e <__mcmp+0x32>
 8009d22:	2201      	movs	r2, #1
 8009d24:	4610      	mov	r0, r2
 8009d26:	bd30      	pop	{r4, r5, pc}
 8009d28:	4283      	cmp	r3, r0
 8009d2a:	d3f3      	bcc.n	8009d14 <__mcmp+0x18>
 8009d2c:	e7fa      	b.n	8009d24 <__mcmp+0x28>
 8009d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d32:	e7f7      	b.n	8009d24 <__mcmp+0x28>

08009d34 <__mdiff>:
 8009d34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d38:	460c      	mov	r4, r1
 8009d3a:	4606      	mov	r6, r0
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	4620      	mov	r0, r4
 8009d40:	4690      	mov	r8, r2
 8009d42:	f7ff ffdb 	bl	8009cfc <__mcmp>
 8009d46:	1e05      	subs	r5, r0, #0
 8009d48:	d110      	bne.n	8009d6c <__mdiff+0x38>
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	f7ff fd53 	bl	80097f8 <_Balloc>
 8009d52:	b930      	cbnz	r0, 8009d62 <__mdiff+0x2e>
 8009d54:	4b3a      	ldr	r3, [pc, #232]	; (8009e40 <__mdiff+0x10c>)
 8009d56:	4602      	mov	r2, r0
 8009d58:	f240 2132 	movw	r1, #562	; 0x232
 8009d5c:	4839      	ldr	r0, [pc, #228]	; (8009e44 <__mdiff+0x110>)
 8009d5e:	f000 fa41 	bl	800a1e4 <__assert_func>
 8009d62:	2301      	movs	r3, #1
 8009d64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d6c:	bfa4      	itt	ge
 8009d6e:	4643      	movge	r3, r8
 8009d70:	46a0      	movge	r8, r4
 8009d72:	4630      	mov	r0, r6
 8009d74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009d78:	bfa6      	itte	ge
 8009d7a:	461c      	movge	r4, r3
 8009d7c:	2500      	movge	r5, #0
 8009d7e:	2501      	movlt	r5, #1
 8009d80:	f7ff fd3a 	bl	80097f8 <_Balloc>
 8009d84:	b920      	cbnz	r0, 8009d90 <__mdiff+0x5c>
 8009d86:	4b2e      	ldr	r3, [pc, #184]	; (8009e40 <__mdiff+0x10c>)
 8009d88:	4602      	mov	r2, r0
 8009d8a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d8e:	e7e5      	b.n	8009d5c <__mdiff+0x28>
 8009d90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009d94:	6926      	ldr	r6, [r4, #16]
 8009d96:	60c5      	str	r5, [r0, #12]
 8009d98:	f104 0914 	add.w	r9, r4, #20
 8009d9c:	f108 0514 	add.w	r5, r8, #20
 8009da0:	f100 0e14 	add.w	lr, r0, #20
 8009da4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009da8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009dac:	f108 0210 	add.w	r2, r8, #16
 8009db0:	46f2      	mov	sl, lr
 8009db2:	2100      	movs	r1, #0
 8009db4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009db8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009dbc:	fa1f f883 	uxth.w	r8, r3
 8009dc0:	fa11 f18b 	uxtah	r1, r1, fp
 8009dc4:	0c1b      	lsrs	r3, r3, #16
 8009dc6:	eba1 0808 	sub.w	r8, r1, r8
 8009dca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009dce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009dd2:	fa1f f888 	uxth.w	r8, r8
 8009dd6:	1419      	asrs	r1, r3, #16
 8009dd8:	454e      	cmp	r6, r9
 8009dda:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009dde:	f84a 3b04 	str.w	r3, [sl], #4
 8009de2:	d8e7      	bhi.n	8009db4 <__mdiff+0x80>
 8009de4:	1b33      	subs	r3, r6, r4
 8009de6:	3b15      	subs	r3, #21
 8009de8:	f023 0303 	bic.w	r3, r3, #3
 8009dec:	3304      	adds	r3, #4
 8009dee:	3415      	adds	r4, #21
 8009df0:	42a6      	cmp	r6, r4
 8009df2:	bf38      	it	cc
 8009df4:	2304      	movcc	r3, #4
 8009df6:	441d      	add	r5, r3
 8009df8:	4473      	add	r3, lr
 8009dfa:	469e      	mov	lr, r3
 8009dfc:	462e      	mov	r6, r5
 8009dfe:	4566      	cmp	r6, ip
 8009e00:	d30e      	bcc.n	8009e20 <__mdiff+0xec>
 8009e02:	f10c 0203 	add.w	r2, ip, #3
 8009e06:	1b52      	subs	r2, r2, r5
 8009e08:	f022 0203 	bic.w	r2, r2, #3
 8009e0c:	3d03      	subs	r5, #3
 8009e0e:	45ac      	cmp	ip, r5
 8009e10:	bf38      	it	cc
 8009e12:	2200      	movcc	r2, #0
 8009e14:	441a      	add	r2, r3
 8009e16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009e1a:	b17b      	cbz	r3, 8009e3c <__mdiff+0x108>
 8009e1c:	6107      	str	r7, [r0, #16]
 8009e1e:	e7a3      	b.n	8009d68 <__mdiff+0x34>
 8009e20:	f856 8b04 	ldr.w	r8, [r6], #4
 8009e24:	fa11 f288 	uxtah	r2, r1, r8
 8009e28:	1414      	asrs	r4, r2, #16
 8009e2a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009e2e:	b292      	uxth	r2, r2
 8009e30:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009e34:	f84e 2b04 	str.w	r2, [lr], #4
 8009e38:	1421      	asrs	r1, r4, #16
 8009e3a:	e7e0      	b.n	8009dfe <__mdiff+0xca>
 8009e3c:	3f01      	subs	r7, #1
 8009e3e:	e7ea      	b.n	8009e16 <__mdiff+0xe2>
 8009e40:	0800bc07 	.word	0x0800bc07
 8009e44:	0800bc18 	.word	0x0800bc18

08009e48 <__d2b>:
 8009e48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e4c:	4689      	mov	r9, r1
 8009e4e:	2101      	movs	r1, #1
 8009e50:	ec57 6b10 	vmov	r6, r7, d0
 8009e54:	4690      	mov	r8, r2
 8009e56:	f7ff fccf 	bl	80097f8 <_Balloc>
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	b930      	cbnz	r0, 8009e6c <__d2b+0x24>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	4b25      	ldr	r3, [pc, #148]	; (8009ef8 <__d2b+0xb0>)
 8009e62:	4826      	ldr	r0, [pc, #152]	; (8009efc <__d2b+0xb4>)
 8009e64:	f240 310a 	movw	r1, #778	; 0x30a
 8009e68:	f000 f9bc 	bl	800a1e4 <__assert_func>
 8009e6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009e70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e74:	bb35      	cbnz	r5, 8009ec4 <__d2b+0x7c>
 8009e76:	2e00      	cmp	r6, #0
 8009e78:	9301      	str	r3, [sp, #4]
 8009e7a:	d028      	beq.n	8009ece <__d2b+0x86>
 8009e7c:	4668      	mov	r0, sp
 8009e7e:	9600      	str	r6, [sp, #0]
 8009e80:	f7ff fd82 	bl	8009988 <__lo0bits>
 8009e84:	9900      	ldr	r1, [sp, #0]
 8009e86:	b300      	cbz	r0, 8009eca <__d2b+0x82>
 8009e88:	9a01      	ldr	r2, [sp, #4]
 8009e8a:	f1c0 0320 	rsb	r3, r0, #32
 8009e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e92:	430b      	orrs	r3, r1
 8009e94:	40c2      	lsrs	r2, r0
 8009e96:	6163      	str	r3, [r4, #20]
 8009e98:	9201      	str	r2, [sp, #4]
 8009e9a:	9b01      	ldr	r3, [sp, #4]
 8009e9c:	61a3      	str	r3, [r4, #24]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	bf14      	ite	ne
 8009ea2:	2202      	movne	r2, #2
 8009ea4:	2201      	moveq	r2, #1
 8009ea6:	6122      	str	r2, [r4, #16]
 8009ea8:	b1d5      	cbz	r5, 8009ee0 <__d2b+0x98>
 8009eaa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009eae:	4405      	add	r5, r0
 8009eb0:	f8c9 5000 	str.w	r5, [r9]
 8009eb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009eb8:	f8c8 0000 	str.w	r0, [r8]
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	b003      	add	sp, #12
 8009ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ec4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ec8:	e7d5      	b.n	8009e76 <__d2b+0x2e>
 8009eca:	6161      	str	r1, [r4, #20]
 8009ecc:	e7e5      	b.n	8009e9a <__d2b+0x52>
 8009ece:	a801      	add	r0, sp, #4
 8009ed0:	f7ff fd5a 	bl	8009988 <__lo0bits>
 8009ed4:	9b01      	ldr	r3, [sp, #4]
 8009ed6:	6163      	str	r3, [r4, #20]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	6122      	str	r2, [r4, #16]
 8009edc:	3020      	adds	r0, #32
 8009ede:	e7e3      	b.n	8009ea8 <__d2b+0x60>
 8009ee0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ee4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ee8:	f8c9 0000 	str.w	r0, [r9]
 8009eec:	6918      	ldr	r0, [r3, #16]
 8009eee:	f7ff fd2b 	bl	8009948 <__hi0bits>
 8009ef2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ef6:	e7df      	b.n	8009eb8 <__d2b+0x70>
 8009ef8:	0800bc07 	.word	0x0800bc07
 8009efc:	0800bc18 	.word	0x0800bc18

08009f00 <_calloc_r>:
 8009f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f02:	fba1 2402 	umull	r2, r4, r1, r2
 8009f06:	b94c      	cbnz	r4, 8009f1c <_calloc_r+0x1c>
 8009f08:	4611      	mov	r1, r2
 8009f0a:	9201      	str	r2, [sp, #4]
 8009f0c:	f7fe f8ce 	bl	80080ac <_malloc_r>
 8009f10:	9a01      	ldr	r2, [sp, #4]
 8009f12:	4605      	mov	r5, r0
 8009f14:	b930      	cbnz	r0, 8009f24 <_calloc_r+0x24>
 8009f16:	4628      	mov	r0, r5
 8009f18:	b003      	add	sp, #12
 8009f1a:	bd30      	pop	{r4, r5, pc}
 8009f1c:	220c      	movs	r2, #12
 8009f1e:	6002      	str	r2, [r0, #0]
 8009f20:	2500      	movs	r5, #0
 8009f22:	e7f8      	b.n	8009f16 <_calloc_r+0x16>
 8009f24:	4621      	mov	r1, r4
 8009f26:	f7fe f84d 	bl	8007fc4 <memset>
 8009f2a:	e7f4      	b.n	8009f16 <_calloc_r+0x16>

08009f2c <__ssputs_r>:
 8009f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f30:	688e      	ldr	r6, [r1, #8]
 8009f32:	429e      	cmp	r6, r3
 8009f34:	4682      	mov	sl, r0
 8009f36:	460c      	mov	r4, r1
 8009f38:	4690      	mov	r8, r2
 8009f3a:	461f      	mov	r7, r3
 8009f3c:	d838      	bhi.n	8009fb0 <__ssputs_r+0x84>
 8009f3e:	898a      	ldrh	r2, [r1, #12]
 8009f40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f44:	d032      	beq.n	8009fac <__ssputs_r+0x80>
 8009f46:	6825      	ldr	r5, [r4, #0]
 8009f48:	6909      	ldr	r1, [r1, #16]
 8009f4a:	eba5 0901 	sub.w	r9, r5, r1
 8009f4e:	6965      	ldr	r5, [r4, #20]
 8009f50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f58:	3301      	adds	r3, #1
 8009f5a:	444b      	add	r3, r9
 8009f5c:	106d      	asrs	r5, r5, #1
 8009f5e:	429d      	cmp	r5, r3
 8009f60:	bf38      	it	cc
 8009f62:	461d      	movcc	r5, r3
 8009f64:	0553      	lsls	r3, r2, #21
 8009f66:	d531      	bpl.n	8009fcc <__ssputs_r+0xa0>
 8009f68:	4629      	mov	r1, r5
 8009f6a:	f7fe f89f 	bl	80080ac <_malloc_r>
 8009f6e:	4606      	mov	r6, r0
 8009f70:	b950      	cbnz	r0, 8009f88 <__ssputs_r+0x5c>
 8009f72:	230c      	movs	r3, #12
 8009f74:	f8ca 3000 	str.w	r3, [sl]
 8009f78:	89a3      	ldrh	r3, [r4, #12]
 8009f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f7e:	81a3      	strh	r3, [r4, #12]
 8009f80:	f04f 30ff 	mov.w	r0, #4294967295
 8009f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f88:	6921      	ldr	r1, [r4, #16]
 8009f8a:	464a      	mov	r2, r9
 8009f8c:	f7ff fc1a 	bl	80097c4 <memcpy>
 8009f90:	89a3      	ldrh	r3, [r4, #12]
 8009f92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f9a:	81a3      	strh	r3, [r4, #12]
 8009f9c:	6126      	str	r6, [r4, #16]
 8009f9e:	6165      	str	r5, [r4, #20]
 8009fa0:	444e      	add	r6, r9
 8009fa2:	eba5 0509 	sub.w	r5, r5, r9
 8009fa6:	6026      	str	r6, [r4, #0]
 8009fa8:	60a5      	str	r5, [r4, #8]
 8009faa:	463e      	mov	r6, r7
 8009fac:	42be      	cmp	r6, r7
 8009fae:	d900      	bls.n	8009fb2 <__ssputs_r+0x86>
 8009fb0:	463e      	mov	r6, r7
 8009fb2:	6820      	ldr	r0, [r4, #0]
 8009fb4:	4632      	mov	r2, r6
 8009fb6:	4641      	mov	r1, r8
 8009fb8:	f000 f959 	bl	800a26e <memmove>
 8009fbc:	68a3      	ldr	r3, [r4, #8]
 8009fbe:	1b9b      	subs	r3, r3, r6
 8009fc0:	60a3      	str	r3, [r4, #8]
 8009fc2:	6823      	ldr	r3, [r4, #0]
 8009fc4:	4433      	add	r3, r6
 8009fc6:	6023      	str	r3, [r4, #0]
 8009fc8:	2000      	movs	r0, #0
 8009fca:	e7db      	b.n	8009f84 <__ssputs_r+0x58>
 8009fcc:	462a      	mov	r2, r5
 8009fce:	f000 f968 	bl	800a2a2 <_realloc_r>
 8009fd2:	4606      	mov	r6, r0
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	d1e1      	bne.n	8009f9c <__ssputs_r+0x70>
 8009fd8:	6921      	ldr	r1, [r4, #16]
 8009fda:	4650      	mov	r0, sl
 8009fdc:	f7fd fffa 	bl	8007fd4 <_free_r>
 8009fe0:	e7c7      	b.n	8009f72 <__ssputs_r+0x46>
	...

08009fe4 <_svfiprintf_r>:
 8009fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe8:	4698      	mov	r8, r3
 8009fea:	898b      	ldrh	r3, [r1, #12]
 8009fec:	061b      	lsls	r3, r3, #24
 8009fee:	b09d      	sub	sp, #116	; 0x74
 8009ff0:	4607      	mov	r7, r0
 8009ff2:	460d      	mov	r5, r1
 8009ff4:	4614      	mov	r4, r2
 8009ff6:	d50e      	bpl.n	800a016 <_svfiprintf_r+0x32>
 8009ff8:	690b      	ldr	r3, [r1, #16]
 8009ffa:	b963      	cbnz	r3, 800a016 <_svfiprintf_r+0x32>
 8009ffc:	2140      	movs	r1, #64	; 0x40
 8009ffe:	f7fe f855 	bl	80080ac <_malloc_r>
 800a002:	6028      	str	r0, [r5, #0]
 800a004:	6128      	str	r0, [r5, #16]
 800a006:	b920      	cbnz	r0, 800a012 <_svfiprintf_r+0x2e>
 800a008:	230c      	movs	r3, #12
 800a00a:	603b      	str	r3, [r7, #0]
 800a00c:	f04f 30ff 	mov.w	r0, #4294967295
 800a010:	e0d1      	b.n	800a1b6 <_svfiprintf_r+0x1d2>
 800a012:	2340      	movs	r3, #64	; 0x40
 800a014:	616b      	str	r3, [r5, #20]
 800a016:	2300      	movs	r3, #0
 800a018:	9309      	str	r3, [sp, #36]	; 0x24
 800a01a:	2320      	movs	r3, #32
 800a01c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a020:	f8cd 800c 	str.w	r8, [sp, #12]
 800a024:	2330      	movs	r3, #48	; 0x30
 800a026:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a1d0 <_svfiprintf_r+0x1ec>
 800a02a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a02e:	f04f 0901 	mov.w	r9, #1
 800a032:	4623      	mov	r3, r4
 800a034:	469a      	mov	sl, r3
 800a036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a03a:	b10a      	cbz	r2, 800a040 <_svfiprintf_r+0x5c>
 800a03c:	2a25      	cmp	r2, #37	; 0x25
 800a03e:	d1f9      	bne.n	800a034 <_svfiprintf_r+0x50>
 800a040:	ebba 0b04 	subs.w	fp, sl, r4
 800a044:	d00b      	beq.n	800a05e <_svfiprintf_r+0x7a>
 800a046:	465b      	mov	r3, fp
 800a048:	4622      	mov	r2, r4
 800a04a:	4629      	mov	r1, r5
 800a04c:	4638      	mov	r0, r7
 800a04e:	f7ff ff6d 	bl	8009f2c <__ssputs_r>
 800a052:	3001      	adds	r0, #1
 800a054:	f000 80aa 	beq.w	800a1ac <_svfiprintf_r+0x1c8>
 800a058:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a05a:	445a      	add	r2, fp
 800a05c:	9209      	str	r2, [sp, #36]	; 0x24
 800a05e:	f89a 3000 	ldrb.w	r3, [sl]
 800a062:	2b00      	cmp	r3, #0
 800a064:	f000 80a2 	beq.w	800a1ac <_svfiprintf_r+0x1c8>
 800a068:	2300      	movs	r3, #0
 800a06a:	f04f 32ff 	mov.w	r2, #4294967295
 800a06e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a072:	f10a 0a01 	add.w	sl, sl, #1
 800a076:	9304      	str	r3, [sp, #16]
 800a078:	9307      	str	r3, [sp, #28]
 800a07a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a07e:	931a      	str	r3, [sp, #104]	; 0x68
 800a080:	4654      	mov	r4, sl
 800a082:	2205      	movs	r2, #5
 800a084:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a088:	4851      	ldr	r0, [pc, #324]	; (800a1d0 <_svfiprintf_r+0x1ec>)
 800a08a:	f7f6 f8b1 	bl	80001f0 <memchr>
 800a08e:	9a04      	ldr	r2, [sp, #16]
 800a090:	b9d8      	cbnz	r0, 800a0ca <_svfiprintf_r+0xe6>
 800a092:	06d0      	lsls	r0, r2, #27
 800a094:	bf44      	itt	mi
 800a096:	2320      	movmi	r3, #32
 800a098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a09c:	0711      	lsls	r1, r2, #28
 800a09e:	bf44      	itt	mi
 800a0a0:	232b      	movmi	r3, #43	; 0x2b
 800a0a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0a6:	f89a 3000 	ldrb.w	r3, [sl]
 800a0aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ac:	d015      	beq.n	800a0da <_svfiprintf_r+0xf6>
 800a0ae:	9a07      	ldr	r2, [sp, #28]
 800a0b0:	4654      	mov	r4, sl
 800a0b2:	2000      	movs	r0, #0
 800a0b4:	f04f 0c0a 	mov.w	ip, #10
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0be:	3b30      	subs	r3, #48	; 0x30
 800a0c0:	2b09      	cmp	r3, #9
 800a0c2:	d94e      	bls.n	800a162 <_svfiprintf_r+0x17e>
 800a0c4:	b1b0      	cbz	r0, 800a0f4 <_svfiprintf_r+0x110>
 800a0c6:	9207      	str	r2, [sp, #28]
 800a0c8:	e014      	b.n	800a0f4 <_svfiprintf_r+0x110>
 800a0ca:	eba0 0308 	sub.w	r3, r0, r8
 800a0ce:	fa09 f303 	lsl.w	r3, r9, r3
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	9304      	str	r3, [sp, #16]
 800a0d6:	46a2      	mov	sl, r4
 800a0d8:	e7d2      	b.n	800a080 <_svfiprintf_r+0x9c>
 800a0da:	9b03      	ldr	r3, [sp, #12]
 800a0dc:	1d19      	adds	r1, r3, #4
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	9103      	str	r1, [sp, #12]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	bfbb      	ittet	lt
 800a0e6:	425b      	neglt	r3, r3
 800a0e8:	f042 0202 	orrlt.w	r2, r2, #2
 800a0ec:	9307      	strge	r3, [sp, #28]
 800a0ee:	9307      	strlt	r3, [sp, #28]
 800a0f0:	bfb8      	it	lt
 800a0f2:	9204      	strlt	r2, [sp, #16]
 800a0f4:	7823      	ldrb	r3, [r4, #0]
 800a0f6:	2b2e      	cmp	r3, #46	; 0x2e
 800a0f8:	d10c      	bne.n	800a114 <_svfiprintf_r+0x130>
 800a0fa:	7863      	ldrb	r3, [r4, #1]
 800a0fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a0fe:	d135      	bne.n	800a16c <_svfiprintf_r+0x188>
 800a100:	9b03      	ldr	r3, [sp, #12]
 800a102:	1d1a      	adds	r2, r3, #4
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	9203      	str	r2, [sp, #12]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	bfb8      	it	lt
 800a10c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a110:	3402      	adds	r4, #2
 800a112:	9305      	str	r3, [sp, #20]
 800a114:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a1e0 <_svfiprintf_r+0x1fc>
 800a118:	7821      	ldrb	r1, [r4, #0]
 800a11a:	2203      	movs	r2, #3
 800a11c:	4650      	mov	r0, sl
 800a11e:	f7f6 f867 	bl	80001f0 <memchr>
 800a122:	b140      	cbz	r0, 800a136 <_svfiprintf_r+0x152>
 800a124:	2340      	movs	r3, #64	; 0x40
 800a126:	eba0 000a 	sub.w	r0, r0, sl
 800a12a:	fa03 f000 	lsl.w	r0, r3, r0
 800a12e:	9b04      	ldr	r3, [sp, #16]
 800a130:	4303      	orrs	r3, r0
 800a132:	3401      	adds	r4, #1
 800a134:	9304      	str	r3, [sp, #16]
 800a136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a13a:	4826      	ldr	r0, [pc, #152]	; (800a1d4 <_svfiprintf_r+0x1f0>)
 800a13c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a140:	2206      	movs	r2, #6
 800a142:	f7f6 f855 	bl	80001f0 <memchr>
 800a146:	2800      	cmp	r0, #0
 800a148:	d038      	beq.n	800a1bc <_svfiprintf_r+0x1d8>
 800a14a:	4b23      	ldr	r3, [pc, #140]	; (800a1d8 <_svfiprintf_r+0x1f4>)
 800a14c:	bb1b      	cbnz	r3, 800a196 <_svfiprintf_r+0x1b2>
 800a14e:	9b03      	ldr	r3, [sp, #12]
 800a150:	3307      	adds	r3, #7
 800a152:	f023 0307 	bic.w	r3, r3, #7
 800a156:	3308      	adds	r3, #8
 800a158:	9303      	str	r3, [sp, #12]
 800a15a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a15c:	4433      	add	r3, r6
 800a15e:	9309      	str	r3, [sp, #36]	; 0x24
 800a160:	e767      	b.n	800a032 <_svfiprintf_r+0x4e>
 800a162:	fb0c 3202 	mla	r2, ip, r2, r3
 800a166:	460c      	mov	r4, r1
 800a168:	2001      	movs	r0, #1
 800a16a:	e7a5      	b.n	800a0b8 <_svfiprintf_r+0xd4>
 800a16c:	2300      	movs	r3, #0
 800a16e:	3401      	adds	r4, #1
 800a170:	9305      	str	r3, [sp, #20]
 800a172:	4619      	mov	r1, r3
 800a174:	f04f 0c0a 	mov.w	ip, #10
 800a178:	4620      	mov	r0, r4
 800a17a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a17e:	3a30      	subs	r2, #48	; 0x30
 800a180:	2a09      	cmp	r2, #9
 800a182:	d903      	bls.n	800a18c <_svfiprintf_r+0x1a8>
 800a184:	2b00      	cmp	r3, #0
 800a186:	d0c5      	beq.n	800a114 <_svfiprintf_r+0x130>
 800a188:	9105      	str	r1, [sp, #20]
 800a18a:	e7c3      	b.n	800a114 <_svfiprintf_r+0x130>
 800a18c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a190:	4604      	mov	r4, r0
 800a192:	2301      	movs	r3, #1
 800a194:	e7f0      	b.n	800a178 <_svfiprintf_r+0x194>
 800a196:	ab03      	add	r3, sp, #12
 800a198:	9300      	str	r3, [sp, #0]
 800a19a:	462a      	mov	r2, r5
 800a19c:	4b0f      	ldr	r3, [pc, #60]	; (800a1dc <_svfiprintf_r+0x1f8>)
 800a19e:	a904      	add	r1, sp, #16
 800a1a0:	4638      	mov	r0, r7
 800a1a2:	f7fe f897 	bl	80082d4 <_printf_float>
 800a1a6:	1c42      	adds	r2, r0, #1
 800a1a8:	4606      	mov	r6, r0
 800a1aa:	d1d6      	bne.n	800a15a <_svfiprintf_r+0x176>
 800a1ac:	89ab      	ldrh	r3, [r5, #12]
 800a1ae:	065b      	lsls	r3, r3, #25
 800a1b0:	f53f af2c 	bmi.w	800a00c <_svfiprintf_r+0x28>
 800a1b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1b6:	b01d      	add	sp, #116	; 0x74
 800a1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1bc:	ab03      	add	r3, sp, #12
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	462a      	mov	r2, r5
 800a1c2:	4b06      	ldr	r3, [pc, #24]	; (800a1dc <_svfiprintf_r+0x1f8>)
 800a1c4:	a904      	add	r1, sp, #16
 800a1c6:	4638      	mov	r0, r7
 800a1c8:	f7fe fb28 	bl	800881c <_printf_i>
 800a1cc:	e7eb      	b.n	800a1a6 <_svfiprintf_r+0x1c2>
 800a1ce:	bf00      	nop
 800a1d0:	0800bd74 	.word	0x0800bd74
 800a1d4:	0800bd7e 	.word	0x0800bd7e
 800a1d8:	080082d5 	.word	0x080082d5
 800a1dc:	08009f2d 	.word	0x08009f2d
 800a1e0:	0800bd7a 	.word	0x0800bd7a

0800a1e4 <__assert_func>:
 800a1e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1e6:	4614      	mov	r4, r2
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	4b09      	ldr	r3, [pc, #36]	; (800a210 <__assert_func+0x2c>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4605      	mov	r5, r0
 800a1f0:	68d8      	ldr	r0, [r3, #12]
 800a1f2:	b14c      	cbz	r4, 800a208 <__assert_func+0x24>
 800a1f4:	4b07      	ldr	r3, [pc, #28]	; (800a214 <__assert_func+0x30>)
 800a1f6:	9100      	str	r1, [sp, #0]
 800a1f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1fc:	4906      	ldr	r1, [pc, #24]	; (800a218 <__assert_func+0x34>)
 800a1fe:	462b      	mov	r3, r5
 800a200:	f000 f80e 	bl	800a220 <fiprintf>
 800a204:	f000 faa4 	bl	800a750 <abort>
 800a208:	4b04      	ldr	r3, [pc, #16]	; (800a21c <__assert_func+0x38>)
 800a20a:	461c      	mov	r4, r3
 800a20c:	e7f3      	b.n	800a1f6 <__assert_func+0x12>
 800a20e:	bf00      	nop
 800a210:	20000014 	.word	0x20000014
 800a214:	0800bd85 	.word	0x0800bd85
 800a218:	0800bd92 	.word	0x0800bd92
 800a21c:	0800bdc0 	.word	0x0800bdc0

0800a220 <fiprintf>:
 800a220:	b40e      	push	{r1, r2, r3}
 800a222:	b503      	push	{r0, r1, lr}
 800a224:	4601      	mov	r1, r0
 800a226:	ab03      	add	r3, sp, #12
 800a228:	4805      	ldr	r0, [pc, #20]	; (800a240 <fiprintf+0x20>)
 800a22a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a22e:	6800      	ldr	r0, [r0, #0]
 800a230:	9301      	str	r3, [sp, #4]
 800a232:	f000 f88f 	bl	800a354 <_vfiprintf_r>
 800a236:	b002      	add	sp, #8
 800a238:	f85d eb04 	ldr.w	lr, [sp], #4
 800a23c:	b003      	add	sp, #12
 800a23e:	4770      	bx	lr
 800a240:	20000014 	.word	0x20000014

0800a244 <__retarget_lock_init_recursive>:
 800a244:	4770      	bx	lr

0800a246 <__retarget_lock_acquire_recursive>:
 800a246:	4770      	bx	lr

0800a248 <__retarget_lock_release_recursive>:
 800a248:	4770      	bx	lr

0800a24a <__ascii_mbtowc>:
 800a24a:	b082      	sub	sp, #8
 800a24c:	b901      	cbnz	r1, 800a250 <__ascii_mbtowc+0x6>
 800a24e:	a901      	add	r1, sp, #4
 800a250:	b142      	cbz	r2, 800a264 <__ascii_mbtowc+0x1a>
 800a252:	b14b      	cbz	r3, 800a268 <__ascii_mbtowc+0x1e>
 800a254:	7813      	ldrb	r3, [r2, #0]
 800a256:	600b      	str	r3, [r1, #0]
 800a258:	7812      	ldrb	r2, [r2, #0]
 800a25a:	1e10      	subs	r0, r2, #0
 800a25c:	bf18      	it	ne
 800a25e:	2001      	movne	r0, #1
 800a260:	b002      	add	sp, #8
 800a262:	4770      	bx	lr
 800a264:	4610      	mov	r0, r2
 800a266:	e7fb      	b.n	800a260 <__ascii_mbtowc+0x16>
 800a268:	f06f 0001 	mvn.w	r0, #1
 800a26c:	e7f8      	b.n	800a260 <__ascii_mbtowc+0x16>

0800a26e <memmove>:
 800a26e:	4288      	cmp	r0, r1
 800a270:	b510      	push	{r4, lr}
 800a272:	eb01 0402 	add.w	r4, r1, r2
 800a276:	d902      	bls.n	800a27e <memmove+0x10>
 800a278:	4284      	cmp	r4, r0
 800a27a:	4623      	mov	r3, r4
 800a27c:	d807      	bhi.n	800a28e <memmove+0x20>
 800a27e:	1e43      	subs	r3, r0, #1
 800a280:	42a1      	cmp	r1, r4
 800a282:	d008      	beq.n	800a296 <memmove+0x28>
 800a284:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a288:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a28c:	e7f8      	b.n	800a280 <memmove+0x12>
 800a28e:	4402      	add	r2, r0
 800a290:	4601      	mov	r1, r0
 800a292:	428a      	cmp	r2, r1
 800a294:	d100      	bne.n	800a298 <memmove+0x2a>
 800a296:	bd10      	pop	{r4, pc}
 800a298:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a29c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2a0:	e7f7      	b.n	800a292 <memmove+0x24>

0800a2a2 <_realloc_r>:
 800a2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a6:	4680      	mov	r8, r0
 800a2a8:	4614      	mov	r4, r2
 800a2aa:	460e      	mov	r6, r1
 800a2ac:	b921      	cbnz	r1, 800a2b8 <_realloc_r+0x16>
 800a2ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	f7fd befa 	b.w	80080ac <_malloc_r>
 800a2b8:	b92a      	cbnz	r2, 800a2c6 <_realloc_r+0x24>
 800a2ba:	f7fd fe8b 	bl	8007fd4 <_free_r>
 800a2be:	4625      	mov	r5, r4
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2c6:	f000 fc67 	bl	800ab98 <_malloc_usable_size_r>
 800a2ca:	4284      	cmp	r4, r0
 800a2cc:	4607      	mov	r7, r0
 800a2ce:	d802      	bhi.n	800a2d6 <_realloc_r+0x34>
 800a2d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2d4:	d812      	bhi.n	800a2fc <_realloc_r+0x5a>
 800a2d6:	4621      	mov	r1, r4
 800a2d8:	4640      	mov	r0, r8
 800a2da:	f7fd fee7 	bl	80080ac <_malloc_r>
 800a2de:	4605      	mov	r5, r0
 800a2e0:	2800      	cmp	r0, #0
 800a2e2:	d0ed      	beq.n	800a2c0 <_realloc_r+0x1e>
 800a2e4:	42bc      	cmp	r4, r7
 800a2e6:	4622      	mov	r2, r4
 800a2e8:	4631      	mov	r1, r6
 800a2ea:	bf28      	it	cs
 800a2ec:	463a      	movcs	r2, r7
 800a2ee:	f7ff fa69 	bl	80097c4 <memcpy>
 800a2f2:	4631      	mov	r1, r6
 800a2f4:	4640      	mov	r0, r8
 800a2f6:	f7fd fe6d 	bl	8007fd4 <_free_r>
 800a2fa:	e7e1      	b.n	800a2c0 <_realloc_r+0x1e>
 800a2fc:	4635      	mov	r5, r6
 800a2fe:	e7df      	b.n	800a2c0 <_realloc_r+0x1e>

0800a300 <__sfputc_r>:
 800a300:	6893      	ldr	r3, [r2, #8]
 800a302:	3b01      	subs	r3, #1
 800a304:	2b00      	cmp	r3, #0
 800a306:	b410      	push	{r4}
 800a308:	6093      	str	r3, [r2, #8]
 800a30a:	da08      	bge.n	800a31e <__sfputc_r+0x1e>
 800a30c:	6994      	ldr	r4, [r2, #24]
 800a30e:	42a3      	cmp	r3, r4
 800a310:	db01      	blt.n	800a316 <__sfputc_r+0x16>
 800a312:	290a      	cmp	r1, #10
 800a314:	d103      	bne.n	800a31e <__sfputc_r+0x1e>
 800a316:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a31a:	f000 b94b 	b.w	800a5b4 <__swbuf_r>
 800a31e:	6813      	ldr	r3, [r2, #0]
 800a320:	1c58      	adds	r0, r3, #1
 800a322:	6010      	str	r0, [r2, #0]
 800a324:	7019      	strb	r1, [r3, #0]
 800a326:	4608      	mov	r0, r1
 800a328:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <__sfputs_r>:
 800a32e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a330:	4606      	mov	r6, r0
 800a332:	460f      	mov	r7, r1
 800a334:	4614      	mov	r4, r2
 800a336:	18d5      	adds	r5, r2, r3
 800a338:	42ac      	cmp	r4, r5
 800a33a:	d101      	bne.n	800a340 <__sfputs_r+0x12>
 800a33c:	2000      	movs	r0, #0
 800a33e:	e007      	b.n	800a350 <__sfputs_r+0x22>
 800a340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a344:	463a      	mov	r2, r7
 800a346:	4630      	mov	r0, r6
 800a348:	f7ff ffda 	bl	800a300 <__sfputc_r>
 800a34c:	1c43      	adds	r3, r0, #1
 800a34e:	d1f3      	bne.n	800a338 <__sfputs_r+0xa>
 800a350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a354 <_vfiprintf_r>:
 800a354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a358:	460d      	mov	r5, r1
 800a35a:	b09d      	sub	sp, #116	; 0x74
 800a35c:	4614      	mov	r4, r2
 800a35e:	4698      	mov	r8, r3
 800a360:	4606      	mov	r6, r0
 800a362:	b118      	cbz	r0, 800a36c <_vfiprintf_r+0x18>
 800a364:	6983      	ldr	r3, [r0, #24]
 800a366:	b90b      	cbnz	r3, 800a36c <_vfiprintf_r+0x18>
 800a368:	f000 fb14 	bl	800a994 <__sinit>
 800a36c:	4b89      	ldr	r3, [pc, #548]	; (800a594 <_vfiprintf_r+0x240>)
 800a36e:	429d      	cmp	r5, r3
 800a370:	d11b      	bne.n	800a3aa <_vfiprintf_r+0x56>
 800a372:	6875      	ldr	r5, [r6, #4]
 800a374:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a376:	07d9      	lsls	r1, r3, #31
 800a378:	d405      	bmi.n	800a386 <_vfiprintf_r+0x32>
 800a37a:	89ab      	ldrh	r3, [r5, #12]
 800a37c:	059a      	lsls	r2, r3, #22
 800a37e:	d402      	bmi.n	800a386 <_vfiprintf_r+0x32>
 800a380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a382:	f7ff ff60 	bl	800a246 <__retarget_lock_acquire_recursive>
 800a386:	89ab      	ldrh	r3, [r5, #12]
 800a388:	071b      	lsls	r3, r3, #28
 800a38a:	d501      	bpl.n	800a390 <_vfiprintf_r+0x3c>
 800a38c:	692b      	ldr	r3, [r5, #16]
 800a38e:	b9eb      	cbnz	r3, 800a3cc <_vfiprintf_r+0x78>
 800a390:	4629      	mov	r1, r5
 800a392:	4630      	mov	r0, r6
 800a394:	f000 f96e 	bl	800a674 <__swsetup_r>
 800a398:	b1c0      	cbz	r0, 800a3cc <_vfiprintf_r+0x78>
 800a39a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a39c:	07dc      	lsls	r4, r3, #31
 800a39e:	d50e      	bpl.n	800a3be <_vfiprintf_r+0x6a>
 800a3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a4:	b01d      	add	sp, #116	; 0x74
 800a3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3aa:	4b7b      	ldr	r3, [pc, #492]	; (800a598 <_vfiprintf_r+0x244>)
 800a3ac:	429d      	cmp	r5, r3
 800a3ae:	d101      	bne.n	800a3b4 <_vfiprintf_r+0x60>
 800a3b0:	68b5      	ldr	r5, [r6, #8]
 800a3b2:	e7df      	b.n	800a374 <_vfiprintf_r+0x20>
 800a3b4:	4b79      	ldr	r3, [pc, #484]	; (800a59c <_vfiprintf_r+0x248>)
 800a3b6:	429d      	cmp	r5, r3
 800a3b8:	bf08      	it	eq
 800a3ba:	68f5      	ldreq	r5, [r6, #12]
 800a3bc:	e7da      	b.n	800a374 <_vfiprintf_r+0x20>
 800a3be:	89ab      	ldrh	r3, [r5, #12]
 800a3c0:	0598      	lsls	r0, r3, #22
 800a3c2:	d4ed      	bmi.n	800a3a0 <_vfiprintf_r+0x4c>
 800a3c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3c6:	f7ff ff3f 	bl	800a248 <__retarget_lock_release_recursive>
 800a3ca:	e7e9      	b.n	800a3a0 <_vfiprintf_r+0x4c>
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a3d0:	2320      	movs	r3, #32
 800a3d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3da:	2330      	movs	r3, #48	; 0x30
 800a3dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a5a0 <_vfiprintf_r+0x24c>
 800a3e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3e4:	f04f 0901 	mov.w	r9, #1
 800a3e8:	4623      	mov	r3, r4
 800a3ea:	469a      	mov	sl, r3
 800a3ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3f0:	b10a      	cbz	r2, 800a3f6 <_vfiprintf_r+0xa2>
 800a3f2:	2a25      	cmp	r2, #37	; 0x25
 800a3f4:	d1f9      	bne.n	800a3ea <_vfiprintf_r+0x96>
 800a3f6:	ebba 0b04 	subs.w	fp, sl, r4
 800a3fa:	d00b      	beq.n	800a414 <_vfiprintf_r+0xc0>
 800a3fc:	465b      	mov	r3, fp
 800a3fe:	4622      	mov	r2, r4
 800a400:	4629      	mov	r1, r5
 800a402:	4630      	mov	r0, r6
 800a404:	f7ff ff93 	bl	800a32e <__sfputs_r>
 800a408:	3001      	adds	r0, #1
 800a40a:	f000 80aa 	beq.w	800a562 <_vfiprintf_r+0x20e>
 800a40e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a410:	445a      	add	r2, fp
 800a412:	9209      	str	r2, [sp, #36]	; 0x24
 800a414:	f89a 3000 	ldrb.w	r3, [sl]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f000 80a2 	beq.w	800a562 <_vfiprintf_r+0x20e>
 800a41e:	2300      	movs	r3, #0
 800a420:	f04f 32ff 	mov.w	r2, #4294967295
 800a424:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a428:	f10a 0a01 	add.w	sl, sl, #1
 800a42c:	9304      	str	r3, [sp, #16]
 800a42e:	9307      	str	r3, [sp, #28]
 800a430:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a434:	931a      	str	r3, [sp, #104]	; 0x68
 800a436:	4654      	mov	r4, sl
 800a438:	2205      	movs	r2, #5
 800a43a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a43e:	4858      	ldr	r0, [pc, #352]	; (800a5a0 <_vfiprintf_r+0x24c>)
 800a440:	f7f5 fed6 	bl	80001f0 <memchr>
 800a444:	9a04      	ldr	r2, [sp, #16]
 800a446:	b9d8      	cbnz	r0, 800a480 <_vfiprintf_r+0x12c>
 800a448:	06d1      	lsls	r1, r2, #27
 800a44a:	bf44      	itt	mi
 800a44c:	2320      	movmi	r3, #32
 800a44e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a452:	0713      	lsls	r3, r2, #28
 800a454:	bf44      	itt	mi
 800a456:	232b      	movmi	r3, #43	; 0x2b
 800a458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a45c:	f89a 3000 	ldrb.w	r3, [sl]
 800a460:	2b2a      	cmp	r3, #42	; 0x2a
 800a462:	d015      	beq.n	800a490 <_vfiprintf_r+0x13c>
 800a464:	9a07      	ldr	r2, [sp, #28]
 800a466:	4654      	mov	r4, sl
 800a468:	2000      	movs	r0, #0
 800a46a:	f04f 0c0a 	mov.w	ip, #10
 800a46e:	4621      	mov	r1, r4
 800a470:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a474:	3b30      	subs	r3, #48	; 0x30
 800a476:	2b09      	cmp	r3, #9
 800a478:	d94e      	bls.n	800a518 <_vfiprintf_r+0x1c4>
 800a47a:	b1b0      	cbz	r0, 800a4aa <_vfiprintf_r+0x156>
 800a47c:	9207      	str	r2, [sp, #28]
 800a47e:	e014      	b.n	800a4aa <_vfiprintf_r+0x156>
 800a480:	eba0 0308 	sub.w	r3, r0, r8
 800a484:	fa09 f303 	lsl.w	r3, r9, r3
 800a488:	4313      	orrs	r3, r2
 800a48a:	9304      	str	r3, [sp, #16]
 800a48c:	46a2      	mov	sl, r4
 800a48e:	e7d2      	b.n	800a436 <_vfiprintf_r+0xe2>
 800a490:	9b03      	ldr	r3, [sp, #12]
 800a492:	1d19      	adds	r1, r3, #4
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	9103      	str	r1, [sp, #12]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	bfbb      	ittet	lt
 800a49c:	425b      	neglt	r3, r3
 800a49e:	f042 0202 	orrlt.w	r2, r2, #2
 800a4a2:	9307      	strge	r3, [sp, #28]
 800a4a4:	9307      	strlt	r3, [sp, #28]
 800a4a6:	bfb8      	it	lt
 800a4a8:	9204      	strlt	r2, [sp, #16]
 800a4aa:	7823      	ldrb	r3, [r4, #0]
 800a4ac:	2b2e      	cmp	r3, #46	; 0x2e
 800a4ae:	d10c      	bne.n	800a4ca <_vfiprintf_r+0x176>
 800a4b0:	7863      	ldrb	r3, [r4, #1]
 800a4b2:	2b2a      	cmp	r3, #42	; 0x2a
 800a4b4:	d135      	bne.n	800a522 <_vfiprintf_r+0x1ce>
 800a4b6:	9b03      	ldr	r3, [sp, #12]
 800a4b8:	1d1a      	adds	r2, r3, #4
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	9203      	str	r2, [sp, #12]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	bfb8      	it	lt
 800a4c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4c6:	3402      	adds	r4, #2
 800a4c8:	9305      	str	r3, [sp, #20]
 800a4ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a5b0 <_vfiprintf_r+0x25c>
 800a4ce:	7821      	ldrb	r1, [r4, #0]
 800a4d0:	2203      	movs	r2, #3
 800a4d2:	4650      	mov	r0, sl
 800a4d4:	f7f5 fe8c 	bl	80001f0 <memchr>
 800a4d8:	b140      	cbz	r0, 800a4ec <_vfiprintf_r+0x198>
 800a4da:	2340      	movs	r3, #64	; 0x40
 800a4dc:	eba0 000a 	sub.w	r0, r0, sl
 800a4e0:	fa03 f000 	lsl.w	r0, r3, r0
 800a4e4:	9b04      	ldr	r3, [sp, #16]
 800a4e6:	4303      	orrs	r3, r0
 800a4e8:	3401      	adds	r4, #1
 800a4ea:	9304      	str	r3, [sp, #16]
 800a4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4f0:	482c      	ldr	r0, [pc, #176]	; (800a5a4 <_vfiprintf_r+0x250>)
 800a4f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4f6:	2206      	movs	r2, #6
 800a4f8:	f7f5 fe7a 	bl	80001f0 <memchr>
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d03f      	beq.n	800a580 <_vfiprintf_r+0x22c>
 800a500:	4b29      	ldr	r3, [pc, #164]	; (800a5a8 <_vfiprintf_r+0x254>)
 800a502:	bb1b      	cbnz	r3, 800a54c <_vfiprintf_r+0x1f8>
 800a504:	9b03      	ldr	r3, [sp, #12]
 800a506:	3307      	adds	r3, #7
 800a508:	f023 0307 	bic.w	r3, r3, #7
 800a50c:	3308      	adds	r3, #8
 800a50e:	9303      	str	r3, [sp, #12]
 800a510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a512:	443b      	add	r3, r7
 800a514:	9309      	str	r3, [sp, #36]	; 0x24
 800a516:	e767      	b.n	800a3e8 <_vfiprintf_r+0x94>
 800a518:	fb0c 3202 	mla	r2, ip, r2, r3
 800a51c:	460c      	mov	r4, r1
 800a51e:	2001      	movs	r0, #1
 800a520:	e7a5      	b.n	800a46e <_vfiprintf_r+0x11a>
 800a522:	2300      	movs	r3, #0
 800a524:	3401      	adds	r4, #1
 800a526:	9305      	str	r3, [sp, #20]
 800a528:	4619      	mov	r1, r3
 800a52a:	f04f 0c0a 	mov.w	ip, #10
 800a52e:	4620      	mov	r0, r4
 800a530:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a534:	3a30      	subs	r2, #48	; 0x30
 800a536:	2a09      	cmp	r2, #9
 800a538:	d903      	bls.n	800a542 <_vfiprintf_r+0x1ee>
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d0c5      	beq.n	800a4ca <_vfiprintf_r+0x176>
 800a53e:	9105      	str	r1, [sp, #20]
 800a540:	e7c3      	b.n	800a4ca <_vfiprintf_r+0x176>
 800a542:	fb0c 2101 	mla	r1, ip, r1, r2
 800a546:	4604      	mov	r4, r0
 800a548:	2301      	movs	r3, #1
 800a54a:	e7f0      	b.n	800a52e <_vfiprintf_r+0x1da>
 800a54c:	ab03      	add	r3, sp, #12
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	462a      	mov	r2, r5
 800a552:	4b16      	ldr	r3, [pc, #88]	; (800a5ac <_vfiprintf_r+0x258>)
 800a554:	a904      	add	r1, sp, #16
 800a556:	4630      	mov	r0, r6
 800a558:	f7fd febc 	bl	80082d4 <_printf_float>
 800a55c:	4607      	mov	r7, r0
 800a55e:	1c78      	adds	r0, r7, #1
 800a560:	d1d6      	bne.n	800a510 <_vfiprintf_r+0x1bc>
 800a562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a564:	07d9      	lsls	r1, r3, #31
 800a566:	d405      	bmi.n	800a574 <_vfiprintf_r+0x220>
 800a568:	89ab      	ldrh	r3, [r5, #12]
 800a56a:	059a      	lsls	r2, r3, #22
 800a56c:	d402      	bmi.n	800a574 <_vfiprintf_r+0x220>
 800a56e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a570:	f7ff fe6a 	bl	800a248 <__retarget_lock_release_recursive>
 800a574:	89ab      	ldrh	r3, [r5, #12]
 800a576:	065b      	lsls	r3, r3, #25
 800a578:	f53f af12 	bmi.w	800a3a0 <_vfiprintf_r+0x4c>
 800a57c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a57e:	e711      	b.n	800a3a4 <_vfiprintf_r+0x50>
 800a580:	ab03      	add	r3, sp, #12
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	462a      	mov	r2, r5
 800a586:	4b09      	ldr	r3, [pc, #36]	; (800a5ac <_vfiprintf_r+0x258>)
 800a588:	a904      	add	r1, sp, #16
 800a58a:	4630      	mov	r0, r6
 800a58c:	f7fe f946 	bl	800881c <_printf_i>
 800a590:	e7e4      	b.n	800a55c <_vfiprintf_r+0x208>
 800a592:	bf00      	nop
 800a594:	0800beec 	.word	0x0800beec
 800a598:	0800bf0c 	.word	0x0800bf0c
 800a59c:	0800becc 	.word	0x0800becc
 800a5a0:	0800bd74 	.word	0x0800bd74
 800a5a4:	0800bd7e 	.word	0x0800bd7e
 800a5a8:	080082d5 	.word	0x080082d5
 800a5ac:	0800a32f 	.word	0x0800a32f
 800a5b0:	0800bd7a 	.word	0x0800bd7a

0800a5b4 <__swbuf_r>:
 800a5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b6:	460e      	mov	r6, r1
 800a5b8:	4614      	mov	r4, r2
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	b118      	cbz	r0, 800a5c6 <__swbuf_r+0x12>
 800a5be:	6983      	ldr	r3, [r0, #24]
 800a5c0:	b90b      	cbnz	r3, 800a5c6 <__swbuf_r+0x12>
 800a5c2:	f000 f9e7 	bl	800a994 <__sinit>
 800a5c6:	4b21      	ldr	r3, [pc, #132]	; (800a64c <__swbuf_r+0x98>)
 800a5c8:	429c      	cmp	r4, r3
 800a5ca:	d12b      	bne.n	800a624 <__swbuf_r+0x70>
 800a5cc:	686c      	ldr	r4, [r5, #4]
 800a5ce:	69a3      	ldr	r3, [r4, #24]
 800a5d0:	60a3      	str	r3, [r4, #8]
 800a5d2:	89a3      	ldrh	r3, [r4, #12]
 800a5d4:	071a      	lsls	r2, r3, #28
 800a5d6:	d52f      	bpl.n	800a638 <__swbuf_r+0x84>
 800a5d8:	6923      	ldr	r3, [r4, #16]
 800a5da:	b36b      	cbz	r3, 800a638 <__swbuf_r+0x84>
 800a5dc:	6923      	ldr	r3, [r4, #16]
 800a5de:	6820      	ldr	r0, [r4, #0]
 800a5e0:	1ac0      	subs	r0, r0, r3
 800a5e2:	6963      	ldr	r3, [r4, #20]
 800a5e4:	b2f6      	uxtb	r6, r6
 800a5e6:	4283      	cmp	r3, r0
 800a5e8:	4637      	mov	r7, r6
 800a5ea:	dc04      	bgt.n	800a5f6 <__swbuf_r+0x42>
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	f000 f93c 	bl	800a86c <_fflush_r>
 800a5f4:	bb30      	cbnz	r0, 800a644 <__swbuf_r+0x90>
 800a5f6:	68a3      	ldr	r3, [r4, #8]
 800a5f8:	3b01      	subs	r3, #1
 800a5fa:	60a3      	str	r3, [r4, #8]
 800a5fc:	6823      	ldr	r3, [r4, #0]
 800a5fe:	1c5a      	adds	r2, r3, #1
 800a600:	6022      	str	r2, [r4, #0]
 800a602:	701e      	strb	r6, [r3, #0]
 800a604:	6963      	ldr	r3, [r4, #20]
 800a606:	3001      	adds	r0, #1
 800a608:	4283      	cmp	r3, r0
 800a60a:	d004      	beq.n	800a616 <__swbuf_r+0x62>
 800a60c:	89a3      	ldrh	r3, [r4, #12]
 800a60e:	07db      	lsls	r3, r3, #31
 800a610:	d506      	bpl.n	800a620 <__swbuf_r+0x6c>
 800a612:	2e0a      	cmp	r6, #10
 800a614:	d104      	bne.n	800a620 <__swbuf_r+0x6c>
 800a616:	4621      	mov	r1, r4
 800a618:	4628      	mov	r0, r5
 800a61a:	f000 f927 	bl	800a86c <_fflush_r>
 800a61e:	b988      	cbnz	r0, 800a644 <__swbuf_r+0x90>
 800a620:	4638      	mov	r0, r7
 800a622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a624:	4b0a      	ldr	r3, [pc, #40]	; (800a650 <__swbuf_r+0x9c>)
 800a626:	429c      	cmp	r4, r3
 800a628:	d101      	bne.n	800a62e <__swbuf_r+0x7a>
 800a62a:	68ac      	ldr	r4, [r5, #8]
 800a62c:	e7cf      	b.n	800a5ce <__swbuf_r+0x1a>
 800a62e:	4b09      	ldr	r3, [pc, #36]	; (800a654 <__swbuf_r+0xa0>)
 800a630:	429c      	cmp	r4, r3
 800a632:	bf08      	it	eq
 800a634:	68ec      	ldreq	r4, [r5, #12]
 800a636:	e7ca      	b.n	800a5ce <__swbuf_r+0x1a>
 800a638:	4621      	mov	r1, r4
 800a63a:	4628      	mov	r0, r5
 800a63c:	f000 f81a 	bl	800a674 <__swsetup_r>
 800a640:	2800      	cmp	r0, #0
 800a642:	d0cb      	beq.n	800a5dc <__swbuf_r+0x28>
 800a644:	f04f 37ff 	mov.w	r7, #4294967295
 800a648:	e7ea      	b.n	800a620 <__swbuf_r+0x6c>
 800a64a:	bf00      	nop
 800a64c:	0800beec 	.word	0x0800beec
 800a650:	0800bf0c 	.word	0x0800bf0c
 800a654:	0800becc 	.word	0x0800becc

0800a658 <__ascii_wctomb>:
 800a658:	b149      	cbz	r1, 800a66e <__ascii_wctomb+0x16>
 800a65a:	2aff      	cmp	r2, #255	; 0xff
 800a65c:	bf85      	ittet	hi
 800a65e:	238a      	movhi	r3, #138	; 0x8a
 800a660:	6003      	strhi	r3, [r0, #0]
 800a662:	700a      	strbls	r2, [r1, #0]
 800a664:	f04f 30ff 	movhi.w	r0, #4294967295
 800a668:	bf98      	it	ls
 800a66a:	2001      	movls	r0, #1
 800a66c:	4770      	bx	lr
 800a66e:	4608      	mov	r0, r1
 800a670:	4770      	bx	lr
	...

0800a674 <__swsetup_r>:
 800a674:	4b32      	ldr	r3, [pc, #200]	; (800a740 <__swsetup_r+0xcc>)
 800a676:	b570      	push	{r4, r5, r6, lr}
 800a678:	681d      	ldr	r5, [r3, #0]
 800a67a:	4606      	mov	r6, r0
 800a67c:	460c      	mov	r4, r1
 800a67e:	b125      	cbz	r5, 800a68a <__swsetup_r+0x16>
 800a680:	69ab      	ldr	r3, [r5, #24]
 800a682:	b913      	cbnz	r3, 800a68a <__swsetup_r+0x16>
 800a684:	4628      	mov	r0, r5
 800a686:	f000 f985 	bl	800a994 <__sinit>
 800a68a:	4b2e      	ldr	r3, [pc, #184]	; (800a744 <__swsetup_r+0xd0>)
 800a68c:	429c      	cmp	r4, r3
 800a68e:	d10f      	bne.n	800a6b0 <__swsetup_r+0x3c>
 800a690:	686c      	ldr	r4, [r5, #4]
 800a692:	89a3      	ldrh	r3, [r4, #12]
 800a694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a698:	0719      	lsls	r1, r3, #28
 800a69a:	d42c      	bmi.n	800a6f6 <__swsetup_r+0x82>
 800a69c:	06dd      	lsls	r5, r3, #27
 800a69e:	d411      	bmi.n	800a6c4 <__swsetup_r+0x50>
 800a6a0:	2309      	movs	r3, #9
 800a6a2:	6033      	str	r3, [r6, #0]
 800a6a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6a8:	81a3      	strh	r3, [r4, #12]
 800a6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ae:	e03e      	b.n	800a72e <__swsetup_r+0xba>
 800a6b0:	4b25      	ldr	r3, [pc, #148]	; (800a748 <__swsetup_r+0xd4>)
 800a6b2:	429c      	cmp	r4, r3
 800a6b4:	d101      	bne.n	800a6ba <__swsetup_r+0x46>
 800a6b6:	68ac      	ldr	r4, [r5, #8]
 800a6b8:	e7eb      	b.n	800a692 <__swsetup_r+0x1e>
 800a6ba:	4b24      	ldr	r3, [pc, #144]	; (800a74c <__swsetup_r+0xd8>)
 800a6bc:	429c      	cmp	r4, r3
 800a6be:	bf08      	it	eq
 800a6c0:	68ec      	ldreq	r4, [r5, #12]
 800a6c2:	e7e6      	b.n	800a692 <__swsetup_r+0x1e>
 800a6c4:	0758      	lsls	r0, r3, #29
 800a6c6:	d512      	bpl.n	800a6ee <__swsetup_r+0x7a>
 800a6c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6ca:	b141      	cbz	r1, 800a6de <__swsetup_r+0x6a>
 800a6cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6d0:	4299      	cmp	r1, r3
 800a6d2:	d002      	beq.n	800a6da <__swsetup_r+0x66>
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	f7fd fc7d 	bl	8007fd4 <_free_r>
 800a6da:	2300      	movs	r3, #0
 800a6dc:	6363      	str	r3, [r4, #52]	; 0x34
 800a6de:	89a3      	ldrh	r3, [r4, #12]
 800a6e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6e4:	81a3      	strh	r3, [r4, #12]
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	6063      	str	r3, [r4, #4]
 800a6ea:	6923      	ldr	r3, [r4, #16]
 800a6ec:	6023      	str	r3, [r4, #0]
 800a6ee:	89a3      	ldrh	r3, [r4, #12]
 800a6f0:	f043 0308 	orr.w	r3, r3, #8
 800a6f4:	81a3      	strh	r3, [r4, #12]
 800a6f6:	6923      	ldr	r3, [r4, #16]
 800a6f8:	b94b      	cbnz	r3, 800a70e <__swsetup_r+0x9a>
 800a6fa:	89a3      	ldrh	r3, [r4, #12]
 800a6fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a704:	d003      	beq.n	800a70e <__swsetup_r+0x9a>
 800a706:	4621      	mov	r1, r4
 800a708:	4630      	mov	r0, r6
 800a70a:	f000 fa05 	bl	800ab18 <__smakebuf_r>
 800a70e:	89a0      	ldrh	r0, [r4, #12]
 800a710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a714:	f010 0301 	ands.w	r3, r0, #1
 800a718:	d00a      	beq.n	800a730 <__swsetup_r+0xbc>
 800a71a:	2300      	movs	r3, #0
 800a71c:	60a3      	str	r3, [r4, #8]
 800a71e:	6963      	ldr	r3, [r4, #20]
 800a720:	425b      	negs	r3, r3
 800a722:	61a3      	str	r3, [r4, #24]
 800a724:	6923      	ldr	r3, [r4, #16]
 800a726:	b943      	cbnz	r3, 800a73a <__swsetup_r+0xc6>
 800a728:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a72c:	d1ba      	bne.n	800a6a4 <__swsetup_r+0x30>
 800a72e:	bd70      	pop	{r4, r5, r6, pc}
 800a730:	0781      	lsls	r1, r0, #30
 800a732:	bf58      	it	pl
 800a734:	6963      	ldrpl	r3, [r4, #20]
 800a736:	60a3      	str	r3, [r4, #8]
 800a738:	e7f4      	b.n	800a724 <__swsetup_r+0xb0>
 800a73a:	2000      	movs	r0, #0
 800a73c:	e7f7      	b.n	800a72e <__swsetup_r+0xba>
 800a73e:	bf00      	nop
 800a740:	20000014 	.word	0x20000014
 800a744:	0800beec 	.word	0x0800beec
 800a748:	0800bf0c 	.word	0x0800bf0c
 800a74c:	0800becc 	.word	0x0800becc

0800a750 <abort>:
 800a750:	b508      	push	{r3, lr}
 800a752:	2006      	movs	r0, #6
 800a754:	f000 fa50 	bl	800abf8 <raise>
 800a758:	2001      	movs	r0, #1
 800a75a:	f7f7 fae7 	bl	8001d2c <_exit>
	...

0800a760 <__sflush_r>:
 800a760:	898a      	ldrh	r2, [r1, #12]
 800a762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a766:	4605      	mov	r5, r0
 800a768:	0710      	lsls	r0, r2, #28
 800a76a:	460c      	mov	r4, r1
 800a76c:	d458      	bmi.n	800a820 <__sflush_r+0xc0>
 800a76e:	684b      	ldr	r3, [r1, #4]
 800a770:	2b00      	cmp	r3, #0
 800a772:	dc05      	bgt.n	800a780 <__sflush_r+0x20>
 800a774:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a776:	2b00      	cmp	r3, #0
 800a778:	dc02      	bgt.n	800a780 <__sflush_r+0x20>
 800a77a:	2000      	movs	r0, #0
 800a77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a782:	2e00      	cmp	r6, #0
 800a784:	d0f9      	beq.n	800a77a <__sflush_r+0x1a>
 800a786:	2300      	movs	r3, #0
 800a788:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a78c:	682f      	ldr	r7, [r5, #0]
 800a78e:	602b      	str	r3, [r5, #0]
 800a790:	d032      	beq.n	800a7f8 <__sflush_r+0x98>
 800a792:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a794:	89a3      	ldrh	r3, [r4, #12]
 800a796:	075a      	lsls	r2, r3, #29
 800a798:	d505      	bpl.n	800a7a6 <__sflush_r+0x46>
 800a79a:	6863      	ldr	r3, [r4, #4]
 800a79c:	1ac0      	subs	r0, r0, r3
 800a79e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7a0:	b10b      	cbz	r3, 800a7a6 <__sflush_r+0x46>
 800a7a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7a4:	1ac0      	subs	r0, r0, r3
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7ac:	6a21      	ldr	r1, [r4, #32]
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	47b0      	blx	r6
 800a7b2:	1c43      	adds	r3, r0, #1
 800a7b4:	89a3      	ldrh	r3, [r4, #12]
 800a7b6:	d106      	bne.n	800a7c6 <__sflush_r+0x66>
 800a7b8:	6829      	ldr	r1, [r5, #0]
 800a7ba:	291d      	cmp	r1, #29
 800a7bc:	d82c      	bhi.n	800a818 <__sflush_r+0xb8>
 800a7be:	4a2a      	ldr	r2, [pc, #168]	; (800a868 <__sflush_r+0x108>)
 800a7c0:	40ca      	lsrs	r2, r1
 800a7c2:	07d6      	lsls	r6, r2, #31
 800a7c4:	d528      	bpl.n	800a818 <__sflush_r+0xb8>
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	6062      	str	r2, [r4, #4]
 800a7ca:	04d9      	lsls	r1, r3, #19
 800a7cc:	6922      	ldr	r2, [r4, #16]
 800a7ce:	6022      	str	r2, [r4, #0]
 800a7d0:	d504      	bpl.n	800a7dc <__sflush_r+0x7c>
 800a7d2:	1c42      	adds	r2, r0, #1
 800a7d4:	d101      	bne.n	800a7da <__sflush_r+0x7a>
 800a7d6:	682b      	ldr	r3, [r5, #0]
 800a7d8:	b903      	cbnz	r3, 800a7dc <__sflush_r+0x7c>
 800a7da:	6560      	str	r0, [r4, #84]	; 0x54
 800a7dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7de:	602f      	str	r7, [r5, #0]
 800a7e0:	2900      	cmp	r1, #0
 800a7e2:	d0ca      	beq.n	800a77a <__sflush_r+0x1a>
 800a7e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7e8:	4299      	cmp	r1, r3
 800a7ea:	d002      	beq.n	800a7f2 <__sflush_r+0x92>
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	f7fd fbf1 	bl	8007fd4 <_free_r>
 800a7f2:	2000      	movs	r0, #0
 800a7f4:	6360      	str	r0, [r4, #52]	; 0x34
 800a7f6:	e7c1      	b.n	800a77c <__sflush_r+0x1c>
 800a7f8:	6a21      	ldr	r1, [r4, #32]
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	47b0      	blx	r6
 800a800:	1c41      	adds	r1, r0, #1
 800a802:	d1c7      	bne.n	800a794 <__sflush_r+0x34>
 800a804:	682b      	ldr	r3, [r5, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d0c4      	beq.n	800a794 <__sflush_r+0x34>
 800a80a:	2b1d      	cmp	r3, #29
 800a80c:	d001      	beq.n	800a812 <__sflush_r+0xb2>
 800a80e:	2b16      	cmp	r3, #22
 800a810:	d101      	bne.n	800a816 <__sflush_r+0xb6>
 800a812:	602f      	str	r7, [r5, #0]
 800a814:	e7b1      	b.n	800a77a <__sflush_r+0x1a>
 800a816:	89a3      	ldrh	r3, [r4, #12]
 800a818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a81c:	81a3      	strh	r3, [r4, #12]
 800a81e:	e7ad      	b.n	800a77c <__sflush_r+0x1c>
 800a820:	690f      	ldr	r7, [r1, #16]
 800a822:	2f00      	cmp	r7, #0
 800a824:	d0a9      	beq.n	800a77a <__sflush_r+0x1a>
 800a826:	0793      	lsls	r3, r2, #30
 800a828:	680e      	ldr	r6, [r1, #0]
 800a82a:	bf08      	it	eq
 800a82c:	694b      	ldreq	r3, [r1, #20]
 800a82e:	600f      	str	r7, [r1, #0]
 800a830:	bf18      	it	ne
 800a832:	2300      	movne	r3, #0
 800a834:	eba6 0807 	sub.w	r8, r6, r7
 800a838:	608b      	str	r3, [r1, #8]
 800a83a:	f1b8 0f00 	cmp.w	r8, #0
 800a83e:	dd9c      	ble.n	800a77a <__sflush_r+0x1a>
 800a840:	6a21      	ldr	r1, [r4, #32]
 800a842:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a844:	4643      	mov	r3, r8
 800a846:	463a      	mov	r2, r7
 800a848:	4628      	mov	r0, r5
 800a84a:	47b0      	blx	r6
 800a84c:	2800      	cmp	r0, #0
 800a84e:	dc06      	bgt.n	800a85e <__sflush_r+0xfe>
 800a850:	89a3      	ldrh	r3, [r4, #12]
 800a852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a856:	81a3      	strh	r3, [r4, #12]
 800a858:	f04f 30ff 	mov.w	r0, #4294967295
 800a85c:	e78e      	b.n	800a77c <__sflush_r+0x1c>
 800a85e:	4407      	add	r7, r0
 800a860:	eba8 0800 	sub.w	r8, r8, r0
 800a864:	e7e9      	b.n	800a83a <__sflush_r+0xda>
 800a866:	bf00      	nop
 800a868:	20400001 	.word	0x20400001

0800a86c <_fflush_r>:
 800a86c:	b538      	push	{r3, r4, r5, lr}
 800a86e:	690b      	ldr	r3, [r1, #16]
 800a870:	4605      	mov	r5, r0
 800a872:	460c      	mov	r4, r1
 800a874:	b913      	cbnz	r3, 800a87c <_fflush_r+0x10>
 800a876:	2500      	movs	r5, #0
 800a878:	4628      	mov	r0, r5
 800a87a:	bd38      	pop	{r3, r4, r5, pc}
 800a87c:	b118      	cbz	r0, 800a886 <_fflush_r+0x1a>
 800a87e:	6983      	ldr	r3, [r0, #24]
 800a880:	b90b      	cbnz	r3, 800a886 <_fflush_r+0x1a>
 800a882:	f000 f887 	bl	800a994 <__sinit>
 800a886:	4b14      	ldr	r3, [pc, #80]	; (800a8d8 <_fflush_r+0x6c>)
 800a888:	429c      	cmp	r4, r3
 800a88a:	d11b      	bne.n	800a8c4 <_fflush_r+0x58>
 800a88c:	686c      	ldr	r4, [r5, #4]
 800a88e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d0ef      	beq.n	800a876 <_fflush_r+0xa>
 800a896:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a898:	07d0      	lsls	r0, r2, #31
 800a89a:	d404      	bmi.n	800a8a6 <_fflush_r+0x3a>
 800a89c:	0599      	lsls	r1, r3, #22
 800a89e:	d402      	bmi.n	800a8a6 <_fflush_r+0x3a>
 800a8a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8a2:	f7ff fcd0 	bl	800a246 <__retarget_lock_acquire_recursive>
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	4621      	mov	r1, r4
 800a8aa:	f7ff ff59 	bl	800a760 <__sflush_r>
 800a8ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8b0:	07da      	lsls	r2, r3, #31
 800a8b2:	4605      	mov	r5, r0
 800a8b4:	d4e0      	bmi.n	800a878 <_fflush_r+0xc>
 800a8b6:	89a3      	ldrh	r3, [r4, #12]
 800a8b8:	059b      	lsls	r3, r3, #22
 800a8ba:	d4dd      	bmi.n	800a878 <_fflush_r+0xc>
 800a8bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8be:	f7ff fcc3 	bl	800a248 <__retarget_lock_release_recursive>
 800a8c2:	e7d9      	b.n	800a878 <_fflush_r+0xc>
 800a8c4:	4b05      	ldr	r3, [pc, #20]	; (800a8dc <_fflush_r+0x70>)
 800a8c6:	429c      	cmp	r4, r3
 800a8c8:	d101      	bne.n	800a8ce <_fflush_r+0x62>
 800a8ca:	68ac      	ldr	r4, [r5, #8]
 800a8cc:	e7df      	b.n	800a88e <_fflush_r+0x22>
 800a8ce:	4b04      	ldr	r3, [pc, #16]	; (800a8e0 <_fflush_r+0x74>)
 800a8d0:	429c      	cmp	r4, r3
 800a8d2:	bf08      	it	eq
 800a8d4:	68ec      	ldreq	r4, [r5, #12]
 800a8d6:	e7da      	b.n	800a88e <_fflush_r+0x22>
 800a8d8:	0800beec 	.word	0x0800beec
 800a8dc:	0800bf0c 	.word	0x0800bf0c
 800a8e0:	0800becc 	.word	0x0800becc

0800a8e4 <std>:
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	b510      	push	{r4, lr}
 800a8e8:	4604      	mov	r4, r0
 800a8ea:	e9c0 3300 	strd	r3, r3, [r0]
 800a8ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8f2:	6083      	str	r3, [r0, #8]
 800a8f4:	8181      	strh	r1, [r0, #12]
 800a8f6:	6643      	str	r3, [r0, #100]	; 0x64
 800a8f8:	81c2      	strh	r2, [r0, #14]
 800a8fa:	6183      	str	r3, [r0, #24]
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	2208      	movs	r2, #8
 800a900:	305c      	adds	r0, #92	; 0x5c
 800a902:	f7fd fb5f 	bl	8007fc4 <memset>
 800a906:	4b05      	ldr	r3, [pc, #20]	; (800a91c <std+0x38>)
 800a908:	6263      	str	r3, [r4, #36]	; 0x24
 800a90a:	4b05      	ldr	r3, [pc, #20]	; (800a920 <std+0x3c>)
 800a90c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a90e:	4b05      	ldr	r3, [pc, #20]	; (800a924 <std+0x40>)
 800a910:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a912:	4b05      	ldr	r3, [pc, #20]	; (800a928 <std+0x44>)
 800a914:	6224      	str	r4, [r4, #32]
 800a916:	6323      	str	r3, [r4, #48]	; 0x30
 800a918:	bd10      	pop	{r4, pc}
 800a91a:	bf00      	nop
 800a91c:	0800ac31 	.word	0x0800ac31
 800a920:	0800ac53 	.word	0x0800ac53
 800a924:	0800ac8b 	.word	0x0800ac8b
 800a928:	0800acaf 	.word	0x0800acaf

0800a92c <_cleanup_r>:
 800a92c:	4901      	ldr	r1, [pc, #4]	; (800a934 <_cleanup_r+0x8>)
 800a92e:	f000 b8af 	b.w	800aa90 <_fwalk_reent>
 800a932:	bf00      	nop
 800a934:	0800a86d 	.word	0x0800a86d

0800a938 <__sfmoreglue>:
 800a938:	b570      	push	{r4, r5, r6, lr}
 800a93a:	2268      	movs	r2, #104	; 0x68
 800a93c:	1e4d      	subs	r5, r1, #1
 800a93e:	4355      	muls	r5, r2
 800a940:	460e      	mov	r6, r1
 800a942:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a946:	f7fd fbb1 	bl	80080ac <_malloc_r>
 800a94a:	4604      	mov	r4, r0
 800a94c:	b140      	cbz	r0, 800a960 <__sfmoreglue+0x28>
 800a94e:	2100      	movs	r1, #0
 800a950:	e9c0 1600 	strd	r1, r6, [r0]
 800a954:	300c      	adds	r0, #12
 800a956:	60a0      	str	r0, [r4, #8]
 800a958:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a95c:	f7fd fb32 	bl	8007fc4 <memset>
 800a960:	4620      	mov	r0, r4
 800a962:	bd70      	pop	{r4, r5, r6, pc}

0800a964 <__sfp_lock_acquire>:
 800a964:	4801      	ldr	r0, [pc, #4]	; (800a96c <__sfp_lock_acquire+0x8>)
 800a966:	f7ff bc6e 	b.w	800a246 <__retarget_lock_acquire_recursive>
 800a96a:	bf00      	nop
 800a96c:	20000c79 	.word	0x20000c79

0800a970 <__sfp_lock_release>:
 800a970:	4801      	ldr	r0, [pc, #4]	; (800a978 <__sfp_lock_release+0x8>)
 800a972:	f7ff bc69 	b.w	800a248 <__retarget_lock_release_recursive>
 800a976:	bf00      	nop
 800a978:	20000c79 	.word	0x20000c79

0800a97c <__sinit_lock_acquire>:
 800a97c:	4801      	ldr	r0, [pc, #4]	; (800a984 <__sinit_lock_acquire+0x8>)
 800a97e:	f7ff bc62 	b.w	800a246 <__retarget_lock_acquire_recursive>
 800a982:	bf00      	nop
 800a984:	20000c7a 	.word	0x20000c7a

0800a988 <__sinit_lock_release>:
 800a988:	4801      	ldr	r0, [pc, #4]	; (800a990 <__sinit_lock_release+0x8>)
 800a98a:	f7ff bc5d 	b.w	800a248 <__retarget_lock_release_recursive>
 800a98e:	bf00      	nop
 800a990:	20000c7a 	.word	0x20000c7a

0800a994 <__sinit>:
 800a994:	b510      	push	{r4, lr}
 800a996:	4604      	mov	r4, r0
 800a998:	f7ff fff0 	bl	800a97c <__sinit_lock_acquire>
 800a99c:	69a3      	ldr	r3, [r4, #24]
 800a99e:	b11b      	cbz	r3, 800a9a8 <__sinit+0x14>
 800a9a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9a4:	f7ff bff0 	b.w	800a988 <__sinit_lock_release>
 800a9a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a9ac:	6523      	str	r3, [r4, #80]	; 0x50
 800a9ae:	4b13      	ldr	r3, [pc, #76]	; (800a9fc <__sinit+0x68>)
 800a9b0:	4a13      	ldr	r2, [pc, #76]	; (800aa00 <__sinit+0x6c>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a9b6:	42a3      	cmp	r3, r4
 800a9b8:	bf04      	itt	eq
 800a9ba:	2301      	moveq	r3, #1
 800a9bc:	61a3      	streq	r3, [r4, #24]
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f000 f820 	bl	800aa04 <__sfp>
 800a9c4:	6060      	str	r0, [r4, #4]
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f000 f81c 	bl	800aa04 <__sfp>
 800a9cc:	60a0      	str	r0, [r4, #8]
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	f000 f818 	bl	800aa04 <__sfp>
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	60e0      	str	r0, [r4, #12]
 800a9d8:	2104      	movs	r1, #4
 800a9da:	6860      	ldr	r0, [r4, #4]
 800a9dc:	f7ff ff82 	bl	800a8e4 <std>
 800a9e0:	68a0      	ldr	r0, [r4, #8]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	2109      	movs	r1, #9
 800a9e6:	f7ff ff7d 	bl	800a8e4 <std>
 800a9ea:	68e0      	ldr	r0, [r4, #12]
 800a9ec:	2202      	movs	r2, #2
 800a9ee:	2112      	movs	r1, #18
 800a9f0:	f7ff ff78 	bl	800a8e4 <std>
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	61a3      	str	r3, [r4, #24]
 800a9f8:	e7d2      	b.n	800a9a0 <__sinit+0xc>
 800a9fa:	bf00      	nop
 800a9fc:	0800bb50 	.word	0x0800bb50
 800aa00:	0800a92d 	.word	0x0800a92d

0800aa04 <__sfp>:
 800aa04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa06:	4607      	mov	r7, r0
 800aa08:	f7ff ffac 	bl	800a964 <__sfp_lock_acquire>
 800aa0c:	4b1e      	ldr	r3, [pc, #120]	; (800aa88 <__sfp+0x84>)
 800aa0e:	681e      	ldr	r6, [r3, #0]
 800aa10:	69b3      	ldr	r3, [r6, #24]
 800aa12:	b913      	cbnz	r3, 800aa1a <__sfp+0x16>
 800aa14:	4630      	mov	r0, r6
 800aa16:	f7ff ffbd 	bl	800a994 <__sinit>
 800aa1a:	3648      	adds	r6, #72	; 0x48
 800aa1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa20:	3b01      	subs	r3, #1
 800aa22:	d503      	bpl.n	800aa2c <__sfp+0x28>
 800aa24:	6833      	ldr	r3, [r6, #0]
 800aa26:	b30b      	cbz	r3, 800aa6c <__sfp+0x68>
 800aa28:	6836      	ldr	r6, [r6, #0]
 800aa2a:	e7f7      	b.n	800aa1c <__sfp+0x18>
 800aa2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa30:	b9d5      	cbnz	r5, 800aa68 <__sfp+0x64>
 800aa32:	4b16      	ldr	r3, [pc, #88]	; (800aa8c <__sfp+0x88>)
 800aa34:	60e3      	str	r3, [r4, #12]
 800aa36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa3a:	6665      	str	r5, [r4, #100]	; 0x64
 800aa3c:	f7ff fc02 	bl	800a244 <__retarget_lock_init_recursive>
 800aa40:	f7ff ff96 	bl	800a970 <__sfp_lock_release>
 800aa44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa4c:	6025      	str	r5, [r4, #0]
 800aa4e:	61a5      	str	r5, [r4, #24]
 800aa50:	2208      	movs	r2, #8
 800aa52:	4629      	mov	r1, r5
 800aa54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa58:	f7fd fab4 	bl	8007fc4 <memset>
 800aa5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa64:	4620      	mov	r0, r4
 800aa66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa68:	3468      	adds	r4, #104	; 0x68
 800aa6a:	e7d9      	b.n	800aa20 <__sfp+0x1c>
 800aa6c:	2104      	movs	r1, #4
 800aa6e:	4638      	mov	r0, r7
 800aa70:	f7ff ff62 	bl	800a938 <__sfmoreglue>
 800aa74:	4604      	mov	r4, r0
 800aa76:	6030      	str	r0, [r6, #0]
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	d1d5      	bne.n	800aa28 <__sfp+0x24>
 800aa7c:	f7ff ff78 	bl	800a970 <__sfp_lock_release>
 800aa80:	230c      	movs	r3, #12
 800aa82:	603b      	str	r3, [r7, #0]
 800aa84:	e7ee      	b.n	800aa64 <__sfp+0x60>
 800aa86:	bf00      	nop
 800aa88:	0800bb50 	.word	0x0800bb50
 800aa8c:	ffff0001 	.word	0xffff0001

0800aa90 <_fwalk_reent>:
 800aa90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa94:	4606      	mov	r6, r0
 800aa96:	4688      	mov	r8, r1
 800aa98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa9c:	2700      	movs	r7, #0
 800aa9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aaa2:	f1b9 0901 	subs.w	r9, r9, #1
 800aaa6:	d505      	bpl.n	800aab4 <_fwalk_reent+0x24>
 800aaa8:	6824      	ldr	r4, [r4, #0]
 800aaaa:	2c00      	cmp	r4, #0
 800aaac:	d1f7      	bne.n	800aa9e <_fwalk_reent+0xe>
 800aaae:	4638      	mov	r0, r7
 800aab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aab4:	89ab      	ldrh	r3, [r5, #12]
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d907      	bls.n	800aaca <_fwalk_reent+0x3a>
 800aaba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aabe:	3301      	adds	r3, #1
 800aac0:	d003      	beq.n	800aaca <_fwalk_reent+0x3a>
 800aac2:	4629      	mov	r1, r5
 800aac4:	4630      	mov	r0, r6
 800aac6:	47c0      	blx	r8
 800aac8:	4307      	orrs	r7, r0
 800aaca:	3568      	adds	r5, #104	; 0x68
 800aacc:	e7e9      	b.n	800aaa2 <_fwalk_reent+0x12>

0800aace <__swhatbuf_r>:
 800aace:	b570      	push	{r4, r5, r6, lr}
 800aad0:	460e      	mov	r6, r1
 800aad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aad6:	2900      	cmp	r1, #0
 800aad8:	b096      	sub	sp, #88	; 0x58
 800aada:	4614      	mov	r4, r2
 800aadc:	461d      	mov	r5, r3
 800aade:	da08      	bge.n	800aaf2 <__swhatbuf_r+0x24>
 800aae0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aae4:	2200      	movs	r2, #0
 800aae6:	602a      	str	r2, [r5, #0]
 800aae8:	061a      	lsls	r2, r3, #24
 800aaea:	d410      	bmi.n	800ab0e <__swhatbuf_r+0x40>
 800aaec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaf0:	e00e      	b.n	800ab10 <__swhatbuf_r+0x42>
 800aaf2:	466a      	mov	r2, sp
 800aaf4:	f000 f902 	bl	800acfc <_fstat_r>
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	dbf1      	blt.n	800aae0 <__swhatbuf_r+0x12>
 800aafc:	9a01      	ldr	r2, [sp, #4]
 800aafe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab06:	425a      	negs	r2, r3
 800ab08:	415a      	adcs	r2, r3
 800ab0a:	602a      	str	r2, [r5, #0]
 800ab0c:	e7ee      	b.n	800aaec <__swhatbuf_r+0x1e>
 800ab0e:	2340      	movs	r3, #64	; 0x40
 800ab10:	2000      	movs	r0, #0
 800ab12:	6023      	str	r3, [r4, #0]
 800ab14:	b016      	add	sp, #88	; 0x58
 800ab16:	bd70      	pop	{r4, r5, r6, pc}

0800ab18 <__smakebuf_r>:
 800ab18:	898b      	ldrh	r3, [r1, #12]
 800ab1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab1c:	079d      	lsls	r5, r3, #30
 800ab1e:	4606      	mov	r6, r0
 800ab20:	460c      	mov	r4, r1
 800ab22:	d507      	bpl.n	800ab34 <__smakebuf_r+0x1c>
 800ab24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab28:	6023      	str	r3, [r4, #0]
 800ab2a:	6123      	str	r3, [r4, #16]
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	6163      	str	r3, [r4, #20]
 800ab30:	b002      	add	sp, #8
 800ab32:	bd70      	pop	{r4, r5, r6, pc}
 800ab34:	ab01      	add	r3, sp, #4
 800ab36:	466a      	mov	r2, sp
 800ab38:	f7ff ffc9 	bl	800aace <__swhatbuf_r>
 800ab3c:	9900      	ldr	r1, [sp, #0]
 800ab3e:	4605      	mov	r5, r0
 800ab40:	4630      	mov	r0, r6
 800ab42:	f7fd fab3 	bl	80080ac <_malloc_r>
 800ab46:	b948      	cbnz	r0, 800ab5c <__smakebuf_r+0x44>
 800ab48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab4c:	059a      	lsls	r2, r3, #22
 800ab4e:	d4ef      	bmi.n	800ab30 <__smakebuf_r+0x18>
 800ab50:	f023 0303 	bic.w	r3, r3, #3
 800ab54:	f043 0302 	orr.w	r3, r3, #2
 800ab58:	81a3      	strh	r3, [r4, #12]
 800ab5a:	e7e3      	b.n	800ab24 <__smakebuf_r+0xc>
 800ab5c:	4b0d      	ldr	r3, [pc, #52]	; (800ab94 <__smakebuf_r+0x7c>)
 800ab5e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab60:	89a3      	ldrh	r3, [r4, #12]
 800ab62:	6020      	str	r0, [r4, #0]
 800ab64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab68:	81a3      	strh	r3, [r4, #12]
 800ab6a:	9b00      	ldr	r3, [sp, #0]
 800ab6c:	6163      	str	r3, [r4, #20]
 800ab6e:	9b01      	ldr	r3, [sp, #4]
 800ab70:	6120      	str	r0, [r4, #16]
 800ab72:	b15b      	cbz	r3, 800ab8c <__smakebuf_r+0x74>
 800ab74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab78:	4630      	mov	r0, r6
 800ab7a:	f000 f8d1 	bl	800ad20 <_isatty_r>
 800ab7e:	b128      	cbz	r0, 800ab8c <__smakebuf_r+0x74>
 800ab80:	89a3      	ldrh	r3, [r4, #12]
 800ab82:	f023 0303 	bic.w	r3, r3, #3
 800ab86:	f043 0301 	orr.w	r3, r3, #1
 800ab8a:	81a3      	strh	r3, [r4, #12]
 800ab8c:	89a0      	ldrh	r0, [r4, #12]
 800ab8e:	4305      	orrs	r5, r0
 800ab90:	81a5      	strh	r5, [r4, #12]
 800ab92:	e7cd      	b.n	800ab30 <__smakebuf_r+0x18>
 800ab94:	0800a92d 	.word	0x0800a92d

0800ab98 <_malloc_usable_size_r>:
 800ab98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab9c:	1f18      	subs	r0, r3, #4
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	bfbc      	itt	lt
 800aba2:	580b      	ldrlt	r3, [r1, r0]
 800aba4:	18c0      	addlt	r0, r0, r3
 800aba6:	4770      	bx	lr

0800aba8 <_raise_r>:
 800aba8:	291f      	cmp	r1, #31
 800abaa:	b538      	push	{r3, r4, r5, lr}
 800abac:	4604      	mov	r4, r0
 800abae:	460d      	mov	r5, r1
 800abb0:	d904      	bls.n	800abbc <_raise_r+0x14>
 800abb2:	2316      	movs	r3, #22
 800abb4:	6003      	str	r3, [r0, #0]
 800abb6:	f04f 30ff 	mov.w	r0, #4294967295
 800abba:	bd38      	pop	{r3, r4, r5, pc}
 800abbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800abbe:	b112      	cbz	r2, 800abc6 <_raise_r+0x1e>
 800abc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abc4:	b94b      	cbnz	r3, 800abda <_raise_r+0x32>
 800abc6:	4620      	mov	r0, r4
 800abc8:	f000 f830 	bl	800ac2c <_getpid_r>
 800abcc:	462a      	mov	r2, r5
 800abce:	4601      	mov	r1, r0
 800abd0:	4620      	mov	r0, r4
 800abd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abd6:	f000 b817 	b.w	800ac08 <_kill_r>
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d00a      	beq.n	800abf4 <_raise_r+0x4c>
 800abde:	1c59      	adds	r1, r3, #1
 800abe0:	d103      	bne.n	800abea <_raise_r+0x42>
 800abe2:	2316      	movs	r3, #22
 800abe4:	6003      	str	r3, [r0, #0]
 800abe6:	2001      	movs	r0, #1
 800abe8:	e7e7      	b.n	800abba <_raise_r+0x12>
 800abea:	2400      	movs	r4, #0
 800abec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800abf0:	4628      	mov	r0, r5
 800abf2:	4798      	blx	r3
 800abf4:	2000      	movs	r0, #0
 800abf6:	e7e0      	b.n	800abba <_raise_r+0x12>

0800abf8 <raise>:
 800abf8:	4b02      	ldr	r3, [pc, #8]	; (800ac04 <raise+0xc>)
 800abfa:	4601      	mov	r1, r0
 800abfc:	6818      	ldr	r0, [r3, #0]
 800abfe:	f7ff bfd3 	b.w	800aba8 <_raise_r>
 800ac02:	bf00      	nop
 800ac04:	20000014 	.word	0x20000014

0800ac08 <_kill_r>:
 800ac08:	b538      	push	{r3, r4, r5, lr}
 800ac0a:	4d07      	ldr	r5, [pc, #28]	; (800ac28 <_kill_r+0x20>)
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	4604      	mov	r4, r0
 800ac10:	4608      	mov	r0, r1
 800ac12:	4611      	mov	r1, r2
 800ac14:	602b      	str	r3, [r5, #0]
 800ac16:	f7f7 f879 	bl	8001d0c <_kill>
 800ac1a:	1c43      	adds	r3, r0, #1
 800ac1c:	d102      	bne.n	800ac24 <_kill_r+0x1c>
 800ac1e:	682b      	ldr	r3, [r5, #0]
 800ac20:	b103      	cbz	r3, 800ac24 <_kill_r+0x1c>
 800ac22:	6023      	str	r3, [r4, #0]
 800ac24:	bd38      	pop	{r3, r4, r5, pc}
 800ac26:	bf00      	nop
 800ac28:	20000c74 	.word	0x20000c74

0800ac2c <_getpid_r>:
 800ac2c:	f7f7 b866 	b.w	8001cfc <_getpid>

0800ac30 <__sread>:
 800ac30:	b510      	push	{r4, lr}
 800ac32:	460c      	mov	r4, r1
 800ac34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac38:	f000 f894 	bl	800ad64 <_read_r>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	bfab      	itete	ge
 800ac40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac42:	89a3      	ldrhlt	r3, [r4, #12]
 800ac44:	181b      	addge	r3, r3, r0
 800ac46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac4a:	bfac      	ite	ge
 800ac4c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac4e:	81a3      	strhlt	r3, [r4, #12]
 800ac50:	bd10      	pop	{r4, pc}

0800ac52 <__swrite>:
 800ac52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac56:	461f      	mov	r7, r3
 800ac58:	898b      	ldrh	r3, [r1, #12]
 800ac5a:	05db      	lsls	r3, r3, #23
 800ac5c:	4605      	mov	r5, r0
 800ac5e:	460c      	mov	r4, r1
 800ac60:	4616      	mov	r6, r2
 800ac62:	d505      	bpl.n	800ac70 <__swrite+0x1e>
 800ac64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac68:	2302      	movs	r3, #2
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f000 f868 	bl	800ad40 <_lseek_r>
 800ac70:	89a3      	ldrh	r3, [r4, #12]
 800ac72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac7a:	81a3      	strh	r3, [r4, #12]
 800ac7c:	4632      	mov	r2, r6
 800ac7e:	463b      	mov	r3, r7
 800ac80:	4628      	mov	r0, r5
 800ac82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac86:	f000 b817 	b.w	800acb8 <_write_r>

0800ac8a <__sseek>:
 800ac8a:	b510      	push	{r4, lr}
 800ac8c:	460c      	mov	r4, r1
 800ac8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac92:	f000 f855 	bl	800ad40 <_lseek_r>
 800ac96:	1c43      	adds	r3, r0, #1
 800ac98:	89a3      	ldrh	r3, [r4, #12]
 800ac9a:	bf15      	itete	ne
 800ac9c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aca2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aca6:	81a3      	strheq	r3, [r4, #12]
 800aca8:	bf18      	it	ne
 800acaa:	81a3      	strhne	r3, [r4, #12]
 800acac:	bd10      	pop	{r4, pc}

0800acae <__sclose>:
 800acae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb2:	f000 b813 	b.w	800acdc <_close_r>
	...

0800acb8 <_write_r>:
 800acb8:	b538      	push	{r3, r4, r5, lr}
 800acba:	4d07      	ldr	r5, [pc, #28]	; (800acd8 <_write_r+0x20>)
 800acbc:	4604      	mov	r4, r0
 800acbe:	4608      	mov	r0, r1
 800acc0:	4611      	mov	r1, r2
 800acc2:	2200      	movs	r2, #0
 800acc4:	602a      	str	r2, [r5, #0]
 800acc6:	461a      	mov	r2, r3
 800acc8:	f7f7 f857 	bl	8001d7a <_write>
 800accc:	1c43      	adds	r3, r0, #1
 800acce:	d102      	bne.n	800acd6 <_write_r+0x1e>
 800acd0:	682b      	ldr	r3, [r5, #0]
 800acd2:	b103      	cbz	r3, 800acd6 <_write_r+0x1e>
 800acd4:	6023      	str	r3, [r4, #0]
 800acd6:	bd38      	pop	{r3, r4, r5, pc}
 800acd8:	20000c74 	.word	0x20000c74

0800acdc <_close_r>:
 800acdc:	b538      	push	{r3, r4, r5, lr}
 800acde:	4d06      	ldr	r5, [pc, #24]	; (800acf8 <_close_r+0x1c>)
 800ace0:	2300      	movs	r3, #0
 800ace2:	4604      	mov	r4, r0
 800ace4:	4608      	mov	r0, r1
 800ace6:	602b      	str	r3, [r5, #0]
 800ace8:	f7f7 f863 	bl	8001db2 <_close>
 800acec:	1c43      	adds	r3, r0, #1
 800acee:	d102      	bne.n	800acf6 <_close_r+0x1a>
 800acf0:	682b      	ldr	r3, [r5, #0]
 800acf2:	b103      	cbz	r3, 800acf6 <_close_r+0x1a>
 800acf4:	6023      	str	r3, [r4, #0]
 800acf6:	bd38      	pop	{r3, r4, r5, pc}
 800acf8:	20000c74 	.word	0x20000c74

0800acfc <_fstat_r>:
 800acfc:	b538      	push	{r3, r4, r5, lr}
 800acfe:	4d07      	ldr	r5, [pc, #28]	; (800ad1c <_fstat_r+0x20>)
 800ad00:	2300      	movs	r3, #0
 800ad02:	4604      	mov	r4, r0
 800ad04:	4608      	mov	r0, r1
 800ad06:	4611      	mov	r1, r2
 800ad08:	602b      	str	r3, [r5, #0]
 800ad0a:	f7f7 f85e 	bl	8001dca <_fstat>
 800ad0e:	1c43      	adds	r3, r0, #1
 800ad10:	d102      	bne.n	800ad18 <_fstat_r+0x1c>
 800ad12:	682b      	ldr	r3, [r5, #0]
 800ad14:	b103      	cbz	r3, 800ad18 <_fstat_r+0x1c>
 800ad16:	6023      	str	r3, [r4, #0]
 800ad18:	bd38      	pop	{r3, r4, r5, pc}
 800ad1a:	bf00      	nop
 800ad1c:	20000c74 	.word	0x20000c74

0800ad20 <_isatty_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	4d06      	ldr	r5, [pc, #24]	; (800ad3c <_isatty_r+0x1c>)
 800ad24:	2300      	movs	r3, #0
 800ad26:	4604      	mov	r4, r0
 800ad28:	4608      	mov	r0, r1
 800ad2a:	602b      	str	r3, [r5, #0]
 800ad2c:	f7f7 f85d 	bl	8001dea <_isatty>
 800ad30:	1c43      	adds	r3, r0, #1
 800ad32:	d102      	bne.n	800ad3a <_isatty_r+0x1a>
 800ad34:	682b      	ldr	r3, [r5, #0]
 800ad36:	b103      	cbz	r3, 800ad3a <_isatty_r+0x1a>
 800ad38:	6023      	str	r3, [r4, #0]
 800ad3a:	bd38      	pop	{r3, r4, r5, pc}
 800ad3c:	20000c74 	.word	0x20000c74

0800ad40 <_lseek_r>:
 800ad40:	b538      	push	{r3, r4, r5, lr}
 800ad42:	4d07      	ldr	r5, [pc, #28]	; (800ad60 <_lseek_r+0x20>)
 800ad44:	4604      	mov	r4, r0
 800ad46:	4608      	mov	r0, r1
 800ad48:	4611      	mov	r1, r2
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	602a      	str	r2, [r5, #0]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	f7f7 f856 	bl	8001e00 <_lseek>
 800ad54:	1c43      	adds	r3, r0, #1
 800ad56:	d102      	bne.n	800ad5e <_lseek_r+0x1e>
 800ad58:	682b      	ldr	r3, [r5, #0]
 800ad5a:	b103      	cbz	r3, 800ad5e <_lseek_r+0x1e>
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	bd38      	pop	{r3, r4, r5, pc}
 800ad60:	20000c74 	.word	0x20000c74

0800ad64 <_read_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	4d07      	ldr	r5, [pc, #28]	; (800ad84 <_read_r+0x20>)
 800ad68:	4604      	mov	r4, r0
 800ad6a:	4608      	mov	r0, r1
 800ad6c:	4611      	mov	r1, r2
 800ad6e:	2200      	movs	r2, #0
 800ad70:	602a      	str	r2, [r5, #0]
 800ad72:	461a      	mov	r2, r3
 800ad74:	f7f6 ffe4 	bl	8001d40 <_read>
 800ad78:	1c43      	adds	r3, r0, #1
 800ad7a:	d102      	bne.n	800ad82 <_read_r+0x1e>
 800ad7c:	682b      	ldr	r3, [r5, #0]
 800ad7e:	b103      	cbz	r3, 800ad82 <_read_r+0x1e>
 800ad80:	6023      	str	r3, [r4, #0]
 800ad82:	bd38      	pop	{r3, r4, r5, pc}
 800ad84:	20000c74 	.word	0x20000c74

0800ad88 <_init>:
 800ad88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8a:	bf00      	nop
 800ad8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad8e:	bc08      	pop	{r3}
 800ad90:	469e      	mov	lr, r3
 800ad92:	4770      	bx	lr

0800ad94 <_fini>:
 800ad94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad96:	bf00      	nop
 800ad98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad9a:	bc08      	pop	{r3}
 800ad9c:	469e      	mov	lr, r3
 800ad9e:	4770      	bx	lr
